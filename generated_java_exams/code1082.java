/*
 * Exam Question #1082
 * Generated on: 2025-05-12 17:22:32
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Production Line Task Manager
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based application to manage tasks on a small production line. Tasks arrive, are placed in a queue to await processing, and once completed, are archived in a list. The system should allow a user to add new tasks, process the next available task, view the list of pending tasks, and view the list of completed tasks.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Task Representation:** Create a class named `Task` to represent a production task. It should have:
 *     *   A unique integer `taskId`.
 *     *   A `String` `description`.
 *     *   A `String` `priority` (e.g., "Standard", "High").
 *     *   A constructor to initialize these fields.
 *     *   Public getter methods for all fields.
 *     *   An overridden `toString()` method that provides a clear string representation of the task (e.g., "Task ID: X, Description: '...', Priority: ...").
 *     *   Implement basic validation in the constructor (e.g., description is not null/empty, priority is "Standard" or "High").
 * 
 * 2.  **Task Management System:** Create a class named `ProductionTaskManager` that contains the main logic. It should manage:
 *     *   A collection for **pending tasks** using the `java.util.Queue` interface. Choose an appropriate implementation (e.g., `LinkedList`) that follows the First-In, First-Out (FIFO) principle.
 *     *   A collection for **completed tasks** using the `java.util.List` interface. Use `java.util.ArrayList` as the concrete implementation.
 *     *   A counter to generate unique task IDs.
 * 
 * 3.  **User Interface:** Implement a console-based menu-driven interface using `java.util.Scanner` for user input. The menu options should be:
 *     *   `1. Add New Task`: Prompt the user for task description and priority. Create a `Task` object with a unique ID and add it to the pending tasks queue. Validate priority input.
 *     *   `2. Process Next Task`: Remove the task at the front of the pending tasks queue and add it to the completed tasks list. If the queue is empty, inform the user.
 *     *   `3. View Pending Tasks`: Display all tasks currently in the pending tasks queue in their current order. If the queue is empty, inform the user.
 *     *   `4. View Completed Tasks`: Display all tasks in the completed tasks list. If the list is empty, inform the user.
 *     *   `5. Exit`: Terminate the program.
 * 
 * 4.  **Control Flow:** Use a `switch` statement to handle the different menu options.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for all normal program output (menu, prompts, successful operations, displaying task details).
 *     *   Use `System.err` for all error messages (e.g., invalid menu choice, invalid priority input, attempting to process when the queue is empty, unexpected errors).
 * 
 * 6.  **Exception Handling:** Implement class-wide exception handling using `try-catch` blocks. Specifically:
 *     *   Handle `InputMismatchException` when reading the menu choice to gracefully manage non-integer input.
 *     *   Include a general `catch (Exception e)` block around the main program loop to catch any other unexpected runtime errors and print an informative message to `System.err`.
 *     *   Handle `IllegalArgumentException` from the `Task` constructor during task creation.
 *     *   Ensure resources like the `Scanner` are properly closed.
 * 
 * 7.  **Best Practices:**
 *     *   Use private fields and public methods for encapsulation.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadoc is recommended).
 *     *   Implement input validation where necessary (menu choice, priority).
 *     *   Handle cases where queues or lists are empty before attempting operations.
 *     *   Maintain a clean and organized code structure (separate classes for Task and the Manager).
 * 
 * **Expected Output:**
 * 
 * Your program should display a menu, accept user input, perform the requested operations, and print appropriate messages to `System.out` or `System.err`. Examples include:
 * 
 * ```
 * --- Production Task Manager ---
 * 1. Add New Task
 * ...
 * Enter your choice: 1
 * --- Add New Task ---
 * Enter task description: Assemble Part A
 * Enter priority (Standard/High): High
 * Task added: Task ID: 1, Description: "Assemble Part A", Priority: High
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: 3
 * --- Pending Tasks ---
 * 1. Task ID: 1, Description: "Assemble Part A", Priority: High
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: 2
 * --- Process Next Task ---
 * Processed task: Task ID: 1, Description: "Assemble Part A", Priority: High
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: 4
 * --- Completed Tasks ---
 * 1. Task ID: 1, Description: "Assemble Part A", Priority: High
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: 2
 * --- Process Next Task ---
 * No pending tasks to process. // Output to System.err
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: abc
 * Invalid input. Please enter a number. // Output to System.err
 * 
 * --- Production Task Manager ---
 * ...
 * Enter your choice: 5
 * Exiting Production Task Manager. Goodbye! // Output to System.out
 * ```
 * 
 * Your solution should be a complete, runnable Java program.
 *
 * EXPLANATION:
 * This solution implements the `Production Line Task Manager` system as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Encapsulates the data for a single task (`taskId`, `description`, `priority`) using private fields.
 *     *   Provides public getter methods (`getTaskId`, `getDescription`, `getPriority`) to access the data from outside the class.
 *     *   The constructor includes basic validation for the description (not null or empty) and priority (must be "Standard" or "High"), throwing an `IllegalArgumentException` if validation fails. This demonstrates defensive programming.
 *     *   The `toString()` method provides a user-friendly string representation, useful for printing task details.
 * 
 * 2.  **`ProductionTaskManager` Class:**
 *     *   Manages the core logic and data structures.
 *     *   `pendingTasks`: Declared as `Queue<Task>` and initialized with `new LinkedList<>()`. The `Queue` interface and `LinkedList` implementation are used to correctly model the FIFO behavior of tasks waiting in a production queue. `offer()` is used to add tasks to the end, and `poll()` is used to remove tasks from the front.
 *     *   `completedTasks`: Declared as `List<Task>` and initialized with `new ArrayList<>()`. The `List` interface and `ArrayList` implementation are suitable for storing completed tasks in the order they are processed, allowing easy iteration and retrieval.
 *     *   `scanner`: An instance of `Scanner` is used to read user input from the console (`System.in`). It's a private field to manage the resource within the class.
 *     *   `nextTaskId`: A simple integer counter ensures each new task gets a unique ID. It's incremented only after a `Task` object is successfully created and added.
 * 
 * 3.  **User Interface and Control Flow:**
 *     *   The `displayMenu()` method prints the available options to `System.out`.
 *     *   The `run()` method contains the main application loop (`while (choice != 5)`).
 *     *   A `switch` statement within the loop directs the program flow based on the user's integer input (`choice`). This fulfills the requirement for using a `switch` statement.
 *     *   Methods like `addTask()`, `processNextTask()`, `viewPendingTasks()`, and `viewCompletedTasks()` encapsulate the logic for each menu option, improving code organization and readability.
 * 
 * 4.  **Input Handling and Validation:**
 *     *   `Scanner` is used to read both integers (menu choice) and strings (description, priority).
 *     *   Input validation for the menu choice is implemented using `scanner.hasNextInt()` and a `while` loop in `addTask()` for priority validation. If the input is invalid, an error message is printed to `System.err`, and the loop continues or re-prompts, preventing crashes due to incorrect input types. `scanner.nextLine()` is used after reading an integer to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls.
 * 
 * 5.  **Output Streams (`System.out` and `System.err`):**
 *     *   `System.out.println()` and `System.out.print()` are used for all standard output, such as the menu, prompts, task details, and success messages, clearly separating it from error information.
 *     *   `System.err.println()` is specifically used for error messages, such as invalid input, attempting operations on empty collections (`pendingTasks.isEmpty()`), and unexpected exceptions, directing error output to the standard error stream.
 * 
 * 6.  **Exception Handling:**
 *     *   A broad `try-catch (Exception e)` block wraps the main `while` loop in the `run()` method. This serves as a class-wide handler for any unexpected runtime errors that might occur during program execution, printing an error message and the stack trace to `System.err` before the program potentially terminates.
 *     *   A specific `try-catch (InputMismatchException e)` is implicitly handled by checking `scanner.hasNextInt()`. If it's false, an error is printed, the invalid input is consumed, and the loop continues.
 *     *   A `try-catch (IllegalArgumentException e)` is used within the `addTask()` method to catch validation errors from the `Task` constructor, printing the error message to `System.err`.
 *     *   A `finally` block in `run()` ensures that the `scanner` resource is closed regardless of whether an exception occurred or the loop finished normally, preventing resource leaks.
 * 
 * 7.  **Best Practices:**
 *     *   Private fields and public methods (`run`) or private helper methods (`displayMenu`, `addTask`, etc.) demonstrate proper encapsulation.
 *     *   Variable names (`pendingTasks`, `completedTasks`, `nextTaskId`, `choice`) and method names are descriptive.
 *     *   Javadoc comments are provided for classes and key methods, explaining their purpose, parameters, and return values.
 *     *   Checks like `pendingTasks.isEmpty()` and `completedTasks.isEmpty()` prevent errors when trying to process or view empty collections.
 *     *   The code is organized into two classes (`Task` and `ProductionTaskManager`) with clear responsibilities.
 * 
 * This solution effectively combines the required Java features and follows best practices to create a functional and robust console application that simulates a real-world task management scenario.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single production task.
 */
class Task {
    private int taskId;
    private String description;
    private String priority; // e.g., "Standard", "High"

    /**
     * Constructs a new Task.
     *
     * @param taskId      The unique identifier for the task.
     * @param description A brief description of the task.
     * @param priority    The priority level of the task ("Standard" or "High").
     * @throws IllegalArgumentException if description is null/empty or priority is invalid.
     */
    public Task(int taskId, String description, String priority) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be null or empty.");
        }
        if (priority == null || (!priority.equalsIgnoreCase("Standard") && !priority.equalsIgnoreCase("High"))) {
            throw new IllegalArgumentException("Task priority must be 'Standard' or 'High'.");
        }
        this.taskId = taskId;
        this.description = description.trim();
        this.priority = priority;
    }

    // Getters
    public int getTaskId() {
        return taskId;
    }

    public String getDescription() {
        return description;
    }

    public String getPriority() {
        return priority;
    }

    /**
     * Returns a string representation of the Task.
     *
     * @return String representation.
     */
    @Override
    public String toString() {
        return String.format("Task ID: %d, Description: \"%s\", Priority: %s",
                taskId, description, priority);
    }
}

/**
 * Manages a queue of production tasks and a list of completed tasks.
 * Provides a menu-driven interface for user interaction.
 */
public class ProductionTaskManager {

    // Use Queue interface, implement with LinkedList for FIFO
    private Queue<Task> pendingTasks;
    // Use List interface, implement with ArrayList for ordered storage
    private List<Task> completedTasks;
    private Scanner scanner;
    private int nextTaskId; // Counter for unique task IDs

    /**
     * Constructs a new ProductionTaskManager, initializing collections and scanner.
     */
    public ProductionTaskManager() {
        this.pendingTasks = new LinkedList<>(); // Required: Queue, LinkedList
        this.completedTasks = new ArrayList<>(); // Required: List, ArrayList
        this.scanner = new Scanner(System.in); // Required: Scanner
        this.nextTaskId = 1;
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Production Task Manager ---"); // Required: System.out
        System.out.println("1. Add New Task"); // Required: System.out
        System.out.println("2. Process Next Task"); // Required: System.out
        System.out.println("3. View Pending Tasks"); // Required: System.out
        System.out.println("4. View Completed Tasks"); // Required: System.out
        System.out.println("5. Exit"); // Required: System.out
        System.out.print("Enter your choice: "); // Required: System.out
    }

    /**
     * Adds a new task to the pending tasks queue based on user input.
     * Handles potential input errors for priority.
     */
    private void addTask() {
        System.out.println("\n--- Add New Task ---"); // Required: System.out
        System.out.print("Enter task description: "); // Required: System.out
        String description = scanner.nextLine();

        String priority = "";
        boolean validPriority = false;
        while (!validPriority) {
            System.out.print("Enter priority (Standard/High): "); // Required: System.out
            priority = scanner.nextLine();
            if (priority.equalsIgnoreCase("Standard") || priority.equalsIgnoreCase("High")) {
                validPriority = true;
            } else {
                System.err.println("Invalid priority. Please enter 'Standard' or 'High'."); // Required: System.err
            }
        }

        try {
            // Task constructor has validation, might throw IllegalArgumentException
            Task newTask = new Task(nextTaskId, description, priority);
            pendingTasks.offer(newTask); // Add to the end of the queue
            nextTaskId++; // Only increment ID if task creation is successful
            System.out.println("Task added: " + newTask); // Required: System.out
        } catch (IllegalArgumentException e) {
            System.err.println("Error creating task: " + e.getMessage()); // Required: System.err
            // nextTaskId is not incremented if task creation fails
        }
    }

    /**
     * Processes the next task from the pending queue.
     * Removes the task from the queue and adds it to the completed list.
     * Handles case where queue is empty.
     */
    private void processNextTask() {
        System.out.println("\n--- Process Next Task ---"); // Required: System.out
        if (pendingTasks.isEmpty()) {
            System.err.println("No pending tasks to process."); // Required: System.err
            return;
        }

        Task processedTask = pendingTasks.poll(); // Remove from the front of the queue
        if (processedTask != null) { // poll() returns null if queue is empty, but we already checked
            completedTasks.add(processedTask); // Add to the completed list
            System.out.println("Processed task: " + processedTask); // Required: System.out
        }
    }

    /**
     * Displays all tasks currently in the pending tasks queue.
     */
    private void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---"); // Required: System.out
        if (pendingTasks.isEmpty()) {
            System.out.println("No tasks are pending."); // Required: System.out
        } else {
            // Iterating through a Queue typically uses an Iterator or enhanced for loop
            // This doesn't remove elements.
            int index = 1;
            for (Task task : pendingTasks) {
                System.out.println(index++ + ". " + task); // Required: System.out
            }
        }
    }

    /**
     * Displays all tasks that have been completed and moved to the completed list.
     */
    private void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---"); // Required: System.out
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks have been completed yet."); // Required: System.out
        } else {
            // Iterating through a List uses standard iteration
            for (int i = 0; i < completedTasks.size(); i++) {
                System.out.println((i + 1) + ". " + completedTasks.get(i)); // Required: System.out
            }
        }
    }

    /**
     * Runs the main application loop, handling user interaction via a menu.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1;
        // Required: Class-wide exception handling with try-catch blocks
        try {
            while (choice != 5) {
                displayMenu();

                // Input validation for menu choice
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline left-over after reading the integer
                } else {
                    System.err.println("Invalid input. Please enter a number."); // Required: System.err
                    scanner.nextLine(); // Consume the invalid input line
                    continue; // Skip the rest of the loop and show menu again
                }

                // Required: Switch statement for flow control
                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        processNextTask();
                        break;
                    case 3:
                        viewPendingTasks();
                        break;
                    case 4:
                        viewCompletedTasks();
                        break;
                    case 5:
                        System.out.println("Exiting Production Task Manager. Goodbye!"); // Required: System.out
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5."); // Required: System.err
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage()); // Required: System.err
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("Scanner closed."); // Indicate resource cleanup
        }
    }

    /**
     * Main method to start the application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProductionTaskManager manager = new ProductionTaskManager();
        manager.run();
    }
}
