/*
 * Exam Question #580
 * Generated on: 2025-05-12 16:10:15
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Advanced Production Line Simulation**
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simplified simulation of a manufacturing production line. The system should manage items waiting for processing and track items that have been successfully processed.
 * 
 * Items arrive and are placed in a waiting queue. A workstation processes items one by one from the front of the queue. Once processed, an item is moved to a list of completed items. The simulation should be interactive, allowing a user to perform operations via a menu.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to represent the waiting line of items. Store items as `String` (e.g., "Widget A", "Part 123").
 *     *   Use a `java.util.ArrayList` to store completed items.
 *     *   Declare the collection for completed items using the `java.util.List` interface type.
 * 2.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console for menu selection and item details.
 *     *   Present a menu with the following options:
 *         1.  Add Item to Queue
 *         2.  Process Next Item
 *         3.  View Production Queue
 *         4.  View Completed Items
 *         5.  Exit
 *     *   Use `System.out` for displaying the menu, queue contents, completed items, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, attempting to process when the queue is empty).
 * 3.  **Flow Control:**
 *     *   Use a `switch` statement to handle the different menu options.
 * 4.  **Error Handling:**
 *     *   Implement robust error handling using `try-catch` blocks.
 *     *   Handle potential `InputMismatchException` when reading integer menu choices.
 *     *   Handle the scenario where the user attempts to process an item when the production queue is empty. This should be treated as an error condition reported via `System.err`.
 *     *   Implement class-wide or main loop exception handling to catch unexpected errors gracefully.
 * 5.  **Best Practices:**
 *     *   Use proper encapsulation (private fields for data structures).
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain complex parts or requirements.
 *     *   Perform basic input validation (e.g., check if item name is empty, although the primary focus is on structural requirements).
 *     *   Ensure clean code structure within a single class.
 * 
 * **Implementation Details:**
 * 
 * *   The simulation should run in a loop until the user chooses the "Exit" option.
 * *   When "Add Item to Queue" is selected, prompt the user for the item name and add it to the queue.
 * *   When "Process Next Item" is selected:
 *     *   Check if the queue is empty. If so, print an error message to `System.err` and do nothing else for this option.
 *     *   If the queue is not empty, remove the item from the front of the queue and add it to the list of completed items. Print a success message to `System.out`.
 * *   When "View Production Queue" is selected, print the current items in the queue without removing them.
 * *   When "View Completed Items" is selected, print all items in the completed list.
 * 
 * **Expected Output:**
 * 
 * The program should interact with the user via the console, displaying a menu, prompting for input, and showing the state of the queue and completed items, along with appropriate success or error messages.
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * --- Production Line Menu ---
 * 1. Add Item to Queue
 * 2. Process Next Item
 * 3. View Production Queue
 * 4. View Completed Items
 * 5. Exit
 * Enter your choice: 1
 * Enter item name: Widget A
 * 'Widget A' added to the queue.
 * 
 * --- Production Line Menu ---
 * 1. Add Item to Queue
 * ...
 * Enter your choice: 3
 * Current Production Queue: [Widget A]
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Processed 'Widget A'. Moved to completed items.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 3
 * Current Production Queue: []
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 4
 * Completed Items: [Widget A]
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Error: Cannot process item. Production queue is empty.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Production Line Simulation.
 * ```
 * 
 * Your solution should be a single Java file containing the class `ProductionLineSimulation` with the `main` method.
 *
 * EXPLANATION:
 * This solution implements the `ProductionLineSimulation` class as required.
 * 
 * 1.  **Required Components Usage:**
 *     *   `Queue`: A `java.util.Queue<String>` named `productionQueue` is declared and initialized using `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, suitable for this purpose. Items are added using `add()` and removed from the front using `poll()`.
 *     *   `ArrayList`: A `java.util.ArrayList<String>` is used to store completed items.
 *     *   `List interface`: The completed items collection is declared using the `java.util.List<String>` interface type (`private List<String> completedItems = new ArrayList<>();`), demonstrating polymorphism and coding to the interface.
 *     *   `Scanner`: A `java.util.Scanner` is used to read user input from `System.in` for menu choices and item names. It's managed as a private field and closed in the `finally` block.
 *     *   `Switch statement`: A `switch` statement in the `runSimulation` method is used to direct program flow based on the user's menu choice.
 *     *   `System.err`: `System.err` is used specifically for printing error messages, such as invalid menu choices, attempts to process an empty queue, input mismatch errors, and unexpected exceptions.
 *     *   `System.out`: `System.out` is used for printing normal output, including the menu, confirmation messages, and the contents of the queue and completed items list.
 *     *   `try-catch blocks`:
 *         *   A `try-catch(InputMismatchException)` block is used inside the main loop to gracefully handle cases where the user enters non-integer input for the menu choice.
 *         *   A larger `try-catch(Exception)` block surrounds the main simulation loop (`while(running)`) to provide class-wide exception handling, catching any other unexpected runtime errors and printing a stack trace to `System.err`.
 *         *   A `finally` block ensures the `Scanner` resource is closed regardless of how the `try` block exits.
 * 
 * 2.  **Creativity and Practicality:** The production line simulation is a practical scenario demonstrating queueing (waiting items) and processing (moving from queue to completed).
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** `productionQueue`, `completedItems`, and `scanner` are declared as `private` fields, accessible only through the class's methods.
 *     *   **Meaningful Names:** Variable names (`productionQueue`, `completedItems`, `itemName`, `choice`, `processedItem`) and method names (`displayMenu`, `addItemToQueue`, `processNextItem`, `viewProductionQueue`, `viewCompletedItems`, `runSimulation`) are descriptive.
 *     *   **Comments:** Javadoc comments explain the class and methods, and inline comments explain specific logic or requirements (like using `LinkedList` or `ArrayList`, or the purpose of `scanner.nextLine()` after `nextInt()`).
 *     *   **Input Validation:** Basic validation checks if the item name is empty. More importantly, it handles invalid *types* of input for the menu choice (`InputMismatchException`).
 *     *   **Proper Error Handling:** Distinct handling for specific expected errors (empty queue, input mismatch) using `System.err` and a general catch-all for unexpected errors demonstrates robust error management.
 *     *   **Clean Code Structure:** The code is organized into a single class with a clear `main` method and separate private helper methods for each distinct operation (adding, processing, viewing, displaying menu), promoting modularity.
 * 
 * The solution effectively integrates all required components within a cohesive, interactive program that simulates a real-world-like process, making it a challenging yet solvable task for an advanced Java student.
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList is a common implementation of Queue
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Simulates a simple production line with a waiting queue and a completed items list.
 * Demonstrates usage of Queue, List, ArrayList, Scanner, Switch, System.err, System.out,
 * and basic exception handling.
 */
public class ProductionLineSimulation {

    // Private fields for encapsulation
    private Queue<String> productionQueue;
    private List<String> completedItems;
    private Scanner scanner;

    /**
     * Constructor to initialize the production line components.
     */
    public ProductionLineSimulation() {
        // Initialize the Queue using LinkedList implementation
        this.productionQueue = new LinkedList<>();
        // Initialize the List using ArrayList implementation
        this.completedItems = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Production Line Menu ---");
        System.out.println("1. Add Item to Queue");
        System.out.println("2. Process Next Item");
        System.out.println("3. View Production Queue");
        System.out.println("4. View Completed Items");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds an item to the production queue based on user input.
     */
    private void addItemToQueue() {
        System.out.print("Enter item name: ");
        String itemName = scanner.nextLine().trim(); // Use nextLine() to read full line

        if (itemName.isEmpty()) {
            System.err.println("Error: Item name cannot be empty.");
            return;
        }

        productionQueue.add(itemName); // Add item to the end of the queue
        System.out.println("'" + itemName + "' added to the queue.");
    }

    /**
     * Processes the next item from the production queue.
     * Removes the item from the queue and adds it to the completed items list.
     */
    private void processNextItem() {
        if (productionQueue.isEmpty()) {
            // Use System.err for error condition: attempting to process empty queue
            System.err.println("Error: Cannot process item. Production queue is empty.");
        } else {
            String processedItem = productionQueue.poll(); // Remove item from the front of the queue
            completedItems.add(processedItem); // Add item to the completed list
            System.out.println("Processed '" + processedItem + "'. Moved to completed items.");
        }
    }

    /**
     * Displays the current items in the production queue.
     */
    private void viewProductionQueue() {
        System.out.println("Current Production Queue: " + productionQueue);
    }

    /**
     * Displays the list of completed items.
     */
    private void viewCompletedItems() {
        System.out.println("Completed Items: " + completedItems);
    }

    /**
     * Runs the main simulation loop.
     */
    public void runSimulation() {
        boolean running = true;

        // Class-wide exception handling for the main simulation loop
        try {
            while (running) {
                displayMenu();

                int choice = -1;
                try {
                    // Try to read an integer for menu choice
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    // Handle non-integer input specifically
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } finally {
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                }

                // Use a switch statement for menu flow control
                switch (choice) {
                    case 1:
                        addItemToQueue();
                        break;
                    case 2:
                        processNextItem();
                        break;
                    case 3:
                        viewProductionQueue();
                        break;
                    case 4:
                        viewCompletedItems();
                        break;
                    case 5:
                        System.out.println("Exiting Production Line Simulation.");
                        running = false;
                        break;
                    default:
                        // Handle invalid menu choices using System.err
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during simulation execution
            System.err.println("An unexpected error occurred during simulation:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed when the simulation ends
            scanner.close();
            System.out.println("Simulation ended.");
        }
    }

    /**
     * Main method to start the simulation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProductionLineSimulation simulation = new ProductionLineSimulation();
        simulation.runSimulation();
    }
}
