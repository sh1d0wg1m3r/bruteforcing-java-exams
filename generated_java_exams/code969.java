/*
 * Exam Question #969
 * Generated on: 2025-05-12 17:06:34
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Hospital Emergency Room Triage System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified simulation of a Hospital Emergency Room's triage system. Patients arrive with varying levels of urgency and are placed into different waiting queues based on their condition. The system needs to manage these patients, allow staff to process them based on priority, and provide a view of who is currently waiting.
 * 
 * **Task:**
 * Implement a Java program that simulates this triage system. Your program should allow users (simulating hospital staff) to add new patients, process the next patient based on priority, and list all patients currently waiting.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with the following attributes:
 *     *   `patientId` (int): A unique identifier for the patient.
 *     *   `name` (String): The patient's name.
 *     *   `priority` (int): Represents the urgency level. Use integers: 1 for CRITICAL, 2 for URGENT, 3 for STANDARD.
 * 
 * 2.  **Data Structures:**
 *     *   Use three separate `java.util.Queue<Patient>` instances, one for each priority level (Critical, Urgent, Standard), to manage patients waiting for treatment.
 *     *   Use a single `java.util.List<Patient>` (specifically, an `java.util.ArrayList<Patient>`) to keep track of *all* patients currently waiting in *any* of the three queues.
 * 
 * 3.  **Functionality:**
 *     *   Implement a command-line interface using `java.util.Scanner`.
 *     *   Present a menu with options:
 *         1.  Add New Patient
 *         2.  Process Next Patient
 *         3.  List All Waiting Patients
 *         4.  Exit
 *     *   **Add New Patient:** Prompt the user for the patient's name and priority level (1, 2, or 3). Generate a unique `patientId` automatically (e.g., starting from 1 and incrementing). Create a `Patient` object, add it to the appropriate priority queue based on the input, and also add it to the list of all waiting patients.
 *     *   **Process Next Patient:** Dequeue a patient from the highest priority queue that is not empty. The processing order should be: CRITICAL -> URGENT -> STANDARD. If a patient is successfully dequeued, remove them from the list of all waiting patients and report which patient was processed.
 *     *   **List All Waiting Patients:** Iterate through the list of all waiting patients and display their details (ID, Name, Priority).
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   Validate user input for the menu choice and patient priority level. If input is invalid (e.g., non-numeric where number is expected, out-of-range number), display an error message using `System.err` and prompt again or continue the loop.
 *     *   If the user attempts to process a patient when all queues are empty, display an appropriate message using `System.err`.
 *     *   Implement robust error handling using `try-catch` blocks. A single `try-catch` block around the main command processing loop is acceptable and encouraged for handling potential runtime exceptions during user interaction or operation execution.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations (patient added, patient processed), and the list of waiting patients.
 *     *   Use `System.err` for displaying error messages (invalid input, queues empty).
 * 
 * 6.  **Best Practices:**
 *     *   Adhere to proper encapsulation (private fields, public getters/methods) in the `Patient` class and the main system class.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadocs where applicable, or inline comments explaining complex logic).
 *     *   Structure your code into appropriate classes (e.g., `Patient`, `HospitalTriageSystem`).
 * 
 * **Expected Output Format Examples:**
 * 
 * ```
 * --- Hospital Triage System ---
 * 1. Add New Patient
 * 2. Process Next Patient
 * 3. List All Waiting Patients
 * 4. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter priority (1=CRITICAL, 2=URGENT, 3=STANDARD): 2
 * Patient Alice (ID: 1) added with priority URGENT.
 * 
 * --- Hospital Triage System ---
 * ...
 * Enter your choice: 2
 * Processing patient: Bob (ID: 2) from CRITICAL queue.
 * 
 * --- Hospital Triage System ---
 * ...
 * Enter your choice: 2
 * Error: No patients currently waiting in any queue.
 * 
 * --- Hospital Triage System ---
 * ...
 * Enter your choice: 3
 * --- Waiting Patients ---
 * ID: 1, Name: Alice, Priority: URGENT
 * ID: 3, Name: Charlie, Priority: STANDARD
 * --------------------------
 * 
 * --- Hospital Triage System ---
 * ...
 * Enter your choice: 5
 * Error: Invalid choice. Please enter a number between 1 and 4.
 * 
 * --- Hospital Triage System ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * ```
 * 
 * Your solution should be a complete, runnable Java program.
 *
 * EXPLANATION:
 * The provided solution implements a simplified Hospital Emergency Room Triage System, fulfilling all the requirements of the problem description.
 * 
 * **Core Components and Their Usage:**
 * 
 * 1.  **`Patient` Class:** This class encapsulates the data for a single patient (`patientId`, `name`, `priority`). It follows best practices by making fields private and providing public getter methods. The `getPriorityString()` method adds a user-friendly representation of the priority level. The `toString()` method provides a convenient way to print patient details.
 * 
 * 2.  **`HospitalTriageSystem` Class:** This is the main class that manages the system's state and operations.
 *     *   **`Queue<Patient>`:** Three `LinkedList` instances are used, each implementing the `Queue` interface (`criticalQueue`, `urgentQueue`, `standardQueue`). `LinkedList` is chosen because it provides a simple, unbounded queue implementation suitable for this scenario. Patients are added to and removed from these queues based on their priority. The `offer()` method is used for adding (safer than `add` in bounded queues, though not strictly necessary here), and `poll()` is used for removing (safer than `remove` as it returns `null` if the queue is empty, avoiding an exception).
 *     *   **`List<Patient>`:** An `ArrayList` instance (`allActivePatients`) is used, declared using the `List` interface. This list holds references to *all* `Patient` objects currently waiting in *any* of the queues. This structure allows for easily listing all waiting patients without needing to iterate through each queue individually. When a patient is added to a queue, they are also added to this list. When a patient is processed (dequeued), they are removed from this list.
 *     *   **`Scanner`:** An instance of `Scanner` reads user input from `System.in` for menu choices, patient names, and priorities. It's managed as a private field within the `HospitalTriageSystem` and closed when the application exits.
 *     *   **`switch` statement:** The `run()` method uses a `switch` statement to direct the program flow based on the user's main menu choice (Add Patient, Process, List, Exit). A nested `switch` could be used for priority input validation, but a `while` loop with `if` conditions and `try-catch` is used here for demonstrating input validation robustness.
 *     *   **`System.err`:** Used specifically for displaying error messages, such as invalid menu choices, invalid priority input, or attempting to process a patient when no one is waiting. This separates error output from normal program output.
 *     *   **`System.out`:** Used for all normal program output, including the menu, prompts, success messages, and the list of waiting patients.
 *     *   **`try-catch` blocks:**
 *         *   A main `try-catch` block is wrapped around the core logic inside the `while(running)` loop in the `run()` method. This provides class-wide exception handling for potential issues that might occur during user interaction or method calls (like `InputMismatchException` when the user enters non-numeric input where a number is expected).
 *         *   A specific `try-catch` block is used within the "Add Patient" case of the main `switch` to handle potential `InputMismatchException` specifically when reading the patient's priority, allowing for re-prompting until valid input is received.
 *         *   A general `catch (Exception e)` is included in the main `try-catch` to catch any other unforeseen exceptions, demonstrating a robust approach to preventing the program from crashing unexpectedly.
 * 
 * **Functionality Implementation:**
 * 
 * *   **`addPatient(String name, int priority)`:** Creates a new `Patient` object with an auto-incremented ID. It uses a `switch` internally to add the patient to the correct priority queue (`offer`). Crucially, it also adds the new patient to the `allActivePatients` list.
 * *   **`processNextPatient()`:** Implements the triage logic. It checks the `criticalQueue` first. If empty, it checks `urgentQueue`. If that's also empty, it checks `standardQueue`. `poll()` is used to retrieve and remove the head of the first non-empty queue. If a patient is found, they are removed from the `allActivePatients` list, and a success message is printed. If all queues are empty, an error is printed to `System.err`.
 * *   **`listAllWaitingPatients()`:** Iterates through the `allActivePatients` `ArrayList` and prints the details of each patient using the `Patient` class's `toString()` method. This demonstrates the use of the `List` interface and iteration.
 * *   **`run()`:** Contains the main application loop, menu display, user input reading, input validation (using a `while` loop and `try-catch` for priority), the main `switch` for command dispatch, and the primary `try-catch` block for general error handling.
 * 
 * **Best Practices Demonstrated:**
 * 
 * *   **Encapsulation:** `Patient` fields are private with public getters. `HospitalTriageSystem` data structures and internal state (`nextPatientId`, `scanner`) are private.
 * *   **Meaningful Names:** Variables (`criticalQueue`, `allActivePatients`, `nextPatientId`), methods (`addPatient`, `processNextPatient`, `listAllWaitingPatients`), and classes (`Patient`, `HospitalTriageSystem`) have names reflecting their purpose.
 * *   **Comments and Documentation:** Javadoc-style comments explain the purpose of classes and methods. Inline comments clarify specific logic points.
 * *   **Input Validation:** Checks are performed to ensure menu choices and priority levels are within the valid range and of the correct type, using `if` conditions and `try-catch`.
 * *   **Error Handling:** `System.err` is used for errors, and `try-catch` blocks gracefully handle invalid input and potential runtime issues, preventing the program from crashing. Checking for empty queues before processing prevents errors.
 * *   **Clean Code Structure:** The logic is separated into distinct methods within the `HospitalTriageSystem` class, making the code modular and easier to understand. The `Main` class is kept minimal, only responsible for starting the system.
 * 
 * This solution effectively integrates all required components into a practical scenario, demonstrating understanding of data structures, control flow, object-oriented principles, and robust error handling in Java.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the triage system
class Patient {
    private int patientId;
    private String name;
    private int priority; // 1=CRITICAL, 2=URGENT, 3=STANDARD

    /**
     * Constructs a new Patient object.
     * @param patientId The unique ID for the patient.
     * @param name The name of the patient.
     * @param priority The priority level (1, 2, or 3).
     */
    public Patient(int patientId, String name, int priority) {
        this.patientId = patientId;
        this.name = name;
        this.priority = priority;
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getPriority() {
        return priority;
    }

    /**
     * Returns a string representation of the patient's priority level.
     * @return "CRITICAL", "URGENT", or "STANDARD".
     */
    public String getPriorityString() {
        switch (priority) {
            case 1:
                return "CRITICAL";
            case 2:
                return "URGENT";
            case 3:
                return "STANDARD";
            default:
                return "UNKNOWN"; // Should not happen with validation
        }
    }

    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name + ", Priority: " + getPriorityString();
    }
}

// Manages the hospital triage system
class HospitalTriageSystem {
    private Queue<Patient> criticalQueue;
    private Queue<Patient> urgentQueue;
    private Queue<Patient> standardQueue;
    private List<Patient> allActivePatients; // List of all patients currently in any queue
    private int nextPatientId;
    private Scanner scanner;

    /**
     * Constructs a new HospitalTriageSystem.
     */
    public HospitalTriageSystem() {
        criticalQueue = new LinkedList<>(); // LinkedList implements Queue
        urgentQueue = new LinkedList<>();   // LinkedList implements Queue
        standardQueue = new LinkedList<>(); // LinkedList implements Queue
        allActivePatients = new ArrayList<>();
        nextPatientId = 1; // Start patient IDs from 1
        scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the system based on priority.
     * @param name The name of the patient.
     * @param priority The priority level (1, 2, or 3).
     */
    public void addPatient(String name, int priority) {
        // Input validation for priority is handled in the run() method's switch case
        Patient patient = new Patient(nextPatientId++, name, priority);

        switch (priority) {
            case 1:
                criticalQueue.offer(patient); // offer is safer than add (returns false instead of throwing exception on capacity issue, though LinkedList is unbounded)
                break;
            case 2:
                urgentQueue.offer(patient);
                break;
            case 3:
                standardQueue.offer(patient);
                break;
            // Default case is handled by input validation before calling this method
        }
        allActivePatients.add(patient);
        System.out.println("Patient " + patient.getName() + " (ID: " + patient.getPatientId() + ") added with priority " + patient.getPriorityString() + ".");
    }

    /**
     * Processes the next patient based on priority (Critical -> Urgent -> Standard).
     * Removes the patient from the appropriate queue and the active patients list.
     */
    public void processNextPatient() {
        Patient patientToProcess = null;

        // Check queues in priority order
        if (!criticalQueue.isEmpty()) {
            patientToProcess = criticalQueue.poll(); // poll is safer than remove (returns null if queue is empty)
        } else if (!urgentQueue.isEmpty()) {
            patientToProcess = urgentQueue.poll();
        } else if (!standardQueue.isEmpty()) {
            patientToProcess = standardQueue.poll();
        }

        if (patientToProcess != null) {
            // Remove from the list of all active patients
            allActivePatients.remove(patientToProcess); // List.remove uses Object.equals() by default, which works fine for Patient objects if they are the same instance.

            System.out.println("Processing patient: " + patientToProcess.getName() + " (ID: " + patientToProcess.getPatientId() + ") from " + patientToProcess.getPriorityString() + " queue.");
        } else {
            System.err.println("Error: No patients currently waiting in any queue.");
        }
    }

    /**
     * Lists all patients currently waiting in any queue.
     */
    public void listAllWaitingPatients() {
        if (allActivePatients.isEmpty()) {
            System.out.println("No patients currently waiting.");
            return;
        }

        System.out.println("--- Waiting Patients ---");
        // Iterate through the list of all active patients
        for (Patient patient : allActivePatients) {
            System.out.println(patient); // Uses Patient.toString()
        }
        System.out.println("--------------------------");
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Triage System ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Process Next Patient");
        System.out.println("3. List All Waiting Patients");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and operations.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = 0;
        boolean running = true;

        while (running) {
            displayMenu();

            try {
                // Read user choice
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Process choice using switch
                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        int priority = -1;
                        boolean validPriority = false;
                        while (!validPriority) {
                            System.out.print("Enter priority (1=CRITICAL, 2=URGENT, 3=STANDARD): ");
                            try {
                                priority = scanner.nextInt();
                                scanner.nextLine(); // Consume newline
                                if (priority >= 1 && priority <= 3) {
                                    validPriority = true;
                                } else {
                                    System.err.println("Error: Invalid priority level. Please enter 1, 2, or 3.");
                                }
                            } catch (InputMismatchException e) {
                                System.err.println("Error: Invalid input. Please enter a number for priority.");
                                scanner.nextLine(); // Consume the invalid input
                            }
                        }
                        addPatient(name, priority);
                        break;

                    case 2:
                        processNextPatient();
                        break;

                    case 3:
                        listAllWaitingPatients();
                        break;

                    case 4:
                        System.out.println("Exiting Hospital Triage System. Goodbye!");
                        running = false;
                        break;

                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (InputMismatchException e) {
                // Catch non-integer input for the main menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during operation execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }

        scanner.close(); // Close the scanner when exiting
    }
}

// Main class to start the application
public class Main {
    public static void main(String[] args) {
        HospitalTriageSystem system = new HospitalTriageSystem();
        system.run();
    }
}
