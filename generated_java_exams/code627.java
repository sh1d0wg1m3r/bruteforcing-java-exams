/*
 * Exam Question #627
 * Generated on: 2025-05-12 16:16:36
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced IT Support Ticket Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified command-line based IT support ticket management system. The system should allow users to submit new support tickets, allow support staff (simulated by another menu option) to process the next pending ticket, and allow viewing both pending and completed tickets.
 * 
 * The system must manage tickets in a queue for processing (First-In, First-Out) and maintain a list of all tickets that have been processed.
 * 
 * **Requirements:**
 * 
 * 1.  **Ticket Representation:** Create a class named `Ticket` with the following private fields:
 *     *   `ticketId` (an integer, automatically generated and unique for each ticket).
 *     *   `description` (a String describing the issue).
 *     *   `status` (a String, initially "Pending", changed to "Completed" when processed).
 *     *   Include a constructor, public getter methods for all fields, a method `markAsCompleted()`, and a `toString()` method for easy printing.
 * 
 * 2.  **Ticket Management System:** Create a class named `TicketManagementSystem` that encapsulates the logic for managing tickets. It should have:
 *     *   A private field `pendingTickets` of type `java.util.Queue<Ticket>` to store tickets waiting for processing.
 *     *   A private field `completedTickets` of type `java.util.List<Ticket>` (use `java.util.ArrayList` for implementation) to store processed tickets.
 *     *   A constructor to initialize the collections.
 *     *   A public method `submitTicket(String description)`: Creates a new `Ticket` object with a unique ID, adds it to the `pendingTickets` queue, and prints a confirmation message to `System.out`. It must validate that the description is not empty or null, printing an error to `System.err` if invalid.
 *     *   A public method `processNextTicket()`: Removes the ticket from the front of the `pendingTickets` queue, marks its status as "Completed", adds it to the `completedTickets` list, and prints a confirmation message to `System.out`. If the queue is empty, it should print an error message to `System.err`.
 *     *   A public method `viewPendingTickets()`: Prints all tickets currently in the `pendingTickets` queue to `System.out`. If the queue is empty, it prints a message indicating so to `System.out`.
 *     *   A public method `viewCompletedTickets()`: Prints all tickets in the `completedTickets` list to `System.out`. If the list is empty, it prints a message indicating so to `System.out`.
 * 
 * 3.  **Command-Line Interface:** Create a main class (e.g., `SupportSystemApp`) with a `main` method that provides a command-line interface:
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu with the following options:
 *         1.  Submit New Ticket
 *         2.  Process Next Ticket
 *         3.  View Pending Tickets
 *         4.  View Completed Tickets
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement input validation for the menu choice, ensuring it's an integer within the valid range. Handle `InputMismatchException` if the user enters non-integer input, printing an error to `System.err` and prompting again.
 *     *   Use `System.out` for all standard output (menu, prompts, success messages, ticket details).
 *     *   Use `System.err` for all error messages (invalid input, operation failures like processing from an empty queue).
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around the main operational loop, to catch unexpected errors gracefully and print an error message to `System.err`.
 *     *   Ensure the `Scanner` resource is properly closed.
 * 
 * 4.  **Best Practices:** Adhere to Java best practices, including:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments where necessary for clarity.
 *     *   Clean and readable code structure.
 * 
 * **Expected Output:**
 * 
 * The program should start by printing a welcome message and the menu. It should then loop, accepting user input, performing the requested action (or printing an error), and displaying the menu again until the user chooses to exit. Output should clearly distinguish between normal information (`System.out`) and errors (`System.err`).
 * 
 * Example interaction flow (user input is underlined):
 * 
 * ```
 * --- IT Support Ticket System ---
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 1
 * Enter ticket description: Printer not working
 * 
 * Ticket submitted successfully: Ticket [ID=1, Description='Printer not working', Status=Pending]
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 1
 * Enter ticket description: Email configuration issue
 * 
 * Ticket submitted successfully: Ticket [ID=2, Description='Email configuration issue', Status=Pending]
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 3
 * 
 * --- Pending Tickets ---
 * Ticket [ID=1, Description='Printer not working', Status=Pending]
 * Ticket [ID=2, Description='Email configuration issue', Status=Pending]
 * -----------------------
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 2
 * 
 * Ticket processed successfully: Ticket [ID=1, Description='Printer not working', Status=Completed]
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 3
 * 
 * --- Pending Tickets ---
 * Ticket [ID=2, Description='Email configuration issue', Status=Pending]
 * -----------------------
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 4
 * 
 * --- Completed Tickets ---
 * Ticket [ID=1, Description='Printer not working', Status=Completed]
 * -------------------------
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: abc
 * Invalid input. Please enter a number.
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 2
 * 
 * Ticket processed successfully: Ticket [ID=2, Description='Email configuration issue', Status=Completed]
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 2
 * No pending tickets to process.
 * 
 * Select an option:
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Completed Tickets
 * 5. Exit
 * Enter choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation and usage of `Queue`, `ArrayList`, and `List`.
 * *   Correct usage of `Scanner` for input.
 * *   Correct implementation of the `switch` statement for menu control.
 * *   Correct usage of `System.out` and `System.err` as specified.
 * *   Effective use of `try-catch` for exception handling, including `InputMismatchException` and general errors.
 * *   Proper encapsulation and adherence to best practices.
 * *   Correct implementation of the ticket management logic (submit, process, view).
 * *   Handling of edge cases (empty queue/list, invalid input).
 *
 * EXPLANATION:
 * This solution implements a basic IT support ticket management system demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Ticket` Class:** This class represents a single support ticket. It uses private fields (`ticketId`, `description`, `status`) to ensure data encapsulation. A `static` counter (`nextId`) is used to automatically assign a unique `ticketId` to each new instance, fulfilling the requirement for unique IDs. Getter methods provide controlled access to the ticket's state. The `markAsCompleted()` method modifies the status, and `toString()` provides a convenient string representation for printing.
 * 
 * 2.  **`TicketManagementSystem` Class:** This class acts as the core logic handler.
 *     *   It uses a `java.util.Queue<Ticket>` (`pendingTickets`) implemented by `java.util.LinkedList` to manage tickets waiting for processing. The `Queue` interface naturally supports the FIFO (First-In, First-Out) behavior required for processing tickets in the order they are submitted. `offer()` is used to add to the end, and `poll()` is used to remove from the front.
 *     *   It uses a `java.util.List<Ticket>` (`completedTickets`) implemented by `java.util.ArrayList` to store tickets after they have been processed. An `ArrayList` is suitable here as it maintains the order of completion and allows easy iteration for viewing. `add()` is used to append completed tickets.
 *     *   Methods like `submitTicket`, `processNextTicket`, `viewPendingTickets`, and `viewCompletedTickets` encapsulate the system's operations. Input validation for the ticket description is performed in `submitTicket`. Edge cases like trying to process a ticket from an empty queue or viewing empty lists are handled with conditional checks and appropriate messages.
 * 
 * 3.  **`SupportSystemApp` Class (Main):** This class provides the command-line interface.
 *     *   A `java.util.Scanner` is used to read input from `System.in`. A `try-with-resources` block ensures the `Scanner` is closed automatically, preventing resource leaks.
 *     *   The `main` method contains the primary application loop (`while(running)`).
 *     *   A menu is printed to `System.out` using the `printMenu` helper method.
 *     *   User input for the menu choice is read using `scanner.nextInt()`.
 *     *   A `switch` statement is used to direct the program flow based on the user's valid integer choice, calling the corresponding methods in the `TicketManagementSystem`.
 *     *   Input validation for the menu choice is handled specifically by catching `java.util.InputMismatchException` if the user enters non-integer text. An error message is printed to `System.err`, and `scanner.next()` followed by `scanner.nextLine()` is used to consume the invalid input and the rest of the line, preventing an infinite loop caused by the `Scanner` not advancing past the invalid token.
 *     *   **Class-wide exception handling:** A `try-catch` block wraps the main `while` loop in the `main` method. This demonstrates handling potential unexpected exceptions that might occur during the execution of the system's operations, printing an error to `System.err` and the stack trace. A separate `try-catch` wraps the `try-with-resources` for the `Scanner` to handle potential issues during setup.
 *     *   `System.out` is used for all standard output, including the menu, prompts, success messages, and list/queue contents.
 *     *   `System.err` is used specifically for error conditions, such as invalid user input, empty description, or attempting to process from an empty queue, fulfilling the requirement to distinguish error output.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrates good object-oriented design principles like encapsulation, and includes essential error handling and input validation, making it a challenging yet solvable exam task.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single support ticket
class Ticket {
    // Static counter to generate unique ticket IDs
    private static int nextId = 1;

    private final int ticketId; // Final as ID should not change
    private String description;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new Ticket with a generated unique ID and initial status.
     * @param description The description of the support issue.
     */
    public Ticket(String description) {
        this.ticketId = nextId++; // Assign unique ID and increment counter
        this.description = description;
        this.status = "Pending";
    }

    // --- Public Getter Methods ---
    public int getTicketId() {
        return ticketId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Marks the ticket's status as "Completed".
     */
    public void markAsCompleted() {
        this.status = "Completed";
    }

    /**
     * Provides a string representation of the Ticket object.
     * @return A formatted string including ticket ID, description, and status.
     */
    @Override
    public String toString() {
        return "Ticket [ID=" + ticketId + ", Description='" + description + "', Status=" + status + "]";
    }
}

// Manages the collection of pending and completed tickets
class TicketManagementSystem {
    // Queue for tickets waiting to be processed (FIFO)
    private Queue<Ticket> pendingTickets;
    // List for tickets that have been processed (ordered by completion time)
    private List<Ticket> completedTickets;

    /**
     * Constructs a new TicketManagementSystem, initializing the collections.
     */
    public TicketManagementSystem() {
        // LinkedList is a common implementation of the Queue interface
        this.pendingTickets = new LinkedList<>();
        // ArrayList is a common implementation of the List interface
        this.completedTickets = new ArrayList<>();
    }

    /**
     * Creates and submits a new support ticket to the pending queue.
     * @param description The description of the issue.
     */
    public void submitTicket(String description) {
        // Input validation for description
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return; // Exit the method if validation fails
        }

        Ticket newTicket = new Ticket(description); // Ticket class assigns unique ID
        pendingTickets.offer(newTicket); // Add to the end of the queue (offer is preferred over add in queues)
        System.out.println("Ticket submitted successfully: " + newTicket); // Use System.out for success
    }

    /**
     * Processes the next ticket from the pending queue.
     * Removes it from the queue, marks it completed, and adds it to the completed list.
     */
    public void processNextTicket() {
        // Check if the queue is empty before attempting to process
        if (pendingTickets.isEmpty()) {
            System.err.println("No pending tickets to process."); // Use System.err for operational error
            return; // Exit the method
        }

        // poll() retrieves and removes the head of the queue.
        // It returns null if the queue is empty, but we checked above.
        Ticket ticketToProcess = pendingTickets.poll();

        // Mark the ticket as completed and move it to the completed list
        if (ticketToProcess != null) { // This check is technically redundant due to isEmpty() check, but safe
            ticketToProcess.markAsCompleted();
            completedTickets.add(ticketToProcess); // Add to the end of the completed list
            System.out.println("Ticket processed successfully: " + ticketToProcess); // Use System.out for success
        }
    }

    /**
     * Displays all tickets currently in the pending queue.
     */
    public void viewPendingTickets() {
        if (pendingTickets.isEmpty()) {
            System.out.println("No pending tickets."); // Use System.out for informational message
            return;
        }

        System.out.println("\n--- Pending Tickets ---"); // Use System.out for headers
        // Iterate through the queue without removing elements
        for (Ticket ticket : pendingTickets) {
            System.out.println(ticket); // Use System.out for ticket details
        }
        System.out.println("-----------------------");
    }

    /**
     * Displays all tickets that have been completed.
     */
    public void viewCompletedTickets() {
        if (completedTickets.isEmpty()) {
            System.out.println("No completed tickets."); // Use System.out for informational message
            return;
        }

        System.out.println("\n--- Completed Tickets ---"); // Use System.out for headers
        // Iterate through the list
        for (Ticket ticket : completedTickets) {
            System.out.println(ticket); // Use System.out for ticket details
        }
        System.out.println("-------------------------");
    }
}

// Main class to run the Support System application
public class SupportSystemApp {

    /**
     * The main method to start the application and handle user interaction.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Use try-with-resources to ensure the Scanner is closed properly
        try (Scanner scanner = new Scanner(System.in)) {
            TicketManagementSystem system = new TicketManagementSystem();
            boolean running = true;

            System.out.println("--- IT Support Ticket System ---");

            // Class-wide exception handling for the main application loop
            try {
                while (running) {
                    printMenu(); // Display the menu
                    System.out.print("Enter choice: "); // Prompt for input

                    int choice = -1;
                    try {
                        // Attempt to read the integer choice
                        choice = scanner.nextInt();
                        // Consume the rest of the line after the integer
                        scanner.nextLine();
                    } catch (InputMismatchException e) {
                        // Handle non-integer input specifically
                        System.err.println("Invalid input. Please enter a number."); // Use System.err
                        scanner.next(); // Consume the invalid token to prevent infinite loop
                        scanner.nextLine(); // Consume the rest of the line
                        continue; // Skip the rest of the loop iteration and show menu again
                    }

                    // Use switch statement to handle different menu options
                    switch (choice) {
                        case 1:
                            System.out.print("Enter ticket description: ");
                            String description = scanner.nextLine();
                            system.submitTicket(description); // Call the system method
                            break;
                        case 2:
                            system.processNextTicket(); // Call the system method
                            break;
                        case 3:
                            system.viewPendingTickets(); // Call the system method
                            break;
                        case 4:
                            system.viewCompletedTickets(); // Call the system method
                            break;
                        case 5:
                            System.out.println("Exiting system. Goodbye!"); // Use System.out
                            running = false; // Set flag to exit the loop
                            break;
                        default:
                            // Handle choices outside the valid range
                            System.err.println("Invalid choice. Please enter a number between 1 and 5."); // Use System.err
                            break;
                    }
                    System.out.println(); // Add a newline for better readability between interactions
                }
            } catch (Exception e) {
                // Catch any other unexpected exceptions that might occur in the loop
                System.err.println("An unexpected error occurred during operation: " + e.getMessage()); // Use System.err
                e.printStackTrace(); // Print stack trace for debugging purposes
            }

        } catch (Exception e) {
            // Catch exceptions related to Scanner initialization or try-with-resources itself
            System.err.println("An error occurred while setting up the system: " + e.getMessage()); // Use System.err
            e.printStackTrace();
        }
    }

    /**
     * Helper method to print the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Select an option:"); // Use System.out
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Completed Tickets");
        System.out.println("5. Exit");
    }
}
