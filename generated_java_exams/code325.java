/*
 * Exam Question #325
 * Generated on: 2025-05-11 22:55:21
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified hospital appointment management system. The system needs to handle patient appointment requests and doctor availability. When a patient requests an appointment, the system should first check if any doctor is available. If a doctor is available, the appointment is scheduled immediately with the first available doctor found. If no doctor is available, the patient is added to a waiting list. Doctors become available after they finish an appointment. When a doctor finishes an appointment and the waiting list is not empty, the system should automatically schedule the next patient from the waiting list with that doctor.
 * 
 * **Your Task:**
 * 
 * Implement a Java program that simulates this system. Your program should allow users to perform the following actions via a command-line interface:
 * 
 * 1.  Add a new Patient.
 * 2.  Add a new Doctor.
 * 3.  Request an Appointment for a Patient.
 * 4.  Finish an Appointment for a Doctor.
 * 5.  Display the current system status (Lists of Patients, Doctors with availability, and the Waiting List).
 * 6.  Exit the application.
 * 
 * **Technical Requirements:**
 * 
 * *   Use `java.util.Queue` (specifically, an implementation like `LinkedList`) for the patient waiting list.
 * *   Use `java.util.ArrayList` to store the lists of patients and doctors.
 * *   Use the `java.util.List` interface type when declaring variables that hold the lists of patients and doctors.
 * *   Use `java.util.Scanner` to read user input from the console (menu choices, patient/doctor details).
 * *   Use a `switch` statement to handle the main menu options selected by the user.
 * *   Use `System.err` to output error messages (e.g., invalid input, patient/doctor not found, no doctors available).
 * *   Use `System.out` for all normal output (menu, prompts, success messages, status display).
 * *   Implement class-wide exception handling using a `try-catch` block to catch potential runtime errors during the main program execution loop.
 * *   Follow Java best practices:
 *     *   Encapsulate data using private fields and provide public methods (getters/setters where appropriate, or methods that perform actions).
 *     *   Use meaningful names for classes, variables, and methods.
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Implement basic input validation (e.g., checking if patient/doctor IDs exist before performing actions).
 *     *   Ensure clean code structure.
 * 
 * **Classes to Consider:**
 * 
 * *   `Patient` class (fields: int id, String name)
 * *   `Doctor` class (fields: int id, String name, boolean isAvailable)
 * *   `AppointmentSystem` class (manages the lists and queue, contains methods for actions)
 * *   Main class (contains the `main` method, handles user interaction loop)
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's input, it should perform the requested action, print appropriate success or error messages, and update the system state. The "Display Status" option should clearly show the current patients, doctors (indicating if they are available), and the patients currently in the waiting list.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient
 * 2. Add Doctor
 * 3. Request Appointment
 * 4. Finish Appointment
 * 5. Display Status
 * 6. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Patient 101 (Alice) added.
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 2
 * Enter Doctor ID: 1
 * Enter Doctor Name: Dr. Smith
 * Doctor 1 (Dr. Smith) added.
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 3
 * Enter Patient ID requesting appointment: 101
 * Patient 101 (Alice) scheduled with Doctor 1 (Dr. Smith).
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 3
 * Enter Patient ID requesting appointment: 102
 * Patient with ID 102 not found.
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 2
 * Enter Doctor ID: 2
 * Enter Doctor Name: Dr. Jones
 * Doctor 2 (Dr. Jones) added.
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 3
 * Enter Patient ID requesting appointment: 103
 * Patient 103 (Bob) added to waiting list. (Assuming patient 103 exists and doctors 1 & 2 are busy)
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 4
 * Enter Doctor ID finishing appointment: 1
 * Doctor 1 (Dr. Smith) is now available.
 * Waiting list is not empty. Scheduling next patient from waiting list.
 * Patient [Next Patient ID/Name from queue] scheduled with Doctor 1 (Dr. Smith).
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 5
 * --- System Status ---
 * Patients:
 * ID: 101, Name: Alice
 * ID: 103, Name: Bob
 * Doctors:
 * ID: 1, Name: Dr. Smith, Available: false
 * ID: 2, Name: Dr. Jones, Available: true
 * Waiting List:
 * [Patient ID/Name 1, Patient ID/Name 2, ...]
 * ---------------------
 * 
 * --- Hospital Appointment System ---
 * ... menu ...
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simplified hospital appointment management system demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` and `Doctor` classes are simple Plain Old Java Objects (POJOs) with private fields (`id`, `name`, `isAvailable`) and public getters, demonstrating encapsulation. The `Doctor` class also has a `setAvailable` method to change its state. `toString()` methods provide convenient string representations.
 *     *   `AppointmentSystem` is the core class managing the system state. It holds the `List` of patients, the `List` of doctors, and the `Queue` (implemented by `LinkedList`) representing the waiting list. It contains the logic for adding entities, finding entities, requesting appointments, finishing appointments, and displaying status.
 *     *   `HospitalSystem` is the main class containing the `main` method. It sets up the `Scanner` and `AppointmentSystem`, presents the menu, reads user input, and delegates actions to the `AppointmentSystem`.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue`: The `waitingList` is declared as `Queue<Patient>` and initialized with `new LinkedList<>()`. `offer()` is used to add patients to the queue, and `poll()` is used to retrieve and remove the next patient from the queue.
 *     *   `ArrayList`: `patients` and `doctors` are initialized as `new ArrayList<>()`. Elements are added using `add()`.
 *     *   `List interface`: `patients` and `doctors` are declared using the `List` interface type (`List<Patient>`, `List<Doctor>`), promoting good practice by programming to the interface rather than the specific implementation.
 *     *   `Scanner`: A `Scanner` object is created in `main` to read input from `System.in`. It's passed to helper methods to get specific inputs. `nextInt()` and `nextLine()` are used. Input validation for integers using `InputMismatchException` is included in helper methods.
 *     *   `Switch statement`: The `switch` statement in the `main` method handles the user's menu choice, directing execution to the appropriate action method.
 *     *   `System.err`: Used in the `main` method's `default` case for invalid menu choices, and within action methods to report specific errors like patient/doctor not found or invalid input format.
 *     *   `System.out`: Used for printing the menu, prompts, success messages, and the system status display.
 *     *   `Class-wide exception handling with try-catch`: The main `while` loop in the `main` method is wrapped in a `try-catch(Exception e)` block. This demonstrates a top-level catch for any unexpected exceptions that might propagate up, fulfilling the requirement for class-wide handling. A `finally` block ensures the `Scanner` is closed. More specific `try-catch` blocks are also used within helper methods (like `addPatientAction`) to handle `InputMismatchException` during input reading.
 * 
 * 3.  **Logic Implementation:**
 *     *   Adding patients/doctors is straightforward list addition.
 *     *   `requestAppointment`: Searches for an available doctor. If found, updates the doctor's status. If not, adds the patient to the queue. It includes checks for patient existence and if the system has any doctors.
 *     *   `finishAppointment`: Finds the doctor, sets them available. If the waiting list is not empty, it immediately takes the next patient from the queue (`poll()`) and schedules them with the newly available doctor (setting the doctor back to unavailable). It includes checks for doctor existence and if the doctor was already available.
 *     *   `displayStatus`: Iterates through the lists and queue, printing the details of each entity.
 * 
 * 4.  **Best Practices:**
 *     *   **Encapsulation:** Achieved by making fields private and providing public accessors/mutators where necessary.
 *     *   **Meaningful Names:** Classes, variables (`waitingList`, `availableDoctor`), and methods (`requestAppointment`, `findPatientById`) have descriptive names.
 *     *   **Comments and Documentation:** Javadoc comments explain the purpose of classes, methods, and parameters. Inline comments clarify specific logic points.
 *     *   **Input Validation:** Checks are performed to see if entered patient/doctor IDs exist before attempting operations. `InputMismatchException` is caught when reading integer inputs.
 *     *   **Error Handling:** `System.err` is used for error messages. The `try-catch` block in `main` provides a safety net. Specific error messages are returned or printed for different failure conditions.
 *     *   **Clean Code:** The logic is broken down into smaller, focused methods (`addPatientAction`, `requestAppointmentAction`, etc.) within the `HospitalSystem` class, making the `main` method clean and readable. The `AppointmentSystem` class separates the core business logic from the user interface handling.
 * 
 * This solution effectively integrates all the required Java components into a practical, albeit simplified, system, demonstrating a solid understanding of data structures, object-oriented principles, input/output, control flow, and exception handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a Patient in the Hospital Appointment System.
 */
class Patient {
    private int id;
    private String name;

    /**
     * Constructs a new Patient.
     * @param id The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }
}

/**
 * Represents a Doctor in the Hospital Appointment System.
 */
class Doctor {
    private int id;
    private String name;
    private boolean isAvailable;

    /**
     * Constructs a new Doctor.
     * Doctors are initially available.
     * @param id The unique ID of the doctor.
     * @param name The name of the doctor.
     */
    public Doctor(int id, String name) {
        this.id = id;
        this.name = name;
        this.isAvailable = true; // Doctors are available by default
    }

    /**
     * Gets the doctor's ID.
     * @return The doctor ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the doctor's name.
     * @return The doctor name.
     */
    public String getName() {
        return name;
    }

    /**
     * Checks if the doctor is currently available.
     * @return true if available, false otherwise.
     */
    public boolean isAvailable() {
        return isAvailable;
    }

    /**
     * Sets the doctor's availability status.
     * @param available The new availability status.
     */
    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Available: " + isAvailable;
    }
}

/**
 * Manages patients, doctors, appointments, and the waiting list.
 */
class AppointmentSystem {
    private List<Patient> patients;
    private List<Doctor> doctors;
    private Queue<Patient> waitingList;

    /**
     * Constructs a new AppointmentSystem.
     */
    public AppointmentSystem() {
        patients = new ArrayList<>();
        doctors = new ArrayList<>();
        waitingList = new LinkedList<>(); // LinkedList implements Queue
    }

    /**
     * Adds a new patient to the system.
     * @param patient The patient to add.
     */
    public void addPatient(Patient patient) {
        patients.add(patient);
    }

    /**
     * Adds a new doctor to the system.
     * @param doctor The doctor to add.
     */
    public void addDoctor(Doctor doctor) {
        doctors.add(doctor);
    }

    /**
     * Finds a patient by their ID.
     * @param id The ID of the patient to find.
     * @return The Patient object if found, null otherwise.
     */
    public Patient findPatientById(int id) {
        for (Patient patient : patients) {
            if (patient.getId() == id) {
                return patient;
            }
        }
        return null;
    }

    /**
     * Finds a doctor by their ID.
     * @param id The ID of the doctor to find.
     * @return The Doctor object if found, null otherwise.
     */
    public Doctor findDoctorById(int id) {
        for (Doctor doctor : doctors) {
            if (doctor.getId() == id) {
                return doctor;
            }
        }
        return null;
    }

    /**
     * Finds the first available doctor.
     * @return The available Doctor object if found, null otherwise.
     */
    private Doctor findAvailableDoctor() {
        for (Doctor doctor : doctors) {
            if (doctor.isAvailable()) {
                return doctor;
            }
        }
        return null;
    }

    /**
     * Handles a patient's request for an appointment.
     * Checks for available doctors or adds the patient to the waiting list.
     * @param patientId The ID of the patient requesting the appointment.
     * @return A message indicating the outcome of the request.
     */
    public String requestAppointment(int patientId) {
        Patient patient = findPatientById(patientId);
        if (patient == null) {
            return "Error: Patient with ID " + patientId + " not found.";
        }

        if (doctors.isEmpty()) {
             return "Error: No doctors available in the system.";
        }

        Doctor availableDoctor = findAvailableDoctor();

        if (availableDoctor != null) {
            availableDoctor.setAvailable(false); // Doctor is now busy
            return "Patient " + patient.getId() + " (" + patient.getName() + ") scheduled with Doctor " +
                   availableDoctor.getId() + " (" + availableDoctor.getName() + ").";
        } else {
            // Check if patient is already in waiting list (optional but good practice)
            if (waitingList.contains(patient)) {
                 return "Patient " + patient.getId() + " (" + patient.getName() + ") is already in the waiting list.";
            }
            waitingList.offer(patient); // Add to the end of the queue
            return "No doctors available. Patient " + patient.getId() + " (" + patient.getName() + ") added to waiting list.";
        }
    }

    /**
     * Handles a doctor finishing an appointment.
     * Makes the doctor available and schedules the next patient from the waiting list if any.
     * @param doctorId The ID of the doctor finishing the appointment.
     * @return A message indicating the outcome.
     */
    public String finishAppointment(int doctorId) {
        Doctor doctor = findDoctorById(doctorId);
        if (doctor == null) {
            return "Error: Doctor with ID " + doctorId + " not found.";
        }

        if (doctor.isAvailable()) {
            return "Doctor " + doctor.getId() + " (" + doctor.getName() + ") is already available.";
        }

        doctor.setAvailable(true); // Doctor is now available
        StringBuilder result = new StringBuilder("Doctor " + doctor.getId() + " (" + doctor.getName() + ") is now available.");

        if (!waitingList.isEmpty()) {
            Patient nextPatient = waitingList.poll(); // Get and remove the next patient from queue
            // Immediately schedule this patient with the now available doctor
            doctor.setAvailable(false); // Doctor becomes busy again
            result.append("\nWaiting list is not empty. Scheduling next patient from waiting list.");
            result.append("\nPatient ").append(nextPatient.getId()).append(" (").append(nextPatient.getName())
                  .append(") scheduled with Doctor ").append(doctor.getId()).append(" (").append(doctor.getName()).append(").");
        } else {
            result.append("\nWaiting list is empty. Doctor remains available.");
        }
        return result.toString();
    }

    /**
     * Displays the current status of the system: patients, doctors, and waiting list.
     */
    public void displayStatus() {
        System.out.println("--- System Status ---");
        System.out.println("Patients:");
        if (patients.isEmpty()) {
            System.out.println("  (No patients in system)");
        } else {
            for (Patient patient : patients) {
                System.out.println("  " + patient);
            }
        }

        System.out.println("Doctors:");
        if (doctors.isEmpty()) {
            System.out.println("  (No doctors in system)");
        } else {
            for (Doctor doctor : doctors) {
                System.out.println("  " + doctor);
            }
        }

        System.out.println("Waiting List:");
        if (waitingList.isEmpty()) {
            System.out.println("  (Waiting list is empty)");
        } else {
            // Iterate through the queue without removing elements
            waitingList.forEach(patient -> System.out.println("  " + patient.getName() + " (ID: " + patient.getId() + ")"));
        }
        System.out.println("---------------------");
    }
}

/**
 * Main class to run the Hospital Appointment System.
 * Handles user interaction via a menu.
 */
public class HospitalSystem {

    private static final int ADD_PATIENT = 1;
    private static final int ADD_DOCTOR = 2;
    private static final int REQUEST_APPOINTMENT = 3;
    private static final int FINISH_APPOINTMENT = 4;
    private static final int DISPLAY_STATUS = 5;
    private static final int EXIT = 6;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AppointmentSystem system = new AppointmentSystem();

        System.out.println("--- Hospital Appointment System ---");

        // Class-wide exception handling for the main loop
        try {
            while (true) {
                printMenu();
                int choice = getUserChoice(scanner);

                switch (choice) {
                    case ADD_PATIENT:
                        addPatientAction(scanner, system);
                        break;
                    case ADD_DOCTOR:
                        addDoctorAction(scanner, system);
                        break;
                    case REQUEST_APPOINTMENT:
                        requestAppointmentAction(scanner, system);
                        break;
                    case FINISH_APPOINTMENT:
                        finishAppointmentAction(scanner, system);
                        break;
                    case DISPLAY_STATUS:
                        system.displayStatus();
                        break;
                    case EXIT:
                        System.out.println("Exiting system.");
                        scanner.close();
                        return; // Exit the program
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
                System.out.println(); // Add a newline for better formatting
            }
        } catch (Exception e) {
            // Class-wide catch for any unexpected errors
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed even if an exception occurs
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Menu ---");
        System.out.println(ADD_PATIENT + ". Add Patient");
        System.out.println(ADD_DOCTOR + ". Add Doctor");
        System.out.println(REQUEST_APPOINTMENT + ". Request Appointment");
        System.out.println(FINISH_APPOINTMENT + ". Finish Appointment");
        System.out.println(DISPLAY_STATUS + ". Display Status");
        System.out.println(EXIT + ". Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Gets a valid integer choice from the user. Handles non-integer input.
     * @param scanner The Scanner object for reading input.
     * @return The user's valid integer choice.
     */
    private static int getUserChoice(Scanner scanner) {
        while (true) {
            try {
                return scanner.nextInt();
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input
                System.out.print("Enter your choice: "); // Prompt again
            }
        }
    }

    /**
     * Handles the action for adding a new patient.
     * @param scanner The Scanner object.
     * @param system The AppointmentSystem instance.
     */
    private static void addPatientAction(Scanner scanner, AppointmentSystem system) {
        try {
            System.out.print("Enter Patient ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            System.out.print("Enter Patient Name: ");
            String name = scanner.nextLine();

            if (system.findPatientById(id) != null) {
                System.err.println("Error: Patient with ID " + id + " already exists.");
            } else {
                Patient newPatient = new Patient(id, name);
                system.addPatient(newPatient);
                System.out.println("Patient " + id + " (" + name + ") added.");
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid integer for ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    /**
     * Handles the action for adding a new doctor.
     * @param scanner The Scanner object.
     * @param system The AppointmentSystem instance.
     */
    private static void addDoctorAction(Scanner scanner, AppointmentSystem system) {
         try {
            System.out.print("Enter Doctor ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            System.out.print("Enter Doctor Name: ");
            String name = scanner.nextLine();

            if (system.findDoctorById(id) != null) {
                System.err.println("Error: Doctor with ID " + id + " already exists.");
            } else {
                Doctor newDoctor = new Doctor(id, name);
                system.addDoctor(newDoctor);
                System.out.println("Doctor " + id + " (" + name + ") added.");
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid integer for ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    /**
     * Handles the action for requesting an appointment.
     * @param scanner The Scanner object.
     * @param system The AppointmentSystem instance.
     */
    private static void requestAppointmentAction(Scanner scanner, AppointmentSystem system) {
        try {
            System.out.print("Enter Patient ID requesting appointment: ");
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            String result = system.requestAppointment(patientId);
            // Check if the result is an error message (starts with "Error:")
            if (result.startsWith("Error:")) {
                System.err.println(result);
            } else {
                System.out.println(result);
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid integer for Patient ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    /**
     * Handles the action for a doctor finishing an appointment.
     * @param scanner The Scanner object.
     * @param system The AppointmentSystem instance.
     */
    private static void finishAppointmentAction(Scanner scanner, AppointmentSystem system) {
         try {
            System.out.print("Enter Doctor ID finishing appointment: ");
            int doctorId = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            String result = system.finishAppointment(doctorId);
             // Check if the result is an error message (starts with "Error:")
            if (result.startsWith("Error:")) {
                System.err.println(result);
            } else {
                System.out.println(result);
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid integer for Doctor ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }
}
