/*
 * Exam Question #440
 * Generated on: 2025-05-11 23:11:33
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Event Registration System
 * 
 * **Objective:**
 * 
 * Design and implement a simple Event Registration System in Java. The system should manage attendees for an event with a limited capacity. If the event is full, attendees should be placed on a waiting list.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Functionality:**
 *     *   The system must manage a fixed event capacity.
 *     *   Attendees can register for the event.
 *     *   If capacity is available, the attendee is added to the list of registered attendees.
 *     *   If the event is full, the attendee is added to a waiting list.
 *     *   The system must provide options to view the list of registered attendees and the waiting list.
 *     *   The system should run in a loop presenting a menu until the user chooses to exit.
 * 
 * 2.  **Required Java Components:** Your solution *must* use and demonstrate the practical application of *all* the following Java components:
 *     *   `java.util.Queue`: To manage the waiting list (First-In, First-Out).
 *     *   `java.util.ArrayList`: To store the list of registered attendees.
 *     *   `java.util.List`: Declare the registered attendees list using the `List` interface type.
 *     *   `java.util.Scanner`: To read user input from the console (menu choices, attendee names).
 *     *   `switch` statement: To handle the different menu options.
 *     *   `System.err`: To output error messages (e.g., invalid input, empty name).
 *     *   `System.out`: To output normal messages, prompts, and display lists.
 *     *   Class-wide exception handling with `try-catch` blocks: Implement exception handling to gracefully manage potential errors during the program's execution, particularly around user input parsing or unexpected issues.
 * 
 * 3.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadocs where applicable).
 *     *   Implement input validation (e.g., attendee name should not be empty).
 *     *   Provide clear error messages using `System.err`.
 *     *   Structure the code logically.
 * 
 * **System Flow (Menu Options):**
 * 
 * The program should present a menu with the following options:
 * 
 * 1.  Add Attendee
 * 2.  View Registered Attendees
 * 3.  View Waiting List
 * 4.  Exit
 * 
 * The user selects an option by entering the corresponding number.
 * 
 * **Input:**
 * 
 * *   Menu choice (an integer).
 * *   Attendee name (a string).
 * 
 * **Output:**
 * 
 * *   Menu display and prompts using `System.out`.
 * *   Confirmation messages (e.g., "Attendee added to registered list", "Attendee added to waiting list") using `System.out`.
 * *   Lists of attendees using `System.out`.
 * *   Error messages (e.g., "Invalid menu choice", "Attendee name cannot be empty", "Error processing input") using `System.err`.
 * 
 * **Example Interaction (Partial):**
 * 
 * ```
 * --- Event Registration Menu ---
 * 1. Add Attendee
 * 2. View Registered Attendees
 * 3. View Waiting List
 * 4. Exit
 * Enter your choice: 1
 * Enter attendee name: Alice
 * Alice registered successfully!
 * 
 * --- Event Registration Menu ---
 * 1. Add Attendee
 * ... (Continue adding until capacity is reached)
 * 
 * --- Event Registration Menu ---
 * ...
 * Enter your choice: 1
 * Enter attendee name: Charlie
 * Event is full. Charlie added to waiting list.
 * 
 * --- Event Registration Menu ---
 * ...
 * Enter your choice: 2
 * --- Registered Attendees ---
 * Alice
 * Bob
 * ... (List all registered)
 * 
 * --- Event Registration Menu ---
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Charlie
 * David
 * ... (List all on waiting list)
 * 
 * --- Event Registration Menu ---
 * ...
 * Enter your choice: 4
 * Exiting Event Registration System.
 * ```
 * 
 * **Constraints:**
 * 
 * *   Choose a reasonable fixed capacity for the event (e.g., 5 or 10).
 * *   The waiting list functionality does *not* need to automatically move people from the waiting list to registered if spots open up. Simply adding to the waiting list when full is sufficient.
 * 
 * **Deliverables:**
 * 
 * A single Java file containing the complete `EventManager` class (or similar name) with a `main` method to run the system.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness of the implementation according to the requirements.
 * *   Effective and correct usage of ALL specified Java components.
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Clean code structure.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * This solution implements a simple Event Registration System demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure and Encapsulation:**
 *     *   A single class `EventManager` encapsulates all the data and logic related to managing the event.
 *     *   Fields like `eventCapacity`, `registeredAttendees`, and `waitingList` are declared `private` to protect their internal state, adhering to encapsulation principles.
 *     *   Public methods like `run()` provide the interface for interacting with the system. Helper methods like `addAttendee()`, `displayRegisteredAttendees()`, `displayWaitingList()`, and `printMenu()` are private as they are internal operations.
 * 
 * 2.  **Required Java Components Usage:**
 *     *   `java.util.Queue`: The `waitingList` is declared as a `Queue<String>`. We use `java.util.LinkedList` as a concrete implementation because `LinkedList` implements the `Queue` interface and is suitable for this purpose. `offer()` is used to add elements to the queue.
 *     *   `java.util.ArrayList`: The `registeredAttendees` list is instantiated as an `ArrayList<String>`.
 *     *   `java.util.List`: The `registeredAttendees` list is declared using the `List<String>` interface type (`List<String> registeredAttendees = new ArrayList<>();`). This demonstrates programming to an interface.
 *     *   `java.util.Scanner`: A `Scanner` object (`scanner`) is used to read user input from `System.in`. We use `scanner.nextLine()` to read entire lines, which is safer than `nextInt()` when mixing line-based and token-based input and helps handle non-integer inputs more robustly.
 *     *   `switch` statement: The `switch (choice)` block in the `run()` method handles the user's menu selection, directing execution to the appropriate method based on the integer input.
 *     *   `System.err`: Used for outputting error messages, such as invalid menu choices, empty attendee names, and exceptions caught during execution. This visually distinguishes errors from normal program output.
 *     *   `System.out`: Used for all normal program output, including the menu, prompts, confirmation messages, and displaying the contents of the registered list and waiting list.
 *     *   `try-catch` blocks:
 *         *   A large `try-catch (Exception e)` block wraps the main `while` loop in the `run()` method. This serves as the "class-wide" or main operational exception handler, catching any unexpected runtime exceptions that might occur during the execution of the menu loop or the called methods.
 *         *   A specific `try-catch (NumberFormatException e)` is used when parsing the user's menu choice from a string to an integer, handling cases where the user enters non-numeric input.
 *         *   The `main` method also includes a `try-catch` block to handle potential `IllegalArgumentException` if the `EventManager` is constructed with an invalid capacity, or any other startup errors.
 * 
 * 3.  **Logic and Flow:**
 *     *   The `EventManager` is initialized with a fixed capacity.
 *     *   `addAttendee()` checks if `registeredAttendees.size()` is less than `eventCapacity`. If yes, the attendee is added to the `ArrayList`. If no, the attendee is added to the `waitingList` `Queue` using `offer()`.
 *     *   `displayRegisteredAttendees()` iterates through the `ArrayList` to print registered names.
 *     *   `displayWaitingList()` iterates through the `Queue` to print names on the waiting list. Iterating directly over the `Queue` allows viewing elements without removing them.
 *     *   The `run()` method contains the main loop, printing the menu, reading input, and using the `switch` statement to call the appropriate handler method.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   Attendee name input is validated (`if (name.isEmpty())`). An error message is printed to `System.err`, and the method returns, preventing an empty name from being added.
 *     *   The `NumberFormatException` catch block handles non-integer input for the menu choice, printing an error to `System.err` and continuing the loop.
 *     *   The main `try-catch` in `run()` catches broader exceptions, printing a generic error message and the stack trace to `System.err`.
 *     *   The constructor validates the capacity input.
 * 
 * 5.  **Best Practices:**
 *     *   Meaningful names are used (`registeredAttendees`, `waitingList`, `addAttendee`, `printMenu`, etc.).
 *     *   Comments and basic Javadocs explain the purpose of the class and methods.
 *     *   Input validation is performed before processing.
 *     *   Error messages are distinct using `System.err`.
 *     *   The `Scanner` is closed in a `finally` block (within the main `try-catch` in `run()`) to release system resources.
 * 
 * This solution effectively combines the required Java components to create a functional and robust (within the scope of the problem) application that simulates a real-world event registration scenario.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Manages attendee registration for an event with limited capacity.
 * Handles registered attendees and a waiting list.
 */
public class EventManager {

    private final int eventCapacity;
    private final List<String> registeredAttendees;
    private final Queue<String> waitingList;
    private final Scanner scanner;

    /**
     * Constructs an EventManager with a specified capacity.
     *
     * @param capacity The maximum number of attendees for the event.
     * @throws IllegalArgumentException if capacity is less than or equal to 0.
     */
    public EventManager(int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Event capacity must be greater than 0.");
        }
        this.eventCapacity = capacity;
        this.registeredAttendees = new ArrayList<>(); // Use ArrayList, declared as List
        this.waitingList = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
        System.out.println("Event Manager initialized with capacity: " + eventCapacity);
    }

    /**
     * Runs the main event management loop, presenting a menu to the user.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;
        // Class-wide exception handling wrapping the main loop
        try {
            while (running) {
                printMenu();
                String choiceStr = scanner.nextLine(); // Read input as line to handle non-integer input gracefully

                int choice = -1;
                try {
                    choice = Integer.parseInt(choiceStr);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration
                }

                // Using switch statement for menu control
                switch (choice) {
                    case 1:
                        addAttendee();
                        break;
                    case 2:
                        displayRegisteredAttendees();
                        break;
                    case 3:
                        displayWaitingList();
                        break;
                    case 4:
                        running = false;
                        System.out.println("Exiting Event Registration System.");
                        break;
                    default:
                        System.err.println("Invalid menu choice. Please enter a number between 1 and 4.");
                }
                System.out.println(); // Add a newline for better readability between interactions
            }
        } catch (Exception e) {
            // Generic catch for unexpected errors during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prompts the user for attendee name and adds them to the event or waiting list.
     */
    private void addAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine().trim(); // Read name and trim whitespace

        // Input validation
        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
            return; // Exit method if name is invalid
        }

        // Check if event is full
        if (registeredAttendees.size() < eventCapacity) {
            registeredAttendees.add(name);
            System.out.println(name + " registered successfully!");
        } else {
            waitingList.offer(name); // offer() is generally preferred for queues as it doesn't throw exception if full (though LinkedList queue is unbounded)
            System.out.println("Event is full. " + name + " added to waiting list.");
        }
    }

    /**
     * Displays the list of registered attendees.
     */
    private void displayRegisteredAttendees() {
        System.out.println("--- Registered Attendees ---");
        if (registeredAttendees.isEmpty()) {
            System.out.println("No attendees registered yet.");
        } else {
            for (int i = 0; i < registeredAttendees.size(); i++) {
                System.out.println((i + 1) + ". " + registeredAttendees.get(i));
            }
        }
    }

    /**
     * Displays the list of attendees on the waiting list.
     */
    private void displayWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            int i = 0;
            for (String attendee : waitingList) {
                System.out.println((i + 1) + ". " + attendee);
                i++;
            }
            // Alternatively, convert to Array/List:
            // List<String> waitingListAsList = new ArrayList<>(waitingList);
            // for (int i = 0; i < waitingListAsList.size(); i++) {
            //     System.out.println((i + 1) + ". " + waitingListAsList.get(i));
            // }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Event Registration Menu ---");
        System.out.println("1. Add Attendee");
        System.out.println("2. View Registered Attendees");
        System.out.println("3. View Waiting List");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Main method to start the Event Registration System.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        try {
            // Set a fixed capacity for the event
            int capacity = 5;
            EventManager manager = new EventManager(capacity);
            manager.run();
        } catch (IllegalArgumentException e) {
            System.err.println("System initialization failed: " + e.getMessage());
        } catch (Exception e) {
             // Catch any unexpected exception during manager creation or initial setup
            System.err.println("An unexpected error occurred during system startup: " + e.getMessage());
            e.printStackTrace(System.err);
        }
    }
}
