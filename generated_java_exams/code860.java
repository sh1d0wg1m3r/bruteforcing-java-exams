/*
 * Exam Question #860
 * Generated on: 2025-05-12 16:51:39
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Event Guest Management System
 * 
 * **Objective:** Design and implement a command-line application for managing guest registrations and check-ins for a simple event. This task requires demonstrating proficiency in using core Java collections, input handling, control flow, and exception handling.
 * 
 * **Scenario:** You are building a system for an event organizer. Guests can register before the event, and then they check in upon arrival. The system needs to maintain a list of all registered guests and a queue for guests waiting to check in.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of *all* registered guests using a `java.util.List` variable initialized with a `java.util.ArrayList`.
 *     *   Maintain a queue of guests waiting to check in using a `java.util.Queue` variable initialized with a suitable implementation (e.g., `LinkedList` or `ArrayDeque`).
 * 2.  **Guest Representation:** Create a simple `Guest` class with private fields for `id` (an integer) and `name` (a String). Include a constructor and public getter methods for these fields.
 * 3.  **Core Functionality (Implemented in an `EventManager` class):**
 *     *   `addGuest(String name)`: Registers a new guest. Assigns a unique, sequential ID starting from 1. Adds the new `Guest` object to the list of registered guests AND to the check-in queue.
 *     *   `checkInNextGuest()`: Processes the next guest in the check-in queue. Removes the guest from the queue and reports their check-in. If the queue is empty, report an error.
 *     *   `listRegisteredGuests()`: Displays all guests currently in the registered guest list with their ID and name.
 *     *   `viewCheckInQueue()`: Displays the guests currently waiting in the check-in queue (without removing them), showing their ID and name.
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Guest
 *         2.  Check In Next Guest
 *         3.  List All Registered Guests
 *         4.  View Check-in Queue
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and list/queue contents.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, empty queue for check-in).
 * 6.  **Exception Handling:** Implement class-wide exception handling within the `EventManager` class's main execution loop (`run` method or similar) using a `try-catch` block to catch potential runtime errors (e.g., issues with input, unexpected program state) and report them gracefully using `System.err`.
 * 7.  **Best Practices:**
 *     *   Implement proper encapsulation (private fields, public methods) in the `Guest` and `EventManager` classes.
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include comments and basic documentation (Javadoc) where appropriate.
 *     *   Validate user input where necessary (e.g., ensure guest name is not empty).
 * 
 * **Expected Output Structure:**
 * 
 * The program should run interactively, presenting the menu, accepting input, and providing output based on the selected option. Error messages should be clearly distinguishable using `System.err`.
 * 
 * ```
 * --- Event Guest Management ---
 * 1. Add New Guest
 * 2. Check In Next Guest
 * 3. List All Registered Guests
 * 4. View Check-in Queue
 * 5. Exit
 * Enter your choice: 1
 * Enter guest name: Alice
 * Guest #1: Alice registered and added to check-in queue.
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 1
 * Enter guest name: Bob
 * Guest #2: Bob registered and added to check-in queue.
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 4
 * Check-in Queue:
 * #1: Alice
 * #2: Bob
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 2
 * Guest #1: Alice checked in.
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 4
 * Check-in Queue:
 * #2: Bob
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 2
 * Guest #2: Bob checked in.
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 2
 * Error: Check-in queue is empty.
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 3
 * Registered Guests:
 * #1: Alice
 * #2: Bob
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: invalid_input
 * Error: Invalid input. Please enter a number between 1 and 5.
 * An unexpected error occurred: For input string: "invalid_input" (or similar depending on exception)
 * (Stack trace printed to System.err)
 * 
 * --- Event Guest Management ---
 * ...
 * Enter your choice: 5
 * Exiting program.
 * ```
 * 
 * **Evaluation:** Your solution will be evaluated on its correctness, adherence to all requirements (especially the use of specified components), implementation of best practices, and robustness in handling input and errors.
 *
 * EXPLANATION:
 * This solution implements the Event Guest Management System as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`Guest` Class:** A simple Plain Old Java Object (POJO) representing a guest. It has private fields (`id`, `name`) and public getters, ensuring proper encapsulation. The `toString()` method provides a convenient way to print guest information.
 * 2.  **`EventManager` Class:** This is the core class managing the event data and logic.
 *     *   **Data Structures:**
 *         *   `registeredGuests`: Declared as `List<Guest>` and initialized with `new ArrayList<>()`. This fulfills the requirement of using both `List` interface and `ArrayList` implementation. It stores all guests ever registered.
 *         *   `checkInQueue`: Declared as `Queue<Guest>` and initialized with `new LinkedList<>()`. This fulfills the requirement of using `Queue` and a suitable implementation (`LinkedList` implements `Queue`). This queue holds guests waiting to be checked in, processed in FIFO (First-In, First-Out) order.
 *     *   **Encapsulation:** Both data structures and the `nextGuestId` counter are `private` fields. Operations are performed via public or private helper methods.
 *     *   **`run()` Method:** This is the main execution loop of the `EventManager`.
 *         *   It contains the `while(running)` loop that keeps the application alive until the user chooses to exit.
 *         *   It displays the menu using `System.out`.
 *         *   It reads user input using `Scanner`. Note the use of `scanner.nextLine()` to read the whole line and then `Integer.parseInt()` to convert it. This is a common pattern to avoid issues with `Scanner`'s different `next()` methods and line endings, especially when mixing reading numbers and strings.
 *         *   **Class-wide Exception Handling:** The entire `while` loop (or at least the part processing user input and calling methods) is wrapped in a `try-catch(Exception e)` block. This catches any unexpected exceptions that might occur during the program's execution, prints an error message and the stack trace to `System.err`, and prevents the program from crashing abruptly.
 *         *   A `finally` block ensures the `Scanner` is closed properly when the loop finishes or an exception occurs.
 *     *   **`switch` Statement:** Inside the `run()` method, a `switch` statement is used to direct the program flow based on the user's validated integer input, calling the appropriate handler methods (`handleAddGuest`, `handleCheckInNextGuest`, etc.). The `default` case handles invalid numeric input.
 *     *   **Core Logic Methods (`addGuest`, `checkInNextGuest`, `listRegisteredGuests`, `viewCheckInQueue`):** These methods encapsulate the specific operations on the data structures.
 *         *   `addGuest`: Creates a new `Guest` object with a unique ID, adds it to *both* the `registeredGuests` list and the `checkInQueue`.
 *         *   `checkInNextGuest`: Uses `checkInQueue.poll()` to get and remove the head of the queue. It checks if the result is `null` (meaning the queue was empty) and prints an appropriate message to `System.err` or `System.out`.
 *         *   `listRegisteredGuests`: Iterates through the `registeredGuests` `ArrayList` using an enhanced for loop and prints each guest using `System.out`.
 *         *   `viewCheckInQueue`: Iterates through the `checkInQueue` using an enhanced for loop. Iterating a `Queue` directly (or via its `iterator()`) does *not* remove elements, fulfilling the requirement to "view without removing". Prints each guest using `System.out`.
 *     *   **Helper Methods (`printMenu`, `handleAddGuest`, etc.):** These methods are used to structure the code, separating the core logic from the user interaction handling. They are often `private`.
 *     *   **Input Validation:** In `handleAddGuest`, the input name is checked using `isEmpty()` after trimming whitespace. An error is reported using `System.err` if the name is invalid.
 *     *   **Error Reporting:** `System.err` is used specifically for error messages, distinguishing them from normal program output (`System.out`). This includes invalid menu choices, empty queue conditions, and unexpected exceptions caught by the top-level `try-catch`.
 * 3.  **`main` Method:** Located in the `EventManager` class (or it could be in a separate main class), it simply creates an instance of `EventManager` and calls its `run()` method to start the application.
 * 
 * This solution effectively demonstrates the required Java components and concepts in a practical, interactive application.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a guest attending the event.
 */
class Guest {
    private final int id;
    private final String name;

    /**
     * Constructs a new Guest object.
     * @param id The unique ID of the guest.
     * @param name The name of the guest.
     */
    public Guest(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Gets the guest's ID.
     * @return The guest ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the guest's name.
     * @return The guest name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "#" + id + ": " + name;
    }
}

/**
 * Manages guest registration and check-in for an event.
 */
public class EventManager {

    // Use List interface type, initialized with ArrayList implementation
    private List<Guest> registeredGuests = new ArrayList<>();

    // Use Queue interface type, initialized with LinkedList implementation
    private Queue<Guest> checkInQueue = new LinkedList<>();

    private int nextGuestId = 1;
    private Scanner scanner = new Scanner(System.in);

    /**
     * Starts the event management application loop.
     * Contains the main menu, input handling, and class-wide exception handling.
     */
    public void run() {
        boolean running = true;
        System.out.println("--- Event Guest Management ---");

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                // Use hasNextLine() and nextLine() to avoid Scanner issues after exceptions
                if (!scanner.hasNextLine()) {
                    running = false; // Exit if no more input
                    continue;
                }

                String input = scanner.nextLine();
                int choice = -1;
                try {
                    choice = Integer.parseInt(input);
                } catch (NumberFormatException e) {
                    // Handled below in the switch default case
                }

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        handleAddGuest();
                        break;
                    case 2:
                        handleCheckInNextGuest();
                        break;
                    case 3:
                        handleListRegisteredGuests();
                        break;
                    case 4:
                        handleViewCheckInQueue();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting program.");
                        break;
                    default:
                        System.err.println("Error: Invalid input. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Optional: print stack trace for debugging
             e.printStackTrace(System.err);
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Event Guest Management ---");
        System.out.println("1. Add New Guest");
        System.out.println("2. Check In Next Guest");
        System.out.println("3. List All Registered Guests");
        System.out.println("4. View Check-in Queue");
        System.out.println("5. Exit");
    }

    /**
     * Handles the process of adding a new guest based on user input.
     */
    private void handleAddGuest() {
        System.out.print("Enter guest name: ");
        String name = scanner.nextLine().trim(); // Read name and trim whitespace

        // Input validation for guest name
        if (name.isEmpty()) {
            System.err.println("Error: Guest name cannot be empty.");
            return; // Stop the operation
        }

        addGuest(name); // Call the core logic method
    }

    /**
     * Adds a new guest to the system.
     * @param name The name of the guest.
     */
    private void addGuest(String name) {
        Guest newGuest = new Guest(nextGuestId++, name);
        registeredGuests.add(newGuest); // Add to the list of all registered guests
        checkInQueue.offer(newGuest); // Add to the check-in queue

        System.out.println("Guest " + newGuest + " registered and added to check-in queue.");
    }

    /**
     * Handles the process of checking in the next guest from the queue.
     */
    private void handleCheckInNextGuest() {
        checkInNextGuest(); // Call the core logic method
    }

    /**
     * Checks in the next guest from the queue.
     */
    private void checkInNextGuest() {
        Guest guestToCheckIn = checkInQueue.poll(); // Retrieve and remove the head of the queue

        if (guestToCheckIn == null) {
            System.err.println("Error: Check-in queue is empty. No guests to check in.");
        } else {
            System.out.println("Guest " + guestToCheckIn + " checked in.");
        }
    }

    /**
     * Handles the display of all registered guests.
     */
    private void handleListRegisteredGuests() {
        listRegisteredGuests(); // Call the core logic method
    }

    /**
     * Lists all guests that have been registered.
     */
    private void listRegisteredGuests() {
        System.out.println("Registered Guests:");
        if (registeredGuests.isEmpty()) {
            System.out.println("No guests registered yet.");
        } else {
            // Iterate through the List and print each guest
            for (Guest guest : registeredGuests) {
                System.out.println(guest);
            }
        }
    }

    /**
     * Handles the display of guests currently waiting in the check-in queue.
     */
    private void handleViewCheckInQueue() {
        viewCheckInQueue(); // Call the core logic method
    }

    /**
     * Views the guests currently in the check-in queue without removing them.
     */
    private void viewCheckInQueue() {
        System.out.println("Check-in Queue:");
        if (checkInQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the Queue without removing elements
            for (Guest guest : checkInQueue) {
                System.out.println(guest);
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        EventManager manager = new EventManager();
        manager.run();
    }
}
