/*
 * Exam Question #671
 * Generated on: 2025-05-12 16:23:13
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Technical Support Ticket Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified technical support ticket processing system. The system should allow users to add new support tickets, process the next ticket in line, view pending tickets, and view tickets that have already been processed. The system operates on a queue-based model for processing tickets.
 * 
 * **Requirements:**
 * 
 * 1.  **`SupportTicket` Class:**
 *     *   Create a class named `SupportTicket` to represent a single support ticket.
 *     *   It must have private fields: `ticketId` (int), `description` (String), and `priority` (int).
 *     *   Implement a constructor to initialize these fields.
 *     *   Provide public getter methods for all fields.
 *     *   Override the `toString()` method to provide a clear string representation of the ticket (e.g., "Ticket ID: [id], Priority: [priority], Description: [description]").
 * 
 * 2.  **`TicketSystem` Class:**
 *     *   Create a class named `TicketSystem` to manage the collection of tickets.
 *     *   It must use a `java.util.Queue<SupportTicket>` named `pendingTickets` to store tickets awaiting processing. Use a concrete implementation like `java.util.LinkedList`.
 *     *   It must use a `java.util.List<SupportTicket>` named `processedTickets` to store tickets that have been processed. Use a concrete implementation like `java.util.ArrayList`.
 *     *   Maintain a private integer field `nextTicketId` initialized to 1, used to assign unique IDs to new tickets.
 *     *   Implement the following public methods:
 *         *   `addTicket(String description, int priority)`: Creates a new `SupportTicket` with the next available ID and adds it to the `pendingTickets` queue. Increment `nextTicketId`. Perform validation: description cannot be null or empty, priority must be positive. If validation fails, do not add the ticket and indicate the error (e.g., return false or throw an exception - for this exam, simply printing an error and not adding is sufficient).
 *         *   `processNextTicket()`: Removes the ticket at the front of the `pendingTickets` queue and adds it to the `processedTickets` list. Returns the processed `SupportTicket`. If the `pendingTickets` queue is empty, handle this gracefully (e.g., return `null` and print a message).
 *         *   `viewPendingTickets()`: Prints the details of all tickets currently in the `pendingTickets` queue without removing them. If the queue is empty, print a message indicating that.
 *         *   `viewProcessedTickets()`: Prints the details of all tickets currently in the `processedTickets` list. If the list is empty, print a message indicating that.
 *         *   `getPendingCount()`: Returns the number of tickets in the pending queue.
 *         *   `getProcessedCount()`: Returns the number of tickets in the processed list.
 * 
 * 3.  **Main Application Logic:**
 *     *   In the `main` method of a separate class (e.g., `SupportSystemApp`), create instances of `Scanner` and `TicketSystem`.
 *     *   Implement a command-line interface using a loop that presents a menu to the user:
 *         1.  Add New Ticket
 *         2.  Process Next Ticket
 *         3.  View Pending Tickets
 *         4.  View Processed Tickets
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   For "Add New Ticket": Prompt the user for the description and priority. Read input using `Scanner`. Call `ticketSystem.addTicket()`. Perform input validation (e.g., ensure priority is a valid integer).
 *     *   For "Process Next Ticket": Call `ticketSystem.processNextTicket()` and print the details of the processed ticket or a message if the queue was empty.
 *     *   For "View Pending Tickets": Call `ticketSystem.viewPendingTickets()`.
 *     *   For "View Processed Tickets": Call `ticketSystem.viewProcessedTickets()`.
 *     *   For "Exit": Terminate the program.
 *     *   **Error Handling:**
 *         *   Use `System.err` to print error messages (e.g., invalid menu choice, invalid input for priority, failed ticket addition).
 *         *   Implement class-wide exception handling using `try-catch` blocks in the `main` method to catch potential exceptions like `java.util.InputMismatchException` or `java.lang.NumberFormatException` when reading user input, or any other unexpected errors during execution. Print an appropriate error message using `System.err`.
 *     *   **Output:** Use `System.out` for all normal output (menu, prompts, ticket details, success messages).
 *     *   Ensure the `Scanner` is closed properly when the program exits.
 * 
 * 4.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation in the `SupportTicket` and `TicketSystem` classes.
 *     *   Program to interfaces where appropriate (e.g., using `List` and `Queue` types).
 * 
 * **Expected Output Structure (Example Interactions):**
 * 
 * ```
 * --- Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: My printer is not working
 * Enter priority (positive integer): 3
 * Ticket added successfully. Pending: 1, Processed: 0
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 1
 * Enter ticket description: Network connection issues
 * Enter priority (positive integer): 1
 * Ticket added successfully. Pending: 2, Processed: 0
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Tickets ---
 * Ticket ID: 1, Priority: 3, Description: My printer is not working
 * Ticket ID: 2, Priority: 1, Description: Network connection issues
 * Total pending: 2
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 2
 * Processing ticket: Ticket ID: 1, Priority: 3, Description: My printer is not working
 * Ticket processed. Pending: 1, Processed: 1
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 2
 * Processing ticket: Ticket ID: 2, Priority: 1, Description: Network connection issues
 * Ticket processed. Pending: 0, Processed: 2
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 2
 * No pending tickets to process. Pending: 0, Processed: 2
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 4
 * --- Processed Tickets ---
 * Ticket ID: 1, Priority: 3, Description: My printer is not working
 * Ticket ID: 2, Priority: 1, Description: Network connection issues
 * Total processed: 2
 * 
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: invalid
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 1
 * Enter ticket description: Another issue
 * Enter priority (positive integer): abc
 * Error: Invalid input for priority. Please enter a positive integer.
 * Ticket not added.
 * --- Ticket System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Ticket System.
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * 
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single technical support ticket.
 */
class SupportTicket {
    private int ticketId;
    private String description;
    private int priority; // Lower number indicates higher priority

    /**
     * Constructs a new SupportTicket.
     *
     * @param ticketId    The unique identifier for the ticket.
     * @param description The description of the issue.
     * @param priority    The priority level of the ticket.
     */
    public SupportTicket(int ticketId, String description, int priority) {
        this.ticketId = ticketId;
        this.description = description;
        this.priority = priority;
    }

    // --- Getters ---

    public int getTicketId() {
        return ticketId;
    }

    public String getDescription() {
        return description;
    }

    public int getPriority() {
        return priority;
    }

    /**
     * Provides a string representation of the SupportTicket.
     *
     * @return A formatted string describing the ticket.
     */
    @Override
    public String toString() {
        return "Ticket ID: " + ticketId +
               ", Priority: " + priority +
               ", Description: " + description;
    }
}

/**
 * Manages the queue of pending tickets and a list of processed tickets.
 */
class TicketSystem {
    private Queue<SupportTicket> pendingTickets;
    private List<SupportTicket> processedTickets;
    private int nextTicketId;

    /**
     * Constructs a new TicketSystem.
     * Initializes the pending and processed ticket collections.
     */
    public TicketSystem() {
        // Using LinkedList as a Queue implementation
        this.pendingTickets = new LinkedList<>();
        // Using ArrayList as a List implementation
        this.processedTickets = new ArrayList<>();
        this.nextTicketId = 1;
    }

    /**
     * Adds a new ticket to the pending queue after validation.
     *
     * @param description The description of the ticket issue.
     * @param priority    The priority level.
     * @return true if the ticket was added successfully, false otherwise.
     */
    public boolean addTicket(String description, int priority) {
        // --- Input Validation ---
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return false;
        }
        if (priority <= 0) {
            System.err.println("Error: Ticket priority must be a positive integer.");
            return false;
        }

        // Validation passed, create and add the ticket
        SupportTicket newTicket = new SupportTicket(nextTicketId, description.trim(), priority);
        pendingTickets.offer(newTicket); // offer() is preferred over add() for queues as it doesn't throw exception on capacity limits (though LinkedList doesn't have fixed capacity)
        nextTicketId++;
        System.out.println("Ticket added successfully.");
        return true;
    }

    /**
     * Processes the next ticket in the pending queue.
     * Moves the ticket from pending to processed list.
     *
     * @return The processed SupportTicket, or null if the queue is empty.
     */
    public SupportTicket processNextTicket() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        SupportTicket processedTicket = pendingTickets.poll();

        if (processedTicket != null) {
            processedTickets.add(processedTicket);
            System.out.println("Processing ticket: " + processedTicket);
            return processedTicket;
        } else {
            System.out.println("No pending tickets to process.");
            return null;
        }
    }

    /**
     * Prints all tickets currently in the pending queue.
     */
    public void viewPendingTickets() {
        System.out.println("--- Pending Tickets ---");
        if (pendingTickets.isEmpty()) {
            System.out.println("No pending tickets.");
        } else {
            // Iterate through the queue without removing elements
            for (SupportTicket ticket : pendingTickets) {
                System.out.println(ticket);
            }
        }
        System.out.println("Total pending: " + pendingTickets.size());
    }

    /**
     * Prints all tickets currently in the processed list.
     */
    public void viewProcessedTickets() {
        System.out.println("--- Processed Tickets ---");
        if (processedTickets.isEmpty()) {
            System.out.println("No tickets have been processed yet.");
        } else {
            // Iterate through the list
            for (SupportTicket ticket : processedTickets) {
                System.out.println(ticket);
            }
        }
        System.out.println("Total processed: " + processedTickets.size());
    }

    /**
     * Gets the number of tickets currently in the pending queue.
     * @return The pending ticket count.
     */
    public int getPendingCount() {
        return pendingTickets.size();
    }

    /**
     * Gets the number of tickets currently in the processed list.
     * @return The processed ticket count.
     */
    public int getProcessedCount() {
        return processedTickets.size();
    }
}

/**
 * Main application class for the Support Ticket System.
 * Handles user interaction and system flow.
 */
public class SupportSystemApp {

    public static void main(String[] args) {
        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            TicketSystem ticketSystem = new TicketSystem();
            boolean running = true;

            // --- Class-wide Exception Handling ---
            // Catching general Exception for simplicity in an exam context,
            // but more specific catches are preferred in production code.
            try {
                while (running) {
                    printMenu();
                    int choice = -1;

                    // --- Input Handling and Validation for Menu Choice ---
                    try {
                        System.out.print("Enter your choice: ");
                        choice = scanner.nextInt();
                    } catch (InputMismatchException e) {
                        System.err.println("Error: Invalid input. Please enter a number.");
                        scanner.next(); // Consume the invalid input
                        continue; // Skip to the next loop iteration
                    } finally {
                        scanner.nextLine(); // Consume the newline character left by nextInt()
                    }

                    // --- Switch Statement for Flow Control ---
                    switch (choice) {
                        case 1: // Add New Ticket
                            System.out.print("Enter ticket description: ");
                            String description = scanner.nextLine();

                            int priority = -1;
                            boolean validPriority = false;
                            while (!validPriority) {
                                System.out.print("Enter priority (positive integer): ");
                                try {
                                    priority = scanner.nextInt();
                                    validPriority = true; // If nextInt() succeeds, priority is a number
                                } catch (InputMismatchException e) {
                                    System.err.println("Error: Invalid input for priority. Please enter an integer.");
                                    scanner.next(); // Consume the invalid input
                                } finally {
                                    scanner.nextLine(); // Consume the newline
                                }
                            }
                            // addTicket performs validation for positive priority and non-empty description
                            ticketSystem.addTicket(description, priority);
                            System.out.println("Pending: " + ticketSystem.getPendingCount() + ", Processed: " + ticketSystem.getProcessedCount());
                            break;

                        case 2: // Process Next Ticket
                            ticketSystem.processNextTicket();
                            System.out.println("Pending: " + ticketSystem.getPendingCount() + ", Processed: " + ticketSystem.getProcessedCount());
                            break;

                        case 3: // View Pending Tickets
                            ticketSystem.viewPendingTickets();
                            break;

                        case 4: // View Processed Tickets
                            ticketSystem.viewProcessedTickets();
                            break;

                        case 5: // Exit
                            running = false;
                            System.out.println("Exiting Ticket System.");
                            break;

                        default: // Invalid Choice
                            System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                            break;
                    }
                    System.out.println(); // Add a newline for better readability between operations
                }
            } catch (Exception e) {
                // --- Class-wide Exception Handling Catch Block ---
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging in exam context
            }

        } // Scanner is automatically closed here by try-with-resources
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Ticket System Menu ---");
        System.out.println("1. Add New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Processed Tickets");
        System.out.println("5. Exit");
    }
}
