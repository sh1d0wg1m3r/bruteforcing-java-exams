/*
 * Exam Question #327
 * Generated on: 2025-05-11 22:55:55
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Topic:** Java Core Concepts - Data Structures, Control Flow, and Exception Handling
 * 
 * **Problem Title:** Technical Support Request Processing System
 * 
 * **Description:**
 * You are tasked with building a simple console-based system to manage technical support requests. The system should allow users to add new requests, process the oldest pending request, and view lists of pending and completed requests.
 * 
 * Each support request should be represented by an object containing:
 * *   A unique integer ID.
 * *   A string description of the problem.
 * *   An integer priority level (1-5, where 1 is the highest priority).
 * *   A string status ("Pending" or "Completed").
 * 
 * The system must provide a command-line menu interface for user interaction.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` implementation (like `LinkedList`) to manage incoming/pending support requests. Requests should be processed in First-In, First-Out (FIFO) order.
 *     *   Use a `java.util.ArrayList` to store support requests that have been processed and completed.
 *     *   Declare the variable holding the completed requests using the `java.util.List` interface type.
 * 2.  **User Input:** Utilize `java.util.Scanner` to read user input from the console for menu selection and request details (description, priority).
 * 3.  **Control Flow:** Implement the main menu navigation using a `switch` statement.
 * 4.  **Output Streams:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and the contents of the pending and completed request lists.
 *     *   Use `System.err` for displaying error messages, such as invalid input, invalid priority, or attempting to process a request when none are pending.
 * 5.  **Exception Handling:** Implement robust exception handling using `try-catch` blocks. This must include:
 *     *   Specific handling for `InputMismatchException` when reading numeric input with `Scanner`.
 *     *   A general `try-catch(Exception e)` block wrapping the main program loop to catch any unexpected runtime errors and print an error message to `System.err`.
 * 6.  **Object-Oriented Design:**
 *     *   Create a `SupportRequest` class with appropriate private fields (`id`, `description`, `priority`, `status`) and public methods (constructor, getters, a method to update status, and a `toString` method for display).
 *     *   Create a `SupportSystem` class that encapsulates the queue and list data structures and contains methods corresponding to the system's functionalities (add, process, view pending, view completed).
 * 7.  **Best Practices:**
 *     *   Ensure proper encapsulation by making fields private and providing public accessors/mutators where necessary.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Implement input validation (at least for request priority and menu choice).
 *     *   Handle edge cases gracefully (e.g., trying to process when the queue is empty).
 *     *   Ensure the `Scanner` resource is closed when the program exits.
 * 
 * **Functionality Details:**
 * 
 * *   **Add New Request (Menu Option 1):** Prompt the user for a request description and an integer priority (1-5). Validate that the priority is within the valid range. If valid, create a new `SupportRequest` object with a unique ID (starting from 1 and incrementing for each new request) and initial status "Pending". Add this new request to the end of the pending requests queue. Print a confirmation message to `System.out`. If the priority is invalid, print an error message to `System.err` and do not add the request.
 * *   **Process Next Request (Menu Option 2):** Attempt to remove the request at the front of the pending requests queue. If the queue is empty, print a message to `System.out` indicating no pending requests. If a request is retrieved, update its status to "Completed" and add it to the completed requests list. Print a confirmation message to `System.out` showing the processed request details.
 * *   **View Pending Requests (Menu Option 3):** Display the details of all requests currently in the pending requests queue, in their current order. Print a header and list each request on a new line to `System.out`. If the queue is empty, print a message indicating that to `System.out`.
 * *   **View Completed Requests (Menu Option 4):** Display the details of all requests currently in the completed requests list. Print a header and list each request on a new line to `System.out`. If the list is empty, print a message indicating that to `System.out`.
 * *   **Exit (Menu Option 0):** Terminate the program gracefully. Print an exit message to `System.out`.
 * 
 * **Expected Output:**
 * The program should continuously display the menu until the user chooses to exit. User interactions, successful operations, and request listings should be printed to `System.out`. All error conditions (invalid input, invalid priority, unexpected errors) must be printed to `System.err`.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * ```
 * --- Support Request System Menu ---
 * 1. Add New Request
 * 2. Process Next Request
 * 3. View Pending Requests
 * 4. View Completed Requests
 * 0. Exit
 * ---------------------------------
 * Enter your choice: 1
 * Enter request description: Email client won't open
 * Enter priority (1-5): 5
 * Request added: ID: 1, Desc: 'Email client won't open', Priority: 5, Status: Pending
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 1
 * Enter request description: Network printer offline
 * Enter priority (1-5): 2
 * Request added: ID: 2, Desc: 'Network printer offline', Priority: 2, Status: Pending
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Pending Requests ---
 * 1. ID: 1, Desc: 'Email client won't open', Priority: 5, Status: Pending
 * 2. ID: 2, Desc: 'Network printer offline', Priority: 2, Status: Pending
 * ------------------------
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 2
 * Processed request: ID: 1, Desc: 'Email client won't open', Priority: 5, Status: Completed
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Pending Requests ---
 * 1. ID: 2, Desc: 'Network printer offline', Priority: 2, Status: Pending
 * ------------------------
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 2
 * Processed request: ID: 2, Desc: 'Network printer offline', Priority: 2, Status: Completed
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 2
 * No pending requests to process.
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Completed Requests ---
 * 1. ID: 1, Desc: 'Email client won't open', Priority: 5, Status: Completed
 * 2. ID: 2, Desc: 'Network printer offline', Priority: 2, Status: Completed
 * --------------------------
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 0 and 4. (Printed to System.err)
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: xyz
 * Invalid input. Please enter a number. (Printed to System.err)
 * 
 * --- Support Request System Menu ---
 * ...
 * Enter your choice: 0
 * Exiting Support System. Goodbye!
 * ```
 *
 * EXPLANATION:
 * This solution implements a basic Technical Support Request Processing System using the required Java components and best practices.
 * 
 * 1.  **`SupportRequest` Class:** This class is a simple Plain Old Java Object (POJO) representing a single request. It demonstrates **encapsulation** by keeping its fields private and providing public getter methods and a `setStatus` method for controlled modification. The `toString()` method provides a convenient way to display request details.
 * 
 * 2.  **`SupportSystem` Class:** This is the core class managing the system logic.
 *     *   **Data Structures:**
 *         *   `private Queue<SupportRequest> incomingRequests = new LinkedList<>();`: A `LinkedList` is used here because it implements the `Queue` interface and provides efficient FIFO operations (`offer` to add, `poll` to remove from the front). This fulfills the `Queue` requirement.
 *         *   `private List<SupportRequest> completedRequests = new ArrayList<>();`: An `ArrayList` is used to store completed requests, providing dynamic resizing and easy iteration. It is declared using the `List` interface type, satisfying both the `ArrayList` and `List` interface requirements.
 *     *   **Request ID Generation:** `nextRequestId` is a simple counter ensuring each request gets a unique ID, demonstrating basic state management within the system class.
 *     *   **Functionality Methods (`addRequest`, `processNextRequest`, `viewPendingRequests`, `viewCompletedRequests`):** These public methods encapsulate the system's operations, manipulating the internal `Queue` and `List`. They include checks for empty collections where necessary (e.g., `incomingRequests.isEmpty()` in `processNextRequest`).
 *     *   **User Interface (`run`, `printMenu`):**
 *         *   `printMenu()` is a simple helper method to display the options using `System.out`.
 *         *   `run()` contains the main application loop. It uses `java.util.Scanner` to read user input, fulfilling the `Scanner` requirement.
 *         *   A `switch` statement is used within the loop to direct execution based on the user's menu choice, fulfilling the `switch` requirement.
 * 
 * 3.  **Error Handling (`try-catch`, `System.err`, `System.out`):**
 *     *   **Input Validation:** `addRequest` explicitly checks if the priority is within the valid range (1-5). If not, it prints an error using `System.err` and returns without adding the request.
 *     *   **`InputMismatchException`:** An inner `try-catch` block is used around `scanner.nextInt()` calls within the `run` method. If the user enters non-numeric input where a number is expected (for the menu choice or priority), this exception is caught, an error message is printed to `System.err`, and `scanner.nextLine()` is called to consume the invalid input, preventing an infinite loop.
 *     *   **General Exception Handling:** An outer `try-catch(Exception e)` block wraps the entire `while` loop in the `run` method. This acts as a safety net, catching any other unexpected runtime exceptions that might occur during the program's execution. The error message and stack trace are printed to `System.err`, fulfilling the `System.err` and "class-wide exception handling" requirements.
 *     *   **Normal Output:** All menu displays, prompts, successful operation confirmations, and list contents are printed using `System.out`, as required.
 * 
 * 4.  **Best Practices:**
 *     *   **Encapsulation:** Demonstrated in both `SupportRequest` and `SupportSystem` classes.
 *     *   **Meaningful Names:** Variables like `incomingRequests`, `completedRequests`, `nextRequestId`, and methods like `addRequest`, `processNextRequest` are clearly named.
 *     *   **Comments and Documentation:** Javadoc comments are included for classes and methods, explaining their purpose, parameters, and return values.
 *     *   **Input Validation & Error Handling:** Implemented as described above, using `System.err` for errors.
 *     *   **Resource Management:** The `Scanner` is closed in a `finally` block to ensure it's released even if an exception occurs.
 * 
 * This solution effectively integrates the required Java components into a functional, albeit simple, system that demonstrates key programming concepts like data structure usage, control flow, and robust error handling in a practical scenario. The complexity comes from the required integration of multiple components and careful handling of user input and potential errors.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single support request in the system.
 * Follows encapsulation principles.
 */
class SupportRequest {
    private int id;
    private String description;
    private int priority; // 1-5, 1 being highest
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new SupportRequest.
     *
     * @param id The unique ID for the request.
     * @param description The description of the request.
     * @param priority The priority of the request (1-5).
     */
    public SupportRequest(int id, String description, int priority) {
        this.id = id;
        this.description = description;
        this.priority = priority;
        this.status = "Pending"; // Initial status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public int getPriority() {
        return priority;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for status ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the SupportRequest.
     * @return Formatted string with request details.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Desc: '%s', Priority: %d, Status: %s",
                             id, description, priority, status);
    }
}

/**
 * Manages support requests using a queue for pending requests
 * and a list for completed requests. Provides a console interface.
 */
public class SupportSystem {

    // Requirement: Use Queue (from java.util.Queue)
    private Queue<SupportRequest> incomingRequests;

    // Requirement: Use ArrayList (from java.util.ArrayList)
    // Requirement: Use List interface (from java.util.List)
    private List<SupportRequest> completedRequests;

    private int nextRequestId; // To generate unique IDs for new requests

    /**
     * Constructs a new SupportSystem, initializing data structures.
     */
    public SupportSystem() {
        this.incomingRequests = new LinkedList<>(); // LinkedList implements Queue
        this.completedRequests = new ArrayList<>(); // ArrayList implements List
        this.nextRequestId = 1; // Start IDs from 1
    }

    /**
     * Adds a new support request to the incoming queue after validation.
     *
     * @param description The description of the request.
     * @param priority    The priority of the request (1-5).
     */
    public void addRequest(String description, int priority) {
        // Input validation for priority
        if (priority < 1 || priority > 5) {
             // Requirement: Use System.err for error messages
            System.err.println("Error: Invalid priority. Priority must be between 1 and 5.");
            return; // Do not add the request if priority is invalid
        }

        SupportRequest newRequest = new SupportRequest(nextRequestId++, description, priority);
        incomingRequests.offer(newRequest); // offer is the standard way to add to a queue
        // Requirement: Use System.out for normal output
        System.out.println("Request added: " + newRequest.toString());
    }

    /**
     * Processes the next request from the incoming queue (FIFO).
     * Moves the completed request to the completed list.
     */
    public void processNextRequest() {
        // Check if the queue is empty before attempting to poll
        if (incomingRequests.isEmpty()) {
            // Requirement: Use System.out for normal output (informative message)
            System.out.println("No pending requests to process.");
            return;
        }

        // Retrieve and remove the head of the queue
        SupportRequest requestToProcess = incomingRequests.poll();

        if (requestToProcess != null) {
            requestToProcess.setStatus("Completed"); // Update status
            completedRequests.add(requestToProcess); // Add to completed list
            // Requirement: Use System.out for normal output
            System.out.println("Processed request: " + requestToProcess.toString());
        } else {
             // This case should ideally not be reached if isEmpty() check passes,
             // but good practice for poll() which can return null if queue is empty.
             // Requirement: Use System.err for error messages
            System.err.println("An unexpected error occurred while processing request.");
        }
    }

    /**
     * Displays all pending requests currently in the queue.
     */
    public void viewPendingRequests() {
        // Requirement: Use System.out for normal output
        System.out.println("\n--- Pending Requests ---");
        if (incomingRequests.isEmpty()) {
            System.out.println("No pending requests.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (SupportRequest request : incomingRequests) {
                System.out.println(index++ + ". " + request.toString());
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Displays all completed requests currently in the list.
     */
    public void viewCompletedRequests() {
        // Requirement: Use System.out for normal output
        System.out.println("\n--- Completed Requests ---");
        if (completedRequests.isEmpty()) {
            System.out.println("No completed requests.");
        } else {
            int index = 1;
            for (SupportRequest request : completedRequests) {
                System.out.println(index++ + ". " + request.toString());
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Runs the main interaction loop for the support system.
     * Handles user input, menu selection, and basic error handling.
     */
    public void run() {
        // Requirement: Use Scanner for user input
        Scanner scanner = new Scanner(System.in);
        int choice = -1; // Initialize choice to not exit immediately

        // Requirement: Class-wide exception handling with try-catch blocks
        // Catch any unexpected exceptions during the main loop execution
        try {
            while (choice != 0) {
                printMenu();
                // Requirement: Use System.out for normal output (prompt)
                System.out.print("Enter your choice: ");

                try {
                    // Read integer input for menu choice
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    // Requirement: Use Switch statement for flow control
                    switch (choice) {
                        case 1: // Add Request
                            System.out.print("Enter request description: ");
                            String description = scanner.nextLine();
                            System.out.print("Enter priority (1-5): ");
                            // Inner try-catch for priority input specifically
                            try {
                                int priority = scanner.nextInt();
                                scanner.nextLine(); // Consume newline
                                addRequest(description, priority); // Call method with validation
                            } catch (InputMismatchException e) {
                                // Requirement: Use System.err for error messages
                                System.err.println("Invalid input for priority. Please enter a number.");
                                scanner.nextLine(); // Consume the invalid input
                            }
                            break;
                        case 2: // Process Next Request
                            processNextRequest();
                            break;
                        case 3: // View Pending Requests
                            viewPendingRequests();
                            break;
                        case 4: // View Completed Requests
                            viewCompletedRequests();
                            break;
                        case 0: // Exit
                            // Requirement: Use System.out for normal output
                            System.out.println("Exiting Support System. Goodbye!");
                            break;
                        default:
                            // Requirement: Use System.err for error messages
                            System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                    }
                } catch (InputMismatchException e) {
                    // Requirement: Use System.err for error messages
                    System.err.println("Invalid input. Please enter a number for the menu choice.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to ensure loop continues
                }
                // Add a newline after each operation for better readability
                System.out.println();
            }
        } catch (Exception e) {
            // Requirement: Class-wide exception handling - catch any other unexpected exceptions
            // Requirement: Use System.err for error messages
            System.err.println("An unexpected critical error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to stderr for debugging
        } finally {
            // Ensure the scanner resource is closed
            scanner.close();
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        // Requirement: Use System.out for normal output
        System.out.println("--- Support Request System Menu ---");
        System.out.println("1. Add New Request");
        System.out.println("2. Process Next Request");
        System.out.println("3. View Pending Requests");
        System.out.println("4. View Completed Requests");
        System.out.println("0. Exit");
        System.out.println("---------------------------------");
    }

    /**
     * Main method to start the Support Request System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        SupportSystem system = new SupportSystem();
        system.run(); // Start the main interaction loop
    }
}
