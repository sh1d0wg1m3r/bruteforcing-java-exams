/*
 * Exam Question #888
 * Generated on: 2025-05-12 16:55:24
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Logistics Hub Simulator
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified simulation of a logistics hub's processing system. Packages arrive and are placed in an incoming queue. Hub workers process packages one by one from the front of the queue. Processed packages are moved to a separate list for tracking. The system needs to handle various operations, including adding packages, processing packages, viewing queues, and handling potential errors.
 * 
 * **Requirements:**
 * 
 * Develop a Java application that simulates this logistics hub. Your solution must adhere to the following specifications:
 * 
 * 1.  **Package Class:** Create a `Package` class with the following private attributes:
 *     *   `packageId` (String): Unique identifier for the package.
 *     *   `destination` (String): The destination address/code.
 *     *   `weightKg` (double): The weight of the package in kilograms.
 *     *   Include a constructor, public getter methods for all attributes, and a meaningful `toString()` method.
 * 
 * 2.  **LogisticsHub Class:** Create a `LogisticsHub` class that manages the package flow.
 *     *   It must contain a private `Queue<Package>` to represent the incoming package queue. Use an appropriate `Queue` implementation (e.g., `LinkedList`).
 *     *   It must contain a private `List<Package>` (using `ArrayList` as the concrete implementation) to store packages that have been successfully processed.
 *     *   Implement the following public methods:
 *         *   `addPackage(Package pkg)`: Adds a `Package` to the incoming queue. Should validate that the package is not null.
 *         *   `processNextPackage()`: Processes the package at the front of the incoming queue.
 *             *   This method should dequeue the package.
 *             *   Simulate a "heavy package" check: if `weightKg` is greater than 20.0, print a special message to `System.out` indicating it's a heavy package requiring special handling (but still process it).
 *             *   Move the successfully processed package from the queue to the processed packages list.
 *             *   If the queue is empty, it should not throw an exception but rather print a message to `System.out` indicating that there are no packages to process.
 *         *   `viewIncomingQueue()`: Prints the contents of the incoming queue to `System.out`. If empty, print an appropriate message.
 *         *   `viewProcessedPackages()`: Prints the contents of the processed packages list to `System.out`. If empty, print an appropriate message.
 * 
 * 3.  **Main Application Logic:**
 *     *   In your `main` method (or a separate class with a `main` method), create an instance of `LogisticsHub`.
 *     *   Use a `Scanner` object to interact with the user.
 *     *   Implement a menu-driven interface using a loop and a `switch` statement to handle user commands:
 *         *   `1`: Add a new package. Prompt the user for ID, destination, and weight.
 *         *   `2`: Process the next package.
 *         *   `3`: View incoming queue.
 *         *   `4`: View processed packages.
 *         *   `5`: Exit.
 *     *   Implement robust input validation for adding packages:
 *         *   `packageId`, `destination` should not be empty or just whitespace.
 *         *   `weightKg` must be a positive number.
 *         *   Use `System.err` to report invalid input errors (e.g., empty ID, non-positive weight).
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential `InputMismatchException` when reading numeric input with `Scanner` and any potential `RuntimeException` or custom exceptions you might introduce (though the requirements don't strictly demand custom exceptions, handling general `Exception` or `RuntimeException` in the main loop is good practice). Print error messages to `System.err`. Ensure the application doesn't crash on invalid input or processing issues.
 *     *   Use `System.out` for all normal output (menu, prompts, successful operations, viewing lists).
 * 
 * **Required Java Components Checklist:**
 * 
 * *   `java.util.Queue`
 * *   `java.util.ArrayList`
 * *   `java.util.List` interface
 * *   `java.util.Scanner`
 * *   `switch` statement
 * *   `System.err`
 * *   `System.out`
 * *   Class-wide `try-catch` blocks (in the main interaction loop)
 * 
 * **Best Practices:**
 * 
 * *   Proper encapsulation (`private` fields, `public` methods).
 * *   Meaningful variable and method names.
 * *   Appropriate comments and documentation (Javadocs recommended but not strictly required for the exam, inline comments are sufficient).
 * *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, perform actions, and display results or errors clearly using `System.out` and `System.err` as specified.
 * 
 * ---
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * Logistics Hub Menu:
 * 1. Add Package
 * 2. Process Next Package
 * 3. View Incoming Queue
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: P001
 * Enter Destination: NY
 * Enter Weight (kg): 15.5
 * Package P001 added to the queue.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 1
 * Enter Package ID: P002
 * Enter Destination: LA
 * Enter Weight (kg): -5.0
 * Error: Weight must be positive.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 1
 * Enter Package ID: P002
 * Enter Destination: LA
 * Enter Weight (kg): 25.0
 * Package P002 added to the queue.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 3
 * Incoming Queue:
 * [Package{packageId='P001', destination='NY', weightKg=15.5}, Package{packageId='P002', destination='LA', weightKg=25.0}]
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 2
 * Processing package: Package{packageId='P001', destination='NY', weightKg=15.5}
 * Package P001 processed successfully.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 2
 * Processing package: Package{packageId='P002', destination='LA', weightKg=25.0}
 * Note: Heavy package (25.0 kg) requires special handling.
 * Package P002 processed successfully.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 4
 * Processed Packages:
 * [Package{packageId='P001', destination='NY', weightKg=15.5}, Package{packageId='P002', destination='LA', weightKg=25.0}]
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 2
 * No packages in the incoming queue to process.
 * 
 * Logistics Hub Menu:
 * ...
 * Enter your choice: 5
 * Exiting Logistics Hub Simulator.
 * ```
 * 
 * ---
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of the `Package` and `LogisticsHub` classes.
 * *   Proper use of `Queue`, `ArrayList`, and `List`.
 * *   Effective use of `Scanner` for user input.
 * *   Correct implementation of the menu using a `switch` statement.
 * *   Appropriate use of `System.out` and `System.err`.
 * *   Robust input validation and error handling using `try-catch`.
 * *   Adherence to best practices (encapsulation, naming, comments).
 * *   The program runs without crashing on valid or invalid input.
 *
 * EXPLANATION:
 * This solution implements a `LogisticsHubSimulator` application that meets all the specified requirements.
 * 
 * 1.  **`Package` Class:**
 *     *   Represents a single package with private fields (`packageId`, `destination`, `weightKg`) ensuring encapsulation.
 *     *   Provides public getter methods to access these attributes.
 *     *   The `toString()` method provides a convenient way to represent a package object as a string for printing.
 * 
 * 2.  **`LogisticsHub` Class:**
 *     *   Manages the core logic of the hub.
 *     *   Uses a `private Queue<Package> incomingQueue` initialized with `LinkedList` (a common `Queue` implementation) to store packages awaiting processing. `Queue`'s FIFO (First-In, First-Out) nature correctly simulates a waiting line.
 *     *   Uses a `private List<Package> processedPackages` initialized with `ArrayList` to store packages after they have been processed. `List` is used as the interface type, demonstrating polymorphic usage, while `ArrayList` provides the concrete, dynamically resizable list implementation.
 *     *   `addPackage(Package pkg)`: Uses `queue.offer()` to add a package. `offer()` is generally preferred over `add()` for capacity-constrained queues, although `LinkedList` is not capacity-constrained; it's good practice. It includes a basic null check.
 *     *   `processNextPackage()`: Uses `queue.poll()` to remove and retrieve the head of the queue. `poll()` is safe for empty queues as it returns `null`. It checks for an empty queue before attempting to process. It includes the specified heavy package check and moves the package to the `processedPackages` list using `list.add()`.
 *     *   `viewIncomingQueue()` and `viewProcessedPackages()`: These methods print the contents of the respective collections. They check if the collections are empty and print informative messages if they are. Printing the collection directly using `System.out.println()` leverages the `toString()` method of the collection (which in turn calls the `toString()` of its elements), providing a simple way to display contents.
 * 
 * 3.  **`LogisticsHubSimulator` (Main Class):**
 *     *   Contains the `main` method where execution begins.
 *     *   Creates an instance of `LogisticsHub` and `Scanner`.
 *     *   The main program loop runs as long as the `running` flag is true.
 *     *   A `switch` statement is used based on the user's integer choice to direct the program flow to the appropriate action (`Add Package`, `Process`, `View Queue`, `View Processed`, `Exit`).
 *     *   **Input Validation:** When adding a package (case 1), the code explicitly checks if the ID or destination strings are empty (after trimming whitespace) and if the weight is positive (`<= 0`). Invalid inputs result in error messages printed to `System.err`.
 *     *   **Exception Handling:** A `try-catch` block wraps the core logic inside the `while` loop.
 *         *   It specifically catches `InputMismatchException`, which is thrown by `Scanner` methods like `nextInt()` or `nextDouble()` if the user enters input that doesn't match the expected type (e.g., text when a number is expected).
 *         *   A general `catch (Exception e)` is included as a fallback for any other unexpected runtime errors.
 *         *   Error messages from the `catch` blocks are printed to `System.err`.
 *         *   Crucially, after catching `InputMismatchException`, `scanner.nextLine()` is called within the `catch` block to consume the invalid input line from the scanner buffer, preventing an infinite loop where the scanner keeps trying to read the same invalid input.
 *     *   `System.out` is used for the menu, prompts, success messages, and viewing lists.
 *     *   `System.err` is used exclusively for error messages (input validation errors, unexpected exceptions).
 *     *   The `scanner.nextLine()` calls after `scanner.nextInt()` and `scanner.nextDouble()` are essential to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls reading empty strings.
 *     *   The `scanner.close()` call ensures the scanner resource is released when the program finishes.
 * 
 * This solution effectively demonstrates the required Java components and programming concepts in a practical, cohesive application. It showcases object-oriented design (classes, encapsulation), collection usage (`Queue`, `List`, `ArrayList`, `LinkedList`), user interaction (`Scanner`, `switch`), input validation, and robust error handling (`try-catch`, `System.err`).
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a package in the logistics system
class Package {
    private String packageId;
    private String destination;
    private double weightKg;

    /**
     * Constructs a new Package object.
     * @param packageId The unique ID of the package.
     * @param destination The destination address/code.
     * @param weightKg The weight of the package in kilograms.
     */
    public Package(String packageId, String destination, double weightKg) {
        this.packageId = packageId;
        this.destination = destination;
        this.weightKg = weightKg;
    }

    // Public getter methods
    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeightKg() {
        return weightKg;
    }

    /**
     * Returns a string representation of the Package.
     */
    @Override
    public String toString() {
        return "Package{" +
               "packageId='" + packageId + '\'' +
               ", destination='" + destination + '\'' +
               ", weightKg=" + weightKg +
               '}';
    }
}

// Represents the logistics hub managing package flow
class LogisticsHub {
    // Queue for incoming packages
    private Queue<Package> incomingQueue;
    // List for successfully processed packages
    private List<Package> processedPackages;

    /**
     * Constructs a new LogisticsHub.
     * Initializes the incoming queue and processed packages list.
     */
    public LogisticsHub() {
        // Use LinkedList as a concrete implementation of Queue
        this.incomingQueue = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List
        this.processedPackages = new ArrayList<>();
    }

    /**
     * Adds a package to the incoming queue.
     * @param pkg The package to add.
     */
    public void addPackage(Package pkg) {
        if (pkg != null) {
            incomingQueue.offer(pkg); // offer is preferred over add for queues (returns false on failure, doesn't throw exception)
            System.out.println("Package " + pkg.getPackageId() + " added to the queue.");
        } else {
            System.err.println("Error: Cannot add a null package.");
        }
    }

    /**
     * Processes the next package from the incoming queue.
     * Dequeues the package, performs checks, and moves it to the processed list.
     */
    public void processNextPackage() {
        Package pkg = incomingQueue.poll(); // poll retrieves and removes the head, returns null if queue is empty

        if (pkg == null) {
            System.out.println("No packages in the incoming queue to process.");
            return; // Exit the method if queue is empty
        }

        System.out.println("Processing package: " + pkg);

        // Simulate heavy package check
        if (pkg.getWeightKg() > 20.0) {
            System.out.println("Note: Heavy package (" + pkg.getWeightKg() + " kg) requires special handling.");
        }

        // Move the package to the processed list
        processedPackages.add(pkg);
        System.out.println("Package " + pkg.getPackageId() + " processed successfully.");
    }

    /**
     * Prints the contents of the incoming queue.
     */
    public void viewIncomingQueue() {
        System.out.println("--- Incoming Queue ---");
        if (incomingQueue.isEmpty()) {
            System.out.println("The incoming queue is empty.");
        } else {
            // Print the queue content. LinkedList's toString is helpful here.
            System.out.println(incomingQueue);
            // Alternatively, iterate and print each package:
            // for (Package pkg : incomingQueue) {
            //     System.out.println(pkg);
            // }
        }
        System.out.println("----------------------");
    }

    /**
     * Prints the contents of the processed packages list.
     */
    public void viewProcessedPackages() {
        System.out.println("--- Processed Packages ---");
        if (processedPackages.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            // Print the list content. ArrayList's toString is helpful here.
            System.out.println(processedPackages);
             // Alternatively, iterate and print each package:
            // for (Package pkg : processedPackages) {
            //     System.out.println(pkg);
            // }
        }
        System.out.println("--------------------------");
    }
}

// Main class to run the Logistics Hub Simulator
public class LogisticsHubSimulator {

    public static void main(String[] args) {
        LogisticsHub hub = new LogisticsHub();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("Welcome to the Logistics Hub Simulator!");

        while (running) {
            printMenu();

            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                switch (choice) {
                    case 1: // Add Package
                        System.out.print("Enter Package ID: ");
                        String id = scanner.nextLine().trim();
                        System.out.print("Enter Destination: ");
                        String destination = scanner.nextLine().trim();
                        System.out.print("Enter Weight (kg): ");
                        double weight = scanner.nextDouble();
                        // Consume the newline character left by nextDouble()
                        scanner.nextLine(); // Important!

                        // Input validation
                        if (id.isEmpty()) {
                            System.err.println("Error: Package ID cannot be empty.");
                        } else if (destination.isEmpty()) {
                             System.err.println("Error: Destination cannot be empty.");
                        } else if (weight <= 0) {
                            System.err.println("Error: Weight must be positive.");
                        } else {
                            Package newPackage = new Package(id, destination, weight);
                            hub.addPackage(newPackage);
                        }
                        break;

                    case 2: // Process Next Package
                        hub.processNextPackage();
                        break;

                    case 3: // View Incoming Queue
                        hub.viewIncomingQueue();
                        break;

                    case 4: // View Processed Packages
                        hub.viewProcessedPackages();
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Logistics Hub Simulator.");
                        break;

                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle cases where the user enters non-integer input for the menu choice or non-double for weight
                System.err.println("Error: Invalid input. Please enter the correct data type (e.g., a number for choice/weight).");
                // Consume the invalid input to prevent an infinite loop
                scanner.nextLine();
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
             System.out.println(); // Add a newline for better readability between menu interactions
        }

        scanner.close(); // Close the scanner when the program exits
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Logistics Hub Menu:");
        System.out.println("1. Add Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Incoming Queue");
        System.out.println("4. View Processed Packages");
        System.out.println("5. Exit");
    }
}
