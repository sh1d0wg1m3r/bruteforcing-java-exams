/*
 * Exam Question #473
 * Generated on: 2025-05-11 23:16:16
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Clinic Waiting List Management
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple command-line application to manage patients in a clinic waiting list. The system should maintain a list of all patients ever registered and a separate queue for patients currently waiting to see a doctor.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `id` (int), `name` (String), and `ailment` (String). Include a constructor and public getter methods for these fields.
 * 2.  **Clinic Management Class:** Create a class (e.g., `ClinicManager`) that contains the main logic.
 *     *   It must have a private field representing the waiting list using the `java.util.Queue` interface. Use a concrete implementation like `java.util.LinkedList`.
 *     *   It must have a private field representing all registered patients using the `java.util.List` interface. Use a concrete implementation like `java.util.ArrayList`.
 *     *   It must use a `java.util.Scanner` to read user input from the console.
 * 3.  **Functionality:** The application should present a menu to the user and perform actions based on their choice:
 *     *   **1. Add Patient to Waiting Queue:**
 *         *   Prompt the user to enter a Patient ID.
 *         *   If the user enters '0', prompt for Name and Ailment to register a *new* patient. Assign a unique ID (you can use a simple counter). Add this new patient to the `registeredPatients` list and then to the `waitingQueue`.
 *         *   If the user enters an existing Patient ID (not 0), find the patient in the `registeredPatients` list and add the *found patient object* to the `waitingQueue`.
 *         *   If the entered ID is not 0 and not found in `registeredPatients`, report an error.
 *     *   **2. Process Next Patient from Queue:**
 *         *   Remove and display the details of the patient at the front of the `waitingQueue`.
 *         *   If the queue is empty, report that there are no patients waiting.
 *     *   **3. View Waiting Queue:**
 *         *   Display the patients currently in the `waitingQueue` in their waiting order without removing them.
 *         *   If the queue is empty, report it.
 *     *   **4. View All Registered Patients:**
 *         *   Display all patients stored in the `registeredPatients` list.
 *         *   If the list is empty, report it.
 *     *   **5. Exit:** Terminate the application.
 * 4.  **User Interface:** Use `System.out` for displaying the menu, prompts, successful operation messages, and patient details.
 * 5.  **Error Handling:**
 *     *   Use `System.err` to print error messages for:
 *         *   Invalid menu choices.
 *         *   Invalid input (e.g., non-numeric input when expecting a number).
 *         *   Attempting to process a patient from an empty queue.
 *         *   Patient ID not found when trying to add an existing patient to the queue.
 *         *   Empty Name or Ailment when registering a new patient.
 *     *   Implement class-wide exception handling using `try-catch` blocks to handle potential issues like `InputMismatchException` during Scanner operations and other unexpected errors. Ensure the application doesn't crash due to user input errors.
 * 6.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 7.  **Best Practices:** Employ proper encapsulation (private fields, public getters/methods), use meaningful variable and method names, add appropriate comments, and structure the code clearly.
 * 
 * **Expected Output:**
 * 
 * The application should run interactively, displaying a menu, accepting user input, and providing feedback or error messages based on the operations performed.
 * 
 * Example interaction flow:
 * 
 * ```
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Process Next Patient from Queue
 * 3. View Waiting Queue
 * 4. View All Registered Patients
 * 5. Exit
 * ----------------------------
 * Enter your choice: 1
 * 
 * --- Add Patient to Queue ---
 * Enter Patient ID (or 0 to register new patient): 0
 * Enter New Patient Name: Alice
 * Enter Ailment: Fever
 * New patient registered with ID: 1
 * Patient 'Alice' (ID: 1) added to the waiting queue.
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 1
 * 
 * --- Add Patient to Queue ---
 * Enter Patient ID (or 0 to register new patient): 0
 * Enter New Patient Name: Bob
 * Enter Ailment: Cold
 * New patient registered with ID: 2
 * Patient 'Bob' (ID: 2) added to the waiting queue.
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Waiting Queue ---
 * Patients in queue (order of processing):
 * 1. ID=1, Name='Alice'
 * 2. ID=2, Name='Bob'
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 2
 * 
 * --- Process Next Patient ---
 * Processing patient: ID=1, Name='Alice', Ailment='Fever'
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Waiting Queue ---
 * Patients in queue (order of processing):
 * 1. ID=2, Name='Bob'
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- All Registered Patients ---
 * Registered patients:
 * ID=1, Name='Alice', Ailment='Fever'
 * ID=2, Name='Bob', Ailment='Cold'
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 2
 * 
 * --- Process Next Patient ---
 * Processing patient: ID=2, Name='Bob', Ailment='Cold'
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 2
 * 
 * --- Process Next Patient ---
 * The waiting queue is empty. No patient to process.
 * 
 * --- Clinic Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Clinic Management System. Goodbye!
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated on:
 * *   Correct implementation and usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Adherence to problem requirements and functionality.
 * *   Correct handling of different user inputs and error conditions.
 * *   Code structure, readability, and adherence to best practices (encapsulation, naming, comments).
 *
 * EXPLANATION:
 * This solution implements a simple clinic waiting list manager demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:** A basic class encapsulating patient data (`id`, `name`, `ailment`) with a constructor and public getters, adhering to encapsulation principles.
 * 2.  **`ClinicManager` Class:**
 *     *   **Collections:**
 *         *   `waitingQueue`: Declared as `Queue<Patient>` and initialized as `new LinkedList<>()`. This correctly uses the `Queue` interface for FIFO behavior, suitable for a waiting list. Methods like `offer()` (to add) and `poll()` (to remove from the head) are used.
 *         *   `registeredPatients`: Declared as `List<Patient>` and initialized as `new ArrayList<>()`. This uses the `List` interface and `ArrayList` for a dynamic, indexed collection capable of storing all patients.
 *     *   **Scanner:** A `Scanner` object is used to read input from `System.in`.
 *     *   **`nextPatientId`:** A simple counter to generate unique IDs for newly registered patients.
 *     *   **`findPatientById` Method:** A private helper method demonstrating iteration over the `registeredPatients` list to find a specific patient.
 *     *   **Functional Methods (`addPatientToQueue`, `processNextPatient`, `viewWaitingQueue`, `viewRegisteredPatients`):** Each method implements one of the core functionalities described in the requirements, interacting with the collections appropriately.
 *         *   `addPatientToQueue` includes logic to either find an existing patient in the `registeredPatients` list or create a new one, adding the patient to both `registeredPatients` (if new) and `waitingQueue`. It includes input validation for ID (numeric) and patient details (not empty).
 *         *   `processNextPatient` uses `waitingQueue.poll()` to get and remove the next patient, handling the empty queue case.
 *         *   `viewWaitingQueue` iterates through the `waitingQueue` without removing elements (using a for-each loop), demonstrating how to inspect the queue's contents.
 *         *   `viewRegisteredPatients` iterates through the `registeredPatients` list to display all entries.
 *     *   **`printMenu` Method:** A private helper method to display the user options clearly using `System.out`.
 *     *   **`run` Method:** This is the main application loop.
 *         *   It continuously displays the menu and prompts for user input until the exit option (5) is chosen.
 *         *   It uses a `switch` statement to dispatch control to the appropriate method based on the user's integer input.
 *         *   **Exception Handling:** A `try-catch` block wraps the input reading and switch statement.
 *             *   `catch (InputMismatchException e)` specifically handles cases where `scanner.nextInt()` receives non-integer input, printing an error to `System.err` and consuming the invalid input to prevent an infinite loop.
 *             *   `catch (Exception e)` provides a general catch-all for any other unexpected runtime errors within the loop, printing a message to `System.err`.
 *         *   The `addPatientToQueue` method also includes a `try-catch` for reading the patient ID to handle non-numeric input specifically for that prompt, again printing to `System.err`.
 *     *   **`main` Method:** The entry point of the application, creating a `ClinicManager` instance and calling its `run` method.
 *     *   **Resource Management:** The `scanner.close()` call in the `run` method ensures the `Scanner` resource is released when the application exits.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrating collection usage, user interaction, control flow (`switch`), and robust error handling (`try-catch`, `System.err`).
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Needed for Scanner nextInt errors

// Represents a patient in the clinic system
class Patient {
    private int id;
    private String name;
    private String ailment;

    // Constructor
    public Patient(int id, String name, String ailment) {
        this.id = id;
        this.name = name;
        this.ailment = ailment;
    }

    // Public getter methods
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getAilment() {
        return ailment;
    }

    // Optional: toString method for easy printing
    @Override
    public String toString() {
        return "ID=" + id + ", Name='" + name + "', Ailment='" + ailment + "'";
    }
}

// Manages the clinic's patient waiting list and registered patients
public class ClinicManager {
    // Use Queue interface, implemented by LinkedList, for the waiting list (FIFO)
    private Queue<Patient> waitingQueue;
    // Use List interface, implemented by ArrayList, for all registered patients
    private List<Patient> registeredPatients;
    // Scanner for reading user input
    private Scanner scanner;
    // Counter for generating unique patient IDs
    private int nextPatientId = 1;

    // Constructor: Initializes the collections and scanner
    public ClinicManager() {
        waitingQueue = new LinkedList<>();
        registeredPatients = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    // Helper method to find a patient by ID in the registered list
    private Patient findPatientById(int id) {
        for (Patient p : registeredPatients) {
            if (p.getId() == id) {
                return p;
            }
        }
        return null; // Return null if patient not found
    }

    // Handles adding a patient to the waiting queue (either existing or new)
    public void addPatientToQueue() {
        System.out.println("\n--- Add Patient to Queue ---");
        System.out.print("Enter Patient ID (or 0 to register new patient): ");

        int patientId = -1;
        try {
            // Read potential patient ID
            patientId = scanner.nextInt();
            // Consume the newline character left by nextInt()
            scanner.nextLine();
        } catch (InputMismatchException e) {
            // Handle non-integer input
            System.err.println("Error: Invalid input. Please enter a number for Patient ID.");
            // Consume the invalid input to prevent infinite loop
            scanner.nextLine();
            return; // Exit method on error
        }

        Patient patientToAdd = null;

        if (patientId == 0) {
            // Register a new patient
            System.out.print("Enter New Patient Name: ");
            String name = scanner.nextLine().trim(); // Read name and remove leading/trailing whitespace

            // Input validation for name
            if (name.isEmpty()) {
                 System.err.println("Error: Patient name cannot be empty.");
                 return; // Exit method on error
            }

            System.out.print("Enter Ailment: ");
            String ailment = scanner.nextLine().trim(); // Read ailment and remove leading/trailing whitespace

             // Input validation for ailment
             if (ailment.isEmpty()) {
                 System.err.println("Error: Ailment cannot be empty.");
                 return; // Exit method on error
            }

            // Create new patient with next available ID
            patientToAdd = new Patient(nextPatientId++, name, ailment);
            // Add the new patient to the registered list
            registeredPatients.add(patientToAdd);
            System.out.println("New patient registered with ID: " + patientToAdd.getId());

        } else {
            // Find an existing patient by ID
            patientToAdd = findPatientById(patientId);
            if (patientToAdd == null) {
                // Report error if patient ID not found
                System.err.println("Error: Patient with ID " + patientId + " not found in registered list.");
                return; // Exit method if patient not found
            }
        }

        // Add the found or newly created patient to the waiting queue
        // offer() is generally preferred over add() for queues as it handles capacity constraints (not relevant here)
        waitingQueue.offer(patientToAdd);
        System.out.println("Patient '" + patientToAdd.getName() + "' (ID: " + patientToAdd.getId() + ") added to the waiting queue.");
    }

    // Handles processing (removing) the next patient from the queue
    public void processNextPatient() {
        System.out.println("\n--- Process Next Patient ---");
        // poll() retrieves and removes the head of the queue, returns null if empty
        Patient nextPatient = waitingQueue.poll();
        if (nextPatient == null) {
            // Report if queue is empty
            System.out.println("The waiting queue is empty. No patient to process.");
        } else {
            // Display details of the processed patient
            System.out.println("Processing patient: " + nextPatient); // Using Patient's toString()
        }
    }

    // Handles viewing the patients currently in the waiting queue without removing them
    public void viewWaitingQueue() {
        System.out.println("\n--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            System.out.println("Patients in queue (order of processing):");
            // Iterate through the queue without removing elements
            int i = 1;
            for (Patient p : waitingQueue) {
                // Display patient summary
                System.out.println(i++ + ". ID=" + p.getId() + ", Name='" + p.getName() + "'");
            }
        }
    }

    // Handles viewing all patients ever registered in the system
    public void viewRegisteredPatients() {
        System.out.println("\n--- All Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients are registered yet.");
        } else {
            System.out.println("Registered patients:");
            // Iterate through the list and display patient details
            for (Patient p : registeredPatients) {
                System.out.println(p); // Using Patient's toString()
            }
        }
    }

    // Prints the main menu options to the console
    private void printMenu() {
        System.out.println("\n--- Clinic Management Menu ---");
        System.out.println("1. Add Patient to Waiting Queue");
        System.out.println("2. Process Next Patient from Queue");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View All Registered Patients");
        System.out.println("5. Exit");
        System.out.println("----------------------------");
    }

    // Main application loop
    public void run() {
        int choice = -1;
        // Loop until the user chooses to exit (option 5)
        while (choice != 5) {
            printMenu(); // Display the menu
            System.out.print("Enter your choice: ");

            try {
                // Read user's menu choice
                choice = scanner.nextInt();
                // Consume the newline character
                scanner.nextLine();

                // Use switch statement for flow control based on choice
                switch (choice) {
                    case 1:
                        addPatientToQueue(); // Call method to add patient
                        break;
                    case 2:
                        processNextPatient(); // Call method to process patient
                        break;
                    case 3:
                        viewWaitingQueue(); // Call method to view queue
                        break;
                    case 4:
                        viewRegisteredPatients(); // Call method to view registered list
                        break;
                    case 5:
                        System.out.println("Exiting Clinic Management System. Goodbye!");
                        break; // Exit the loop
                    default:
                        // Handle invalid integer choices
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for the menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                // Consume the invalid input to prevent infinite loop
                scanner.nextLine();
                choice = -1; // Reset choice to ensure loop continues
            } catch (Exception e) {
                 // Catch any other unexpected exceptions during the loop execution
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 // e.printStackTrace(); // Uncomment for detailed debugging info
            }
            System.out.println(); // Add a blank line for better readability between operations
        }
        scanner.close(); // Close the scanner when the application exits
    }

    // Main method to start the application
    public static void main(String[] args) {
        ClinicManager manager = new ClinicManager();
        manager.run(); // Start the main application loop
    }
}
