/*
 * Exam Question #271
 * Generated on: 2025-05-11 22:47:40
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment management system for a small hospital. The system needs to manage a waiting list of patients, a list of available doctors, and a list of scheduled appointments. Patients arrive and are added to a waiting list. When a doctor is available, the next patient from the waiting list can be scheduled with a specific doctor. The system should also allow listing patients in the waiting list, listing scheduled appointments, listing doctors, and cancelling appointments.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following:
 * 
 * 1.  **Core Data Structures:**
 *     *   Maintain a waiting list for patients using `java.util.Queue`.
 *     *   Maintain a list of available doctors using `java.util.ArrayList`.
 *     *   Maintain a list of scheduled appointments using `java.util.ArrayList`, declared using the `java.util.List` interface (`List<Appointment> appointments = new ArrayList<>();`).
 * 
 * 2.  **Classes:**
 *     *   `Patient`: Represents a patient with fields for `patientId` (int), `name` (String), and `ailment` (String). Implement appropriate constructors, getters, and ensure proper encapsulation (private fields, public getters).
 *     *   `Doctor`: Represents a doctor with fields for `doctorId` (int), `name` (String), and `specialization` (String). Implement appropriate constructors, getters, and ensure proper encapsulation.
 *     *   `Appointment`: Represents a scheduled appointment with fields for `appointmentId` (int), `patient` (Patient object), `doctor` (Doctor object), and `timeSlot` (String, e.g., "10:00 AM"). Implement appropriate constructors, getters, and ensure proper encapsulation.
 *     *   `HospitalSystem`: This will be the main class containing the `main` method and managing the data structures (`Queue`, `ArrayList`, `List`). It should contain methods for each system operation.
 * 
 * 3.  **Functionality (implemented in `HospitalSystem`):**
 *     *   **Add Patient:** Add a new patient to the waiting list. Assign a unique ID.
 *     *   **Schedule Appointment:** Take the next patient from the waiting list and schedule them with a specified doctor (identified by ID). Assign a unique appointment ID. Add the appointment to the scheduled list. Handle cases where the waiting list is empty or the doctor ID is invalid.
 *     *   **List Waiting Patients:** Display all patients currently in the waiting list.
 *     *   **List Scheduled Appointments:** Display all scheduled appointments.
 *     *   **List Doctors:** Display all available doctors.
 *     *   **Cancel Appointment:** Cancel a scheduled appointment given its appointment ID. Handle cases where the appointment ID is not found.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to get user input in the `main` method.
 *     *   Present a menu of options to the user (Add Patient, Schedule, List Waiting, List Appointments, List Doctors, Cancel Appointment, Exit).
 *     *   Use a `switch` statement to process the user's menu choice.
 *     *   Use `System.out` for normal output (menu, lists, success messages).
 *     *   Use `System.err` for error messages (e.g., invalid input, waiting list empty, doctor not found, appointment not found).
 * 
 * 5.  **Error Handling and Best Practices:**
 *     *   Implement input validation where necessary (e.g., ensuring numeric input for IDs, checking if required fields are not empty).
 *     *   Implement class-wide exception handling using `try-catch` blocks within the `main` method's interaction loop to gracefully handle unexpected errors during input or processing.
 *     *   Ensure proper encapsulation (private fields, public methods/getters) in all classes.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc comments for classes and methods).
 *     *   Maintain a clean code structure.
 * 
 * **Initial Data:**
 * 
 * Populate the system with a few initial doctors when the program starts.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu, accepting user input, and displaying results or error messages based on the chosen operation. Output formats for listings should be clear and informative (e.g., "Patient ID: 1, Name: John Doe, Ailment: Fever").
 * 
 * **Example Interaction Flow (partial):**
 * 
 * ```
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Appointment
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. List Doctors
 * 6. Cancel Appointment
 * 7. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient ailment: Headache
 * Patient Alice added to waiting list.
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Patient ID: 1, Name: Alice, Ailment: Headache
 * --------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 5
 * --- Doctors ---
 * Doctor ID: 101, Name: Dr. Smith, Specialization: Cardiology
 * Doctor ID: 102, Name: Dr. Jones, Specialization: Pediatrics
 * --------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 2
 * --- Doctors ---
 * Doctor ID: 101, Name: Dr. Smith, Specialization: Cardiology
 * Doctor ID: 102, Name: Dr. Jones, Specialization: Pediatrics
 * --------------------
 * Enter Doctor ID for appointment: 101
 * Enter time slot (e.g., 10:00 AM): 11:00 AM
 * Appointment scheduled: Appointment ID: 201, Patient: Alice, Doctor: Dr. Smith, Time: 11:00 AM
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 4
 * --- Scheduled Appointments ---
 * Appointment ID: 201, Patient: Alice, Doctor: Dr. Smith, Time: 11:00 AM
 * -----------------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 6
 * Enter Appointment ID to cancel: 201
 * Appointment 201 cancelled successfully.
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter your choice: 7
 * Exiting Hospital Appointment System.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * 
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a Patient in the hospital system.
 */
class Patient {
    private int patientId;
    private String name;
    private String ailment;

    /**
     * Constructs a new Patient.
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     * @param ailment The ailment the patient has.
     */
    public Patient(int patientId, String name, String ailment) {
        this.patientId = patientId;
        this.name = name;
        this.ailment = ailment;
    }

    // Getters
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public String getAilment() {
        return ailment;
    }

    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Name: " + name + ", Ailment: " + ailment;
    }
}

/**
 * Represents a Doctor in the hospital system.
 */
class Doctor {
    private int doctorId;
    private String name;
    private String specialization;

    /**
     * Constructs a new Doctor.
     * @param doctorId The unique ID of the doctor.
     * @param name The name of the doctor.
     * @param specialization The specialization of the doctor.
     */
    public Doctor(int doctorId, String name, String specialization) {
        this.doctorId = doctorId;
        this.name = name;
        this.specialization = specialization;
    }

    // Getters
    public int getDoctorId() {
        return doctorId;
    }

    public String getName() {
        return name;
    }

    public String getSpecialization() {
        return specialization;
    }

    @Override
    public String toString() {
        return "Doctor ID: " + doctorId + ", Name: " + name + ", Specialization: " + specialization;
    }
}

/**
 * Represents a scheduled Appointment.
 */
class Appointment {
    private int appointmentId;
    private Patient patient;
    private Doctor doctor;
    private String timeSlot;

    /**
     * Constructs a new Appointment.
     * @param appointmentId The unique ID of the appointment.
     * @param patient The patient for the appointment.
     * @param doctor The doctor for the appointment.
     * @param timeSlot The time slot for the appointment.
     */
    public Appointment(int appointmentId, Patient patient, Doctor doctor, String timeSlot) {
        this.appointmentId = appointmentId;
        this.patient = patient;
        this.doctor = doctor;
        this.timeSlot = timeSlot;
    }

    // Getters
    public int getAppointmentId() {
        return appointmentId;
    }

    public Patient getPatient() {
        return patient;
    }

    public Doctor getDoctor() {
        return doctor;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Appointment ID: " + appointmentId + ", Patient: " + patient.getName() + ", Doctor: " + doctor.getName() + ", Time: " + timeSlot;
    }
}

/**
 * Manages the hospital's patients, doctors, and appointments.
 */
public class HospitalSystem {

    // Use LinkedList as a common Queue implementation
    private Queue<Patient> waitingList = new LinkedList<>();
    private List<Doctor> doctors = new ArrayList<>(); // Declared as List, instantiated as ArrayList
    private List<Appointment> scheduledAppointments = new ArrayList<>(); // Declared as List, instantiated as ArrayList

    private int nextPatientId = 1;
    private int nextAppointmentId = 201; // Starting appointment IDs from 201

    /**
     * Initializes the system with some default doctors.
     */
    public HospitalSystem() {
        // Add some initial doctors
        doctors.add(new Doctor(101, "Dr. Smith", "Cardiology"));
        doctors.add(new Doctor(102, "Dr. Jones", "Pediatrics"));
        doctors.add(new Doctor(103, "Dr. Lee", "Neurology"));
        System.out.println("Hospital system initialized with doctors.");
    }

    /**
     * Adds a new patient to the waiting list.
     * @param name The patient's name.
     * @param ailment The patient's ailment.
     */
    public void addPatient(String name, String ailment) {
        if (name == null || name.trim().isEmpty() || ailment == null || ailment.trim().isEmpty()) {
            System.err.println("Error: Patient name and ailment cannot be empty.");
            return;
        }
        Patient newPatient = new Patient(nextPatientId++, name.trim(), ailment.trim());
        waitingList.offer(newPatient); // offer is preferred over add for queues
        System.out.println("Patient " + newPatient.getName() + " added to waiting list with ID " + newPatient.getPatientId() + ".");
    }

    /**
     * Schedules an appointment for the next patient in the queue with the specified doctor.
     * @param doctorId The ID of the doctor to schedule with.
     * @param timeSlot The desired time slot for the appointment.
     */
    public void scheduleAppointment(int doctorId, String timeSlot) {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule appointment.");
            return;
        }
        if (timeSlot == null || timeSlot.trim().isEmpty()) {
             System.err.println("Error: Time slot cannot be empty.");
             return;
        }

        Doctor targetDoctor = findDoctorById(doctorId);

        if (targetDoctor == null) {
            System.err.println("Error: Doctor with ID " + doctorId + " not found.");
            return;
        }

        // Get the next patient from the queue
        Patient patientToSchedule = waitingList.poll(); // poll removes the head of the queue

        Appointment newAppointment = new Appointment(nextAppointmentId++, patientToSchedule, targetDoctor, timeSlot.trim());
        scheduledAppointments.add(newAppointment);
        System.out.println("Appointment scheduled: " + newAppointment);
    }

    /**
     * Finds a doctor by their ID.
     * @param doctorId The ID of the doctor to find.
     * @return The Doctor object if found, null otherwise.
     */
    private Doctor findDoctorById(int doctorId) {
        for (Doctor doctor : doctors) {
            if (doctor.getDoctorId() == doctorId) {
                return doctor;
            }
        }
        return null;
    }

    /**
     * Lists all patients currently in the waiting list.
     */
    public void listWaitingPatients() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate without removing elements
            for (Patient patient : waitingList) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Lists all scheduled appointments.
     */
    public void listScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
        }
        System.out.println("-----------------------------");
    }

     /**
     * Lists all available doctors.
     */
    public void listDoctors() {
        System.out.println("--- Doctors ---");
        if (doctors.isEmpty()) {
             System.out.println("No doctors available.");
        } else {
            for (Doctor doctor : doctors) {
                System.out.println(doctor);
            }
        }
        System.out.println("---------------");
    }


    /**
     * Cancels a scheduled appointment by its ID.
     * @param appointmentId The ID of the appointment to cancel.
     */
    public void cancelAppointment(int appointmentId) {
        boolean removed = scheduledAppointments.removeIf(appointment -> appointment.getAppointmentId() == appointmentId);

        if (removed) {
            System.out.println("Appointment " + appointmentId + " cancelled successfully.");
        } else {
            System.err.println("Error: Appointment with ID " + appointmentId + " not found.");
        }
    }

    /**
     * Main method to run the hospital appointment system.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling for the main interaction loop
        try {
            while (running) {
                printMenu();
                int choice = -1;
                System.out.print("Enter your choice: ");

                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                    continue; // Go back to the start of the loop
                } finally {
                     // Consume the newline character left by nextInt()
                     scanner.nextLine();
                }


                switch (choice) {
                    case 1: // Add Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter patient ailment: ");
                        String ailment = scanner.nextLine();
                        system.addPatient(name, ailment);
                        break;

                    case 2: // Schedule Appointment
                        system.listDoctors(); // Show doctors first
                        System.out.print("Enter Doctor ID for appointment: ");
                        int doctorIdToSchedule = -1;
                        try {
                            doctorIdToSchedule = scanner.nextInt();
                        } catch (InputMismatchException e) {
                             System.err.println("Invalid input. Please enter a valid Doctor ID (number).");
                             scanner.nextLine(); // Consume the invalid input
                             break; // Exit the case
                        } finally {
                            scanner.nextLine(); // Consume the newline
                        }
                        System.out.print("Enter time slot (e.g., 10:00 AM): ");
                        String timeSlot = scanner.nextLine();
                        system.scheduleAppointment(doctorIdToSchedule, timeSlot);
                        break;

                    case 3: // List Waiting Patients
                        system.listWaitingPatients();
                        break;

                    case 4: // List Scheduled Appointments
                        system.listScheduledAppointments();
                        break;

                    case 5: // List Doctors
                        system.listDoctors();
                        break;

                    case 6: // Cancel Appointment
                         System.out.print("Enter Appointment ID to cancel: ");
                         int appointmentIdToCancel = -1;
                         try {
                            appointmentIdToCancel = scanner.nextInt();
                         } catch (InputMismatchException e) {
                             System.err.println("Invalid input. Please enter a valid Appointment ID (number).");
                             scanner.nextLine(); // Consume the invalid input
                             break; // Exit the case
                         } finally {
                            scanner.nextLine(); // Consume the newline
                         }
                         system.cancelAppointment(appointmentIdToCancel);
                         break;

                    case 7: // Exit
                        running = false;
                        System.out.println("Exiting Hospital Appointment System.");
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 7.");
                        break;
                }
                System.out.println(); // Add a newline for better readability
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions in the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("System terminated.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Hospital Appointment System Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Scheduled Appointments");
        System.out.println("5. List Doctors");
        System.out.println("6. Cancel Appointment");
        System.out.println("7. Exit");
        System.out.println("--------------------------------------");
    }
}
