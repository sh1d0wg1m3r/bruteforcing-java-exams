/*
 * Exam Question #229
 * Generated on: 2025-05-11 22:35:54
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Triage and Assignment System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified simulation of a hospital's patient triage and assignment process. Patients arrive and are added to a waiting list. When a patient is called from the waiting list, they become the "current" patient ready for assignment. A receptionist can then assign the current patient to an available doctor. The system needs to manage the waiting list, track doctor assignments, and handle user interactions robustly.
 * 
 * **Task:**
 * 
 * Implement a Java console application that simulates this process. Your application should allow users to add patients to a waiting list, call the next patient from the list, assign the called patient to a doctor, and view the current state of the waiting list and doctor assignments.
 * 
 * **Requirements:**
 * 
 * 1.  **Classes:**
 *     *   Create a `Patient` class with private fields for `id` (auto-generated), `name`, and `severity` (an integer from 1 to 5, where 1 is critical). Include a constructor and public getter methods.
 *     *   Create a `Doctor` class with a private field for `name` and a private `List<Patient>` to store assigned patients. Include a constructor, a public getter for the name, a method to add an assigned patient, and a public getter for the assigned patients list.
 *     *   Create a `HospitalTriageSystem` class that orchestrates the simulation. This class should contain:
 *         *   A private `Queue<Patient>` for the waiting list (triage queue).
 *         *   A private `List<Doctor>` to hold the available doctors. Initialize this list with a few doctors.
 *         *   A private `Patient` field to hold the `currentPatient` being processed after being called from the queue.
 *         *   A private `Scanner` for user input.
 *         *   A `run()` method containing the main application loop.
 *         *   Methods corresponding to the menu options (e.g., `addPatientToQueue`, `processNextPatient`, `assignCurrentPatientToDoctor`, `viewWaitingQueue`, `viewDoctorAssignments`).
 *         *   A `main` method to create and start the `HospitalTriageSystem`.
 * 
 * 2.  **Core Logic & Data Structures:**
 *     *   Use `java.util.Queue` (specifically, an implementation like `LinkedList`) for the patient waiting list. Patients should be processed in the order they are added (FIFO).
 *     *   Use `java.util.ArrayList` to initialize and store the list of `Doctor` objects.
 *     *   Use the `java.util.List` interface type for declaring the collection of doctors and the list of assigned patients within the `Doctor` class.
 *     *   Implement the following actions via user input:
 *         *   **Add Patient:** Prompt for patient name and severity (1-5). Create a `Patient` object and add it to the waiting queue. Validate that severity is within the 1-5 range.
 *         *   **Call Next Patient:** Remove the patient at the head of the waiting queue and set it as the `currentPatient`. If the queue is empty, report an error.
 *         *   **Assign Current Patient:** If a `currentPatient` exists, prompt the user to select a doctor from the list of available doctors by number. Assign the `currentPatient` to the selected doctor and clear the `currentPatient` slot. If no `currentPatient` is selected or the doctor selection is invalid, report an error.
 *         *   **View Waiting List:** Display the patients currently in the waiting queue without removing them.
 *         *   **View Doctor Assignments:** Display each doctor and the list of patients assigned to them.
 *         *   **Exit:** Terminate the application.
 * 
 * 3.  **User Interface & Output:**
 *     *   Present a numbered menu of options to the user in the `run()` method.
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient/doctor details.
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and list views.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid menu choice, invalid input type, invalid severity, empty queue, no patient to assign, invalid doctor selection).
 * 
 * 4.  **Error Handling & Robustness:**
 *     *   Implement class-wide `try-catch` blocks in the main `run()` loop to handle potential `InputMismatchException` when reading integer input from the `Scanner`, preventing application crashes on invalid input. Handle other potential exceptions gracefully if identified.
 *     *   Implement input validation for severity level (1-5).
 *     *   Implement checks for empty queue before attempting to call a patient.
 *     *   Implement checks for a `null currentPatient` before attempting assignment.
 *     *   Implement validation for doctor selection.
 * 
 * 5.  **Best Practices:**
 *     *   Follow proper encapsulation (private fields, public getters/methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Ensure clean code structure and separation of concerns between classes.
 *     *   Close the `Scanner` resource when the application exits.
 * 
 * **Menu Options:**
 * 
 * 1.  Add Patient to Waiting List
 * 2.  Call Next Patient from Waiting List
 * 3.  Assign Current Patient to Doctor
 * 4.  View Waiting List
 * 5.  View Doctor Assignments
 * 6.  Exit
 * 
 * **Example Interaction:**
 * 
 * ```
 * --- Hospital Triage System ---
 * Please select an option:
 * 1. Add Patient to Waiting List
 * 2. Call Next Patient from Waiting List
 * 3. Assign Current Patient to Doctor
 * 4. View Waiting List
 * 5. View Doctor Assignments
 * 6. Exit
 * Enter your choice: 1
 * --- Add New Patient ---
 * Enter patient name: Alice
 * Enter severity level (1-5, 1=critical): 3
 * Patient added to waiting list: Patient [ID=1, Name=Alice, Severity=3]
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 1
 * --- Add New Patient ---
 * Enter patient name: Bob
 * Enter severity level (1-5, 1=critical): 1
 * Patient added to waiting list: Patient [ID=2, Name=Bob, Severity=1]
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 4
 * --- Waiting List ---
 * Patients in waiting list (2 total):
 * 1. Patient [ID=1, Name=Alice, Severity=3]
 * 2. Patient [ID=2, Name=Bob, Severity=1]
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 2
 * --- Call Next Patient ---
 * Next patient called: Patient [ID=1, Name=Alice, Severity=3]
 * This patient is now ready for assignment.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 4
 * --- Waiting List ---
 * Patients in waiting list (1 total):
 * 1. Patient [ID=2, Name=Bob, Severity=1]
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 3
 * --- Assign Current Patient ---
 * Current patient to assign: Patient [ID=1, Name=Alice, Severity=3]
 * Available Doctors:
 * 1. Dr. Smith
 * 2. Dr. Jones
 * 3. Dr. Adams
 * Enter the number of the doctor to assign Alice to: 2
 * Alice assigned to Dr. Jones.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 5
 * --- Doctor Assignments ---
 * Dr. Smith:
 *   No patients assigned.
 * Dr. Jones:
 *   - Alice (ID: 1)
 * Dr. Adams:
 *   No patients assigned.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 2
 * --- Call Next Patient ---
 * Next patient called: Patient [ID=2, Name=Bob, Severity=1]
 * This patient is now ready for assignment.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 3
 * --- Assign Current Patient ---
 * Current patient to assign: Patient [ID=2, Name=Bob, Severity=1]
 * Available Doctors:
 * 1. Dr. Smith
 * 2. Dr. Jones
 * 3. Dr. Adams
 * Enter the number of the doctor to assign Bob to: 1
 * Bob assigned to Dr. Smith.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 5
 * --- Doctor Assignments ---
 * Dr. Smith:
 *   - Bob (ID: 2)
 * Dr. Jones:
 *   - Alice (ID: 1)
 * Dr. Adams:
 *   No patients assigned.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 2
 * --- Call Next Patient ---
 * The waiting list is empty. No patient to call.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 3
 * --- Assign Current Patient ---
 * No patient is currently selected for assignment. Please call a patient first (Option 2).
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: invalid_input
 * Invalid input. Please enter a number.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 7
 * Invalid choice. Please enter a number between 1 and 6.
 * 
 * Please select an option:
 * ... menu ...
 * Enter your choice: 6
 * Exiting system. Goodbye!
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * Your solution will be evaluated on:
 * *   Correct implementation of the required functionality.
 * *   Proper usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.out`, and `System.err`.
 * *   Effective use of `try-catch` for exception handling, particularly around user input.
 * *   Adherence to best practices (encapsulation, naming, comments, structure).
 * *   Correct input validation and error reporting via `System.err`.
 *
 * EXPLANATION:
 * This solution implements a simplified hospital triage and patient assignment system, demonstrating the required Java concepts and best practices.
 * 
 * **Core Concepts Demonstrated:**
 * 
 * 1.  **`java.util.Queue`:** The `triageQueue` is implemented using `LinkedList` (which implements the `Queue` interface). This correctly models a waiting list where patients are added to the end (`offer`) and removed from the front (`poll`) in a FIFO (First-In, First-Out) manner, simulating the process of calling the next patient in line.
 * 2.  **`java.util.ArrayList` and `java.util.List`:** The collection of available doctors (`doctors`) is initialized using an `ArrayList` and declared using the `List` interface (`List<Doctor> doctors = new ArrayList<>();`). Similarly, the `assignedPatients` within the `Doctor` class is also declared as `List<Patient>` and initialized as `new ArrayList<>()`. This demonstrates using concrete `ArrayList` implementations while programming to the more general `List` interface, promoting flexibility.
 * 3.  **`java.util.Scanner`:** A `Scanner` object is used to read user input from the console (`System.in`) for menu choices, patient names, and severity levels.
 * 4.  **`switch` statement:** The `run()` method uses a `switch` statement to control the application flow based on the user's integer input from the menu, directing execution to the appropriate handling method.
 * 5.  **`System.err`:** Error messages, such as invalid menu choices, invalid input formats (`InputMismatchException`), invalid severity levels, attempts to process an empty queue, or attempts to assign a patient when none is selected, are printed to `System.err`. This clearly distinguishes error output from normal application output (`System.out`).
 * 6.  **`System.out`:** All normal output, including the menu, prompts for input, confirmation messages (patient added, assigned), and the lists of waiting patients and doctor assignments, is printed to `System.out`.
 * 7.  **Class-wide `try-catch`:** The main `run()` loop includes a `try-catch(InputMismatchException e)` block specifically to catch errors if the user enters non-integer input when a number is expected (like the menu choice). A general `catch(Exception e)` is also included as a fallback for any other unexpected runtime issues. Specific input validation loops in `addPatientToQueue` and `assignCurrentPatientToDoctor` also use `try-catch` for robustness during multi-step input.
 * 
 * **Best Practices Implementation:**
 * 
 * *   **Encapsulation:** Fields in `Patient`, `Doctor`, and `HospitalTriageSystem` are declared as `private`, and access is provided through public methods (getters and specific action methods like `addAssignedPatient`).
 * *   **Meaningful Names:** Class names (`Patient`, `Doctor`, `HospitalTriageSystem`), field names (`triageQueue`, `currentPatient`, `assignedPatients`), and method names (`addPatientToQueue`, `processNextPatient`, `assignCurrentPatientToDoctor`, `viewWaitingQueue`, `viewDoctorAssignments`) are descriptive and indicate their purpose.
 * *   **Comments and Documentation:** Javadoc comments are included for classes and methods, explaining their purpose, parameters, and return values. Inline comments clarify specific parts of the code.
 * *   **Input Validation:** The code checks if the entered severity level is within the valid range (1-5) and loops until valid input is provided. It also validates the doctor choice number against the size of the doctors list.
 * *   **Proper Error Handling:** In addition to the `try-catch` blocks for input errors, the code uses `if` checks to detect business logic errors (like an empty queue or no current patient) and reports them clearly using `System.err`.
 * *   **Clean Code Structure:** The code is organized into separate classes with well-defined responsibilities. The `HospitalTriageSystem` class acts as the controller, managing the interactions between `Patient` and `Doctor` objects based on user input. The `run()` method contains the main application loop, delegating specific tasks to private helper methods. The `Scanner` resource is explicitly closed upon exit.
 * 
 * This solution effectively combines various core Java concepts and data structures to solve a practical problem, demonstrating an understanding of object-oriented design, collection usage, user interaction handling, and robust error management, making it a suitable challenging exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Class representing a Patient
class Patient {
    private static int nextId = 1; // Auto-generated ID counter
    private int id;
    private String name;
    private int severity; // 1 (critical) to 5 (minor)

    /**
     * Constructs a new Patient.
     * @param name The patient's name.
     * @param severity The patient's severity level (1-5).
     */
    public Patient(String name, int severity) {
        this.id = nextId++; // Assign unique ID
        this.name = name;
        this.severity = severity; // Severity validation handled by system class
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getSeverity() {
        return severity;
    }

    /**
     * Returns a string representation of the Patient.
     */
    @Override
    public String toString() {
        return "Patient [ID=" + id + ", Name=" + name + ", Severity=" + severity + "]";
    }
}

// Class representing a Doctor
class Doctor {
    private String name;
    // Use List interface, implemented by ArrayList
    private List<Patient> assignedPatients;

    /**
     * Constructs a new Doctor.
     * @param name The doctor's name.
     */
    public Doctor(String name) {
        this.name = name;
        // Use ArrayList for the list of assigned patients
        this.assignedPatients = new ArrayList<>();
    }

    // --- Getters ---
    public String getName() {
        return name;
    }

    /**
     * Returns the list of patients assigned to this doctor.
     * @return The list of assigned patients.
     */
    public List<Patient> getAssignedPatients() {
        return assignedPatients;
    }

    /**
     * Adds a patient to this doctor's assigned list.
     * @param patient The patient to assign.
     */
    public void addAssignedPatient(Patient patient) {
        if (patient != null) {
            this.assignedPatients.add(patient);
        }
    }

    /**
     * Returns a string representation of the Doctor (excluding assigned patients details).
     */
    @Override
    public String toString() {
        return "Doctor [Name=" + name + ", Assigned Patients=" + assignedPatients.size() + "]";
    }
}

// Main class managing the hospital triage system
public class HospitalTriageSystem {

    // Use Queue for the waiting list (triage queue)
    private Queue<Patient> triageQueue;

    // Use List interface for the collection of doctors, implemented by ArrayList
    private List<Doctor> doctors;

    // Keep track of the patient currently being processed after being called from the queue
    private Patient currentPatient = null;

    // Scanner for user input
    private Scanner scanner;

    /**
     * Constructs the HospitalTriageSystem, initializing queues, doctors, and scanner.
     */
    public HospitalTriageSystem() {
        // Initialize the triage queue using LinkedList
        this.triageQueue = new LinkedList<>();

        // Initialize the list of doctors using ArrayList
        this.doctors = new ArrayList<>();
        // Add some initial doctors
        this.doctors.add(new Doctor("Dr. Smith"));
        this.doctors.add(new Doctor("Dr. Jones"));
        this.doctors.add(new Doctor("Dr. Adams"));

        // Initialize the scanner
        this.scanner = new Scanner(System.in);
    }

    /**
     * Runs the main interaction loop of the hospital system.
     * Handles user input and menu navigation using a switch statement.
     * Includes class-wide exception handling for input errors.
     */
    public void run() {
        System.out.println("--- Hospital Triage System ---");
        boolean running = true;

        while (running) {
            printMenu();
            int choice = -1; // Default invalid choice

            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt(); // Read integer choice
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatientToQueue();
                        break;
                    case 2:
                        processNextPatient();
                        break;
                    case 3:
                        assignCurrentPatientToDoctor();
                        break;
                    case 4:
                        viewWaitingQueue();
                        break;
                    case 5:
                        viewDoctorAssignments();
                        break;
                    case 6:
                        running = false; // Exit loop
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Use System.err for invalid input messages
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                // Class-wide exception handling for input errors (non-integer)
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to ensure default case or loop continues
            } catch (Exception e) {
                // Catch any other unexpected runtime exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for detailed debugging stack trace
            }
            System.out.println(); // Add a blank line for readability between operations
        }
        close(); // Close scanner resource when exiting
    }

    /**
     * Prints the main menu options to System.out.
     */
    private void printMenu() {
        System.out.println("Please select an option:");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Call Next Patient from Waiting List");
        System.out.println("3. Assign Current Patient to Doctor");
        System.out.println("4. View Waiting List");
        System.out.println("5. View Doctor Assignments");
        System.out.println("6. Exit");
    }

    /**
     * Adds a new patient to the triage queue based on user input.
     * Includes input validation for severity and uses System.out/System.err.
     */
    private void addPatientToQueue() {
        System.out.println("--- Add New Patient ---");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();

        int severity = -1;
        boolean validSeverity = false;
        // Loop until a valid severity is entered
        while (!validSeverity) {
            try {
                System.out.print("Enter severity level (1-5, 1=critical): ");
                severity = scanner.nextInt();
                scanner.nextLine(); // Consume newline character

                // Input validation for severity range
                if (severity >= 1 && severity <= 5) {
                    validSeverity = true;
                } else {
                    System.err.println("Invalid severity level. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for severity
                System.err.println("Invalid input for severity. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
            }
        }

        Patient newPatient = new Patient(name, severity);
        triageQueue.offer(newPatient); // Add patient to the end of the queue
        System.out.println("Patient added to waiting list: " + newPatient);
    }

    /**
     * Calls the next patient from the triage queue (removes from head).
     * Sets the called patient as the current patient for potential assignment.
     * Handles empty queue scenario using System.err.
     */
    private void processNextPatient() {
        System.out.println("--- Call Next Patient ---");
        if (triageQueue.isEmpty()) {
            // Use System.err for error when queue is empty
            System.err.println("The waiting list is empty. No patient to call.");
            currentPatient = null; // Ensure no patient is currently selected if queue was empty
        } else {
            currentPatient = triageQueue.poll(); // Remove and get the patient from the head of the queue
            System.out.println("Next patient called: " + currentPatient);
            System.out.println("This patient is now ready for assignment.");
        }
    }

    /**
     * Assigns the current patient (if any) to a doctor selected by the user.
     * Requires a patient to have been called using option 2.
     * Handles cases where no patient is selected or doctor is not found.
     * Uses System.out/System.err.
     */
    private void assignCurrentPatientToDoctor() {
        System.out.println("--- Assign Current Patient ---");
        if (currentPatient == null) {
            // Use System.err for error when no patient is selected
            System.err.println("No patient is currently selected for assignment. Please call a patient first (Option 2).");
            return; // Exit method if no patient is selected
        }

        System.out.println("Current patient to assign: " + currentPatient.getName());
        System.out.println("Available Doctors:");
        // Display available doctors with numbers
        for (int i = 0; i < doctors.size(); i++) {
            System.out.println((i + 1) + ". " + doctors.get(i).getName());
        }

        int doctorChoice = -1;
        Doctor selectedDoctor = null;
        boolean validDoctorChoice = false;

        // Loop until a valid doctor number is entered
        while (!validDoctorChoice) {
            try {
                System.out.print("Enter the number of the doctor to assign " + currentPatient.getName() + " to: ");
                doctorChoice = scanner.nextInt();
                scanner.nextLine(); // Consume newline character

                // Validate doctor choice number
                if (doctorChoice >= 1 && doctorChoice <= doctors.size()) {
                    selectedDoctor = doctors.get(doctorChoice - 1); // Get the selected doctor from the list
                    validDoctorChoice = true;
                } else {
                    // Use System.err for invalid doctor number
                    System.err.println("Invalid doctor number. Please enter a number from the list.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for doctor choice
                System.err.println("Invalid input for doctor number. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
            }
        }

        // Assign the patient to the selected doctor
        selectedDoctor.addAssignedPatient(currentPatient);
        System.out.println(currentPatient.getName() + " assigned to " + selectedDoctor.getName() + ".");

        // The patient is now assigned, clear the currentPatient slot
        currentPatient = null;
    }

    /**
     * Displays the current patients in the waiting queue without removing them.
     * Uses System.out.
     */
    private void viewWaitingQueue() {
        System.out.println("--- Waiting List ---");
        if (triageQueue.isEmpty()) {
            System.out.println("The waiting list is currently empty.");
        } else {
            System.out.println("Patients in waiting list (" + triageQueue.size() + " total):");
            // Iterate through the queue using a for-each loop (does not remove elements)
            int index = 1;
            for (Patient patient : triageQueue) {
                System.out.println(index++ + ". " + patient);
            }
        }
    }

    /**
     * Displays the list of doctors and the patients assigned to each.
     * Uses System.out.
     */
    private void viewDoctorAssignments() {
        System.out.println("--- Doctor Assignments ---");
        if (doctors.isEmpty()) {
            System.out.println("No doctors available in the system.");
            return;
        }

        // Iterate through the list of doctors
        for (Doctor doctor : doctors) {
            System.out.println(doctor.getName() + ":");
            // Get the list of assigned patients using the List interface method
            List<Patient> assigned = doctor.getAssignedPatients();
            if (assigned.isEmpty()) {
                System.out.println("  No patients assigned.");
            } else {
                // Iterate through the list of assigned patients
                for (Patient patient : assigned) {
                    System.out.println("  - " + patient.getName() + " (ID: " + patient.getId() + ")");
                }
            }
        }
    }

    /**
     * Closes the scanner resource to prevent resource leaks.
     */
    private void close() {
        if (scanner != null) {
            scanner.close();
        }
    }

    /**
     * Main method to start the Hospital Triage System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalTriageSystem system = new HospitalTriageSystem();
        system.run(); // Start the main application loop
    }
}
