/*
 * Exam Question #1135
 * Generated on: 2025-05-12 17:29:45
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Print Shop Job Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simple console-based application for managing print jobs in a small print shop. Customer print jobs arrive and are added to a queue for processing in the order they were received (First-In, First-Out). Once a job is processed, it is moved to a list of completed jobs for record-keeping.
 * 
 * **Requirements:**
 * 
 * 1.  **Implement `PrintJob` Class:**
 *     *   Create a class named `PrintJob` to represent a single print job.
 *     *   It must have private fields: `jobId` (int), `description` (String), and `pages` (int).
 *     *   Provide a constructor to initialize these fields.
 *     *   Include public getter methods for all fields.
 *     *   Override the `toString()` method to provide a user-friendly string representation of a `PrintJob` (e.g., "Job ID: [id], Description: [desc], Pages: [pages]").
 *     *   Ensure proper encapsulation.
 * 
 * 2.  **Implement `PrintShopManager` Class:**
 *     *   Create a class named `PrintShopManager` to manage the collection of print jobs.
 *     *   It must have private fields:
 *         *   A `java.util.Queue<PrintJob>` named `pendingJobs` to store jobs waiting to be processed. Initialize it using a suitable implementation like `LinkedList`.
 *         *   A `java.util.List<PrintJob>` named `completedJobs` to store jobs that have been processed. Initialize it using `java.util.ArrayList`.
 *     *   Provide a public method `addJob(int jobId, String description, int pages)` that creates a `PrintJob` object and adds it to the `pendingJobs` queue. Implement validation to ensure `jobId` and `pages` are positive integers and `description` is not empty. Report validation errors using `System.err`.
 *     *   Provide a public method `processNextJob()` that takes the next job from the front of the `pendingJobs` queue. If a job is retrieved, remove it from the queue, add it to the `completedJobs` list, and print a success message using `System.out`. If the queue is empty, print an error message using `System.err`.
 *     *   Provide a public method `viewPendingJobs()` that iterates through and prints all jobs currently in the `pendingJobs` queue using `System.out`, showing them in processing order. If the queue is empty, print a message indicating so using `System.out`.
 *     *   Provide a public method `viewCompletedJobs()` that iterates through and prints all jobs currently in the `completedJobs` list using `System.out`. If the list is empty, print a message indicating so using `System.out`.
 *     *   Provide a public method `run()` which contains the main application loop, interacting with the user via the console.
 * 
 * 3.  **Console Interaction (`PrintShopManager.run()`):**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user using `System.out`:
 *         1. Add New Job
 *         2. Process Next Job
 *         3. View Pending Jobs
 *         4. View Completed Jobs
 *         5. Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement input reading and validation within the relevant menu options (especially "Add New Job"). Report errors using `System.err`.
 *     *   Ensure that after reading an integer input using `Scanner.nextInt()`, you consume the rest of the line using `Scanner.nextLine()` before attempting to read a String input.
 *     *   Include a class-wide exception handling mechanism using `try-catch` blocks within the main operational loop (`run` method) to catch potential runtime errors (e.g., `InputMismatchException` for non-integer input, or other unexpected exceptions) and report them using `System.err` before continuing the loop or exiting gracefully. Specifically handle `InputMismatchException` when reading the menu choice.
 * 
 * 4.  **Main Application Class:**
 *     *   Create a class with a `main` method.
 *     *   In the `main` method, create an instance of `PrintShopManager` and call its `run()` method to start the application.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Ensure proper error handling and reporting as specified (using `System.err`).
 *     *   Maintain a clean and readable code structure.
 * 
 * **Expected Output:**
 * The program should display a menu, accept user input, perform the requested actions, display results or status via `System.out`, and report any errors or invalid inputs via `System.err`. The output should clearly reflect the state of the pending queue and completed list after operations.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter Job ID: 101
 * Enter Job Description: Report Printing
 * Enter Number of Pages: 50
 * Job added: Job ID: 101, Description: Report Printing, Pages: 50
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter Job ID: 102
 * Enter Job Description: Brochure
 * Enter Number of Pages: 20
 * Job added: Job ID: 102, Description: Brochure, Pages: 20
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job ID: 101, Description: Report Printing, Pages: 50
 * Job ID: 102, Description: Brochure, Pages: 20
 * --------------------
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 2
 * Processing job: Job ID: 101, Description: Report Printing, Pages: 50
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job ID: 102, Description: Brochure, Pages: 20
 * --------------------
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Jobs ---
 * Job ID: 101, Description: Report Printing, Pages: 50
 * ----------------------
 * 
 * --- Print Shop Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: invalid
 * Error: Invalid input. Please enter a number.
 * 
 * --- Print Shop Menu ---
 * ... (continues until Exit)
 * ```
 * 
 * Your solution must demonstrate the correct usage of all specified Java components and adhere to best practices.
 *
 * EXPLANATION:
 * This solution implements a console-based Print Shop Job Management System as required.
 * 
 * 1.  **`PrintJob` Class:** This is a simple Plain Old Java Object (POJO) representing a print job. It uses private fields (`jobId`, `description`, `pages`) and public getter methods to demonstrate encapsulation. The `toString()` method provides a convenient way to print job details.
 * 
 * 2.  **`PrintShopManager` Class:** This class is the core of the application.
 *     *   It uses a `java.util.Queue<PrintJob>` (`pendingJobs`) implemented with `LinkedList` to manage jobs waiting for processing in a FIFO order. `offer()` is used to add elements, and `poll()` is used to retrieve and remove the head element.
 *     *   It uses a `java.util.List<PrintJob>` (`completedJobs`) implemented with `ArrayList` to store jobs after they have been processed. `add()` is used to append processed jobs.
 *     *   The `addJob`, `processNextJob`, `viewPendingJobs`, and `viewCompletedJobs` methods encapsulate the logic for interacting with these collections and performing the core operations.
 *     *   Input validation for `jobId`, `description`, and `pages` is performed within the `addJob` method (and partly within the `run` method's input reading logic), using `System.err` to report errors.
 *     *   The `processNextJob`, `viewPendingJobs`, and `viewCompletedJobs` methods check if the collections are empty before attempting operations or displaying contents, using `System.err` or `System.out` appropriately.
 * 
 * 3.  **Console Interaction and `run()` Method:**
 *     *   The `run()` method contains the main application loop (`while(running)`).
 *     *   A menu is displayed using `System.out`.
 *     *   `java.util.Scanner` is used to read user input. Note the use of `scanner.nextLine()` after `scanner.nextInt()` to consume the remaining newline character, which is crucial for correct subsequent `nextLine()` calls.
 *     *   A `switch` statement handles the user's choice, directing execution to the appropriate method or logic block.
 *     *   **Exception Handling:**
 *         *   A broad `try-catch(Exception e)` block wraps the core logic within the `while` loop. This fulfills the "class-wide exception handling" requirement by providing a top-level catch for unexpected errors during command execution, reporting them via `System.err`.
 *         *   A specific `catch(InputMismatchException e)` is included before the general `Exception` catch. This handles cases where the user enters non-integer input specifically for the main menu choice, prints a user-friendly error via `System.err`, and consumes the invalid input line to prevent an infinite loop caused by `Scanner`.
 *         *   Input validation for `jobId` and `pages` within the "Add New Job" case uses `scanner.hasNextInt()` and checks for positive values. If validation fails, an error is printed to `System.err`, and `continue` is used to skip the rest of the switch case and proceed to the next menu display, allowing the user to try again.
 *     *   The loop continues until the user chooses option 5 ("Exit"), which sets the `running` flag to `false` and closes the `Scanner`.
 * 
 * 4.  **`Main` Class:** The `PrintShopApp` class contains the `main` method, which serves as the entry point. It simply creates a `PrintShopManager` instance and calls its `run()` method to start the application.
 * 
 * **Demonstrated Concepts:**
 * 
 * *   **`Queue` (`LinkedList`):** Used for managing pending jobs in FIFO order (`offer`, `poll`).
 * *   **`List` (`ArrayList`):** Used for storing completed jobs.
 * *   **`Scanner`:** Used for reading various types of user input from the console.
 * *   **`switch` Statement:** Used for controlling the flow based on the user's menu choice.
 * *   **`System.out`:** Used for standard output like menus, prompts, success messages, and list contents.
 * *   **`System.err`:** Used specifically for reporting error conditions and invalid input.
 * *   **`try-catch`:** Implemented for handling potential exceptions during input reading (`InputMismatchException`) and general unexpected errors (`Exception`) within the main application loop.
 * *   **Encapsulation:** Achieved in the `PrintJob` class using private fields and public getters.
 * *   **Input Validation:** Checks are performed for positive integer values and non-empty strings for job details.
 * *   **Error Handling:** Specific error messages are provided via `System.err` for validation failures, empty collections, and exceptions.
 * *   **Clean Code:** The code is structured into logical classes and methods, uses meaningful names, and includes comments.
 * 
 * This solution effectively integrates all required Java components into a practical scenario, demonstrating advanced understanding of collection usage, user interaction, and robust error handling in Java.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single print job with ID, description, and page count.
 */
class PrintJob {
    private int jobId;
    private String description;
    private int pages;

    /**
     * Constructs a new PrintJob.
     *
     * @param jobId       The unique identifier for the job.
     * @param description A description of the job.
     * @param pages       The number of pages in the job.
     */
    public PrintJob(int jobId, String description, int pages) {
        this.jobId = jobId;
        this.description = description;
        this.pages = pages;
    }

    /**
     * Gets the job ID.
     *
     * @return The job ID.
     */
    public int getJobId() {
        return jobId;
    }

    /**
     * Gets the job description.
     *
     * @return The job description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the number of pages.
     *
     * @return The number of pages.
     */
    public int getPages() {
        return pages;
    }

    /**
     * Provides a string representation of the print job.
     *
     * @return A formatted string for the print job.
     */
    @Override
    public String toString() {
        return "Job ID: " + jobId + ", Description: " + description + ", Pages: " + pages;
    }
}

/**
 * Manages the collection of pending and completed print jobs.
 */
class PrintShopManager {
    // Queue to hold jobs waiting to be processed (FIFO)
    private Queue<PrintJob> pendingJobs;
    // List to hold jobs that have been processed
    private List<PrintJob> completedJobs;
    private Scanner scanner; // Scanner for user input

    /**
     * Constructs a new PrintShopManager, initializing job collections.
     */
    public PrintShopManager() {
        // Use LinkedList as an implementation of Queue
        this.pendingJobs = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.completedJobs = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new print job to the pending queue after validation.
     *
     * @param jobId       The ID of the job.
     * @param description The description of the job.
     * @param pages       The number of pages.
     */
    public void addJob(int jobId, String description, int pages) {
        // Input validation
        if (jobId <= 0) {
            System.err.println("Error: Job ID must be a positive integer.");
            return;
        }
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Job description cannot be empty.");
            return;
        }
        if (pages <= 0) {
            System.err.println("Error: Number of pages must be a positive integer.");
            return;
        }

        PrintJob newJob = new PrintJob(jobId, description.trim(), pages);
        pendingJobs.offer(newJob); // Add job to the end of the queue
        System.out.println("Job added: " + newJob);
    }

    /**
     * Processes the next job from the pending queue and moves it to completed jobs.
     */
    public void processNextJob() {
        PrintJob jobToProcess = pendingJobs.poll(); // Retrieve and remove the head of the queue

        if (jobToProcess == null) {
            System.err.println("No jobs in the pending queue to process.");
        } else {
            completedJobs.add(jobToProcess); // Add the processed job to the completed list
            System.out.println("Processing job: " + jobToProcess);
        }
    }

    /**
     * Displays all jobs currently in the pending queue.
     */
    public void viewPendingJobs() {
        if (pendingJobs.isEmpty()) {
            System.out.println("No pending jobs.");
            return;
        }

        System.out.println("--- Pending Jobs ---");
        // Iterate through the queue without removing elements
        for (PrintJob job : pendingJobs) {
            System.out.println(job);
        }
        System.out.println("--------------------");
    }

    /**
     * Displays all jobs currently in the completed list.
     */
    public void viewCompletedJobs() {
        if (completedJobs.isEmpty()) {
            System.out.println("No completed jobs.");
            return;
        }

        System.out.println("--- Completed Jobs ---");
        // Iterate through the list
        for (PrintJob job : completedJobs) {
            System.out.println(job);
        }
        System.out.println("----------------------");
    }

    /**
     * Prints the main menu to the console.
     */
    private void printMenu() {
        System.out.println("\n--- Print Shop Menu ---");
        System.out.println("1. Add New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user interaction.
     */
    public void run() {
        boolean running = true;
        while (running) {
            printMenu();

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                switch (choice) {
                    case 1: // Add New Job
                        System.out.print("Enter Job ID: ");
                        int jobId;
                        // Validate job ID input
                        if (scanner.hasNextInt()) {
                            jobId = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } else {
                            System.err.println("Error: Invalid input for Job ID. Please enter an integer.");
                            scanner.nextLine(); // Consume the invalid input line
                            continue; // Skip to the next iteration of the main loop
                        }

                        System.out.print("Enter Job Description: ");
                        String description = scanner.nextLine();

                        System.out.print("Enter Number of Pages: ");
                        int pages;
                        // Validate pages input
                        if (scanner.hasNextInt()) {
                            pages = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } else {
                            System.err.println("Error: Invalid input for Pages. Please enter an integer.");
                            scanner.nextLine(); // Consume the invalid input line
                            continue; // Skip to the next iteration
                        }

                        addJob(jobId, description, pages); // addJob includes its own validation checks
                        break;

                    case 2: // Process Next Job
                        processNextJob();
                        break;

                    case 3: // View Pending Jobs
                        viewPendingJobs();
                        break;

                    case 4: // View Completed Jobs
                        viewCompletedJobs();
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Print Shop Manager. Goodbye!");
                        running = false; // Set flag to exit loop
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handles cases where the user enters non-integer input for the menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input line to prevent infinite loop
            } catch (Exception e) {
                // Catches any other unexpected exceptions during the execution of commands
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: e.printStackTrace(); // Uncomment for detailed debugging info
            }
        }
        scanner.close(); // Close the scanner when exiting
    }
}

/**
 * Main class to start the Print Shop Job Management System.
 */
public class PrintShopApp {
    public static void main(String[] args) {
        PrintShopManager manager = new PrintShopManager();
        manager.run(); // Start the application loop
    }
}
