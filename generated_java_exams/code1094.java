/*
 * Exam Question #1094
 * Generated on: 2025-05-12 17:23:51
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Subject:** Advanced Java Programming - Task Management System
 * 
 * **Task Description:**
 * 
 * You are tasked with developing a simplified "Print Job Management System". This system will manage a queue of print jobs waiting to be processed and maintain a history of completed jobs. The system should allow users to add new jobs, process the next job in the queue, list all jobs (pending and completed), and view details of a specific job by its ID.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store print jobs that are pending processing.
 *     *   Use a `java.util.ArrayList` to store print jobs that have been completed.
 *     *   Declare the completed jobs collection using the `java.util.List` interface type.
 * 
 * 2.  **Classes:**
 *     *   Create a class `PrintJob` to represent a single print job. It should have:
 *         *   A unique integer ID (auto-generated or managed by the system).
 *         *   A String description of the job.
 *         *   A String status (e.g., "Pending", "Completed").
 *         *   Private fields with public getter methods.
 *         *   A constructor.
 *     *   Create a class `PrintJobManager` that encapsulates the logic for managing the print jobs. It should contain the `Queue` and `List` instances and methods for the operations described below.
 * 
 * 3.  **Functionality:**
 *     *   **Add Job:** Prompts the user for a job description, creates a new `PrintJob` with a unique ID and "Pending" status, and adds it to the pending queue.
 *     *   **Process Next Job:** Takes the oldest job from the pending queue, changes its status to "Completed", and moves it to the completed list. Handle the case where the queue is empty.
 *     *   **List All Jobs:** Displays all jobs currently in the pending queue and all jobs in the completed list, indicating their status.
 *     *   **View Job Details:** Prompts the user for a job ID, searches both the pending queue and the completed list for the job, and displays its details. Handle the case where the job ID is not found or the input is invalid.
 *     *   **Exit:** Terminates the program.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to get user input for menu choices, job descriptions, and job IDs.
 *     *   Present a menu of options to the user.
 *     *   Use a `switch` statement to handle the user's menu selection.
 *     *   Use `System.out` for all normal output (prompts, menu, job listings, job details).
 *     *   Use `System.err` for displaying all error messages (e.g., invalid input, queue empty for processing, job not found).
 * 
 * 5.  **Error Handling:**
 *     *   Implement robust input validation for numeric inputs (menu choice, job ID).
 *     *   Use `try-catch` blocks to handle potential exceptions, such as `java.util.InputMismatchException` when reading numeric input or `java.util.NoSuchElementException` when trying to process from an empty queue. Consider wrapping the main interaction loop in a `try-catch` or using specific `try-catch` blocks around operations that might fail.
 *     *   Provide informative error messages using `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation by making fields private and providing public methods.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Ensure clean code structure (separate classes, logical methods).
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu, accepting user input, and displaying results or errors based on the selected action. Examples:
 * 
 * ```
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 1
 * Enter job description: My important document
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 1
 * Enter job description: Another file
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 2
 * Processing job ID 1: My important document (Status: Completed)
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 3
 * --- All Print Jobs ---
 * Pending Jobs:
 * ID: 2, Description: Another file, Status: Pending
 * 
 * Completed Jobs:
 * ID: 1, Description: My important document, Status: Completed
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 4
 * Enter Job ID to view: 1
 * --- Job Details ---
 * ID: 1
 * Description: My important document
 * Status: Completed
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 4
 * Enter Job ID to view: abc
 * Error: Invalid input. Please enter a numeric Job ID.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 4
 * Enter Job ID to view: 99
 * Error: Job with ID 99 not found.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 2
 * Error: No jobs in the pending queue to process.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. List All Jobs
 * 4. View Job Details
 * 5. Exit
 * Enter your choice: 5
 * Exiting Print Job Management System.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements the Print Job Management System using the required Java components and best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Encapsulates the data for a single print job (`id`, `description`, `status`).
 *     *   Fields are `private`, accessed via `public` getters.
 *     *   Includes a `setStatus` method to allow changing the job's state.
 *     *   `toString()` provides a convenient way to print job details.
 * 
 * 2.  **`PrintJobManager` Class:**
 *     *   Manages the core logic and data structures.
 *     *   Uses a `Queue<PrintJob>` named `pendingJobs` implemented by `LinkedList`. `LinkedList` is a common choice for implementing `Queue`. The `Queue` ensures jobs are processed in FIFO (First-In, First-Out) order.
 *     *   Uses a `List<PrintJob>` named `completedJobs` implemented by `ArrayList`. `ArrayList` is suitable for storing completed jobs where random access or iteration is needed. Declaring it as `List` demonstrates using the interface type.
 *     *   `nextJobId` is a simple counter to generate unique IDs.
 *     *   `addJob(String description)`: Creates a new `PrintJob`, assigns it the next ID, sets status to "Pending", and adds it to the `pendingJobs` queue using `offer()`. Includes basic input validation for the description.
 *     *   `processNextJob()`: Uses `poll()` to remove and return the head of the `pendingJobs` queue. If the queue is empty, `poll()` returns `null`, but the requirement is to throw `NoSuchElementException` if processing is attempted when empty, so we check `isEmpty()` first and throw the exception as specified. The processed job's status is updated, and it's added to the `completedJobs` list.
 *     *   `listAllJobs()`: Iterates through both `pendingJobs` (using enhanced for loop, which doesn't remove elements from the queue) and `completedJobs` to print their details.
 *     *   `findJobById(int id)`: Searches sequentially through both the `pendingJobs` queue and `completedJobs` list to find a job by its ID. Returns the `PrintJob` object or `null` if not found.
 * 
 * 3.  **`PrintJobSystem` Class (Main Class):**
 *     *   Contains the `main` method where the program execution begins.
 *     *   Uses `Scanner` for user input.
 *     *   Contains the main `while` loop that keeps the system running until the user chooses to exit.
 *     *   `printMenu()` is a helper method to display the options.
 *     *   A `try-catch` block wraps the main `while` loop. This serves as a "class-wide" or top-level exception handler, catching any unexpected exceptions that might propagate up.
 *     *   Inside the loop, a nested `try-catch (InputMismatchException)` specifically handles errors when the user enters non-integer input for the menu choice or job ID. `scanner.nextLine()` is crucial after reading numbers (`nextInt()`) to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls.
 *     *   A `switch` statement directs the program flow based on the valid menu choice.
 *     *   Specific operations like `processNextJob()` and `findJobById()`'s input reading have their own error handling (`try-catch`) for `NoSuchElementException` (from the manager) and `InputMismatchException` respectively, ensuring specific error messages are shown via `System.err`.
 *     *   `System.out` is used for prompts, menus, success messages, and job listings/details.
 *     *   `System.err` is used exclusively for error messages as required.
 *     *   The `finally` block ensures the `Scanner` is closed when the program exits (either normally or due to an unexpected exception).
 * 
 * This structure effectively demonstrates the use of `Queue`, `ArrayList` (`List`), `Scanner`, `switch`, `System.out`, `System.err`, and `try-catch` in a practical, object-oriented application with proper encapsulation and error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

/**
 * Represents a single print job.
 */
class PrintJob {
    private int id;
    private String description;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new PrintJob.
     * @param id The unique ID of the job.
     * @param description The description of the job.
     */
    public PrintJob(int id, String description) {
        this.id = id;
        this.description = description;
        this.status = "Pending"; // Default status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // --- Setters (for status change) ---
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Description: " + description + ", Status: " + status;
    }
}

/**
 * Manages the queue of pending print jobs and a list of completed jobs.
 */
class PrintJobManager {
    private Queue<PrintJob> pendingJobs;
    private List<PrintJob> completedJobs;
    private int nextJobId; // To generate unique IDs

    /**
     * Constructs a new PrintJobManager.
     */
    public PrintJobManager() {
        this.pendingJobs = new LinkedList<>(); // LinkedList implements Queue
        this.completedJobs = new ArrayList<>(); // ArrayList implements List
        this.nextJobId = 1; // Start job IDs from 1
    }

    /**
     * Adds a new print job to the pending queue.
     * @param description The description of the job.
     */
    public void addJob(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Job description cannot be empty.");
            return;
        }
        PrintJob newJob = new PrintJob(nextJobId++, description.trim());
        pendingJobs.offer(newJob); // offer is preferred over add for queues
        System.out.println("Job added successfully with ID: " + newJob.getId());
    }

    /**
     * Processes the next job in the pending queue.
     * Moves the job to the completed list.
     * @throws NoSuchElementException if the pending queue is empty.
     */
    public void processNextJob() throws NoSuchElementException {
        if (pendingJobs.isEmpty()) {
            throw new NoSuchElementException("No jobs in the pending queue to process.");
        }
        PrintJob jobToProcess = pendingJobs.poll(); // poll removes and returns the head
        jobToProcess.setStatus("Completed");
        completedJobs.add(jobToProcess);
        System.out.println("Processing job ID " + jobToProcess.getId() + ": " + jobToProcess.getDescription() + " (Status: " + jobToProcess.getStatus() + ")");
    }

    /**
     * Lists all jobs, pending and completed.
     */
    public void listAllJobs() {
        System.out.println("\n--- All Print Jobs ---");

        System.out.println("Pending Jobs:");
        if (pendingJobs.isEmpty()) {
            System.out.println("  (No pending jobs)");
        } else {
            // Iterating over the queue without removing elements
            for (PrintJob job : pendingJobs) {
                System.out.println("  " + job);
            }
        }

        System.out.println("\nCompleted Jobs:");
        if (completedJobs.isEmpty()) {
            System.out.println("  (No completed jobs)");
        } else {
            for (PrintJob job : completedJobs) {
                System.out.println("  " + job);
            }
        }
        System.out.println("----------------------");
    }

    /**
     * Finds and returns a job by its ID from either the pending or completed list.
     * @param id The ID of the job to find.
     * @return The PrintJob object if found, otherwise null.
     */
    public PrintJob findJobById(int id) {
        // Search pending queue
        for (PrintJob job : pendingJobs) {
            if (job.getId() == id) {
                return job;
            }
        }
        // Search completed list
        for (PrintJob job : completedJobs) {
            if (job.getId() == id) {
                return job;
            }
        }
        return null; // Job not found
    }
}

/**
 * Main class for the Print Job Management System.
 * Handles user interaction and menu loop.
 */
public class PrintJobSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintJobManager manager = new PrintJobManager();
        boolean running = true;

        // Class-wide exception handling (wrapping the main loop)
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default invalid choice

                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip the rest of the loop and show menu again
                }

                switch (choice) {
                    case 1:
                        System.out.print("Enter job description: ");
                        String description = scanner.nextLine();
                        manager.addJob(description);
                        break;
                    case 2:
                        try {
                            manager.processNextJob();
                        } catch (NoSuchElementException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;
                    case 3:
                        manager.listAllJobs();
                        break;
                    case 4:
                        System.out.print("Enter Job ID to view: ");
                        try {
                            int jobId = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            PrintJob job = manager.findJobById(jobId);
                            if (job != null) {
                                System.out.println("\n--- Job Details ---");
                                System.out.println(job);
                                System.out.println("-------------------");
                            } else {
                                System.err.println("Error: Job with ID " + jobId + " not found.");
                            }
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid input. Please enter a numeric Job ID.");
                            scanner.nextLine(); // Consume invalid input
                        }
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Print Job Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            scanner.close(); // Ensure scanner is closed
            System.out.println("System shut down.");
        }
    }

    /**
     * Prints the main menu to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Print Job Management System ---");
        System.out.println("1. Add New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. List All Jobs");
        System.out.println("4. View Job Details");
        System.out.println("5. Exit");
    }
}
