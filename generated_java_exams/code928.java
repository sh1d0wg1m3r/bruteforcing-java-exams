/*
 * Exam Question #928
 * Generated on: 2025-05-12 17:00:55
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Network Router Packet Processing Simulation
 * 
 * **Problem Description:**
 * 
 * You are tasked with simulating a simplified network router's packet handling mechanism. The router receives incoming network packets, stores them temporarily in a buffer, processes them one by one from the front of the buffer, and maintains a record of all packets that have been successfully processed. This simulation will help understand basic queueing principles in a practical context.
 * 
 * **Task:**
 * 
 * Implement a Java program named `RouterSimulator` that simulates this packet processing. The program should provide a text-based menu interface allowing a user to interact with the router simulation.
 * 
 * **Functionality Requirements:**
 * 
 * 1.  **Add Packet:** Allow the user to create a new packet by providing a positive integer ID and a string data payload. This new packet should be added to the end of the incoming buffer.
 * 2.  **Process Packet:** Remove the packet at the front of the incoming buffer, simulate processing it, and add it to a list of processed packets. If the incoming buffer is empty, display an appropriate error message.
 * 3.  **View Incoming Buffer:** Display the current contents of the incoming buffer in the order packets would be processed.
 * 4.  **View Processed Packets:** Display the list of all packets that have been processed so far.
 * 5.  **Exit:** Terminate the simulation.
 * 
 * **Mandatory Java Components:**
 * 
 * Your solution MUST utilize ALL of the following Java components:
 * 
 * *   `java.util.Queue`: For implementing the incoming packet buffer (First-In, First-Out behavior).
 * *   `java.util.ArrayList`: For storing the processed packets.
 * *   `java.util.List` interface: The collection storing processed packets must be declared using the `List` interface type.
 * *   `java.util.Scanner`: For reading user input from the console.
 * *   `switch` statement: For handling the user's menu choices.
 * *   `System.err`: For displaying all error messages (e.g., invalid input, attempting to process an empty queue).
 * *   `System.out`: For displaying the menu, prompts, success messages, and lists of packets.
 * *   Class-wide exception handling using `try-catch` blocks: Implement a main `try-catch` block that wraps the core simulation loop or critical operational logic within the `RouterSimulator` class to handle potential runtime exceptions (e.g., input mismatches, attempting operations on empty collections).
 * 
 * **Packet Definition:**
 * 
 * Create a simple `Packet` class (can be an inner static class within `RouterSimulator` or a separate class) with the following private fields:
 * *   `int id`: A unique identifier for the packet.
 * *   `String data`: A string representing the packet's payload.
 * Provide a constructor and public getter methods for these fields. Override the `toString()` method to provide a meaningful string representation of a packet.
 * 
 * **Best Practices:**
 * 
 * Your solution will be evaluated on demonstrating strong programming practices, including:
 * 
 * *   **Encapsulation:** Make fields private and use public methods for access/modification.
 * *   **Meaningful Names:** Use descriptive names for variables, methods, and classes.
 * *   **Comments & Documentation:** Include comments where necessary to explain complex logic and basic Javadoc for classes and public methods.
 * *   **Input Validation:** Validate user input where appropriate (e.g., packet ID must be a positive integer, menu choices must be valid numbers).
 * *   **Proper Error Handling:** Gracefully handle errors such as invalid input, attempting to process from an empty queue, etc. Use `System.err` for all error output.
 * *   **Clean Code Structure:** Organize your code logically and follow standard Java conventions.
 * *   **Resource Management:** Ensure the `Scanner` resource is properly closed.
 * 
 * **Expected Input/Output:**
 * 
 * The program should start by displaying a menu. Based on the user's integer choice, it should perform the corresponding action, prompting for additional input (like packet ID/data) when needed. Success messages and list displays should go to `System.out`. Any errors encountered (invalid menu choice, invalid packet input, processing an empty queue) must be reported to `System.err`.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness and completeness of the implemented functionality.
 * *   Successful integration and proper usage of ALL mandatory Java components.
 * *   Adherence to programming best practices (encapsulation, naming, comments, structure).
 * *   Robustness of input validation and error handling, including the use of `System.err` and the class-wide `try-catch`.
 * 
 * **Time Estimate:** This task is designed to be completed within 45-60 minutes.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- Router Simulation Started ---
 * --- Router Menu ---
 * 1. Add Packet to Buffer
 * 2. Process Packet from Buffer
 * 3. View Incoming Buffer
 * 4. View Processed Packets
 * 5. Exit
 * Enter your choice: 1
 * Enter Packet ID (positive integer): 101
 * Enter Packet Data: Hello World
 * Packet added to buffer: Packet{ID=101, Data='Hello World'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 1
 * Enter Packet ID (positive integer): 102
 * Enter Packet Data: Another Packet
 * Packet added to buffer: Packet{ID=102, Data='Another Packet'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 3
 * --- Incoming Buffer ---
 * 1. Packet{ID=101, Data='Hello World'}
 * 2. Packet{ID=102, Data='Another Packet'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 2
 * Processed packet: Packet{ID=101, Data='Hello World'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 4
 * --- Processed Packets ---
 * 1. Packet{ID=101, Data='Hello World'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 2
 * Processed packet: Packet{ID=102, Data='Another Packet'}
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 2
 * Error: Cannot process packet. Incoming buffer is empty.
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: invalid
 * Error: Invalid input type for menu choice. Please enter a number.
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 1
 * Enter Packet ID (positive integer): -5
 * Invalid Packet ID. Must be a positive integer.
 * 
 * --- Router Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Router Simulation.
 * Scanner closed.
 * ```
 *
 * EXPLANATION:
 * The provided solution implements the `RouterSimulator` class to simulate a network router's packet processing flow, adhering strictly to all specified requirements and best practices.
 * 
 * 1.  **Problem Structure:**
 *     *   An inner static class `Packet` is defined to represent the data structure for network packets, containing an `id` and `data` with appropriate getters and a `toString()` method for easy display. Encapsulation is maintained with private fields.
 *     *   The main logic resides in the `RouterSimulator` class, which manages the state of the simulation (the incoming buffer and processed packets).
 * 
 * 2.  **Mandatory Component Usage:**
 *     *   **`java.util.Queue`**: The `incomingBuffer` is declared as a `Queue<Packet>` and initialized with `new ArrayDeque<>()`. `ArrayDeque` is a common and efficient implementation of the `Queue` interface, providing FIFO behavior. The `offer()` method is used for adding elements (safer than `add` for capacity-constrained queues, though `ArrayDeque` is not capacity-constrained), and `remove()` is used for retrieving and removing the head of the queue.
 *     *   **`java.util.ArrayList`**: The `processedPackets` collection is initialized using `new ArrayList<>()`. `ArrayList` provides a dynamic array implementation suitable for storing processed items in the order they were processed.
 *     *   **`java.util.List` interface**: The `processedPackets` field is explicitly declared as `List<Packet>`, demonstrating the use of the interface type rather than the concrete implementation type (`ArrayList`). This promotes flexibility and adherence to good design principles.
 *     *   **`java.util.Scanner`**: A `Scanner` object is used to read user input from `System.in` for menu choices and packet details. It is a private field of the `RouterSimulator` instance.
 *     *   **`switch` statement**: A `switch` statement in the `runSimulation` method is used to dispatch actions based on the integer choice entered by the user from the menu.
 *     *   **`System.err`**: Used specifically for displaying error messages, such as invalid menu choices, invalid packet input (non-positive ID, non-integer), and attempting to process from an empty queue.
 *     *   **`System.out`**: Used for all non-error output, including the menu, prompts for input, success messages (packet added, packet processed), and displaying the contents of the queue and processed list.
 *     *   **Class-wide exception handling with `try-catch`**: A large `try` block wraps the main `while (running)` loop in the `runSimulation` method. This block includes multiple `catch` clauses:
 *         *   `catch (InputMismatchException e)`: Catches errors when the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input token from the scanner to prevent an infinite loop.
 *         *   `catch (NoSuchElementException e)`: Catches the specific exception thrown by `incomingBuffer.remove()` when the queue is empty. It prints an informative error to `System.err`.
 *         *   `catch (Exception e)`: Acts as a general catch-all for any other unexpected runtime exceptions, printing a generic error message to `System.err`.
 *     *   A `finally` block is used to ensure the `Scanner` resource is closed when the `runSimulation` method exits, regardless of whether an exception occurred.
 * 
 * 3.  **Best Practices and Error Handling:**
 *     *   **Encapsulation:** Fields in both `Packet` and `RouterSimulator` are private, accessed via public methods where necessary.
 *     *   **Meaningful Names:** Class names (`RouterSimulator`, `Packet`), field names (`incomingBuffer`, `processedPackets`, `scanner`, `id`, `data`), and method names (`runSimulation`, `displayMenu`, `getUserChoice`, `addPacket`, `processPacket`, `displayQueue`, `displayProcessed`) are descriptive.
 *     *   **Comments & Documentation:** Javadoc comments are provided for classes and public methods, explaining their purpose. Inline comments clarify specific implementation details, like scanner newline consumption or exception handling points.
 *     *   **Input Validation:** The `addPacket` method validates that the entered Packet ID is a positive integer. If not, an error is printed to `System.err`, and the method returns.
 *     *   **Proper Error Handling:** In addition to the class-wide `try-catch`, the `addPacket` method includes a specific `try-catch` for `InputMismatchException` when reading the packet ID, demonstrating localized error handling where appropriate. The `processPacket` method is designed to throw `NoSuchElementException` if the queue is empty, relying on the calling `runSimulation` method's `try-catch` to handle this specific case gracefully using `System.err`. The use of `scanner.next()` and `scanner.nextLine()` after catching `InputMismatchException` is crucial for recovering the scanner's state and allowing the program to continue.
 *     *   **Clean Code Structure:** The code is organized into a main class and an inner helper class, with methods broken down logically by function.
 * 
 * 4.  **Functionality Implementation:**
 *     *   The `displayMenu` method prints the options using `System.out`.
 *     *   `getUserChoice` reads the integer input.
 *     *   `addPacket` prompts for ID and data, validates the ID, creates a `Packet` object, and adds it to the `incomingBuffer` using `offer()`.
 *     *   `processPacket` attempts to remove the head of the `incomingBuffer` using `remove()`. If successful, it adds the packet to the `processedPackets` list.
 *     *   `displayQueue` iterates through the `incomingBuffer` (using an enhanced for loop, which uses the queue's iterator) and prints each packet using `System.out`.
 *     *   `displayProcessed` iterates through the `processedPackets` `ArrayList` (using a traditional for loop with `List.get()`) and prints each packet using `System.out`.
 * 
 * This solution effectively demonstrates the required Java concepts in a cohesive, practical scenario, while adhering to best practices for robustness and readability, making it suitable for a challenging exam question.
 */

import java.util.Queue;
import java.util.ArrayDeque; // A common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.NoSuchElementException; // Exception thrown by Queue.remove()
import java.util.InputMismatchException; // Exception thrown by Scanner.nextInt()

/**
 * Represents a network packet with an ID and data.
 * This is an inner static class of RouterSimulator for simplicity in a single-file solution.
 */
class Packet {
    private int id;
    private String data;

    /**
     * Constructs a new Packet.
     * @param id The unique identifier for the packet.
     * @param data The data payload of the packet.
     */
    public Packet(int id, String data) {
        this.id = id;
        this.data = data;
    }

    /**
     * Gets the packet ID.
     * @return The packet ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the packet data.
     * @return The packet data.
     */
    public String getData() {
        return data;
    }

    /**
     * Returns a string representation of the packet.
     * @return String representation.
     */
    @Override
    public String toString() {
        return "Packet{ID=" + id + ", Data='" + data + "'}";
    }
}

/**
 * Simulates a network router processing packets.
 * Manages an incoming buffer (Queue) and a list of processed packets.
 * Demonstrates usage of Queue, List, ArrayList, Scanner, switch, System.out, System.err,
 * and class-wide exception handling.
 */
public class RouterSimulator {
    // Mandatory: Queue for the incoming buffer (FIFO)
    private Queue<Packet> incomingBuffer;
    // Mandatory: List interface type for processed packets
    private List<Packet> processedPackets;
    // Mandatory: Scanner for user input
    private Scanner scanner;

    /**
     * Constructs a new RouterSimulator.
     * Initializes the incoming buffer, processed packets list, and scanner.
     */
    public RouterSimulator() {
        // Implementing Queue using ArrayDeque, which is efficient for queue operations
        incomingBuffer = new ArrayDeque<>();
        // Implementing List using ArrayList for storing processed packets
        // Declared as List interface as required
        processedPackets = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Runs the main simulation loop, handling user interaction and operations.
     * Includes class-wide exception handling to catch errors during the simulation.
     */
    public void runSimulation() {
        System.out.println("--- Router Simulation Started ---");

        // Mandatory: Class-wide exception handling wrapping the core operational loop
        try {
            boolean running = true;
            while (running) {
                displayMenu();
                int choice = getUserChoice(); // This method might indirectly lead to InputMismatchException

                // Mandatory: switch statement for menu control
                switch (choice) {
                    case 1:
                        addPacket();
                        break;
                    case 2:
                        processPacket(); // This method might throw NoSuchElementException
                        break;
                    case 3:
                        displayQueue();
                        break;
                    case 4:
                        displayProcessed();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Router Simulation.");
                        break;
                    default:
                        // Mandatory: Use System.err for invalid menu choices
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
                // Add a blank line for readability between menu interactions
                System.out.println();
            }
        } catch (InputMismatchException e) {
            // Mandatory: Catch specific exception for non-integer menu input using class-wide try-catch
            // Use System.err for error messages
            System.err.println("Error: Invalid input type for menu choice. Please enter a number.");
            // Consume the invalid input token to prevent an infinite loop
            if (scanner.hasNext()) {
                scanner.next();
            }
            // The loop will continue, prompting for input again.
        } catch (NoSuchElementException e) {
             // Mandatory: Catch specific exception for attempting to process from an empty queue
             // Use System.err for error messages
             System.err.println("Error: Cannot process packet. Incoming buffer is empty.");
             // This catch block handles the exception thrown by incomingBuffer.remove()
        } catch (Exception e) {
            // Mandatory: Catch any other unexpected exceptions using class-wide try-catch
            // Use System.err for error messages
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Optional: e.printStackTrace(System.err); // Uncomment for detailed debugging
        } finally {
            // Ensure scanner is closed regardless of exceptions
            if (scanner != null) {
                scanner.close();
                // System.out.println("Scanner closed."); // Optional confirmation
            }
        }
    }

    /**
     * Displays the main menu options to the user using System.out.
     */
    private void displayMenu() {
        System.out.println("--- Router Menu ---");
        System.out.println("1. Add Packet to Buffer");
        System.out.println("2. Process Packet from Buffer");
        System.out.println("3. View Incoming Buffer");
        System.out.println("4. View Processed Packets");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: "); // Prompt using System.out
    }

    /**
     * Reads the user's menu choice using Scanner.
     * Assumes the caller (runSimulation) handles potential InputMismatchException.
     * @return The integer choice entered by the user.
     */
    private int getUserChoice() throws InputMismatchException {
        // scanner.nextInt() reads the integer but leaves the newline character in the buffer.
        // This is fine here as the next input in the loop is another nextInt() or the loop ends.
        // InputMismatchException is explicitly handled by the calling runSimulation method's try-catch.
        return scanner.nextInt();
    }

    /**
     * Prompts the user for packet details and adds a new packet to the incoming buffer.
     * Includes input validation and error handling for packet details using System.err.
     */
    private void addPacket() {
        System.out.print("Enter Packet ID (positive integer): "); // Prompt using System.out
        int id;
        try {
            // Attempt to read the integer ID
            id = scanner.nextInt();
            // Consume the newline character left by nextInt() to prepare for nextLine()
            scanner.nextLine();

            // Input validation for Packet ID
            if (id <= 0) {
                // Mandatory: Use System.err for invalid input
                System.err.println("Invalid Packet ID. Must be a positive integer.");
                // Exit the method as input is invalid
                return;
            }

            System.out.print("Enter Packet Data: "); // Prompt using System.out
            String data = scanner.nextLine(); // Read the rest of the line for data

            Packet newPacket = new Packet(id, data);
            // Mandatory: Add to Queue using offer (preferred over add as it returns false on failure)
            if (incomingBuffer.offer(newPacket)) {
                // Mandatory: Use System.out for success messages
                System.out.println("Packet added to buffer: " + newPacket);
            } else {
                // This case is rare for ArrayDeque but good practice for Queue interface
                // Mandatory: Use System.err for potential failures
                System.err.println("Failed to add packet to buffer.");
            }
        } catch (InputMismatchException e) {
            // Mandatory: Catch specific exception for non-integer packet ID input
            // Use System.err for error messages
            System.err.println("Invalid input for Packet ID. Please enter an integer.");
            // Consume the invalid input token and the rest of the line to recover
            if (scanner.hasNext()) {
                 scanner.next();
            }
            scanner.nextLine();
        }
    }

    /**
     * Processes the packet at the front of the incoming buffer.
     * Moves the packet to the processed list (ArrayList).
     * Uses Queue.remove() which throws NoSuchElementException if the queue is empty,
     * demonstrating exception handling in the calling method (runSimulation).
     */
    private void processPacket() throws NoSuchElementException {
        // Mandatory: Use Queue.remove() to get and remove the head.
        // This method throws NoSuchElementException if the queue is empty.
        // The exception is caught by the class-wide try-catch in runSimulation().
        Packet processedPacket = incomingBuffer.remove(); // Potential exception point

        // Mandatory: Add to the processed list (ArrayList declared as List)
        processedPackets.add(processedPacket);
        // Mandatory: Use System.out for success messages
        System.out.println("Processed packet: " + processedPacket);
    }

    /**
     * Displays the contents of the incoming buffer using System.out.
     * Iterates over the Queue without removing elements.
     */
    private void displayQueue() {
        // Mandatory: Use System.out for displaying lists
        System.out.println("--- Incoming Buffer ---");
        if (incomingBuffer.isEmpty()) {
            System.out.println("Buffer is empty.");
        } else {
            // Iterate over the queue elements using an enhanced for loop (uses iterator)
            int index = 1;
            for (Packet p : incomingBuffer) {
                System.out.println(index++ + ". " + p);
            }
        }
    }

    /**
     * Displays the list of processed packets using System.out.
     * Uses the List interface methods.
     */
    private void displayProcessed() {
        // Mandatory: Use System.out for displaying lists
        System.out.println("--- Processed Packets ---");
        if (processedPackets.isEmpty()) {
            System.out.println("No packets have been processed yet.");
        } else {
            // Iterate using a traditional for loop to show index and demonstrate List.get()
            for (int i = 0; i < processedPackets.size(); i++) {
                System.out.println((i + 1) + ". " + processedPackets.get(i));
            }
        }
    }

    /**
     * Main method to start the router simulation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RouterSimulator simulator = new RouterSimulator();
        simulator.runSimulation();
    }
}
