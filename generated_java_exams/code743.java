/*
 * Exam Question #743
 * Generated on: 2025-05-12 16:34:24
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Queue Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Print Queue Management System. The system should allow users to add print jobs, process the next job in line, view pending jobs, view a history of all submitted jobs, and clear the pending queue.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a queue (`java.util.Queue`) to hold print jobs that are waiting to be processed. Jobs should be processed in a First-In, First-Out (FIFO) manner.
 *     *   Maintain a list (`java.util.List`, specifically using `java.util.ArrayList`) to keep a complete history of *all* print jobs ever submitted, including those pending and those that have been processed.
 * 2.  **Print Job Representation:**
 *     *   Create a class `PrintJob` with private fields for a unique job ID (integer), job name (String), and status (e.g., PENDING, COMPLETED - consider using an enum). Provide a constructor and appropriate public getter methods. Add a method to update the job's status.
 * 3.  **Core Functionality:**
 *     *   **Add Job:** Allow the user to add a new print job by name. Assign a unique ID automatically. The new job should be added to both the pending queue and the history list.
 *     *   **Process Next Job:** Remove the job at the front of the pending queue. Update the status of this job to COMPLETED in the history list. If the queue is empty, report an error.
 *     *   **View Pending Jobs:** Display the list of jobs currently waiting in the queue.
 *     *   **View All Jobs:** Display the complete list of all jobs ever submitted, showing their ID, name, and status.
 *     *   **Clear Pending Queue:** Remove all jobs from the pending queue.
 *     *   **Exit:** Terminate the application.
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user.
 *     *   Use a `switch` statement to handle the different menu choices.
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and job lists.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, attempting to process an empty queue).
 * 6.  **Error Handling:**
 *     *   Implement exception handling using `try-catch` blocks.
 *     *   Specifically handle potential `InputMismatchException` if the user enters non-integer input for the menu choice.
 *     *   Handle cases where operations are attempted on an empty queue.
 *     *   Include a general `try-catch` block to catch any unexpected exceptions in the main application loop.
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Implement basic input validation (e.g., check for empty job name, handle invalid menu input).
 *     *   Structure your code into logical classes (`PrintJob`, a class managing the queue and list, and a main application class).
 * 
 * **Expected Output:**
 * 
 * The program should run interactively. It should display a menu, accept user input, perform the requested action, display results or errors, and loop until the user chooses to exit.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Print Queue Management System ---
 * Select an option:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View All Jobs (History)
 * 5. Clear Pending Queue
 * 0. Exit
 * Enter your choice: 1
 * Enter job name: Document A
 * Added job: Job ID: 1, Name: "Document A", Status: PENDING
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 1
 * Enter job name: Image B
 * Added job: Job ID: 2, Name: "Image B", Status: PENDING
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 3
 * --- Pending Print Jobs ---
 * 1. Job ID: 1, Name: "Document A", Status: PENDING
 * 2. Job ID: 2, Name: "Image B", Status: PENDING
 * ------------------------
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 2
 * Processed job: Document A (ID: 1)
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 3
 * --- Pending Print Jobs ---
 * 1. Job ID: 2, Name: "Image B", Status: PENDING
 * ------------------------
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 4
 * --- All Print Jobs ---
 * 1. Job ID: 1, Name: "Document A", Status: COMPLETED
 * 2. Job ID: 2, Name: "Image B", Status: PENDING
 * ---------------------
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 99
 * Error: Invalid choice. Please enter a number from the menu.
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * Select an option:
 * ... menu ...
 * Enter your choice: 0
 * Exiting system. Goodbye!
 * Scanner closed.
 * ```
 * 
 * Your solution should be provided as a single Java code block containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a `Print Queue Management System` demonstrating the required Java concepts.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single print job with an ID, name, and status (`PENDING` or `COMPLETED`).
 *     *   Uses `private` fields and `public` getters/setters for encapsulation.
 *     *   An `enum` `PrintJobStatus` is used for type-safe status representation.
 *     *   The `toString()` method provides a convenient way to print job details.
 * 
 * 2.  **`PrintQueueManager` Class:**
 *     *   This class encapsulates the core logic and data structures.
 *     *   `private Queue<PrintJob> pendingJobs;`: Declares a `Queue` to hold jobs awaiting processing. `LinkedList` is used as the concrete implementation because it efficiently supports `Queue` operations (`offer`, `poll`, `peek`).
 *     *   `private List<PrintJob> allJobs;`: Declares a `List` using the interface, instantiated as an `ArrayList`. This list stores a historical record of *all* jobs submitted, regardless of their current status. `ArrayList` is suitable here for efficient storage and retrieval by index or iteration.
 *     *   `private int nextJobId;`: A simple counter to ensure unique IDs for each job.
 *     *   **`addJob(String jobName)`:** Creates a new `PrintJob`, adds it to *both* the `pendingJobs` queue (using `offer()`) and the `allJobs` list (using `add()`), and increments the job ID counter. Includes basic validation for the job name.
 *     *   **`processNextJob()`:** Checks if `pendingJobs` is empty. If not, it uses `poll()` to remove the head of the queue (the oldest job). It then iterates through the `allJobs` list to find the *same* job (using its unique ID) and updates its status to `COMPLETED`. An error message is printed to `System.err` if the queue is empty.
 *     *   **`viewPendingJobs()`:** Iterates through the `pendingJobs` queue using an `Iterator` (to avoid removing elements) and prints each job. Reports if the queue is empty.
 *     *   **`viewAllJobs()`:** Iterates through the `allJobs` list and prints details for every job ever submitted. Reports if the list is empty.
 *     *   **`clearQueue()`:** Uses the `clear()` method of the `Queue` to remove all pending jobs. Reports if the queue was already empty. Note that this does *not* affect the `allJobs` history.
 * 
 * 3.  **`PrintQueueApp` Class (`main` method):**
 *     *   This is the entry point of the application.
 *     *   It creates instances of `PrintQueueManager` and `Scanner`.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   **Scanner and Input Handling:** Reads user input using `scanner.nextInt()` for the menu choice. A crucial step `scanner.nextLine()` is included after `nextInt()` to consume the leftover newline character, preventing issues in subsequent `scanner.nextLine()` calls.
 *     *   **Exception Handling:**
 *         *   An inner `try-catch` specifically handles `InputMismatchException` that occurs if the user enters non-integer input for the menu choice. It prints an error to `System.err`, consumes the invalid input using `scanner.nextLine()`, and uses `continue` to restart the loop and re-show the menu.
 *         *   An outer `try-catch` block wraps the main loop to catch any other unexpected `Exception`s that might occur during execution, printing an error to `System.err` and the stack trace.
 *         *   A `finally` block ensures that the `Scanner` is closed when the application exits the `try` or `catch` block, releasing system resources.
 *     *   **`switch` Statement:** Controls the program flow based on the valid integer input received from the user, calling the appropriate method in the `PrintQueueManager`.
 *     *   **`System.out` and `System.err`:** Used throughout the application as required for normal output and error messages, respectively.
 *     *   **`printMenu()`:** A helper method to display the menu options clearly.
 * 
 * This solution effectively combines the required data structures (`Queue`, `List`/`ArrayList`), control flow (`switch`, loops), input/output (`Scanner`, `System.out`, `System.err`), and error handling (`try-catch`, input validation, checks for empty structures) within a practical, encapsulated, and well-structured program, demonstrating advanced Java programming concepts.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Iterator; // Needed to iterate Queue for viewing

// Enum for job status
enum PrintJobStatus {
    PENDING, COMPLETED
}

// Class to represent a single print job
class PrintJob {
    private int id;
    private String name;
    private PrintJobStatus status;

    /**
     * Constructs a new PrintJob.
     * @param id The unique ID for the job.
     * @param name The name of the job.
     */
    public PrintJob(int id, String name) {
        this.id = id;
        this.name = name;
        this.status = PrintJobStatus.PENDING; // New jobs are always pending
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public PrintJobStatus getStatus() {
        return status;
    }

    // --- Setter for status ---
    /**
     * Sets the status of the print job.
     * @param status The new status (PENDING or COMPLETED).
     */
    public void setStatus(PrintJobStatus status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Job ID: " + id + ", Name: \"" + name + "\", Status: " + status;
    }
}

// Class to manage the print queue and job history
class PrintQueueManager {
    private Queue<PrintJob> pendingJobs; // Queue for jobs waiting to be processed
    private List<PrintJob> allJobs;     // List for history of all jobs
    private int nextJobId;              // Counter for unique job IDs

    /**
     * Constructs a new PrintQueueManager.
     * Initializes the queue, list, and job ID counter.
     */
    public PrintQueueManager() {
        // Use LinkedList as an implementation of Queue
        this.pendingJobs = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.allJobs = new ArrayList<>();
        this.nextJobId = 1; // Start job IDs from 1
    }

    /**
     * Adds a new print job to the queue and history.
     * Performs basic validation on the job name.
     * @param jobName The name of the print job.
     */
    public void addJob(String jobName) {
        if (jobName == null || jobName.trim().isEmpty()) {
             System.err.println("Error: Job name cannot be empty.");
             return; // Exit method if name is invalid
        }
        // Trim whitespace and create a new job
        PrintJob newJob = new PrintJob(nextJobId++, jobName.trim());
        pendingJobs.offer(newJob); // Add to the end of the queue (FIFO)
        allJobs.add(newJob); // Add to the history list
        System.out.println("Added job: " + newJob);
    }

    /**
     * Processes (removes) the next job from the pending queue.
     * Updates the status of the processed job in the history list.
     * Reports an error if the pending queue is empty.
     */
    public void processNextJob() {
        if (pendingJobs.isEmpty()) {
            System.err.println("Error: No pending jobs to process.");
            return; // Exit method if queue is empty
        }

        // Retrieve and remove the head of the queue
        PrintJob processedJob = pendingJobs.poll();

        // Find the corresponding job in the allJobs list and update its status
        // Iterating through the list to find the job by ID
        for (PrintJob job : allJobs) {
            if (job.getId() == processedJob.getId()) {
                job.setStatus(PrintJobStatus.COMPLETED);
                break; // Found and updated, exit loop
            }
        }

        System.out.println("Processed job: " + processedJob.getName() + " (ID: " + processedJob.getId() + ")");
    }

    /**
     * Displays only the jobs currently waiting in the pending queue.
     * Uses an iterator to traverse the queue without removing elements.
     */
    public void viewPendingJobs() {
         if (pendingJobs.isEmpty()) {
             System.out.println("No jobs currently pending in the queue.");
             return;
         }
         System.out.println("\n--- Pending Print Jobs ---");
         // Use an iterator to view elements without removing them
         Iterator<PrintJob> iterator = pendingJobs.iterator();
         int count = 1;
         while(iterator.hasNext()) {
             System.out.println(count++ + ". " + iterator.next());
         }
         System.out.println("------------------------\n");
    }

    /**
     * Displays all jobs ever submitted (pending and completed) from the history list.
     */
    public void viewAllJobs() {
        if (allJobs.isEmpty()) {
            System.out.println("No jobs have been submitted yet.");
            return;
        }
        System.out.println("\n--- All Print Jobs ---");
        // Iterate through the history list
        for (int i = 0; i < allJobs.size(); i++) {
             System.out.println((i + 1) + ". " + allJobs.get(i));
        }
        System.out.println("---------------------\n");
    }

     /**
      * Clears all jobs from the pending queue.
      * Note: This operation does NOT change the status of jobs in the allJobs history list.
      */
    public void clearQueue() {
        if (pendingJobs.isEmpty()) {
            System.out.println("Pending queue is already empty.");
            return;
        }
        pendingJobs.clear(); // Remove all elements from the queue
        System.out.println("Pending queue has been cleared.");
    }
}

// Main application class
public class PrintQueueApp {

    public static void main(String[] args) {
        PrintQueueManager manager = new PrintQueueManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("--- Print Queue Management System ---");

        // Main application loop with comprehensive exception handling
        try { // Outer try-catch block for general exceptions
            while (running) {
                printMenu(); // Display menu options
                int choice = -1; // Initialize choice to an invalid value

                // Inner try-catch block specifically for handling Scanner input errors
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                } catch (InputMismatchException e) {
                    // Handle case where user enters non-integer input
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop and show the menu again
                }

                // Use switch statement to handle user's valid integer choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter job name: ");
                        String jobName = scanner.nextLine();
                        manager.addJob(jobName);
                        break;
                    case 2:
                        manager.processNextJob();
                        break;
                    case 3:
                        manager.viewPendingJobs();
                        break;
                    case 4:
                        manager.viewAllJobs();
                        break;
                    case 5:
                        manager.clearQueue();
                        break;
                    case 0:
                        System.out.println("Exiting system. Goodbye!");
                        running = false; // Set running to false to exit the loop
                        break;
                    default:
                        // Handle cases where the integer choice is out of the valid range
                        System.err.println("Error: Invalid choice. Please enter a number from the menu.");
                        break;
                }
                System.out.println(); // Add a newline for better separation between operations
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions that might occur
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print the stack trace for debugging purposes
        } finally {
             // This block ensures the scanner is closed regardless of whether an exception occurred
             if (scanner != null) {
                 scanner.close();
                 System.out.println("Scanner closed.");
             }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Select an option:");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View All Jobs (History)");
        System.out.println("5. Clear Pending Queue");
        System.out.println("0. Exit");
    }
}
