/*
 * Exam Question #924
 * Generated on: 2025-05-12 17:00:13
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Resource Processing Queue System**
 * 
 * You are tasked with developing a simple Resource Processing Queue System. This system manages tasks that require a certain amount of a single, limited resource pool. Tasks are processed in the order they are received (First-In, First-Out).
 * 
 * Your program should allow users to interact with the system via a command-line interface to:
 * 1.  Add new tasks to a pending queue.
 * 2.  Attempt to process the next task from the pending queue if sufficient resources are available.
 * 3.  List all tasks currently waiting in the pending queue.
 * 4.  List all tasks that have been successfully processed.
 * 5.  Display the current amount of available resources.
 * 6.  Exit the application.
 * 
 * **System Requirements:**
 * 
 * *   The system has a fixed initial amount of a generic resource.
 * *   Each task has a unique ID, a type (e.g., 'A', 'B', 'C'), and a specific amount of resource it requires for processing.
 * *   Tasks are added to a queue upon creation.
 * *   Processing the next task is only possible if the system's available resources are greater than or equal to the task's required resources. If successful, the task is removed from the queue, resources are consumed, and the task is moved to a list of completed tasks. If unsuccessful due to insufficient resources, the task remains at the front of the queue, and an appropriate message is displayed.
 * *   The user interface should be menu-driven.
 * 
 * **Implementation Requirements:**
 * 
 * 1.  Use `java.util.Queue` (specifically, an implementation like `LinkedList`) to manage the pending tasks (FIFO order).
 * 2.  Use `java.util.ArrayList` to store the completed tasks.
 * 3.  Use `java.util.List` interface for declaring variables or method return types where a collection of tasks is involved (e.g., methods returning pending or completed tasks).
 * 4.  Use `java.util.Scanner` to read user input from the console.
 * 5.  Use a `switch` statement to handle the different user commands.
 * 6.  Use `System.out` for displaying prompts, menu options, task lists, and success messages.
 * 7.  Use `System.err` for displaying error messages (e.g., invalid input, insufficient resources).
 * 8.  Implement class-wide exception handling using `try-catch` blocks, particularly around user input operations and potentially processing logic, to prevent the program from crashing due to unexpected input or states.
 * 9.  Follow best practices:
 *     *   Encapsulation: Make class fields private and provide public methods to access/modify state.
 *     *   Meaningful names: Use descriptive names for classes, methods, and variables.
 *     *   Comments/Documentation: Include Javadoc comments for classes and methods, and inline comments for complex logic.
 *     *   Input Validation: Validate user input (e.g., numeric values, valid task types, non-negative resource requirements).
 *     *   Clean code structure: Organize code logically into classes and methods.
 * 
 * **Initial State:**
 * 
 * *   The system should start with an initial resource pool of 100 units.
 * 
 * **User Interface (Example Interaction Flow):**
 * 
 * ```
 * --- Resource Processing System ---
 * Available Resources: 100
 * 
 * Choose an action:
 * 1. Add Task
 * 2. Process Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Show Available Resources
 * 6. Exit
 * Enter choice: 1
 * Enter Task ID (integer): 101
 * Enter Task Type (A, B, or C): A
 * Enter Required Resources (integer >= 0): 30
 * Task 101 (Type A, Req 30) added to queue.
 * 
 * Choose an action:
 * 1. Add Task
 * ...
 * Enter choice: 1
 * Enter Task ID (integer): 102
 * Enter Task Type (A, B, or C): B
 * Enter Required Resources (integer >= 0): 80
 * Task 102 (Type B, Req 80) added to queue.
 * 
 * Choose an action:
 * ...
 * Enter choice: 2
 * Attempting to process task 101...
 * Task 101 processed successfully. Resources remaining: 70
 * 
 * Choose an action:
 * ...
 * Enter choice: 2
 * Attempting to process task 102...
 * Insufficient resources (70 available) to process task 102 (requires 80). Task remains pending.
 * 
 * Choose an action:
 * ...
 * Enter choice: 3
 * Pending Tasks:
 * Task ID: 102, Type: B, Required Resources: 80
 * 
 * Choose an action:
 * ...
 * Enter choice: 4
 * Completed Tasks:
 * Task ID: 101, Type: A, Required Resources: 30
 * 
 * Choose an action:
 * ...
 * Enter choice: 5
 * Available Resources: 70
 * 
 * Choose an action:
 * ...
 * Enter choice: 6
 * Exiting system.
 * ```
 * 
 * Your solution should consist of the complete Java code for this system.
 *
 * EXPLANATION:
 * 
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a processing task with an ID, type, and resource requirement.
 */
class Task {
    private int taskId;
    private char taskType;
    private int requiredResources;

    /**
     * Constructs a new Task.
     *
     * @param taskId The unique identifier for the task.
     * @param taskType The type of the task (e.g., 'A', 'B', 'C').
     * @param requiredResources The amount of resources needed to process the task.
     * @throws IllegalArgumentException if requiredResources is negative.
     */
    public Task(int taskId, char taskType, int requiredResources) {
        if (requiredResources < 0) {
            throw new IllegalArgumentException("Required resources cannot be negative.");
        }
        this.taskId = taskId;
        this.taskType = taskType;
        this.requiredResources = requiredResources;
    }

    // --- Getters ---

    public int getTaskId() {
        return taskId;
    }

    public char getTaskType() {
        return taskType;
    }

    public int getRequiredResources() {
        return requiredResources;
    }

    /**
     * Returns a string representation of the Task.
     */
    @Override
    public String toString() {
        return "Task ID: " + taskId + ", Type: " + taskType + ", Required Resources: " + requiredResources;
    }
}

/**
 * Manages the resource pool, pending tasks queue, and completed tasks list.
 */
class ProcessingSystem {
    private int availableResources;
    private Queue<Task> pendingTasks;
    private List<Task> completedTasks;

    private static final int INITIAL_RESOURCES = 100; // Initial resource amount

    /**
     * Constructs a new ProcessingSystem with an initial resource pool.
     */
    public ProcessingSystem() {
        this.availableResources = INITIAL_RESOURCES;
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a task to the pending queue.
     *
     * @param task The task to add.
     */
    public void addTask(Task task) {
        if (task != null) {
            pendingTasks.offer(task); // offer is generally preferred over add in queues
            System.out.println("Task " + task.getTaskId() + " (Type " + task.getTaskType() + ", Req " + task.getRequiredResources() + ") added to queue.");
        } else {
            System.err.println("Error: Cannot add a null task.");
        }
    }

    /**
     * Attempts to process the next task in the queue.
     * Checks for sufficient resources before processing.
     */
    public void processNextTask() {
        Task nextTask = pendingTasks.peek(); // Peek to check without removing

        if (nextTask == null) {
            System.out.println("No tasks currently pending in the queue.");
            return;
        }

        System.out.println("Attempting to process task " + nextTask.getTaskId() + "...");

        if (availableResources >= nextTask.getRequiredResources()) {
            // Enough resources, process the task
            Task processedTask = pendingTasks.poll(); // Remove the task from the queue
            availableResources -= processedTask.getRequiredResources();
            completedTasks.add(processedTask);
            System.out.println("Task " + processedTask.getTaskId() + " processed successfully. Resources remaining: " + availableResources);
        } else {
            // Not enough resources
            System.err.println("Insufficient resources (" + availableResources + " available) to process task " + nextTask.getTaskId() + " (requires " + nextTask.getRequiredResources() + "). Task remains pending.");
        }
    }

    /**
     * Returns a list of tasks currently in the pending queue.
     * Note: Returns a new list to avoid external modification of the internal queue.
     *
     * @return A List view of the pending tasks.
     */
    public List<Task> getPendingTasks() {
        // Create a new list from the queue elements for display purposes
        // This avoids exposing the internal queue directly.
        return new ArrayList<>(pendingTasks);
    }

    /**
     * Returns a list of tasks that have been successfully processed.
     *
     * @return A List of completed tasks.
     */
    public List<Task> getCompletedTasks() {
        return new ArrayList<>(completedTasks); // Return a copy
    }

    /**
     * Gets the current amount of available resources.
     *
     * @return The number of available resources.
     */
    public int getAvailableResources() {
        return availableResources;
    }
}

/**
 * Main class to run the Resource Processing Queue System application.
 * Handles user input and interacts with the ProcessingSystem.
 */
public class ResourceProcessingApp {

    private static Scanner scanner = new Scanner(System.in);
    private static ProcessingSystem system = new ProcessingSystem();

    public static void main(String[] args) {
        System.out.println("--- Resource Processing System ---");

        boolean running = true;
        while (running) {
            printMenu();
            try {
                System.out.print("Enter choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        system.processNextTask();
                        break;
                    case 3:
                        listPendingTasks();
                        break;
                    case 4:
                        listCompletedTasks();
                        break;
                    case 5:
                        showAvailableResources();
                        break;
                    case 6:
                        running = false;
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number for the choice.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (IllegalArgumentException e) {
                 System.err.println("Input Error: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
            System.out.println(); // Add a blank line for readability
        }

        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Available Resources: " + system.getAvailableResources());
        System.out.println("Choose an action:");
        System.out.println("1. Add Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. List Pending Tasks");
        System.out.println("4. List Completed Tasks");
        System.out.println("5. Show Available Resources");
        System.out.println("6. Exit");
    }

    /**
     * Handles user input for adding a new task and adds it to the system.
     */
    private static void addTask() {
        try {
            System.out.print("Enter Task ID (integer): ");
            int taskId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter Task Type (A, B, or C): ");
            String typeInput = scanner.nextLine().trim().toUpperCase();
            if (typeInput.length() != 1 || (!typeInput.equals("A") && !typeInput.equals("B") && !typeInput.equals("C"))) {
                 throw new IllegalArgumentException("Invalid task type. Must be A, B, or C.");
            }
            char taskType = typeInput.charAt(0);

            System.out.print("Enter Required Resources (integer >= 0): ");
            int requiredResources = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Task constructor handles negative resource validation
            Task newTask = new Task(taskId, taskType, requiredResources);
            system.addTask(newTask);

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please ensure ID and resources are integers.");
            scanner.nextLine(); // Consume the invalid input
        } catch (IllegalArgumentException e) {
            System.err.println("Input Error: " + e.getMessage());
        }
    }

    /**
     * Displays the list of pending tasks.
     */
    private static void listPendingTasks() {
        List<Task> pending = system.getPendingTasks();
        System.out.println("--- Pending Tasks ---");
        if (pending.isEmpty()) {
            System.out.println("No tasks pending.");
        } else {
            for (Task task : pending) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays the list of completed tasks.
     */
    private static void listCompletedTasks() {
        List<Task> completed = system.getCompletedTasks();
        System.out.println("--- Completed Tasks ---");
        if (completed.isEmpty()) {
            System.out.println("No tasks completed yet.");
        } else {
            for (Task task : completed) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays the current amount of available resources.
     */
    private static void showAvailableResources() {
        System.out.println("Available Resources: " + system.getAvailableResources());
    }
}
