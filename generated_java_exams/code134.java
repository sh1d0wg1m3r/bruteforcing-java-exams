/*
 * Exam Question #134
 * Generated on: 2025-05-11 22:19:30
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Print Shop Task Manager Simulation**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified simulation of a print shop's task management system. The system should handle incoming print jobs, queue them for processing, simulate the processing of one job at a time, and archive completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **Classes:**
 *     *   Create a class named `PrintTask` to represent a single print job. It should have private fields for `id` (int), `description` (String), `pages` (int), and `status` (String, e.g., "Pending", "Completed"). Include a constructor, public getter methods for all fields, and a method to update the status. Implement a `toString()` method for easy printing of task details.
 *     *   Create a class named `PrintQueueManager` to manage the print tasks. This class should contain:
 *         *   A private `Queue<PrintTask>` to hold tasks that are waiting to be processed. Use a `LinkedList` as the concrete implementation for the `Queue`.
 *         *   A private `List<PrintTask>` to hold tasks that have been completed. Use an `ArrayList` as the concrete implementation for the `List`.
 *         *   A private integer variable to generate unique task IDs, starting from 1.
 *         *   Public methods:
 *             *   `addTask(String description, int pages)`: Creates a new `PrintTask` with status "Pending", assigns a unique ID, and adds it to the pending queue.
 *             *   `processNextTask()`: Removes the task at the head of the pending queue. If a task exists, it changes its status to "Completed" and adds it to the completed tasks list. If the queue is empty, it should report an error.
 *             *   `listPendingTasks()`: Prints the details of all tasks currently in the pending queue.
 *             *   `listCompletedTasks()`: Prints the details of all tasks in the completed tasks list.
 * 
 * 2.  **Main Application:**
 *     *   Create a main class (e.g., `PrintShopApp`) with a `main` method to run the simulation.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Implement a text-based menu system with the following options:
 *         1.  Add New Print Task
 *         2.  Process Next Task
 *         3.  List Pending Tasks
 *         4.  List Completed Tasks
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use `System.out` for displaying the menu, task lists, success messages (e.g., "Task added successfully", "Task processed successfully"), and the exit message.
 *     *   Use `System.err` for displaying error messages (e.g., "Error: Invalid choice", "Error: Cannot process task, queue is empty", "Error: Invalid input format", "Error: Pages must be positive").
 *     *   Implement robust input handling using `try-catch` blocks to catch potential `NumberFormatException` when reading numeric input (like pages or menu choice) and handle invalid inputs gracefully. Also, validate that the number of pages is positive when adding a task.
 * 
 * 3.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Implement input validation as described above.
 *     *   Provide clear error messages using `System.err`.
 *     *   Structure the code logically into separate classes.
 * 
 * **Expected Output:**
 * 
 * The program should present the menu, allow the user to interact, and display relevant information or errors based on their choices.
 * 
 * *   Adding a task: Prompt for description and pages, confirm addition.
 * *   Processing: Confirm task processed or report empty queue error.
 * *   Listing: Display tasks with their details and status from the respective collections.
 * *   Invalid input/choice: Display error message on `System.err`.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * Print Shop Task Manager Menu:
 * 1. Add New Print Task
 * 2. Process Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter choice: 1
 * Enter task description: Report Chapter 1
 * Enter number of pages: 15
 * Task added successfully.
 * 
 * Print Shop Task Manager Menu:
 * 1. Add New Print Task
 * 2. Process Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter choice: 3
 * --- Pending Tasks ---
 * ID: 1, Description: Report Chapter 1, Pages: 15, Status: Pending
 * ---------------------
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: 2
 * Task ID 1 processed successfully.
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: 4
 * --- Completed Tasks ---
 * ID: 1, Description: Report Chapter 1, Pages: 15, Status: Completed
 * -----------------------
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: 2
 * Error: Cannot process task, queue is empty.
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: abc
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: 1
 * Enter task description: Presentation
 * Enter number of pages: -5
 * Error: Number of pages must be positive.
 * 
 * Print Shop Task Manager Menu:
 * ...
 * Enter choice: 5
 * Exiting Print Shop Manager. Goodbye!
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness of implementation for all menu options.
 * *   Proper usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Adherence to object-oriented principles (encapsulation, class design).
 * *   Quality of error handling and input validation.
 * *   Code readability, naming conventions, and comments.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * The provided solution implements a simple Print Shop Task Manager simulation, demonstrating the required Java concepts in a practical scenario.
 * 
 * **Class Structure and Encapsulation:**
 * *   `PrintTask` class encapsulates the data related to a single print job (`id`, `description`, `pages`, `status`). Fields are private, accessed via public getter methods. A `setStatus` method allows controlled modification of the task's state. The `toString()` method provides a convenient way to display task information.
 * *   `PrintQueueManager` class encapsulates the core logic for managing tasks. It holds the two main collections (`pendingTasks` and `completedTasks`) as private fields, ensuring their state is managed solely by the manager's methods (`addTask`, `processNextTask`, `listPendingTasks`, `listCompletedTasks`).
 * 
 * **Data Structures:**
 * *   `java.util.Queue`: The `pendingTasks` field is declared using the `Queue` interface and instantiated with `java.util.LinkedList`. A `Queue` is appropriate here because print jobs are typically processed in the order they are received (FIFO - First-In, First-Out). Methods like `offer()` (add) and `poll()` (retrieve and remove head) are used, which are standard `Queue` operations.
 * *   `java.util.List`: The `completedTasks` field is declared using the `List` interface and instantiated with `java.util.ArrayList`. An `ArrayList` is suitable for storing completed tasks as it allows easy storage and iteration over a dynamic collection of items, and the order of completion is naturally preserved by adding to the end of the list.
 * 
 * **User Interaction and Control Flow:**
 * *   `java.util.Scanner`: Used in the `main` method of `PrintShopApp` to read user input from the console (System.in).
 * *   `switch` statement: Used in the `main` loop to direct the program flow based on the user's menu choice, calling the appropriate methods in the `PrintQueueManager`.
 * 
 * **Input/Output and Error Handling:**
 * *   `System.out`: Used for displaying the menu, confirmation messages (task added, task processed, exit), and listing the contents of the pending and completed task collections.
 * *   `System.err`: Used specifically for printing error messages, such as invalid menu choices, attempting to process from an empty queue, invalid input formats (like non-numeric input for numbers), or invalid data values (like non-positive page counts). Using `System.err` helps distinguish error output from normal program output.
 * *   `try-catch` blocks: Implemented in the `main` method to handle potential `NumberFormatException` that can occur when parsing user input strings (for menu choice and pages) into integers. This prevents the program from crashing if the user enters non-numeric text. An additional check (`if (pages <= 0)`) provides specific validation for the business logic requirement that pages must be positive. The `processNextTask` method in `PrintQueueManager` handles the empty queue case internally using an `if` check on the result of `poll()`, which returns `null` if the queue is empty, thus avoiding an exception in that specific scenario.
 * 
 * **Best Practices:**
 * *   Meaningful names (`PrintTask`, `PrintQueueManager`, `pendingTasks`, `processNextTask`, `listPendingTasks`, etc.) improve code readability.
 * *   Basic comments and Javadoc-style comments explain the purpose of classes and methods.
 * *   Input validation (pages > 0) and error handling (`try-catch`, `System.err`, empty queue check) make the program more robust.
 * *   Separation of concerns is achieved by having dedicated classes for the task object and the manager logic.
 * 
 * This solution effectively integrates the required Java components to simulate a practical workflow, demonstrating understanding of data structures, object-oriented design, user interaction, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Although we'll parse strings, good to know

/**
 * Represents a single print task with its details and status.
 */
class PrintTask {
    private int id;
    private String description;
    private int pages;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new PrintTask.
     *
     * @param id The unique ID for the task.
     * @param description A brief description of the task.
     * @param pages The number of pages in the task.
     */
    public PrintTask(int id, String description, int pages) {
        this.id = id;
        this.description = description;
        this.pages = pages;
        this.status = "Pending"; // Initial status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public int getPages() {
        return pages;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the task.
     *
     * @param status The new status (e.g., "Completed").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the PrintTask.
     *
     * @return Formatted string of task details.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Description: %s, Pages: %d, Status: %s",
                             id, description, pages, status);
    }
}

/**
 * Manages a queue of pending print tasks and a list of completed tasks.
 */
class PrintQueueManager {
    // Use Queue interface, implemented by LinkedList
    private Queue<PrintTask> pendingTasks;
    // Use List interface, implemented by ArrayList
    private List<PrintTask> completedTasks;
    private int nextTaskId; // Counter for unique task IDs

    /**
     * Constructs a new PrintQueueManager.
     * Initializes the pending queue, completed list, and task ID counter.
     */
    public PrintQueueManager() {
        this.pendingTasks = new LinkedList<>();
        this.completedTasks = new ArrayList<>();
        this.nextTaskId = 1; // Start task IDs from 1
    }

    /**
     * Adds a new task to the pending queue.
     *
     * @param description The description of the task.
     * @param pages The number of pages for the task.
     */
    public void addTask(String description, int pages) {
        PrintTask newTask = new PrintTask(nextTaskId++, description, pages);
        pendingTasks.offer(newTask); // offer is preferred over add for queues
        // System.out.println("Task added: " + newTask); // Optional confirmation
    }

    /**
     * Processes the next task from the pending queue.
     * Moves the task to the completed list if the queue is not empty.
     */
    public void processNextTask() {
        PrintTask taskToProcess = pendingTasks.poll(); // Retrieves and removes the head of the queue

        if (taskToProcess == null) {
            System.err.println("Error: Cannot process task, queue is empty.");
        } else {
            taskToProcess.setStatus("Completed");
            completedTasks.add(taskToProcess);
            System.out.println("Task ID " + taskToProcess.getId() + " processed successfully.");
        }
    }

    /**
     * Lists all tasks currently in the pending queue.
     */
    public void listPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate without removing elements
            for (PrintTask task : pendingTasks) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Lists all tasks that have been completed.
     */
    public void listCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            for (PrintTask task : completedTasks) {
                System.out.println(task);
            }
        }
        System.out.println("-----------------------");
    }
}

/**
 * Main application class for the Print Shop Task Manager simulation.
 * Handles user interaction and menu navigation.
 */
public class PrintShopApp {

    /**
     * Displays the main menu options to the user.
     */
    private static void printMenu() {
        System.out.println("Print Shop Task Manager Menu:");
        System.out.println("1. Add New Print Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. List Pending Tasks");
        System.out.println("4. List Completed Tasks");
        System.out.println("5. Exit");
    }

    /**
     * The main entry point of the application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintQueueManager manager = new PrintQueueManager();
        boolean running = true;

        // Main application loop
        while (running) {
            printMenu();
            System.out.print("Enter choice: ");
            String choiceStr = scanner.nextLine(); // Read choice as a string first
            int choice = -1; // Default value for invalid input

            // Use try-catch for parsing the menu choice
            try {
                choice = Integer.parseInt(choiceStr);
            } catch (NumberFormatException e) {
                // If parsing fails, choice remains -1, handled by the default case
            }

            // Use switch statement for menu navigation
            switch (choice) {
                case 1: // Add Task
                    System.out.print("Enter task description: ");
                    String description = scanner.nextLine();

                    System.out.print("Enter number of pages: ");
                    String pagesStr = scanner.nextLine();
                    int pages = -1; // Default value

                    // Use try-catch for parsing pages
                    try {
                        pages = Integer.parseInt(pagesStr);
                        // Input validation for pages
                        if (pages <= 0) {
                            System.err.println("Error: Number of pages must be positive.");
                        } else {
                            manager.addTask(description, pages);
                            System.out.println("Task added successfully.");
                        }
                    } catch (NumberFormatException e) {
                        System.err.println("Error: Invalid number format for pages. Please enter an integer.");
                    }
                    break;

                case 2: // Process Next Task
                    manager.processNextTask(); // This method handles the empty queue error internally
                    break;

                case 3: // List Pending Tasks
                    manager.listPendingTasks();
                    break;

                case 4: // List Completed Tasks
                    manager.listCompletedTasks();
                    break;

                case 5: // Exit
                    running = false;
                    System.out.println("Exiting Print Shop Manager. Goodbye!");
                    break;

                default: // Handle invalid menu choices
                    System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    break;
            }
            System.out.println(); // Add a blank line for better readability between iterations
        }

        scanner.close(); // Close the scanner when done
    }
}
