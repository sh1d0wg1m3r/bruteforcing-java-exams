/*
 * Exam Question #152
 * Generated on: 2025-05-11 22:22:29
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Patient Triage and Queue System
 * 
 * **Objective:** Develop a simplified patient management system for a hospital's triage area, demonstrating proficiency in core Java collection types, input handling, control flow, and exception handling.
 * 
 * **Problem Description:**
 * You are tasked with building a console-based application that simulates the process of patients arriving at a hospital triage, being added to a waiting queue, and then being called for processing. The system needs to keep track of all patients registered and manage the active waiting list.
 * 
 * **Functionality Requirements:**
 * 
 * 1.  **Add New Patient:**
 *     *   Prompt the user to enter the patient's name.
 *     *   Create a new `Patient` object. Assign a unique ID (you can use a simple counter starting from 1) and set the initial status to "Waiting".
 *     *   Add the newly created `Patient` object to a list containing *all* patients ever registered in the system.
 *     *   Add the same `Patient` object to the *waiting queue*.
 *     *   Display a confirmation message including the patient's ID and name.
 * 
 * 2.  **Process Next Patient:**
 *     *   Attempt to remove the patient at the head of the waiting queue.
 *     *   If the queue is not empty, display a message indicating which patient is being processed (ID and name). You may optionally update the status of this patient in the list of all patients to "Processed".
 *     *   If the waiting queue is empty, display an error message.
 * 
 * 3.  **View All Registered Patients:**
 *     *   Iterate through and display the details (ID, Name, Status) of every patient ever registered in the system, regardless of whether they are waiting or processed.
 * 
 * 4.  **View Waiting Queue:**
 *     *   Iterate through and display the details (ID, Name, Status) of all patients currently present in the waiting queue, *without* removing them from the queue.
 * 
 * 5.  **Exit:**
 *     *   Terminate the program.
 * 
 * **Technical Requirements:**
 * 
 * *   You **must** use the `java.util.Queue` interface (e.g., implemented by `java.util.LinkedList`) to manage the patient waiting list.
 * *   You **must** use the `java.util.ArrayList` class to store the collection of *all* patients ever registered.
 * *   Declare the variable that holds all registered patients using the `java.util.List` interface type (`List<Patient> allPatients = new ArrayList<>();`).
 * *   You **must** use `java.util.Scanner` to read user input for menu choices and patient details.
 * *   Implement the main application menu navigation using a `switch` statement.
 * *   Use `System.err` to display error messages (e.g., invalid menu choice, attempting to process from an empty queue, invalid input during patient addition).
 * *   Use `System.out` for displaying the menu, prompts, successful operation messages, and patient lists.
 * *   Implement class-wide exception handling using `try-catch` blocks. At a minimum, wrap the main application loop in a `try-catch` to handle unexpected errors, and include specific `try-catch` blocks for handling potential input errors (like non-integer input for menu choices).
 * *   Create a separate class named `Patient` with private fields for `id` (int), `name` (String), and `status` (String, e.g., "Waiting", "Processed"). Provide a constructor and public getter methods for these fields, and override the `toString()` method for easy printing.
 * *   Include basic input validation, such as checking for empty patient names and handling non-numeric input for menu selections.
 * *   Adhere to Java coding best practices: proper encapsulation (private fields, public methods), meaningful variable and method names, and appropriate comments.
 * 
 * **Expected Output:**
 * 
 * The program should present a clear menu of options. Based on user input, it should perform the requested action, providing feedback on `System.out` for successful operations and information display, and `System.err` for errors. The menu should loop until the user chooses to exit.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct implementation of all functionality requirements.
 * *   Strict adherence to all technical requirements (especially the use of specified classes/interfaces, `switch`, `Scanner`, `System.out`/`System.err`, and `try-catch`).
 * *   Quality of code structure, naming conventions, encapsulation, and comments.
 * *   Robustness in handling valid and invalid user input and managing error conditions.
 * 
 * **Time Allotment:** 45-60 minutes.
 * 
 * ```java
 * // Your code goes here
 * ```
 *
 * EXPLANATION:
 * This solution implements a simplified hospital patient triage and queue system, fulfilling all the requirements of the exam task.
 * 
 * **Structure:**
 * The solution is divided into two main classes:
 * 1.  `Patient`: A simple class representing a patient with an auto-generated ID, name, and status. It follows encapsulation principles with private fields and public getters/setters. The `toString()` method is overridden for convenient printing.
 * 2.  `HospitalManagement`: This is the main class that orchestrates the system. It holds the collections (`List` and `Queue`), handles user input, manages the application flow, and implements the required functionalities.
 * 
 * **Core Components Usage:**
 * 
 * *   **`List` and `ArrayList`:** A `List<Patient>` named `allPatients` is declared and initialized as an `ArrayList`. This list serves as a comprehensive record of every patient ever registered in the system, allowing for easy viewing of all patient history (Requirement 3). `ArrayList` is suitable here because we need dynamic resizing and efficient iteration/access by index (though iteration is primarily used here).
 * *   **`Queue`:** A `Queue<Patient>` named `waitingQueue` is declared and initialized using `LinkedList`. The `LinkedList` class implements the `Queue` interface, providing the necessary FIFO (First-In, First-Out) behavior required for a waiting line. Patients are added using `offer()` (Requirement 1) and removed using `poll()` (Requirement 2). Iterating over the queue using an enhanced for loop or an iterator allows viewing elements without removing them (Requirement 4).
 * *   **`Scanner`:** A `Scanner` object is used to read user input from the console (`System.in`) for menu selections and patient names (Requirement 1).
 * *   **`switch` Statement:** A `switch` statement in the `run()` method is used to control the program flow based on the user's integer input from the menu, directing execution to the appropriate method (Requirement for menu navigation).
 * *   **`System.err`:** `System.err.println()` is used specifically for displaying error messages, such as when an invalid menu choice is entered, when attempting to process a patient from an empty queue, or when input validation fails (Requirement for error output).
 * *   **`System.out`:** `System.out.println()` and `System.out.print()` are used for all normal program output, including displaying the menu, prompts for input, confirmation messages for successful operations, and listing patient details (Requirement for normal output).
 * *   **`try-catch` Exception Handling:**
 *     *   An outer `try-catch` block wraps the main `while` loop in the `run()` method. This demonstrates class-wide exception handling for the core application logic, catching any unforeseen runtime errors that might occur during execution.
 *     *   An inner `try-catch` block specifically handles `InputMismatchException` that might occur if the user enters non-integer input when prompted for a menu choice. This prevents the program from crashing and allows the user to try again after an error message is printed to `System.err`. A `finally` block ensures the `Scanner` resource is closed when the application terminates, regardless of how it exits.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** The `Patient` class demonstrates encapsulation by keeping its data fields private and providing public methods to interact with them. The `HospitalManagement` class also keeps its collections and scanner private.
 * *   **Meaningful Names:** Variable names (`allPatients`, `waitingQueue`, `nextPatient`, `choice`), method names (`addPatient`, `processNextPatient`, `viewAllPatients`, `printMenu`), and class names (`Patient`, `HospitalManagement`) are descriptive and indicate their purpose.
 * *   **Input Validation:** The `addPatient` method checks if the entered name is empty. The `run` method handles non-integer input for menu choices.
 * *   **Error Handling:** Specific error conditions like an empty queue during processing or invalid input are checked and handled gracefully, providing informative messages via `System.err`.
 * *   **Code Structure:** The code is organized into logical methods, each responsible for a specific task (adding, processing, viewing, printing menu). This improves readability and maintainability.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrating a solid understanding of collection management, user interaction, control flow, and robust error handling in Java.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the hospital system
class Patient {
    private static int nextId = 1; // Static counter for auto-generating unique IDs
    private int id;
    private String name;
    private String status; // e.g., "Waiting", "Processed"

    /**
     * Constructs a new Patient with an auto-generated ID and initial status "Waiting".
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.id = nextId++; // Assign unique ID and increment counter
        this.name = name;
        this.status = "Waiting"; // Patients start in waiting status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter (for status updates) ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return A formatted string with patient details.
     */
    @Override
    public String toString() {
        return "Patient [ID=" + id + ", Name='" + name + "', Status='" + status + "']";
    }
}

// Manages the hospital patient system
public class HospitalManagement {

    // Use List interface type for ArrayList
    private List<Patient> allPatients;

    // Use Queue interface type for LinkedList implementation
    private Queue<Patient> waitingQueue;

    private Scanner scanner;

    /**
     * Constructs a new HospitalManagement system, initializing collections and scanner.
     */
    public HospitalManagement() {
        this.allPatients = new ArrayList<>(); // Initialize ArrayList to store all patients
        this.waitingQueue = new LinkedList<>(); // Initialize LinkedList as the Queue implementation
        this.scanner = new Scanner(System.in); // Initialize Scanner for user input
    }

    /**
     * Runs the main application loop, handling user interaction via a menu.
     */
    public void run() {
        int choice = -1;

        // Class-wide try-catch block to handle unexpected errors in the main loop
        try {
            while (choice != 0) {
                printMenu(); // Display the main menu

                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt(); // Read integer input for menu choice
                    scanner.nextLine(); // Consume the leftover newline character

                    // Switch statement to handle different menu options
                    switch (choice) {
                        case 1:
                            addPatient(); // Call method to add a patient
                            break;
                        case 2:
                            processNextPatient(); // Call method to process the next patient
                            break;
                        case 3:
                            viewAllPatients(); // Call method to view all patients
                            break;
                        case 4:
                            viewWaitingQueue(); // Call method to view the waiting queue
                            break;
                        case 0:
                            System.out.println("Exiting Hospital Management System. Goodbye!");
                            break; // Exit the loop
                        default:
                            // Use System.err for invalid menu choices
                            System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                    }
                } catch (InputMismatchException e) {
                    // Catch exception if user enters non-integer input for menu choice
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent an infinite loop
                    choice = -1; // Reset choice to a non-exit value to continue the loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during a menu action
                    System.err.println("An unexpected error occurred during operation: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for detailed debugging information
                }
                System.out.println(); // Print a blank line for better readability between menu interactions
            }
        } catch (Exception mainLoopException) {
            // This outer catch block catches any exceptions that might escape the inner blocks
            // or occur outside the inner try-catch within the while loop's scope.
            System.err.println("A critical error occurred in the main application loop: " + mainLoopException.getMessage());
            mainLoopException.printStackTrace(); // Print stack trace for critical system errors
        } finally {
            // Ensure the scanner resource is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Handles the process of adding a new patient.
     */
    private void addPatient() {
        System.out.println("--- Add New Patient ---");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim(); // Read patient name and trim whitespace

        // Input validation: Check if the name is empty
        if (name.isEmpty()) {
            System.err.println("Patient name cannot be empty. Patient not added.");
            return; // Exit the method if validation fails
        }

        Patient newPatient = new Patient(name); // Create a new Patient object
        allPatients.add(newPatient); // Add the patient to the list of all registered patients
        waitingQueue.offer(newPatient); // Add the patient to the waiting queue (offer is safe, returns boolean)

        // Use System.out for success message
        System.out.println("Patient '" + name + "' added successfully. ID: " + newPatient.getId());
    }

    /**
     * Handles the process of processing the next patient from the waiting queue.
     */
    private void processNextPatient() {
        System.out.println("--- Process Next Patient ---");
        if (waitingQueue.isEmpty()) {
            // Use System.err for error message when queue is empty
            System.err.println("The waiting queue is empty. No patients to process.");
        } else {
            Patient nextPatient = waitingQueue.poll(); // Remove and retrieve the head of the queue

            if (nextPatient != null) { // poll() returns null if queue is empty, though we checked
                nextPatient.setStatus("Processed"); // Update the patient's status (optional)
                // Use System.out for success message
                System.out.println("Processing patient: " + nextPatient.getName() + " (ID: " + nextPatient.getId() + ")");
                // In a real system, complex processing logic would follow here.
            }
        }
    }

    /**
     * Displays details of all patients ever registered in the system.
     */
    private void viewAllPatients() {
        System.out.println("--- All Registered Patients ---");
        if (allPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            // Iterate through the List (ArrayList) and print each patient's details
            for (Patient patient : allPatients) {
                System.out.println(patient); // Uses Patient's toString() method
            }
        }
    }

    /**
     * Displays details of patients currently in the waiting queue without removing them.
     */
    private void viewWaitingQueue() {
        System.out.println("--- Patients in Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate through the Queue using an enhanced for loop (does not remove elements)
            int count = 0;
            for (Patient patient : waitingQueue) {
                // Display basic info for clarity in the queue view
                System.out.println(++count + ". " + patient.getName() + " (ID: " + patient.getId() + ")");
            }
            // Alternative using iterator:
            // Iterator<Patient> iterator = waitingQueue.iterator();
            // int count = 0;
            // while(iterator.hasNext()) {
            //     Patient patient = iterator.next();
            //     System.out.println(++count + ". " + patient.getName() + " (ID: " + patient.getId() + ")");
            // }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Hospital Management Menu ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View All Registered Patients");
        System.out.println("4. View Waiting Queue");
        System.out.println("0. Exit");
        System.out.println("------------------------------");
    }

    /**
     * Main method - the entry point of the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalManagement system = new HospitalManagement();
        system.run(); // Start the application
    }
}
