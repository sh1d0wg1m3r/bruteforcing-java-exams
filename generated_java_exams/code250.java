/*
 * Exam Question #250
 * Generated on: 2025-05-11 22:39:17
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment management system for a small hospital clinic. The system needs to manage patients who arrive and wait for an available slot, and schedule them into specific time slots. Patients who arrive without a prior appointment are added to a waiting list and are scheduled on a first-come, first-served basis when a slot becomes available.
 * 
 * **Your Task:**
 * 
 * Implement a Java program that simulates this system. The program should provide a command-line interface for the user (clinic staff) to interact with the system.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a waiting list of patients using a `java.util.Queue`. Patients are added to the tail and removed from the head.
 *     *   Maintain a list of scheduled appointments using a `java.util.List`. Specifically, use a `java.util.ArrayList` implementation.
 * 2.  **Patient Representation:** Create a simple `Patient` class (or equivalent structure) to hold patient information (e.g., name, a unique ID).
 * 3.  **Appointment Representation:** Create a simple `Appointment` class (or equivalent structure) to link a `Patient` to a specific `timeSlot` (represented as a `String`, e.g., "10:00 AM").
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user commands and input data from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add Patient to Waiting List
 *         2.  Schedule Next Patient from Waiting List
 *         3.  List Waiting Patients
 *         4.  List Scheduled Appointments
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 5.  **Functionality:**
 *     *   **Add Patient to Waiting List:** Prompt for the patient's name, create a `Patient` object, and add it to the waiting `Queue`. Assign a simple unique ID (e.g., auto-incrementing number).
 *     *   **Schedule Next Patient:** Attempt to remove (dequeue) the next patient from the waiting `Queue`. If successful, prompt the user for a time slot (String). Create an `Appointment` object and add it to the scheduled `List`. If the waiting list is empty, report an error. *Bonus (Optional but good practice):* Check if the time slot is already taken and report an error if it is. For this exam, a simple implementation without the time slot conflict check is acceptable if time is limited, but demonstrating the check is preferred.
 *     *   **List Waiting Patients:** Display the current patients in the waiting `Queue` in the order they will be scheduled.
 *     *   **List Scheduled Appointments:** Display the current scheduled appointments from the `List`.
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues (e.g., invalid user input).
 *     *   Use `System.err` to print error messages (e.g., invalid menu choice, scheduling from an empty list, invalid input format).
 *     *   Use `System.out` for menu display, prompts, and normal output (lists, success messages).
 *     *   Perform basic input validation where necessary (e.g., ensuring menu input is an integer).
 * 7.  **Code Structure and Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods) for your classes.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadoc is a plus).
 *     *   Ensure clean and readable code structure.
 * 
 * **Expected Output:**
 * 
 * The program should run continuously, presenting the menu, accepting user input, and performing actions based on the input. Output should clearly indicate the results of operations (e.g., "Patient added to waitlist", "Appointment scheduled"). Errors should be clearly marked using `System.err`.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 1
 * Enter patient name: Alice
 * Patient Alice (ID: 1) added to waiting list.
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 1
 * Enter patient name: Bob
 * Patient Bob (ID: 2) added to waiting list.
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 3
 * Waiting List:
 * [Patient ID: 1, Name: Alice]
 * [Patient ID: 2, Name: Bob]
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 2
 * Enter time slot (e.g., 10:00 AM): 10:30 AM
 * Scheduled appointment for Patient Alice (ID: 1) at 10:30 AM.
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 4
 * Scheduled Appointments:
 * [Patient: Patient ID: 1, Name: Alice, Time: 10:30 AM]
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient from Waiting List
 * 3. List Waiting Patients
 * 4. List Scheduled Appointments
 * 5. Exit
 * Enter choice: 5
 * Exiting system.
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation and usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`.
 * *   Proper use of `System.out` and `System.err`.
 * *   Effective class-wide exception handling with `try-catch`.
 * *   Correct logic for adding to waitlist and scheduling from waitlist.
 * *   Clear and accurate listing of patients and appointments.
 * *   Adherence to best practices (encapsulation, naming, comments).
 * *   Robustness against invalid user input.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * This solution implements the `HospitalScheduler` system as described, utilizing all required Java components and adhering to best practices.
 * 
 * 1.  **`Patient` Class:** A simple class representing a patient with a unique `patientId` (auto-generated) and `name`. It uses private fields and public getters, demonstrating encapsulation. The `toString()` method provides a convenient string representation.
 * 2.  **`Appointment` Class:** Represents a scheduled appointment, linking a `Patient` object to a `timeSlot` string. It also uses private fields, public getters, and a `toString()` method for encapsulation and easy printing.
 * 3.  **`HospitalScheduler` Class:** This is the main class orchestrating the system.
 *     *   **Data Structures:**
 *         *   `private Queue<Patient> waitingList;`: Declared as a `Queue` interface type, but initialized with `new LinkedList<>()`. `LinkedList` is a common implementation of `Queue` providing FIFO (First-In, First-Out) behavior suitable for a waiting line.
 *         *   `private List<Appointment> scheduledAppointments;`: Declared as a `List` interface type, initialized with `new ArrayList<>()`. `ArrayList` is used for storing the scheduled appointments, allowing dynamic resizing and easy iteration.
 *     *   **Encapsulation:** The `waitingList` and `scheduledAppointments` are private fields, accessed and modified only through the class's public methods (`addPatientToWaitlist`, `scheduleNextPatient`, `listWaitingPatients`, `listScheduledAppointments`).
 *     *   **`Scanner`:** A `private Scanner scanner;` is used for reading user input in the `run()` method. It's initialized once and closed in the `finally` block of the main `try-catch`.
 *     *   **`addPatientToWaitlist(String name)`:** Creates a new `Patient` and adds it to the `waitingList` using `queue.offer()`. `offer()` is generally preferred over `add()` for queues as it handles potential capacity constraints more gracefully (though `LinkedList` is unbounded).
 *     *   **`scheduleNextPatient(String timeSlot)`:**
 *         *   Checks if the `waitingList` is empty using `queue.isEmpty()`. If so, it prints an error to `System.err` and returns.
 *         *   Includes an optional check for time slot conflicts by iterating through the `scheduledAppointments` `List`. If a conflict is found, it prints an error to `System.err` and returns.
 *         *   If the waitlist is not empty and the slot is available, it removes the next patient using `waitingList.poll()`. `poll()` retrieves and removes the head of the queue, returning `null` if the queue is empty (though the `isEmpty()` check prevents this `null` case here).
 *         *   Creates a new `Appointment` object and adds it to the `scheduledAppointments` `List` using `list.add()`.
 *         *   Prints a success message to `System.out`.
 *     *   **`listWaitingPatients()`:** Iterates through the `waitingList` using an enhanced for loop and prints each `Patient` using `System.out`. It checks for an empty list first.
 *     *   **`listScheduledAppointments()`:** Iterates through the `scheduledAppointments` `List` and prints each `Appointment` using `System.out`. It checks for an empty list first.
 *     *   **`displayMenu()`:** A helper method to print the user options to `System.out`.
 *     *   **`run()`:** This method contains the main application loop (`while(running)`).
 *         *   **Class-wide Exception Handling:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This fulfills the requirement for class-wide handling, catching any unexpected runtime errors that might occur within the main application logic. A `finally` block ensures the `Scanner` is closed.
 *         *   **Input Validation & `System.err`:** Inside the loop, a nested `try-catch(InputMismatchException e)` specifically handles cases where the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input using `scanner.next()` to prevent an infinite loop caused by the invalid token remaining in the scanner buffer. Basic checks for empty patient name or time slot are also included, printing errors to `System.err`.
 *         *   **`switch` Statement:** Controls the flow based on the user's valid integer choice, calling the appropriate methods (`addPatientToWaitlist`, `scheduleNextPatient`, `listWaitingPatients`, `listScheduledAppointments`) or setting `running` to false for exit. The `default` case handles invalid menu numbers, printing an error to `System.err`.
 *         *   **`System.out`:** Used for printing the menu, prompts, success messages, and the contents of the waiting list and scheduled appointments.
 *     *   **`main(String[] args)`:** The entry point of the program, which creates a `HospitalScheduler` instance and calls its `run()` method.
 * 
 * This solution effectively integrates `Queue`, `List` (via `ArrayList`), `Scanner`, `switch`, `System.out`, `System.err`, and `try-catch` within a practical scenario, demonstrating core Java concepts and good programming practices.
 */

import java.util.Queue;
import java.util.LinkedList; // A common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private static int nextId = 1; // Auto-incrementing ID
    private final int patientId;
    private final String name;

    /**
     * Constructs a new Patient with an auto-assigned ID.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.patientId = nextId++;
        this.name = name;
    }

    /**
     * Gets the unique ID of the patient.
     * @return The patient ID.
     */
    public int getPatientId() {
        return patientId;
    }

    /**
     * Gets the name of the patient.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Name: " + name;
    }
}

/**
 * Represents a scheduled appointment.
 */
class Appointment {
    private final Patient patient;
    private final String timeSlot;

    /**
     * Constructs a new Appointment.
     * @param patient The patient scheduled for the appointment.
     * @param timeSlot The time slot for the appointment (e.g., "10:30 AM").
     */
    public Appointment(Patient patient, String timeSlot) {
        this.patient = patient;
        this.timeSlot = timeSlot;
    }

    /**
     * Gets the patient for this appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the time slot for this appointment.
     * @return The time slot string.
     */
    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Patient: " + patient.toString() + ", Time: " + timeSlot;
    }
}

/**
 * Manages the hospital's patient waiting list and scheduled appointments.
 */
public class HospitalScheduler {

    private Queue<Patient> waitingList;
    private List<Appointment> scheduledAppointments;
    private Scanner scanner;

    /**
     * Constructs a new HospitalScheduler.
     * Initializes the waiting list and scheduled appointments list.
     */
    public HospitalScheduler() {
        this.waitingList = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.scheduledAppointments = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a patient to the waiting list.
     * @param name The name of the patient.
     */
    public void addPatientToWaitlist(String name) {
        Patient patient = new Patient(name);
        waitingList.offer(patient); // offer() is preferred over add() for queues as it returns false instead of throwing exception if queue is full (though LinkedList won't be full)
        System.out.println("Patient " + patient.getName() + " (ID: " + patient.getPatientId() + ") added to waiting list.");
    }

    /**
     * Schedules the next patient from the waiting list into a specified time slot.
     * Handles empty waitlist and time slot conflicts.
     * @param timeSlot The time slot for the appointment.
     */
    public void scheduleNextPatient(String timeSlot) {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule patient.");
            return;
        }

        // Optional Bonus: Check for time slot conflict
        for (Appointment appt : scheduledAppointments) {
            if (appt.getTimeSlot().equalsIgnoreCase(timeSlot)) {
                System.err.println("Error: Time slot " + timeSlot + " is already taken.");
                return;
            }
        }

        Patient nextPatient = waitingList.poll(); // Retrieves and removes the head of the queue
        Appointment newAppointment = new Appointment(nextPatient, timeSlot);
        scheduledAppointments.add(newAppointment);
        System.out.println("Scheduled appointment for " + nextPatient.getName() + " (ID: " + nextPatient.getPatientId() + ") at " + timeSlot + ".");
    }

    /**
     * Lists all patients currently in the waiting list.
     */
    public void listWaitingPatients() {
        if (waitingList.isEmpty()) {
            System.out.println("Waiting List: (Empty)");
            return;
        }
        System.out.println("Waiting List:");
        // Iterate through the queue without removing elements
        for (Patient patient : waitingList) {
            System.out.println("[" + patient + "]");
        }
    }

    /**
     * Lists all currently scheduled appointments.
     */
    public void listScheduledAppointments() {
        if (scheduledAppointments.isEmpty()) {
            System.out.println("Scheduled Appointments: (Empty)");
            return;
        }
        System.out.println("Scheduled Appointments:");
        for (Appointment appt : scheduledAppointments) {
            System.out.println("[" + appt + "]");
        }
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Patient from Waiting List");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Scheduled Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Runs the main application loop, handling user input and actions.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Class-wide try-catch block wrapping the main application loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;

                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop and show menu again
                } finally {
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                }


                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String patientName = scanner.nextLine();
                        if (patientName == null || patientName.trim().isEmpty()) {
                             System.err.println("Error: Patient name cannot be empty.");
                             continue;
                        }
                        addPatientToWaitlist(patientName.trim());
                        break;
                    case 2:
                        System.out.print("Enter time slot (e.g., 10:00 AM): ");
                        String timeSlot = scanner.nextLine();
                         if (timeSlot == null || timeSlot.trim().isEmpty()) {
                             System.err.println("Error: Time slot cannot be empty.");
                             continue;
                        }
                        scheduleNextPatient(timeSlot.trim());
                        break;
                    case 3:
                        listWaitingPatients();
                        break;
                    case 4:
                        listScheduledAppointments();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main execution flow
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run();
    }
}
