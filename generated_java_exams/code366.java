/*
 * Exam Question #366
 * Generated on: 2025-05-11 23:00:53
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Hospital Appointment Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple console-based application for a hospital to manage patient appointments. The system should maintain a waiting list of patients and a record of patients who have been served.
 * 
 * The application should present a menu to the user with the following options:
 * 1.  Add Patient to Waiting List
 * 2.  Call Next Patient (from waiting list to served)
 * 3.  List Waiting Patients
 * 4.  List Served Patients
 * 5.  Exit
 * 
 * The system must adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage the waiting list of patients. Patients should be served in the order they arrive (First-In, First-Out).
 *     *   Use a `java.util.List` (specifically a `java.util.ArrayList`) to keep track of patients who have been served.
 * 2.  **User Input:**
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient names.
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options.
 *     *   The application should loop until the user chooses the "Exit" option.
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, success messages, and lists of patients.
 *     *   Use `System.err` to display error messages (e.g., invalid input, attempting to call a patient when the waiting list is empty).
 * 5.  **Error Handling:**
 *     *   Implement robust input validation for menu choices. Handle cases where the user enters non-numeric input or a number outside the valid range.
 *     *   Implement error handling for attempting to call a patient when the waiting queue is empty.
 *     *   Include a class-wide `try-catch` block (or around the main application loop) to catch unexpected exceptions and provide a graceful exit or error message.
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Patient` class (simple, just needs a name).
 *     *   Create a `HospitalAppointmentSystem` class that encapsulates the data structures (`Queue`, `List`) and the application logic (menu handling, operations). Use private fields and public methods.
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and Javadoc where necessary.
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The application should display a menu, prompt for input, perform the requested action, and display relevant output or error messages.
 * 
 * *   When adding a patient: Prompt for name, confirm addition.
 * *   When calling next patient: If queue is not empty, display patient name and confirm they are being served. If queue is empty, display an error message on `System.err`.
 * *   When listing waiting patients: Display a numbered list of patients in the queue order. If empty, state that the waiting list is empty.
 * *   When listing served patients: Display a numbered list of served patients. If empty, state that no patients have been served yet.
 * *   Invalid menu input: Display an error message on `System.err` and redisplay the menu.
 * *   Unexpected errors: Display a general error message on `System.err`.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`.
 * *   Correct usage of `System.out` and `System.err` for appropriate output types.
 * *   Effective implementation of input validation and error handling using `try-catch`.
 * *   Proper object-oriented design (encapsulation, classes).
 * *   Code readability, comments, and adherence to best practices.
 * *   Correct implementation of the required functionalities.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment System demonstrating the required Java concepts.
 * 
 * 1.  **Object-Oriented Structure:**
 *     *   A `Patient` class is created to represent patients, holding only their name. This demonstrates basic encapsulation.
 *     *   A `HospitalAppointmentSystem` class encapsulates the application's state (`waitingQueue`, `servedPatientsList`, `scanner`) and behavior (menu logic, operations). Fields are `private`, and operational methods (`addPatient`, `callNextPatient`, etc.) are `private` helpers called by the public `run()` method, which starts the application.
 * 
 * 2.  **Data Structures (`Queue`, `ArrayList`, `List`):**
 *     *   `private Queue<Patient> waitingQueue;`: A `Queue` is used for the waiting list, correctly modeling the FIFO (First-In, First-Out) nature of a waiting line. `java.util.LinkedList` is used as the concrete implementation because it efficiently supports queue operations (`offer` to add, `poll` to remove from the head).
 *     *   `private List<Patient> servedPatientsList;`: A `List` is used to store patients after they have been served. `java.util.ArrayList` is the concrete implementation, suitable for storing a dynamic list of items where access by index or iteration is common. The use of the `List` interface type for the variable demonstrates polymorphism and good practice.
 * 
 * 3.  **User Input (`Scanner`):**
 *     *   `private Scanner scanner = new Scanner(System.in);`: A `Scanner` is initialized to read input from the console (`System.in`). It's managed within the `HospitalAppointmentSystem` class and closed in the `finally` block to release system resources. `scanner.nextInt()` is used for the menu choice, followed by `scanner.nextLine()` to consume the leftover newline character, which is crucial before reading subsequent lines using `nextLine()` (like patient names).
 * 
 * 4.  **Control Flow (`switch`, loop):**
 *     *   The `run()` method contains a `while (choice != 5)` loop that continues until the user selects the "Exit" option (5).
 *     *   Inside the loop, after reading the user's `choice`, a `switch` statement is used to direct execution to the appropriate private method (`addPatient`, `callNextPatient`, etc.) based on the user's selection. The `default` case handles invalid numeric input within the valid range check.
 * 
 * 5.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for standard output: displaying the menu, prompts, success messages (patient added, patient called), and the lists of patients.
 *     *   `System.err.println()` is specifically used for error messages: invalid menu choices, attempting to call from an empty queue, empty patient name, and messages from the exception handlers. This is good practice for distinguishing between normal output and error conditions.
 * 
 * 6.  **Error Handling (`try-catch`):**
 *     *   **Input Validation:** A `try-catch (InputMismatchException e)` block is placed *inside* the `while` loop around the `scanner.nextInt()` call. This specifically catches the error if the user enters text or non-integer data when prompted for a number, preventing the program from crashing and allowing it to inform the user and continue. `scanner.next()` is called within the catch block to consume the invalid token that caused the exception, preventing an infinite loop.
 *     *   **Operation-Specific Error:** The `callNextPatient()` method checks if `waitingQueue.poll()` returns `null`. If it does, it means the queue was empty, and an error message is printed to `System.err`. This is a common pattern for handling expected operational failures.
 *     *   **General Exception Handling:** A `try-catch (Exception e)` block wraps the *entire* `while` loop in the `run()` method. This serves as a catch-all for any other unexpected runtime exceptions that might occur within the main application flow. It prints an error message and the stack trace to `System.err` before the `finally` block ensures the scanner is closed.
 *     *   **Patient Name Validation:** A basic check for empty or whitespace-only patient name is included in `addPatient()`, using `System.err` for the error message.
 * 
 * 7.  **Best Practices:**
 *     *   Meaningful names like `waitingQueue`, `servedPatientsList`, `addPatient`, `callNextPatient` are used.
 *     *   Comments explain the purpose of classes, methods, and key code sections. Javadoc comments are included for public/protected methods and classes.
 *     *   The code is structured logically with separate methods for distinct operations.
 *     *   The `finally` block ensures the `Scanner` resource is closed, preventing resource leaks.
 * 
 * This solution effectively integrates all the required components into a functional system, demonstrating understanding of data structures, control flow, input/output handling, object-oriented principles, and crucial error management techniques in Java.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the system
class Patient {
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the Patient.
     * @return The patient's name.
     */
    @Override
    public String toString() {
        return name;
    }
}

// Manages hospital appointments
public class HospitalAppointmentSystem {

    // Queue for patients waiting to be seen (FIFO)
    private Queue<Patient> waitingQueue;

    // List for patients who have been served
    private List<Patient> servedPatientsList;

    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new HospitalAppointmentSystem.
     * Initializes the waiting queue, served patients list, and scanner.
     */
    public HospitalAppointmentSystem() {
        waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        servedPatientsList = new ArrayList<>(); // ArrayList implements List
        scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Call Next Patient");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Served Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list.
     * Prompts the user for the patient's name.
     */
    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return;
        }
        Patient newPatient = new Patient(name.trim());
        waitingQueue.offer(newPatient); // offer is safer than add, returns false on failure (unlikely for LinkedList)
        System.out.println(newPatient.getName() + " added to the waiting list.");
    }

    /**
     * Calls the next patient from the waiting list and moves them to the served list.
     * Handles the case where the waiting list is empty.
     */
    private void callNextPatient() {
        Patient nextPatient = waitingQueue.poll(); // poll retrieves and removes the head, returns null if empty

        if (nextPatient == null) {
            System.err.println("Error: Waiting list is empty. No patient to call.");
        } else {
            servedPatientsList.add(nextPatient);
            System.out.println("Calling " + nextPatient.getName() + ". Moved to served list.");
        }
    }

    /**
     * Lists all patients currently in the waiting queue.
     * Displays a message if the queue is empty.
     */
    private void listWaitingPatients() {
        System.out.println("\n--- Waiting Patients ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate without removing elements
            int i = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(i++ + ". " + patient.getName());
            }
        }
    }

    /**
     * Lists all patients who have been served.
     * Displays a message if no patients have been served yet.
     */
    private void listServedPatients() {
        System.out.println("\n--- Served Patients ---");
        if (servedPatientsList.isEmpty()) {
            System.out.println("No patients have been served yet.");
        } else {
            int i = 1;
            for (Patient patient : servedPatientsList) {
                System.out.println(i++ + ". " + patient.getName());
            }
        }
    }

    /**
     * Runs the main application loop.
     * Handles user input, menu navigation, and exception handling.
     */
    public void run() {
        int choice = -1; // Initialize with a value outside the menu range

        // Class-wide try-catch around the main application loop
        try {
            while (choice != 5) {
                displayMenu();

                try {
                    choice = scanner.nextInt(); // Read integer input for choice
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            callNextPatient();
                            break;
                        case 3:
                            listWaitingPatients();
                            break;
                        case 4:
                            listServedPatients();
                            break;
                        case 5:
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input specifically
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to stay in loop and re-display menu
                }
                // No need for a catch(Exception e) here if we handle specific expected errors
                // and rely on the outer try-catch for truly unexpected issues.
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalAppointmentSystem system = new HospitalAppointmentSystem();
        system.run();
    }
}
