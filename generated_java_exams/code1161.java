/*
 * Exam Question #1161
 * Generated on: 2025-05-12 17:33:26
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Resource Allocation and Task Processing System
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simplified command-line application for managing resource allocation and task processing. The system has a fixed pool of resources. Users can submit tasks, each requiring a specific number of resources. Tasks are placed in a queue and processed sequentially when sufficient resources are available. The system should allow users to interact via commands to submit tasks, process the next task in the queue, view the current queue, view completed tasks, and check resource status.
 * 
 * **System Requirements:**
 * 
 * 1.  **Resource Management:** The system is initialized with a total number of available resources.
 * 2.  **Task Management:**
 *     *   Each task has a unique ID and requires a specific number of resources.
 *     *   Tasks submitted by the user are added to a waiting queue.
 *     *   Tasks are processed from the front of the queue (FIFO).
 * 3.  **Processing Logic:**
 *     *   A task can only be processed if the currently available resources are greater than or equal to the resources required by the task at the front of the queue.
 *     *   When a task is processed, the required resources are temporarily consumed (for the duration of processing, which is instantaneous in this simulation), then immediately released back into the available pool. The task is then moved to a list of completed tasks.
 *     *   If a task at the front of the queue cannot be processed due to insufficient resources, it remains in the queue, and no other tasks are processed until resources become available or a different command is issued.
 * 4.  **User Interface (Command Line):** The application should accept the following commands via `Scanner`:
 *     *   `submit <required_resources>`: Creates a new task with the specified resource requirement and adds it to the queue. `<required_resources>` must be a positive integer.
 *     *   `process`: Attempts to process the next task in the queue.
 *     *   `queue`: Displays the tasks currently in the waiting queue.
 *     *   `completed`: Displays the tasks that have been successfully processed.
 *     *   `resources`: Displays the current total and available resources.
 *     *   `exit`: Terminates the application.
 * 5.  **Input Validation and Error Handling:**
 *     *   Validate user input for commands and resource requirements.
 *     *   Handle invalid commands or arguments gracefully.
 *     *   Report errors using `System.err`.
 *     *   Report normal output (prompts, status, confirmations) using `System.out`.
 *     *   Implement class-wide exception handling using `try-catch` blocks to prevent the program from crashing due to unexpected errors during the main execution loop.
 * 
 * **Implementation Requirements:**
 * 
 * *   Use `java.util.Queue` (specifically, use `java.util.LinkedList` as the concrete implementation) for the waiting task queue.
 * *   Use `java.util.List` (specifically, use `java.util.ArrayList` as the concrete implementation) for storing completed tasks.
 * *   Use `java.util.Scanner` for reading user input from the console.
 * *   Use a `switch` statement to handle different user commands.
 * *   Use `System.err` for printing error messages.
 * *   Use `System.out` for printing normal output and prompts.
 * *   Implement class-wide `try-catch` blocks in the main application loop to catch and report exceptions.
 * *   Design the system using classes with proper encapsulation (private fields, public methods).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 * *   Implement input validation and specific error handling where necessary (e.g., `NumberFormatException`).
 * 
 * **Expected Output:**
 * 
 * The output will vary based on user interaction. Examples:
 * 
 * *   Submitting a task: `Task <ID> requiring <resources> resources submitted. Added to queue.`
 * *   Viewing queue: `--- Waiting Queue ---` followed by list of tasks or `Queue is empty.`
 * *   Viewing completed: `--- Completed Tasks ---` followed by list of tasks or `No tasks completed yet.`
 * *   Viewing resources: `Resources: <available>/<total> available.`
 * *   Attempting to process (success): `Processing Task <ID> requiring <resources> resources... Done. Resources released. Task moved to completed.`
 * *   Attempting to process (queue empty): `Queue is empty. No tasks to process.`
 * *   Attempting to process (insufficient resources): `Task <ID> at front of queue requires <resources> resources, but only <available> available. Cannot process yet.`
 * *   Invalid command: `Error: Unknown command. Type 'help' for options.` (Optional: 'help' command)
 * *   Invalid submit argument: `Error: Invalid resource amount. Please provide a positive integer.` (or similar)
 * *   Generic error during execution: `An unexpected error occurred: <error message>` (printed to `System.err`)
 * 
 * **Assessment Focus:**
 * 
 * Your solution will be assessed on:
 * *   Correct usage of `Queue`, `List`, `Scanner`, `switch`, `System.err`, `System.out`.
 * *   Effective implementation of resource allocation and task processing logic.
 * *   Proper use of `try-catch` for error handling, including a top-level handler.
 * *   Adherence to object-oriented principles (encapsulation, meaningful names).
 * *   Input validation and graceful error reporting.
 * *   Code clarity, structure, and documentation.
 * 
 * ---
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * This solution implements a `ResourceAllocationSystem` that manages tasks using a queue and a list, simulating a simple resource-constrained processing environment.
 * 
 * 1.  **`Task` Class:**
 *     *   This is a simple class representing a unit of work.
 *     *   It uses private fields (`taskId`, `requiredResources`) demonstrating **encapsulation**.
 *     *   The constructor validates that `requiredResources` is positive, throwing an `IllegalArgumentException` if not, demonstrating basic **input validation** within the object itself.
 *     *   Getter methods provide controlled access to the private data.
 *     *   `toString()` provides a convenient way to represent a task for printing.
 * 
 * 2.  **`ResourceAllocationSystem` Class:**
 *     *   This is the main class managing the system's state and logic.
 *     *   **Encapsulation:** `totalResources`, `availableResources`, `taskQueue`, `completedTasks`, `nextTaskId`, and `scanner` are all private fields.
 *     *   **Queue Usage:** `taskQueue` is declared as `Queue<Task>` and initialized with `new LinkedList<>()`.
 *         *   `submitTask` uses `offer()` to add tasks to the end of the queue (FIFO).
 *         *   `processNextTask` uses `peek()` to look at the task at the front without removing it (to check resources first) and `poll()` to remove the task *only if* it can be processed.
 *     *   **List Usage:** `completedTasks` is declared as `List<Task>` and initialized with `new ArrayList<>()`. This demonstrates programming against the `List` interface while using a concrete `ArrayList` implementation. Completed tasks are added to this list.
 *     *   **Scanner Usage:** A `Scanner` instance is created to read user input from `System.in`. It's closed when the system exits to release resources.
 *     *   **Switch Statement:** The `run()` method reads the user's command and uses a `switch` statement to dispatch to the appropriate method (`submitTask`, `processNextTask`, `viewQueue`, etc.). This provides clear flow control based on user input.
 *     *   **System.out and System.err:**
 *         *   `System.out.println` is used for normal messages like prompts, command confirmations, status updates, and task listings.
 *         *   `System.err.println` is used specifically for reporting errors, such as unknown commands, invalid input formats, or issues during task submission.
 *     *   **Class-wide Exception Handling (`try-catch`):**
 *         *   The `run()` method contains a large `try-catch(Exception e)` block around the main `while` loop. This is the *class-wide* or top-level handler for this part of the application. It catches any unexpected `Exception` that might occur during command processing and reports it to `System.err` without crashing the program.
 *         *   More specific `try-catch` blocks are used for input validation within the `submit` case of the switch statement to handle `NumberFormatException` specifically when parsing the resource amount.
 *     *   **Input Validation:**
 *         *   The `submit` command specifically catches `NumberFormatException` if the argument cannot be parsed as an integer.
 *         *   The `Task` constructor validates that the required resources are positive.
 *         *   The `ResourceAllocationSystem` constructor validates that the total resources are positive.
 *     *   **Processing Logic:** `processNextTask` implements the core logic: check if the queue is empty, peek at the front task, check resource availability, and only `poll` and move to completed if resources are sufficient. The resource consumption/release is simulated as instantaneous within the `processNextTask` method for simplicity in this exam problem.
 *     *   **Meaningful Names & Comments:** Variable names (`taskQueue`, `availableResources`, `completedTasks`, `requiredResources`, `processNextTask`, `viewQueue`) are descriptive. Javadoc comments are included for classes and methods explaining their purpose and parameters.
 * 
 * 3.  **`main` Method:**
 *     *   The standard entry point of the application.
 *     *   It creates an instance of `ResourceAllocationSystem` and calls its `run()` method to start the interactive loop.
 *     *   Includes a `try-catch` block around the system initialization and run call to catch potential exceptions during startup (like invalid initial resource count) or unhandled exceptions escaping the main loop's handler.
 * 
 * This solution effectively integrates all the required Java components to create a functional, albeit simple, simulation that demonstrates key programming concepts like data structures, control flow, object-oriented design, and robust error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a task in the system requiring a certain number of resources.
 */
class Task {
    private int taskId;
    private int requiredResources;

    /**
     * Constructs a new Task.
     * @param taskId The unique identifier for the task.
     * @param requiredResources The number of resources this task needs to be processed.
     */
    public Task(int taskId, int requiredResources) {
        if (requiredResources <= 0) {
            throw new IllegalArgumentException("Required resources must be positive.");
        }
        this.taskId = taskId;
        this.requiredResources = requiredResources;
    }

    /**
     * Gets the task ID.
     * @return The task ID.
     */
    public int getTaskId() {
        return taskId;
    }

    /**
     * Gets the number of resources required by the task.
     * @return The required resources.
     */
    public int getRequiredResources() {
        return requiredResources;
    }

    /**
     * Returns a string representation of the Task.
     * @return String describing the task.
     */
    @Override
    public String toString() {
        return "Task ID: " + taskId + ", Requires: " + requiredResources + " resources";
    }
}

/**
 * Manages resource allocation and task processing.
 */
public class ResourceAllocationSystem {

    private int totalResources;
    private int availableResources;
    private Queue<Task> taskQueue;
    private List<Task> completedTasks;
    private int nextTaskId;
    private Scanner scanner;

    /**
     * Constructs a ResourceAllocationSystem.
     * @param totalResources The total number of resources available in the system. Must be positive.
     */
    public ResourceAllocationSystem(int totalResources) {
        if (totalResources <= 0) {
            throw new IllegalArgumentException("Total resources must be positive.");
        }
        this.totalResources = totalResources;
        this.availableResources = totalResources;
        this.taskQueue = new LinkedList<>(); // Implementing Queue using LinkedList
        this.completedTasks = new ArrayList<>(); // Implementing List using ArrayList
        this.nextTaskId = 1; // Start task IDs from 1
        this.scanner = new Scanner(System.in);
    }

    /**
     * Submits a new task to the queue.
     * @param requiredResources The resources required by the new task.
     */
    public void submitTask(int requiredResources) {
        try {
            Task newTask = new Task(nextTaskId++, requiredResources);
            taskQueue.offer(newTask); // Add to the end of the queue
            System.out.println("Task " + newTask.getTaskId() + " requiring " + newTask.getRequiredResources() + " resources submitted. Added to queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error submitting task: " + e.getMessage());
        }
    }

    /**
     * Attempts to process the next task in the queue.
     * A task is processed only if sufficient resources are available.
     */
    public void processNextTask() {
        Task taskToProcess = taskQueue.peek(); // Look at the head of the queue without removing

        if (taskToProcess == null) {
            System.out.println("Queue is empty. No tasks to process.");
            return;
        }

        if (availableResources >= taskToProcess.getRequiredResources()) {
            taskToProcess = taskQueue.poll(); // Remove the task from the queue
            // Simulate resource consumption and immediate release
            // availableResources -= taskToProcess.getRequiredResources(); // Consume (conceptually)
            System.out.println("Processing Task " + taskToProcess.getTaskId() + " requiring " + taskToProcess.getRequiredResources() + " resources... Done. Resources released.");
            // availableResources += taskToProcess.getRequiredResources(); // Release (conceptually)

            completedTasks.add(taskToProcess); // Add to the list of completed tasks
            System.out.println("Task " + taskToProcess.getTaskId() + " moved to completed.");
        } else {
            System.out.println("Task " + taskToProcess.getTaskId() + " at front of queue requires " + taskToProcess.getRequiredResources() + " resources, but only " + availableResources + " available. Cannot process yet.");
        }
    }

    /**
     * Displays the tasks currently in the waiting queue.
     */
    public void viewQueue() {
        System.out.println("--- Waiting Queue ---");
        if (taskQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : taskQueue) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays the tasks that have been completed.
     */
    public void viewCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks completed yet.");
        } else {
            // Iterate through the list of completed tasks
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays the current resource status.
     */
    public void viewResources() {
        System.out.println("Resources: " + availableResources + "/" + totalResources + " available.");
    }

    /**
     * Displays available commands.
     */
    private void displayHelp() {
        System.out.println("Available commands:");
        System.out.println("  submit <required_resources> - Submit a new task");
        System.out.println("  process                   - Attempt to process the next task");
        System.out.println("  queue                     - View the waiting queue");
        System.out.println("  completed                 - View completed tasks");
        System.out.println("  resources                 - View resource status");
        System.out.println("  exit                      - Exit the application");
    }

    /**
     * Runs the main application loop, handling user input.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("Resource Allocation System started with " + totalResources + " total resources.");
        displayHelp();

        boolean running = true;
        while (running) {
            try {
                System.out.print("\nEnter command: ");
                String inputLine = scanner.nextLine().trim();

                if (inputLine.isEmpty()) {
                    continue; // Ignore empty lines
                }

                String[] parts = inputLine.split("\\s+", 2); // Split into command and potentially arguments
                String command = parts[0].toLowerCase();
                String arguments = parts.length > 1 ? parts[1] : "";

                switch (command) {
                    case "submit":
                        try {
                            int required = Integer.parseInt(arguments);
                            submitTask(required);
                        } catch (NumberFormatException e) {
                            System.err.println("Error: Invalid resource amount for submit command. Please provide an integer.");
                        } catch (IllegalArgumentException e) {
                             System.err.println("Error: " + e.getMessage());
                        }
                        break;
                    case "process":
                        processNextTask();
                        break;
                    case "queue":
                        viewQueue();
                        break;
                    case "completed":
                        viewCompletedTasks();
                        break;
                    case "resources":
                        viewResources();
                        break;
                    case "exit":
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;
                    case "help":
                        displayHelp();
                        break;
                    default:
                        System.err.println("Error: Unknown command '" + command + "'. Type 'help' for options.");
                        break;
                }
            } catch (Exception e) {
                // Class-wide exception handling for unexpected errors in the loop
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for detailed debugging
            }
        }
        scanner.close(); // Close the scanner when done
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        try {
            // Initialize the system with a fixed number of resources
            ResourceAllocationSystem system = new ResourceAllocationSystem(10);
            system.run();
        } catch (IllegalArgumentException e) {
             System.err.println("System initialization failed: " + e.getMessage());
        } catch (Exception e) {
             System.err.println("An unhandled error occurred during system startup: " + e.getMessage());
             // e.printStackTrace(); // Uncomment for detailed debugging
        }
    }
}
