/*
 * Exam Question #1132
 * Generated on: 2025-05-12 17:29:10
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System. The system needs to manage patients waiting for appointments and those who have scheduled appointments. Patients are added to a waiting list (first-come, first-served). When a slot becomes available, the next patient from the waiting list can be scheduled for an appointment. Patients or staff can also cancel existing appointments.
 * 
 * **Your Task:**
 * 
 * Implement a Java program that simulates this system. The program should present a menu to the user and perform actions based on their choice.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage the patient waiting list.
 *     *   Use a `java.util.ArrayList` (implementing `java.util.List`) to store scheduled appointments.
 * 2.  **Classes:**
 *     *   Create a `Patient` class with private fields for `id` (int) and `name` (String), a constructor, and public getter methods.
 *     *   Create an `Appointment` class with private fields for `patient` (Patient object), `doctor` (String), and `time` (String), a constructor, and public getter methods.
 *     *   Create a main class (e.g., `HospitalScheduler`) that contains the `main` method and manages the `Queue` and `List`.
 * 3.  **Functionality:**
 *     *   **Main Menu:** Display options for:
 *         1.  Add Patient to Waiting List
 *         2.  Schedule Next Appointment
 *         3.  Cancel Appointment
 *         4.  List Waiting List
 *         5.  List Scheduled Appointments
 *         6.  Exit
 *     *   **Add Patient:** Prompt for patient name, generate a simple unique ID (e.g., incrementing counter), create a `Patient` object, and add it to the waiting list `Queue`.
 *     *   **Schedule Appointment:**
 *         *   Check if the waiting list `Queue` is empty. If so, display an error message.
 *         *   If not empty, take the next patient from the `Queue` (using `poll()`).
 *         *   Prompt for doctor's name and appointment time.
 *         *   Create an `Appointment` object and add it to the `scheduledAppointments` `List`.
 *         *   Display a success message.
 *     *   **Cancel Appointment:**
 *         *   Prompt for the name of the patient whose appointment needs to be canceled.
 *         *   Search the `scheduledAppointments` `List` for an appointment matching the patient name.
 *         *   If found, remove the appointment from the `List` and display a success message.
 *         *   If not found, display an error message.
 *     *   **List Waiting List:** Display all patients currently in the waiting list `Queue`.
 *     *   **List Scheduled Appointments:** Display all scheduled appointments from the `List`.
 *     *   **Exit:** Terminate the program.
 * 4.  **User Input:** Use `java.util.Scanner` to read user input for menu choices and details (patient name, doctor, time, patient name for cancellation).
 * 5.  **Control Flow:** Use a `switch` statement to handle the main menu options.
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around operations that might throw exceptions (e.g., `Scanner` input).
 *     *   Use `System.err` to print error messages (e.g., invalid menu choice, attempting to schedule from an empty queue, appointment not found for cancellation, invalid input type).
 *     *   Use `System.out` for normal output (menu, prompts, success messages, listing data).
 *     *   Validate user input where appropriate (e.g., checking if menu choice is an integer, checking if lists/queues are empty before operations).
 * 7.  **Best Practices:**
 *     *   Use private fields and public methods (getters).
 *     *   Use meaningful variable and method names.
 *     *   Include comments explaining complex parts or logic.
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should run in a loop, presenting the menu, taking input, performing actions, and printing appropriate output or error messages until the user chooses to exit. Output formats for listings should be clear and readable.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Appointment
 * 3. Cancel Appointment
 * 4. List Waiting List
 * 5. List Scheduled Appointments
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice (ID: 1) added to waiting list.
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 4
 * Waiting List:
 * Patient ID: 1, Name: Alice
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 2
 * Scheduling next patient from waiting list...
 * Patient to schedule: Alice (ID: 1)
 * Enter doctor name: Dr. Smith
 * Enter appointment time (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled for Alice with Dr. Smith at 10:30 AM.
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 5
 * Scheduled Appointments:
 * Patient: Alice (ID: 1), Doctor: Dr. Smith, Time: 10:30 AM
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 3
 * Enter patient name to cancel appointment: Alice
 * Appointment for Alice cancelled successfully.
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 5
 * Scheduled Appointments:
 * No scheduled appointments.
 * 
 * Hospital Appointment System Menu:
 * 1. Add Patient to Waiting List
 * ...
 * Enter your choice: 6
 * Exiting system. Goodbye!
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Implementation of all required functionalities.
 * *   Adherence to best practices (encapsulation, naming, comments).
 * *   Effective error handling and input validation.
 * *   Clean and readable code.
 * 
 * ```java
 * // Your code goes here
 * ```
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` class: Simple POJO (Plain Old Java Object) to hold patient data (`id`, `name`) with encapsulation (private fields, public getters).
 *     *   `Appointment` class: Holds details of a scheduled appointment (`patient` object, `doctor`, `time`) with encapsulation.
 *     *   `HospitalScheduler` class: This is the main class managing the system's state and logic. It contains the `main` method to start the application.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue<Patient> waitingList`: A `LinkedList` is used to implement the `Queue` interface. Patients are added to the end using `offer()` and removed from the front using `poll()` when scheduling. This correctly simulates a first-in, first-out waiting list.
 *     *   `List<Appointment> scheduledAppointments`: An `ArrayList` is used to implement the `List` interface. Scheduled appointments are added using `add()` and removed using `remove()` by index after finding the appointment to cancel.
 *     *   `Scanner scanner`: Used in the `HospitalScheduler` class to read user input from `System.in` for menu choices and appointment details.
 *     *   `Switch statement`: Used in the `runScheduler` method's main loop to direct the program flow based on the user's menu choice.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid input, attempts to schedule from an empty queue, or failure to find an appointment for cancellation. This separates error output from normal program output (`System.out`).
 *     *   `System.out`: Used for displaying the menu, prompts, success messages, and listing the contents of the waiting list and scheduled appointments.
 *     *   `Class-wide exception handling with try-catch`: A `try-catch` block wraps the main `while` loop in the `runScheduler` method. This catches potential `InputMismatchException` when reading integer input (menu choice) and also acts as a general catch-all for any unexpected `Exception` that might occur during program execution, preventing the program from crashing abruptly. A `finally` block ensures the `Scanner` resource is closed.
 * 
 * 3.  **Functionality Implementation:**
 *     *   The `runScheduler` method contains the main application loop, continuously displaying the menu and processing user input via the `switch` statement until the user chooses to exit.
 *     *   Methods like `addToWaitingList`, `scheduleNextAppointment`, `cancelAppointment`, `listWaitingList`, and `listScheduledAppointments` encapsulate the logic for each menu option.
 *     *   `nextPatientId` is used to provide simple, unique IDs for patients.
 * 
 * 4.  **Best Practices:**
 *     *   **Encapsulation:** `Patient` and `Appointment` classes have private fields accessed only through public getters. `HospitalScheduler` manages its internal collections (`waitingList`, `scheduledAppointments`) privately.
 *     *   **Meaningful Names:** Classes, methods, and variables have descriptive names (`waitingList`, `scheduleNextAppointment`, `patientToCancel`, etc.).
 *     *   **Comments:** Comments are included to explain the purpose of classes, methods, and specific logic points (like using `poll()`, `offer()`, or the `try-catch` structure).
 *     *   **Input Validation:** The code checks if the waiting list or scheduled appointments list is empty before attempting operations that require them to be non-empty. The `try-catch` block handles non-integer input for the menu choice.
 *     *   **Error Handling:** `System.err` is used for errors. Specific checks are done before operations that might fail (e.g., checking `isEmpty()`). The `try-catch` provides robust handling for input errors and unexpected exceptions.
 *     *   **Clean Code:** The code is organized into methods, each responsible for a specific task, making it modular and readable.
 * 
 * This solution effectively demonstrates the required Java components in a practical scenario, incorporating essential programming practices like encapsulation, validation, and error handling within a clear structure.
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a Patient
class Patient {
    private int id;
    private String name;

    public Patient(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient ID: " + id + ", Name: " + name;
    }
}

// Represents an Appointment
class Appointment {
    private Patient patient;
    private String doctor;
    private String time;

    public Appointment(Patient patient, String doctor, String time) {
        this.patient = patient;
        this.doctor = doctor;
        this.time = time;
    }

    public Patient getPatient() {
        return patient;
    }

    public String getDoctor() {
        return doctor;
    }

    public String getTime() {
        return time;
    }

    @Override
    public String toString() {
        return "Patient: " + patient.getName() + " (ID: " + patient.getId() + "), Doctor: " + doctor + ", Time: " + time;
    }
}

// Main class to manage the hospital schedule
public class HospitalScheduler {

    private Queue<Patient> waitingList;
    private List<Appointment> scheduledAppointments;
    private Scanner scanner;
    private int nextPatientId; // To generate unique patient IDs

    public HospitalScheduler() {
        // Use LinkedList as it implements Queue
        this.waitingList = new LinkedList<>();
        // Use ArrayList as it implements List
        this.scheduledAppointments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.nextPatientId = 1; // Start patient IDs from 1
    }

    // Method to display the main menu
    private void displayMenu() {
        System.out.println("\nHospital Appointment System Menu:");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Appointment");
        System.out.println("3. Cancel Appointment");
        System.out.println("4. List Waiting List");
        System.out.println("5. List Scheduled Appointments");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    // Method to add a patient to the waiting list
    private void addToWaitingList() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        Patient patient = new Patient(nextPatientId++, name);
        waitingList.offer(patient); // offer() is preferred over add() for capacity-constrained queues, though LinkedList is not capacity-constrained. It's good practice.
        System.out.println("Patient " + name + " (ID: " + patient.getId() + ") added to waiting list.");
    }

    // Method to schedule the next patient from the waiting list
    private void scheduleNextAppointment() {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule an appointment.");
            return;
        }

        Patient patient = waitingList.poll(); // Get and remove the head of the queue
        System.out.println("Scheduling next patient from waiting list...");
        System.out.println("Patient to schedule: " + patient.getName() + " (ID: " + patient.getId() + ")");

        System.out.print("Enter doctor name: ");
        String doctor = scanner.nextLine();

        System.out.print("Enter appointment time (e.g., 10:00 AM): ");
        String time = scanner.nextLine();

        Appointment appointment = new Appointment(patient, doctor, time);
        scheduledAppointments.add(appointment); // Add to the list of scheduled appointments
        System.out.println("Appointment scheduled for " + patient.getName() + " with " + doctor + " at " + time + ".");
    }

    // Method to cancel an appointment by patient name
    private void cancelAppointment() {
        if (scheduledAppointments.isEmpty()) {
            System.err.println("Error: No scheduled appointments to cancel.");
            return;
        }

        System.out.print("Enter patient name to cancel appointment: ");
        String nameToCancel = scanner.nextLine();

        // Find the appointment to cancel
        Appointment appointmentToCancel = null;
        // Iterate using a standard for loop to allow removal
        for (int i = 0; i < scheduledAppointments.size(); i++) {
            Appointment appt = scheduledAppointments.get(i);
            if (appt.getPatient().getName().equalsIgnoreCase(nameToCancel)) {
                appointmentToCancel = appt;
                scheduledAppointments.remove(i); // Remove the appointment
                System.out.println("Appointment for " + nameToCancel + " cancelled successfully.");
                return; // Exit the method after cancelling
            }
        }

        // If loop finishes without finding the appointment
        System.err.println("Error: No scheduled appointment found for patient '" + nameToCancel + "'.");
    }

    // Method to list all patients in the waiting list
    private void listWaitingList() {
        if (waitingList.isEmpty()) {
            System.out.println("Waiting List: Empty");
            return;
        }

        System.out.println("Waiting List:");
        // Iterate through the queue without removing elements
        int index = 1;
        for (Patient patient : waitingList) {
            System.out.println(index++ + ". " + patient);
        }
    }

    // Method to list all scheduled appointments
    private void listScheduledAppointments() {
        if (scheduledAppointments.isEmpty()) {
            System.out.println("Scheduled Appointments: No scheduled appointments.");
            return;
        }

        System.out.println("Scheduled Appointments:");
        int index = 1;
        for (Appointment appointment : scheduledAppointments) {
            System.out.println(index++ + ". " + appointment);
        }
    }

    // Main method to run the scheduler loop
    public void runScheduler() {
        boolean running = true;

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    // Consume the invalid input to prevent an infinite loop
                    scanner.nextLine();
                    continue; // Skip to the next iteration of the while loop
                }

                // Switch statement for menu control
                switch (choice) {
                    case 1:
                        addToWaitingList();
                        break;
                    case 2:
                        scheduleNextAppointment();
                        break;
                    case 3:
                        cancelAppointment();
                        break;
                    case 4:
                        listWaitingList();
                        break;
                    case 5:
                        listScheduledAppointments();
                        break;
                    case 6:
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to stderr
        } finally {
            // Ensure the scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Entry point of the program
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.runScheduler();
    }
}
