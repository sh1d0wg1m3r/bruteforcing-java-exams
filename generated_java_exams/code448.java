/*
 * Exam Question #448
 * Generated on: 2025-05-11 23:12:27
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified console-based application for a hospital to manage patient registration and appointment scheduling using a single waiting queue. The system should allow staff to register new patients, view registered patients, schedule appointments by adding patients to a waiting queue, call the next patient from the queue, and view the current waiting queue.
 * 
 * **Requirements:**
 * 
 * Implement a Java application that fulfills the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of all registered patients. Use the `java.util.List` interface and implement it with `java.util.ArrayList`.
 *     *   Maintain a waiting list for appointments. Use the `java.util.Queue` interface and implement it with `java.util.LinkedList`. Patients are added to the end and removed from the front (FIFO).
 * 2.  **Patient Class:**
 *     *   Create a `Patient` class with private fields: `patientId` (int), `name` (String), and `age` (int).
 *     *   Implement a constructor to initialize these fields.
 *     *   Provide public getter methods for all fields.
 *     *   Override the `toString()` method to provide a user-friendly string representation of a patient (e.g., "ID: [id], Name: [name], Age: [age]").
 * 3.  **Hospital System Logic:**
 *     *   Create a main class (e.g., `HospitalSystem`) containing the `main` method and the logic for managing patients and appointments.
 *     *   Inside the `HospitalSystem` class, declare the `List<Patient>` and `Queue<Patient>` as instance variables.
 *     *   Implement the following functionalities accessible via a main menu:
 *         *   **Add New Patient:** Prompt the user for patient name and age. Generate a unique `patientId` (starting from 1 and incrementing). Create a `Patient` object and add it to the patient list.
 *         *   **List All Patients:** Display all registered patients with their details. If the list is empty, display an appropriate message.
 *         *   **Schedule Appointment:** Prompt the user for a `patientId`. Search the patient list for the patient with the given ID. If found, add the `Patient` object to the appointment queue. If not found, display an error message using `System.err`.
 *         *   **Call Next Patient:** Remove the patient at the front of the appointment queue and display a message indicating they are being called. If the queue is empty, display an error message using `System.err`.
 *         *   **Display Waiting Queue:** Display all patients currently in the appointment queue. If the queue is empty, display an appropriate message. The order should reflect the waiting order.
 *         *   **Exit:** Terminate the program.
 * 4.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient details.
 *     *   Display a clear menu with options.
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 5.  **Error Handling and Output:**
 *     *   Use `System.out` for all normal output (menu, prompts, successful operations, lists).
 *     *   Use `System.err` for all error messages (e.g., patient not found, queue empty, invalid input).
 *     *   Implement input validation for menu choices (ensure it's a valid integer within the range of options). Handle `InputMismatchException` if non-integer input is provided.
 *     *   Implement class-wide exception handling using a `try-catch` block in the `main` method to catch any unexpected exceptions during program execution and print an error message to `System.err`.
 * 6.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public getters/methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments and documentation (e.g., Javadoc).
 *     *   Structure the code cleanly.
 * 
 * **Expected Interaction:**
 * 
 * The program should present a menu like:
 * 
 * ```
 * Hospital Appointment System Menu:
 * 1. Add New Patient
 * 2. List All Patients
 * 3. Schedule Appointment
 * 4. Call Next Patient
 * 5. Display Waiting Queue
 * 6. Exit
 * Enter your choice:
 * ```
 * 
 * Based on the choice, the system performs the requested action, prompts for necessary input, and displays results or errors.
 * 
 * **Example Flow:**
 * 
 * 1.  User selects 1 (Add Patient). Prompts for name and age. Adds patient with ID 1.
 * 2.  User selects 1 (Add Patient). Prompts for name and age. Adds patient with ID 2.
 * 3.  User selects 2 (List Patients). Displays Patient 1 and Patient 2.
 * 4.  User selects 3 (Schedule). Prompts for ID. User enters 1. Patient 1 added to queue.
 * 5.  User selects 3 (Schedule). Prompts for ID. User enters 2. Patient 2 added to queue.
 * 6.  User selects 5 (Display Queue). Displays Patient 1 then Patient 2.
 * 7.  User selects 4 (Call Next). Displays "Calling next patient: [Patient 1 details]". Patient 1 removed from queue.
 * 8.  User selects 5 (Display Queue). Displays Patient 2.
 * 9.  User selects 4 (Call Next). Displays "Calling next patient: [Patient 2 details]". Patient 2 removed from queue.
 * 10. User selects 4 (Call Next). Displays error message on `System.err` because queue is empty.
 * 11. User enters invalid menu input (e.g., "abc"). Displays error message on `System.err`.
 * 12. User selects 6 (Exit). Program terminates.
 * 
 * Your solution should be a single `.java` file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a basic Hospital Appointment System demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:**
 *     *   Encapsulates patient data (`patientId`, `name`, `age`) using `private` fields.
 *     *   Provides `public` getter methods for accessing the data.
 *     *   The constructor initializes the patient object.
 *     *   The `toString()` method is overridden to provide a convenient way to print patient information.
 * 
 * 2.  **`HospitalSystem` Class:**
 *     *   **Data Structures:**
 *         *   `registeredPatients`: Declared as `List<Patient>` and initialized with `new ArrayList<>()`. This list stores all patients registered in the system, allowing easy access and iteration.
 *         *   `appointmentQueue`: Declared as `Queue<Patient>` and initialized with `new LinkedList<>()`. `LinkedList` is a common implementation of `Queue` that supports FIFO operations efficiently. This queue manages the order of patients waiting for an appointment.
 *     *   **`nextPatientId`:** A simple counter to generate unique IDs for new patients, demonstrating a basic approach to unique identifiers.
 *     *   **Methods:**
 *         *   `addPatient`: Creates a `Patient` object with the next available ID and adds it to the `registeredPatients` list. Includes basic validation for name and age.
 *         *   `listAllPatients`: Iterates through the `registeredPatients` list and prints each patient's details using the `toString()` method. Handles the case where the list is empty.
 *         *   `scheduleAppointment`: Takes a patient ID, uses the helper method `findPatientById` to locate the patient in the `registeredPatients` list, and if found, adds the patient to the `appointmentQueue` using `offer()`. An error is printed to `System.err` if the patient ID is not found. It also includes a check to see if the patient is already in the queue.
 *         *   `callNextPatient`: Uses `appointmentQueue.poll()` to retrieve and remove the patient at the head of the queue. If the queue is empty, `poll()` returns `null`, and an error message is printed to `System.err`. Otherwise, the called patient's details are printed to `System.out`.
 *         *   `displayWaitingQueue`: Iterates through the `appointmentQueue` (using an enhanced for loop, which does not remove elements) and prints the details of patients currently waiting, maintaining their order. Handles the empty queue case.
 *         *   `findPatientById`: A private helper method used by `scheduleAppointment` to search the `registeredPatients` list for a patient matching the given ID.
 *     *   **`main` Method:**
 *         *   Sets up the `Scanner` for input.
 *         *   Creates an instance of `HospitalSystem`.
 *         *   Uses a `while(running)` loop to keep the menu active until the user chooses to exit.
 *         *   **Input Handling:** Reads the user's menu choice using `scanner.nextInt()`. Includes a `try-catch(InputMismatchException)` block specifically for reading the integer choice to handle non-numeric input gracefully, printing an error to `System.err` and consuming the invalid input using `scanner.nextLine()` to prevent an infinite loop. Similar input validation is applied when reading age and patient ID.
 *         *   **Flow Control:** A `switch` statement is used to direct execution based on the user's `choice`. Each case calls the appropriate method in the `HospitalSystem` instance. A `default` case handles invalid numerical choices.
 *         *   **Class-wide Exception Handling:** The entire `while` loop (the core execution logic) is wrapped in a `try-catch(Exception e)` block. This demonstrates catching any potential unexpected runtime exceptions that might occur within the system's operation and printing a generic error message to `System.err`.
 *         *   **Resource Management:** A `finally` block ensures the `Scanner` is closed when the program exits, regardless of whether an exception occurred or the user chose to exit.
 * 
 * This solution effectively combines the required Java components to build a functional, albeit simple, system demonstrating practical data structure usage, user interaction handling, and error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int patientId;
    private String name;
    private int age;

    /**
     * Constructs a new Patient object.
     * @param patientId The unique ID for the patient.
     * @param name The name of the patient.
     * @param age The age of the patient.
     */
    public Patient(int patientId, String name, int age) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return A formatted string containing patient details.
     */
    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name + ", Age: " + age;
    }
}

/**
 * Manages the hospital's patient list and appointment queue.
 */
public class HospitalSystem {

    private List<Patient> registeredPatients;
    private Queue<Patient> appointmentQueue;
    private int nextPatientId; // To generate unique IDs

    /**
     * Constructs a new HospitalSystem.
     * Initializes the patient list, appointment queue, and patient ID counter.
     */
    public HospitalSystem() {
        registeredPatients = new ArrayList<>(); // Using ArrayList for patient list
        appointmentQueue = new LinkedList<>();  // Using LinkedList as Queue implementation
        nextPatientId = 1; // Start patient IDs from 1
    }

    /**
     * Adds a new patient to the system.
     * @param name The name of the patient.
     * @param age The age of the patient.
     */
    public void addPatient(String name, int age) {
        // Basic input validation
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        if (age <= 0) {
             System.err.println("Error: Patient age must be positive.");
             return;
        }

        Patient newPatient = new Patient(nextPatientId++, name.trim(), age);
        registeredPatients.add(newPatient);
        System.out.println("Patient registered successfully: " + newPatient);
    }

    /**
     * Lists all registered patients in the system.
     */
    public void listAllPatients() {
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            System.out.println("--- Registered Patients ---");
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
            System.out.println("---------------------------");
        }
    }

    /**
     * Schedules an appointment for a registered patient by adding them to the queue.
     * @param patientId The ID of the patient to schedule.
     */
    public void scheduleAppointment(int patientId) {
        Patient patientToSchedule = findPatientById(patientId);

        if (patientToSchedule == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found.");
        } else {
            // Check if patient is already in the queue (optional but good practice)
            if (appointmentQueue.contains(patientToSchedule)) {
                 System.out.println("Patient " + patientToSchedule.getName() + " (ID: " + patientId + ") is already in the queue.");
            } else {
                 appointmentQueue.offer(patientToSchedule); // offer() is preferred over add() for queues as it doesn't throw exception
                 System.out.println("Patient " + patientToSchedule.getName() + " (ID: " + patientId + ") scheduled for appointment.");
            }
        }
    }

    /**
     * Calls the next patient from the front of the appointment queue.
     */
    public void callNextPatient() {
        Patient nextPatient = appointmentQueue.poll(); // poll() retrieves and removes the head, returns null if empty

        if (nextPatient == null) {
            System.err.println("Error: Appointment queue is empty. No patient to call.");
        } else {
            System.out.println("Calling next patient: " + nextPatient);
        }
    }

    /**
     * Displays the current patients in the appointment waiting queue.
     */
    public void displayWaitingQueue() {
        if (appointmentQueue.isEmpty()) {
            System.out.println("Appointment queue is empty.");
        } else {
            System.out.println("--- Appointment Waiting Queue ---");
            // Iterate through the queue without removing elements
            int position = 1;
            for (Patient patient : appointmentQueue) {
                System.out.println(position++ + ". " + patient);
            }
            System.out.println("---------------------------------");
        }
    }

    /**
     * Finds a patient in the registered patients list by their ID.
     * @param patientId The ID to search for.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findPatientById(int patientId) {
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * The main method to run the Hospital Appointment System.
     * Handles user interaction and menu logic.
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalSystem system = new HospitalSystem();
        boolean running = true;

        // Class-wide exception handling
        try {
            while (running) {
                System.out.println("\nHospital Appointment System Menu:");
                System.out.println("1. Add New Patient");
                System.out.println("2. List All Patients");
                System.out.println("3. Schedule Appointment");
                System.out.println("4. Call Next Patient");
                System.out.println("5. Display Waiting Queue");
                System.out.println("6. Exit");
                System.out.print("Enter your choice: ");

                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                }

                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        int age = -1;
                        try {
                            System.out.print("Enter patient age: ");
                            age = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } catch (InputMismatchException e) {
                            System.err.println("Invalid age input. Please enter a number.");
                            scanner.nextLine(); // Consume invalid input
                            continue; // Skip to next menu iteration
                        }
                        system.addPatient(name, age);
                        break;

                    case 2:
                        system.listAllPatients();
                        break;

                    case 3:
                        System.out.print("Enter patient ID to schedule: ");
                        int idToSchedule = -1;
                        try {
                            idToSchedule = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } catch (InputMismatchException e) {
                            System.err.println("Invalid patient ID input. Please enter a number.");
                            scanner.nextLine(); // Consume invalid input
                            continue; // Skip to next menu iteration
                        }
                        system.scheduleAppointment(idToSchedule);
                        break;

                    case 4:
                        system.callNextPatient();
                        break;

                    case 5:
                        system.displayWaitingQueue();
                        break;

                    case 6:
                        System.out.println("Exiting Hospital System. Goodbye!");
                        running = false;
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Optional: for debugging
        } finally {
            scanner.close(); // Close the scanner when the program exits
        }
    }
}
