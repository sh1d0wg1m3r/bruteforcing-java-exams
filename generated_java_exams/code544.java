/*
 * Exam Question #544
 * Generated on: 2025-05-11 23:27:15
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Priority Task Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simple command-line application for managing tasks with different priority levels. The system should allow users to add new tasks, complete the next available task based on priority, and list all pending tasks.
 * 
 * The system must adhere to the following rules:
 * 1.  Tasks have a description and a priority (HIGH or LOW).
 * 2.  When completing a task, the system must always prioritize HIGH priority tasks over LOW priority tasks.
 * 3.  Within the HIGH priority tasks, tasks should be completed in the order they were added (First-In, First-Out - FIFO).
 * 4.  Within the LOW priority tasks, tasks should also be completed in the order they were added (FIFO).
 * 5.  The application should provide a menu-driven interface for user interaction.
 * 6.  The application must handle invalid user input gracefully and provide informative error messages.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must utilize **ALL** of the following Java components:
 * 
 * *   `java.util.Queue`: To manage the LOW priority tasks (FIFO).
 * *   `java.util.ArrayList`: To manage the HIGH priority tasks (allowing FIFO processing by index).
 * *   `java.util.List` interface: Declare the variable holding HIGH priority tasks using the `List` interface.
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To print error messages.
 * *   `System.out`: To print normal output (menu, prompts, success messages, task lists).
 * *   Class-wide exception handling with `try-catch` blocks: Implement exception handling to prevent the application from crashing due to user input errors or unexpected issues.
 * 
 * **Implementation Requirements:**
 * 
 * 1.  Create a `Task` class with appropriate private fields (`description`, `priority`) and public methods (constructor, getters, `toString`). Use an `enum` for priority (HIGH, LOW). Include basic validation in the constructor (e.g., non-empty description).
 * 2.  Create a `TaskManagementSystem` class that contains the main logic.
 * 3.  Inside `TaskManagementSystem`, use a `List` (implemented by `ArrayList`) for HIGH priority tasks and a `Queue` (implemented by `LinkedList`) for LOW priority tasks. These collections should be private class members.
 * 4.  Implement a `run()` method in `TaskManagementSystem` that contains the main application loop, displays the menu, reads user input using `Scanner`, and uses a `switch` statement to call appropriate methods.
 * 5.  Implement methods for:
 *     *   `addTask()`: Prompts user for task description and priority, validates input, creates a `Task` object, and adds it to the correct collection. Handle invalid priority input.
 *     *   `completeNextTask()`: Checks for HIGH priority tasks first. If present, remove and report the first one. Otherwise, check for LOW priority tasks. If present, remove and report the first one from the queue. Report if no tasks are pending.
 *     *   `listAllTasks()`: Displays all pending tasks, listing HIGH priority tasks first, then LOW priority tasks.
 *     *   `displayMenu()`: Prints the menu options.
 * 6.  Implement robust exception handling. Wrap the main menu loop in `run()` with a `try-catch` block to handle general exceptions (like `InputMismatchException` from `Scanner`). Use specific `try-catch` blocks within methods like `addTask` for validation errors (`IllegalArgumentException`). Print all error messages to `System.err`.
 * 7.  Ensure proper resource management, specifically closing the `Scanner`.
 * 8.  Follow best practices: meaningful variable names, encapsulation, basic comments.
 * 
 * **Expected Output Structure (Example):**
 * 
 * ```
 * --- Task Management System ---
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 1
 * 
 * --- Add New Task ---
 * Enter task description: Write Exam Question
 * Enter task priority (HIGH/LOW): HIGH
 * High priority task added successfully.
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 1
 * 
 * --- Add New Task ---
 * Enter task description: Grade Exams
 * Enter task priority (HIGH/LOW): LOW
 * Low priority task added successfully.
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 3
 * 
 * --- All Pending Tasks ---
 * --- High Priority Tasks ---
 * 1. [HIGH] Write Exam Question
 * --- Low Priority Tasks ---
 * 1. [LOW] Grade Exams
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 2
 * 
 * --- Complete Next Task ---
 * Completed high priority task: [HIGH] Write Exam Question
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 2
 * 
 * --- Complete Next Task ---
 * Completed low priority task: [LOW] Grade Exams
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 2
 * 
 * --- Complete Next Task ---
 * No tasks pending completion.
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: invalid_input
 * Invalid input. Please enter a number.
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 1 and 4.
 * 
 * Please choose an option:
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List All Tasks
 * 4. Exit
 * Enter your choice: 4
 * Exiting Task Management System. Goodbye!
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents the data structure for a task.
 *     *   Uses private fields (`description`, `priority`) for encapsulation.
 *     *   An `enum` `Priority` is used for type-safe priority levels (HIGH/LOW).
 *     *   The constructor validates input (`description` and `priority`) and throws `IllegalArgumentException` if invalid, demonstrating input validation at the object creation level.
 *     *   Provides public getter methods.
 *     *   Overrides `toString()` for easy printing of task details.
 * 
 * 2.  **`TaskManagementSystem` Class:**
 *     *   Contains the core application logic.
 *     *   **Data Structures:**
 *         *   `private List<Task> highPriorityTasks = new ArrayList<>();`: An `ArrayList` is used for high priority tasks. It's declared using the `List` interface, demonstrating polymorphism. Although `ArrayList` is not a strict Queue, `remove(0)` provides the necessary FIFO behavior for completing the *next* highest priority task.
 *         *   `private Queue<Task> lowPriorityTasks = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface for low priority tasks. `Queue` is the natural choice for FIFO processing.
 *     *   **`Scanner`:** A single `Scanner` instance (`private Scanner scanner;`) is used for all input throughout the system and is closed in a `finally` block to ensure resource cleanup.
 *     *   **`main` Method:** The application entry point, which creates an instance of `TaskManagementSystem` and calls its `run()` method.
 *     *   **`run()` Method:**
 *         *   Contains the main application loop (`while(running)`).
 *         *   **Class-wide Exception Handling:** A `try-catch` block wraps the entire `while` loop. This catches exceptions that might occur during the menu selection or operation handling, preventing the program from crashing. It specifically catches `InputMismatchException` for invalid menu input and a general `Exception` for other potential runtime errors, printing messages to `System.err`.
 *         *   Calls `displayMenu()` to show options.
 *         *   Reads the user's integer choice using `scanner.nextInt()` and consumes the leftover newline with `scanner.nextLine()`.
 *         *   **`switch` Statement:** Controls the flow based on the user's valid integer choice, calling the appropriate handler method (`addTask`, `completeNextTask`, `listAllTasks`) or exiting.
 *     *   **`displayMenu()` Method:** Prints the menu options to `System.out`.
 *     *   **`addTask()` Method:**
 *         *   Prompts for task description and priority using `scanner`.
 *         *   Uses `Task.Priority.valueOf(priorityInput)` to convert the user's string input to the `Priority` enum. This method throws `IllegalArgumentException` if the string doesn't match an enum constant, which is caught.
 *         *   Creates a new `Task` object. The `Task` constructor's validation might also throw `IllegalArgumentException`, which is caught here as well.
 *         *   Adds the valid `Task` to either `highPriorityTasks` (`ArrayList.add()`) or `lowPriorityTasks` (`Queue.offer()`) based on its priority.
 *         *   Prints success messages to `System.out` or error messages to `System.err`.
 *     *   **`completeNextTask()` Method:**
 *         *   Implements the priority logic: checks `highPriorityTasks` first.
 *         *   If `highPriorityTasks` is not empty, it removes the first element using `highPriorityTasks.remove(0)`. This provides the required FIFO behavior for the `ArrayList`.
 *         *   If `highPriorityTasks` is empty, it checks `lowPriorityTasks`. If not empty, it removes and returns the head of the queue using `lowPriorityTasks.poll()`, which is the standard FIFO operation for a `Queue`.
 *         *   Reports the completed task or indicates that no tasks are pending. Output goes to `System.out`.
 *     *   **`listAllTasks()` Method:**
 *         *   Prints tasks from both collections, listing high priority tasks first.
 *         *   Iterates through the `ArrayList` using a standard `for` loop and `get(i)`.
 *         *   Iterates through the `Queue` using an enhanced `for` loop. This iterates through the elements in FIFO order without removing them.
 *         *   Prints task details using the `Task` object's `toString()` method. Output goes to `System.out`.
 * 
 * This solution effectively combines different collection types based on their strengths (priority handling with `ArrayList`'s index access for FIFO simulation, and standard `Queue` for low priority FIFO), uses interfaces (`List`, `Queue`), handles user input with `Scanner` and `switch`, and implements robust error handling using `try-catch` and directing output to `System.out` and `System.err` as required.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description and priority.
 */
class Task {
    private String description;
    private Priority priority;

    /**
     * Enum to define task priority levels.
     */
    public enum Priority {
        HIGH, LOW
    }

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task. Cannot be null or empty.
     * @param priority    The priority of the task (HIGH or LOW). Cannot be null.
     * @throws IllegalArgumentException if description is null/empty or priority is null.
     */
    public Task(String description, Priority priority) {
        // Basic validation
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        if (priority == null) {
            throw new IllegalArgumentException("Task priority cannot be null.");
        }
        this.description = description.trim();
        this.priority = priority;
    }

    /**
     * Gets the task description.
     * @return The description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the task priority.
     * @return The priority (HIGH or LOW).
     */
    public Priority getPriority() {
        return priority;
    }

    /**
     * Returns a string representation of the task.
     * @return Formatted string showing priority and description.
     */
    @Override
    public String toString() {
        return "[" + priority + "] " + description;
    }
}

/**
 * A simple task management system that handles tasks with different priorities.
 * High priority tasks are processed before low priority tasks.
 * Within each priority, tasks are processed in FIFO order.
 */
public class TaskManagementSystem {

    // Use List interface for high priority tasks, implemented by ArrayList
    // ArrayList allows easy removal from the beginning (index 0) for FIFO-like behavior
    private List<Task> highPriorityTasks;
    // Use Queue interface for low priority tasks, implemented by LinkedList
    // Queue provides standard FIFO operations (offer, poll)
    private Queue<Task> lowPriorityTasks;

    // Scanner for user input - make it a class member for proper closing
    private Scanner scanner;

    /**
     * Constructs a new TaskManagementSystem, initializing the task collections.
     */
    public TaskManagementSystem() {
        highPriorityTasks = new ArrayList<>();
        lowPriorityTasks = new LinkedList<>(); // LinkedList is a common Queue implementation
        scanner = new Scanner(System.in);
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManagementSystem system = new TaskManagementSystem();
        system.run();
    }

    /**
     * Runs the main application loop, handling user interaction and task operations.
     * Includes class-wide exception handling for the main operational flow.
     */
    public void run() {
        System.out.println("--- Task Management System ---");

        boolean running = true;
        // Class-wide exception handling for the main operational loop
        try {
            while (running) {
                displayMenu();
                System.out.print("Enter your choice: ");

                try {
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over after reading int

                    switch (choice) {
                        case 1:
                            addTask();
                            break;
                        case 2:
                            completeNextTask();
                            break;
                        case 3:
                            listAllTasks();
                            break;
                        case 4:
                            System.out.println("Exiting Task Management System. Goodbye!");
                            running = false;
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                    }
                } catch (InputMismatchException e) {
                    // Handles cases where user enters non-integer input for menu choice
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during operation handling
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for debugging during development/testing
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } finally {
            // Ensure the scanner is closed when the application exits, regardless of how it exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("Please choose an option:");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. List All Tasks");
        System.out.println("4. Exit");
    }

    /**
     * Handles the process of adding a new task based on user input.
     * Prompts for description and priority, validates input, creates a Task object,
     * and adds it to the appropriate priority queue/list.
     */
    private void addTask() {
        System.out.println("\n--- Add New Task ---");
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();

        System.out.print("Enter task priority (HIGH/LOW): ");
        String priorityInput = scanner.nextLine().trim().toUpperCase();

        try {
            // Attempt to convert input string to Priority enum
            Task.Priority priority = Task.Priority.valueOf(priorityInput);
            Task newTask = new Task(description, priority); // Task constructor validates description

            if (priority == Task.Priority.HIGH) {
                highPriorityTasks.add(newTask); // Add to the end of the ArrayList
                System.out.println("High priority task added successfully.");
            } else { // Priority.LOW
                lowPriorityTasks.offer(newTask); // offer is the standard way to add to a Queue
                System.out.println("Low priority task added successfully.");
            }
        } catch (IllegalArgumentException e) {
            // Catches errors from Task constructor (empty description)
            // Catches errors from Task.Priority.valueOf (invalid priority string)
            System.err.println("Error adding task: " + e.getMessage());
            // More specific error message if priority is the issue
            if (e.getMessage().contains("No enum constant")) {
                 System.err.println("Invalid priority entered. Please use 'HIGH' or 'LOW'.");
            }
        }
    }

    /**
     * Completes the next available task. Prioritizes HIGH tasks over LOW tasks.
     * Within each priority, tasks are completed in FIFO order.
     * Removes the completed task from its respective collection.
     */
    private void completeNextTask() {
        System.out.println("\n--- Complete Next Task ---");
        Task completedTask = null;

        if (!highPriorityTasks.isEmpty()) {
            // Complete a high priority task (remove the first one added - index 0)
            // ArrayList's remove(0) provides FIFO behavior for this list
            completedTask = highPriorityTasks.remove(0);
            System.out.println("Completed high priority task: " + completedTask);
        } else if (!lowPriorityTasks.isEmpty()) {
            // Complete a low priority task from the queue
            completedTask = lowPriorityTasks.poll(); // poll() retrieves and removes the head of the queue (FIFO)
            System.out.println("Completed low priority task: " + completedTask);
        } else {
            // No tasks in either collection
            System.out.println("No tasks pending completion.");
        }
    }

    /**
     * Lists all tasks currently pending in the system, categorized by priority.
     * Displays High Priority tasks first, then Low Priority tasks.
     */
    private void listAllTasks() {
        System.out.println("\n--- All Pending Tasks ---");

        if (highPriorityTasks.isEmpty() && lowPriorityTasks.isEmpty()) {
            System.out.println("No tasks currently in the system.");
            return;
        }

        System.out.println("--- High Priority Tasks ---");
        if (highPriorityTasks.isEmpty()) {
            System.out.println("  (None)");
        } else {
            // Iterate and print high priority tasks. Access by index is natural for ArrayList.
            for (int i = 0; i < highPriorityTasks.size(); i++) {
                Task task = highPriorityTasks.get(i);
                System.out.println((i + 1) + ". " + task);
            }
        }

        System.out.println("--- Low Priority Tasks ---");
        if (lowPriorityTasks.isEmpty()) {
            System.out.println("  (None)");
        } else {
            // Iterate through the queue to list tasks without removing them.
            // Using enhanced for loop or iterator maintains order.
            int i = 1;
            for (Task task : lowPriorityTasks) {
                System.out.println((i++) + ". " + task);
            }
        }
    }
}
