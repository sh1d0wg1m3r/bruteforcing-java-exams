/*
 * Exam Question #641
 * Generated on: 2025-05-12 16:18:42
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment scheduling system for a hospital. The system needs to manage registered patients and a queue of appointments waiting to be seen by doctors.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Management:**
 *     *   Maintain a list of registered patients. Each patient should have a unique ID (integer), name (String), and a brief description of their condition (String).
 *     *   Allow registration of new patients. The system should automatically assign a unique, incrementing ID starting from 1.
 *     *   Allow listing all registered patients.
 * 
 * 2.  **Appointment Scheduling:**
 *     *   Maintain a queue of appointments. Appointments are processed in a First-In, First-Out (FIFO) manner.
 *     *   An appointment is linked to an *existing* patient and includes details like the scheduled time (String, e.g., "10:00 AM") and the assigned doctor (String).
 *     *   Allow scheduling a new appointment. This requires specifying the patient's ID. If the patient ID does not exist, an error message should be displayed.
 *     *   Allow listing all pending appointments in the queue.
 * 
 * 3.  **Appointment Processing:**
 *     *   Implement a function to "process" the next appointment. This removes the appointment at the front of the queue and simulates its completion (e.g., by printing a message).
 *     *   If the appointment queue is empty, an appropriate error message should be displayed.
 * 
 * 4.  **User Interface:**
 *     *   Provide a command-line interface using `java.util.Scanner`.
 *     *   Present a menu of options to the user:
 *         1.  Register New Patient
 *         2.  Schedule Appointment
 *         3.  Process Next Appointment
 *         4.  List All Patients
 *         5.  List Pending Appointments
 *         6.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for all normal output (menu, successful operations, listing data).
 *     *   Use `System.err` for all error messages (invalid input, patient not found, queue empty, etc.).
 *     *   Implement robust input validation (e.g., ensuring integer input where expected, checking for valid patient IDs).
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors (e.g., non-integer input when expecting an integer, unexpected issues). The main application loop should be resilient.
 * 
 * 6.  **Code Structure & Best Practices:**
 *     *   Create separate classes for `Patient` and `Appointment`.
 *     *   Create a main class (e.g., `HospitalSchedulerApp`) containing the `main` method and the core scheduling logic.
 *     *   Use appropriate access modifiers (`private`, `public`) for encapsulation.
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Ensure your solution utilizes *all* the following Java components:
 *         *   `java.util.Queue`
 *         *   `java.util.ArrayList`
 *         *   `java.util.List` (as an interface type)
 *         *   `java.util.Scanner`
 *         *   `switch` statement
 *         *   `System.err`
 *         *   `System.out`
 *         *   `try-catch` blocks
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, perform the requested action, and print appropriate messages to `System.out` or `System.err`.
 * 
 * Example interaction snippets:
 * 
 * *   **Register Patient:**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 1
 *     Enter patient name: Alice
 *     Enter patient condition: Fever
 *     Patient registered successfully with ID: 1
 *     ```
 * *   **Schedule Appointment (Success):**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 2
 *     Enter patient ID for appointment: 1
 *     Enter appointment time (e.g., 10:00 AM): 10:30 AM
 *     Enter doctor's name: Dr. Smith
 *     Appointment scheduled for Patient ID 1.
 *     ```
 * *   **Schedule Appointment (Patient Not Found):**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 2
 *     Enter patient ID for appointment: 99
 *     Error: Patient with ID 99 not found.
 *     ```
 * *   **Process Appointment (Success):**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 3
 *     Processing next appointment...
 *     Appointment processed for Patient ID 1 (Alice) with Dr. Smith at 10:30 AM.
 *     ```
 * *   **Process Appointment (Queue Empty):**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 3
 *     Error: No pending appointments in the queue.
 *     ```
 * *   **List Patients:**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 4
 *     --- Registered Patients ---
 *     ID: 1, Name: Alice, Condition: Fever
 *     ID: 2, Name: Bob, Condition: Headache
 *     ---------------------------
 *     ```
 * *   **List Appointments:**
 *     ```
 *     --- Hospital Scheduler Menu ---
 *     ...
 *     Enter choice: 5
 *     --- Pending Appointments ---
 *     Patient ID: 2, Name: Bob, Time: 11:00 AM, Doctor: Dr. Jones
 *     ----------------------------
 *     ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * This solution implements the Hospital Appointment Scheduler as described in the exam question, demonstrating the required Java concepts in a practical context.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple Plain Old Java Object (POJO) representing a patient with `id`, `name`, and `condition`. It uses private fields and public getters for encapsulation. The `toString()` method provides a convenient way to print patient details.
 *     *   `Appointment`: Another POJO representing an appointment. It holds a reference to the `Patient` object, `time`, and `doctor`. It also uses private fields, public getters, and a `toString()` method.
 *     *   `PatientNotFoundException`: A custom checked exception used specifically to signal when a patient ID provided for scheduling does not exist in the system. This provides more specific error information than a general exception.
 *     *   `HospitalScheduler`: This class acts as the core manager of the system. It holds the collections (`patients` and `appointmentQueue`) and the logic for performing operations. It encapsulates the state (`patients`, `appointmentQueue`, `nextPatientId`) and provides public methods for the application to interact with it.
 *     *   `HospitalSchedulerApp`: The main class containing the `main` method. It sets up the scheduler and the user interface loop.
 * 
 * 2.  **Data Structures:**
 *     *   `java.util.ArrayList`: Used to store the list of registered `Patient` objects (`private List<Patient> patients;`). `ArrayList` is suitable here because we need to efficiently add new patients and iterate through the list to find a patient by ID.
 *     *   `java.util.Queue`: Used to store pending `Appointment` objects (`private Queue<Appointment> appointmentQueue;`). The `LinkedList` class is used as the concrete implementation because it provides an efficient implementation of the `Queue` interface, supporting FIFO behavior (adding to the end, removing from the front).
 *     *   `java.util.List`: The `List` interface is used for declaring variables and return types in methods like `listPatients()` and `listPendingAppointments()`. This demonstrates programming to an interface, making the code more flexible if a different List implementation were needed later.
 * 
 * 3.  **User Input and Control Flow:**
 *     *   `java.util.Scanner`: Used in `HospitalSchedulerApp.main` to read user input from the console.
 *     *   `switch` statement: Used in the `main` method to direct the program flow based on the user's integer choice from the menu.
 * 
 * 4.  **Error Handling:**
 *     *   `System.err`: Used specifically for printing error messages, such as invalid menu choices, non-integer input, patient not found errors, and attempts to process appointments when the queue is empty. This distinguishes error output from normal program output (`System.out`).
 *     *   `try-catch` blocks:
 *         *   A large `try-catch` block wraps the main `while` loop in `HospitalSchedulerApp.main`. This provides class-wide (or rather, main application loop-wide) exception handling. It catches `InputMismatchException` specifically to handle cases where the user enters non-integer input when an integer is expected (like the menu choice or patient ID). It also includes a general `catch (Exception e)` as a fallback for any other unexpected runtime errors.
 *         *   A smaller `try-catch` block is used within the `case 2` (Schedule Appointment) of the `switch` statement. This specifically catches the `PatientNotFoundException` that `scheduler.scheduleAppointment` might throw, allowing the program to print a specific error message to `System.err` without crashing.
 *     *   Input Validation: The code checks if the patient ID exists when scheduling an appointment using the `findPatientById` method, which throws a `PatientNotFoundException`. The `InputMismatchException` handling validates that integer input is provided.
 * 
 * 5.  **Core Logic Implementation:**
 *     *   `registerPatient`: Creates a new `Patient` object with an auto-incremented ID and adds it to the `patients ArrayList`.
 *     *   `findPatientById`: Iterates through the `patients` list to find a patient by ID, throwing a custom exception if not found.
 *     *   `scheduleAppointment`: Calls `findPatientById` to validate the patient, creates an `Appointment` object, and adds it to the `appointmentQueue` using `offer()`.
 *     *   `processNextAppointment`: Removes and returns the head of the `appointmentQueue` using `poll()`. It returns `null` if the queue is empty, which is then checked in `main` to print an error message.
 *     *   `listPatients` and `listPendingAppointments`: These methods return `List` views of the underlying data structures. Returning a *copy* (`new ArrayList<>(collection)`) is a good practice to prevent external code from modifying the internal state of the `HospitalScheduler`.
 * 
 * This solution effectively integrates all the required Java components to create a functional and robust simulation of a hospital appointment scheduling system, demonstrating key object-oriented principles, data structure usage, and error handling techniques.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Custom exception for patient not found
class PatientNotFoundException extends Exception {
    public PatientNotFoundException(String message) {
        super(message);
    }
}

// Represents a Patient
class Patient {
    private int id;
    private String name;
    private String condition;

    public Patient(int id, String name, String condition) {
        this.id = id;
        this.name = name;
        this.condition = condition;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Condition: " + condition;
    }
}

// Represents an Appointment
class Appointment {
    private Patient patient; // Appointment is for a specific patient
    private String time;
    private String doctor;

    public Appointment(Patient patient, String time, String doctor) {
        this.patient = patient;
        this.time = time;
        this.doctor = doctor;
    }

    public Patient getPatient() {
        return patient;
    }

    public String getTime() {
        return time;
    }

    public String getDoctor() {
        return doctor;
    }

    @Override
    public String toString() {
        return "Patient ID: " + patient.getId() + ", Name: " + patient.getName() +
               ", Time: " + time + ", Doctor: " + doctor;
    }
}

// Manages patients and appointments
class HospitalScheduler {
    private List<Patient> patients;
    private Queue<Appointment> appointmentQueue;
    private int nextPatientId;

    public HospitalScheduler() {
        this.patients = new ArrayList<>(); // Use ArrayList for patient list
        this.appointmentQueue = new LinkedList<>(); // Use LinkedList as a Queue
        this.nextPatientId = 1; // Start patient IDs from 1
    }

    /**
     * Registers a new patient and assigns a unique ID.
     * @param name The patient's name.
     * @param condition The patient's condition.
     * @return The newly registered Patient object.
     */
    public Patient registerPatient(String name, String condition) {
        Patient newPatient = new Patient(nextPatientId++, name, condition);
        patients.add(newPatient);
        return newPatient;
    }

    /**
     * Finds a patient by their ID.
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found.
     * @throws PatientNotFoundException if the patient ID does not exist.
     */
    public Patient findPatientById(int patientId) throws PatientNotFoundException {
        for (Patient patient : patients) {
            if (patient.getId() == patientId) {
                return patient;
            }
        }
        throw new PatientNotFoundException("Patient with ID " + patientId + " not found.");
    }

    /**
     * Schedules a new appointment for an existing patient.
     * Adds the appointment to the queue.
     * @param patientId The ID of the patient.
     * @param time The appointment time string.
     * @param doctor The doctor's name.
     * @throws PatientNotFoundException if the patient ID is invalid.
     */
    public void scheduleAppointment(int patientId, String time, String doctor) throws PatientNotFoundException {
        Patient patient = findPatientById(patientId); // This throws PatientNotFoundException if not found
        Appointment newAppointment = new Appointment(patient, time, doctor);
        appointmentQueue.offer(newAppointment); // offer adds to the end of the queue
    }

    /**
     * Processes the next appointment in the queue.
     * Removes the appointment from the front.
     * @return The processed Appointment object, or null if the queue is empty.
     */
    public Appointment processNextAppointment() {
        return appointmentQueue.poll(); // poll retrieves and removes the head of the queue, returns null if empty
    }

    /**
     * Gets the list of all registered patients.
     * @return A List view of the registered patients.
     */
    public List<Patient> listPatients() {
        return new ArrayList<>(patients); // Return a copy to prevent external modification
    }

    /**
     * Gets the list of all pending appointments in the queue.
     * @return A List view of the pending appointments.
     */
    public List<Appointment> listPendingAppointments() {
        // Convert queue to list for easy viewing/iteration
        return new ArrayList<>(appointmentQueue);
    }

    /**
     * Checks if the appointment queue is empty.
     * @return true if the queue is empty, false otherwise.
     */
    public boolean isAppointmentQueueEmpty() {
        return appointmentQueue.isEmpty();
    }
}

// Main application class
public class HospitalSchedulerApp {

    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling loop
        while (running) {
            try {
                printMenu();
                System.out.print("Enter choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                switch (choice) {
                    case 1: // Register Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter patient condition: ");
                        String condition = scanner.nextLine();
                        Patient newPatient = scheduler.registerPatient(name, condition);
                        System.out.println("Patient registered successfully with ID: " + newPatient.getId());
                        break;

                    case 2: // Schedule Appointment
                        System.out.print("Enter patient ID for appointment: ");
                        int patientId = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        System.out.print("Enter appointment time (e.g., 10:00 AM): ");
                        String time = scanner.nextLine();
                        System.out.print("Enter doctor's name: ");
                        String doctor = scanner.nextLine();
                        try {
                            scheduler.scheduleAppointment(patientId, time, doctor);
                            System.out.println("Appointment scheduled for Patient ID " + patientId + ".");
                        } catch (PatientNotFoundException e) {
                            System.err.println("Error: " + e.getMessage()); // Use System.err for specific error
                        }
                        break;

                    case 3: // Process Next Appointment
                        System.out.println("Processing next appointment...");
                        Appointment processedAppt = scheduler.processNextAppointment();
                        if (processedAppt != null) {
                            System.out.println("Appointment processed for " + processedAppt.getPatient().getName() +
                                               " (ID: " + processedAppt.getPatient().getId() + ") with " +
                                               processedAppt.getDoctor() + " at " + processedAppt.getTime() + ".");
                        } else {
                            System.err.println("Error: No pending appointments in the queue."); // Use System.err
                        }
                        break;

                    case 4: // List All Patients
                        List<Patient> patientList = scheduler.listPatients(); // Use List interface
                        System.out.println("--- Registered Patients ---");
                        if (patientList.isEmpty()) {
                            System.out.println("No patients registered yet.");
                        } else {
                            for (Patient p : patientList) {
                                System.out.println(p);
                            }
                        }
                        System.out.println("---------------------------");
                        break;

                    case 5: // List Pending Appointments
                        List<Appointment> appointmentList = scheduler.listPendingAppointments(); // Use List interface
                        System.out.println("--- Pending Appointments ---");
                        if (appointmentList.isEmpty()) {
                            System.out.println("No pending appointments.");
                        } else {
                            // Iterate through the List obtained from the Queue
                            for (Appointment appt : appointmentList) {
                                System.out.println(appt);
                            }
                        }
                        System.out.println("----------------------------");
                        break;

                    case 6: // Exit
                        System.out.println("Exiting Hospital Scheduler. Goodbye!");
                        running = false;
                        break;

                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6."); // Use System.err
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number."); // Use System.err
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // General catch-all for unexpected errors
                System.err.println("An unexpected error occurred: " + e.getMessage()); // Use System.err
                e.printStackTrace(); // Print stack trace for debugging
            }
            System.out.println(); // Add a newline for better readability between operations
        }

        scanner.close(); // Close the scanner when done
    }

    private static void printMenu() {
        System.out.println("--- Hospital Scheduler Menu ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. Process Next Appointment");
        System.out.println("4. List All Patients");
        System.out.println("5. List Pending Appointments");
        System.out.println("6. Exit");
        System.out.println("-------------------------------");
    }
}
