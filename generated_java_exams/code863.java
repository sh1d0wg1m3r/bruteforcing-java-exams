/*
 * Exam Question #863
 * Generated on: 2025-05-12 16:52:06
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Document Processing System
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simple command-line based Document Processing System. This system should manage documents submitted for processing, handle them in a First-In, First-Out (FIFO) manner, and keep track of completed documents.
 * 
 * The system should allow users to:
 * 1.  Submit a new document for processing.
 * 2.  Process the next document in the queue.
 * 3.  View all documents currently waiting in the processing queue.
 * 4.  View all documents that have been successfully processed.
 * 5.  Exit the application.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must adhere to the following technical constraints and utilize specific Java components:
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to manage documents waiting for processing.
 *     *   Use `java.util.ArrayList` to store documents after they have been processed.
 *     *   Use `java.util.List` as a return type or variable declaration where appropriate (e.g., for methods returning collections of documents).
 * 2.  **Input/Output:**
 *     *   Use `java.util.Scanner` to read user commands and document details from the console.
 *     *   Use `System.out` for displaying menus, system status, and lists of documents.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid input, attempting to process an empty queue).
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different user commands.
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, such as invalid user input (e.g., non-numeric input when expecting a number).
 * 5.  **Object-Oriented Design:**
 *     *   Create a `Document` class to represent a document with relevant attributes (e.g., ID, name, status).
 *     *   Create a `DocumentProcessor` class responsible for managing the queue and the list of documents and implementing the system's logic.
 *     *   Utilize proper encapsulation (private fields, public methods/getters).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (like Javadoc for classes/methods).
 * 
 * **System Flow:**
 * 
 * 1.  The application starts and presents a menu of options to the user.
 * 2.  The user enters a number corresponding to their choice.
 * 3.  The system processes the command using a `switch` statement.
 * 4.  For adding a document, the system prompts for document details (name). A unique ID should be generated automatically.
 * 5.  For processing, the system takes the oldest document from the queue, marks it as processed, and moves it to the completed list. If the queue is empty, an error message is displayed.
 * 6.  Viewing options display the contents of the respective collections.
 * 7.  The application continues until the user chooses to exit.
 * 
 * **Expected Output:**
 * 
 * The output should be clear and informative, guiding the user through the process. Error messages should be distinct using `System.err`.
 * 
 * Example interaction:
 * 
 * ```
 * --- Document Processing System ---
 * 1. Submit Document
 * 2. Process Next Document
 * 3. View Pending Documents
 * 4. View Completed Documents
 * 5. Exit
 * Enter your choice: 1
 * Enter document name: Report_Q3
 * 
 * Document 'Report_Q3' (ID: 1) submitted for processing.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 1
 * Enter document name: Proposal_V1
 * 
 * Document 'Proposal_V1' (ID: 2) submitted for processing.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 3
 * 
 * --- Pending Documents ---
 * ID: 1, Name: Report_Q3, Status: Pending
 * ID: 2, Name: Proposal_V1, Status: Pending
 * ---------------------------
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 2
 * 
 * Processing document 'Report_Q3' (ID: 1)... Completed.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 3
 * 
 * --- Pending Documents ---
 * ID: 2, Name: Proposal_V1, Status: Pending
 * ---------------------------
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 4
 * 
 * --- Completed Documents ---
 * ID: 1, Name: Report_Q3, Status: Completed
 * ---------------------------
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 2
 * 
 * Processing document 'Proposal_V1' (ID: 2)... Completed.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 2
 * Error: No documents in the queue to process.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: exit
 * Error: Invalid input. Please enter a number.
 * 
 * --- Document Processing System ---
 * ... (menu again)
 * Enter your choice: 5
 * 
 * Exiting Document Processing System.
 * ```
 * 
 * Your task is to implement the Java code for this system, demonstrating your understanding of the required concepts and best practices.
 * 
 * **Submission:** Provide the complete Java code for the application.
 *
 * EXPLANATION:
 * This solution implements the Document Processing System as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`Document` Class:**
 *     *   Represents a single document with `id`, `name`, and `status` fields.
 *     *   Fields are `private` for encapsulation.
 *     *   Public getters provide read access.
 *     *   A `setStatus` method allows modifying the document's state.
 *     *   `toString()` provides a convenient way to display document information.
 * 
 * 2.  **`DocumentProcessor` Class:**
 *     *   Manages the core logic and data structures.
 *     *   `pendingDocumentsQueue`: Declared as `Queue<Document>` and initialized with `LinkedList`. `LinkedList` is a common implementation of `Queue` that supports the necessary FIFO operations (`offer` for adding, `poll` for removing from the head).
 *     *   `completedDocumentsList`: Declared as `List<Document>` and initialized with `ArrayList`. `ArrayList` is suitable for storing completed documents where indexed access or simple iteration is needed.
 *     *   `nextDocumentId`: A simple counter to assign unique IDs automatically.
 *     *   `addDocument(String name)`: Creates a new `Document` object with an auto-generated ID and adds it to the `pendingDocumentsQueue` using `offer()`.
 *     *   `processNextDocument()`:
 *         *   Checks if the `pendingDocumentsQueue` is empty using `isEmpty()`. If so, it prints an error to `System.err` and returns.
 *         *   If not empty, it retrieves and removes the head element using `poll()`.
 *         *   It updates the document's status and adds it to the `completedDocumentsList`.
 *     *   `viewPendingDocuments()`: Iterates through the `pendingDocumentsQueue` and prints each document's details to `System.out`. It handles the case where the queue is empty.
 *     *   `viewCompletedDocuments()`: Iterates through the `completedDocumentsList` and prints each document's details to `System.out`. It handles the case where the list is empty.
 *     *   `getCompletedDocuments()`: A method demonstrating the use of the `List` interface as a return type.
 * 
 * 3.  **`DocumentProcessingSystem` (Main Class):**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   Initializes `Scanner` for input and `DocumentProcessor` for system logic.
 *     *   Uses a `while(running)` loop to keep the application alive until the user chooses to exit.
 *     *   `printMenu()`: A helper method to display the options using `System.out`.
 *     *   **Input Handling and Validation:**
 *         *   Reads user input using `scanner.nextInt()`.
 *         *   A `try-catch(InputMismatchException)` block is wrapped around `scanner.nextInt()` to catch non-integer input. If caught, an error is printed to `System.err`, the invalid input is consumed using `scanner.nextLine()` to clear the buffer, and `continue` restarts the loop.
 *         *   `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls when reading the document name.
 *         *   Basic validation for document name being empty is included.
 *     *   **`switch` Statement:** Handles the valid integer input (`choice`), directing the execution to the appropriate `DocumentProcessor` method or the exit logic.
 *     *   The `default` case in the `switch` handles valid integer inputs that don't match any menu option, printing an error to `System.err`.
 *     *   **Class-wide Exception Handling:** A larger `try-catch(Exception e)` block is wrapped around the main `while` loop. This provides a safety net for any *unexpected* exceptions that might occur during the execution of the loop or called methods, printing a generic error message to `System.err` and the stack trace for debugging.
 *     *   **`finally` Block:** Ensures `scanner.close()` is called regardless of whether an exception occurred or the loop finished normally, releasing system resources.
 * 
 * This solution effectively combines the required Java components to create a functional and robust simulation of a document processing workflow, demonstrating key object-oriented principles, data structure usage, and error handling techniques.
 */

import java.util.LinkedList; // Common Queue implementation
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner

/**
 * Represents a document in the processing system.
 */
class Document {
    private int id;
    private String name;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new Document.
     * @param id The unique identifier for the document.
     * @param name The name of the document.
     */
    public Document(int id, String name) {
        this.id = id;
        this.name = name;
        this.status = "Pending"; // Initial status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for status ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the document.
     * @return A formatted string describing the document.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Status: %s", id, name, status);
    }
}

/**
 * Manages the queue of pending documents and the list of completed documents.
 */
class DocumentProcessor {
    // Using Queue interface with LinkedList implementation for FIFO
    private Queue<Document> pendingDocumentsQueue;
    // Using List interface with ArrayList implementation for completed documents
    private List<Document> completedDocumentsList;
    private int nextDocumentId; // Counter for unique document IDs

    /**
     * Constructs a new DocumentProcessor.
     */
    public DocumentProcessor() {
        this.pendingDocumentsQueue = new LinkedList<>();
        this.completedDocumentsList = new ArrayList<>();
        this.nextDocumentId = 1; // Start IDs from 1
    }

    /**
     * Adds a new document to the pending queue.
     * @param name The name of the document to add.
     */
    public void addDocument(String name) {
        Document newDoc = new Document(nextDocumentId++, name);
        pendingDocumentsQueue.offer(newDoc); // offer is preferred over add in queues
        System.out.println("\nDocument '" + name + "' (ID: " + newDoc.getId() + ") submitted for processing.");
    }

    /**
     * Processes the next document in the queue.
     * Removes the document from the queue, updates its status, and adds it to the completed list.
     */
    public void processNextDocument() {
        if (pendingDocumentsQueue.isEmpty()) {
            System.err.println("\nError: No documents in the queue to process.");
            return; // Exit the method if queue is empty
        }

        Document docToProcess = pendingDocumentsQueue.poll(); // Retrieve and remove the head of the queue
        docToProcess.setStatus("Completed"); // Update status
        completedDocumentsList.add(docToProcess); // Add to completed list

        System.out.println("\nProcessing document '" + docToProcess.getName() + "' (ID: " + docToProcess.getId() + ")... Completed.");
    }

    /**
     * Displays all documents currently in the pending queue.
     */
    public void viewPendingDocuments() {
        System.out.println("\n--- Pending Documents ---");
        if (pendingDocumentsQueue.isEmpty()) {
            System.out.println("No documents waiting in the queue.");
        } else {
            // Iterate over the queue elements without removing them
            // Create a temporary list or iterate using an enhanced for loop
            // Note: Iterating directly over a Queue might not be ideal if order guarantees are strict
            // A common pattern is to convert to a list or use peek/poll in a loop if needed,
            // but simple iteration is fine for just viewing.
             for (Document doc : pendingDocumentsQueue) {
                 System.out.println(doc);
             }
        }
        System.out.println("---------------------------");
    }

    /**
     * Displays all documents that have been processed.
     */
    public void viewCompletedDocuments() {
        System.out.println("\n--- Completed Documents ---");
        if (completedDocumentsList.isEmpty()) {
            System.out.println("No documents have been completed yet.");
        } else {
            // Iterate over the ArrayList
            for (Document doc : completedDocumentsList) {
                System.out.println(doc);
            }
        }
        System.out.println("---------------------------");
    }

    /**
     * Returns the list of completed documents.
     * Demonstrates using the List interface as a return type.
     * @return A List of completed documents.
     */
    public List<Document> getCompletedDocuments() {
        // Return a copy or the list itself depending on requirements.
        // Returning the list directly allows external modification, returning a copy is safer.
        // For this problem, returning the list directly is acceptable.
        return completedDocumentsList;
    }
}

/**
 * Main class to run the Document Processing System.
 * Handles user interaction and the main application loop.
 */
public class DocumentProcessingSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DocumentProcessor processor = new DocumentProcessor();
        boolean running = true;

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                printMenu();

                System.out.print("Enter your choice: ");
                int choice = -1; // Default invalid choice

                // --- Input Validation and Exception Handling for choice ---
                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    System.err.println("\nError: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop and show menu again
                }

                // --- Switch statement for command handling ---
                switch (choice) {
                    case 1: // Submit Document
                        System.out.print("Enter document name: ");
                        String docName = scanner.nextLine();
                        if (docName == null || docName.trim().isEmpty()) {
                             System.err.println("\nError: Document name cannot be empty.");
                        } else {
                            processor.addDocument(docName.trim());
                        }
                        break;

                    case 2: // Process Next Document
                        processor.processNextDocument();
                        break;

                    case 3: // View Pending Documents
                        processor.viewPendingDocuments();
                        break;

                    case 4: // View Completed Documents
                        processor.viewCompletedDocuments();
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("\nExiting Document Processing System.");
                        break;

                    default: // Invalid choice
                        System.err.println("\nError: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a blank line for spacing
            }
        } catch (Exception e) {
            // Generic catch for any unexpected exceptions during execution
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu to the console.
     */
    private static void printMenu() {
        System.out.println("--- Document Processing System ---");
        System.out.println("1. Submit Document");
        System.out.println("2. Process Next Document");
        System.out.println("3. View Pending Documents");
        System.out.println("4. View Completed Documents");
        System.out.println("5. Exit");
    }
}
