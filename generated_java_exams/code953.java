/*
 * Exam Question #953
 * Generated on: 2025-05-12 17:04:30
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Scheduling System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified appointment scheduling system for a small hospital clinic. The system needs to manage patients who arrive without appointments (walk-ins) by placing them in a waiting list queue, and also manage a list of scheduled appointments.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that provides a text-based menu interface for the following operations:
 * 
 * 1.  **Add Patient to Waiting List:** Allows a user to enter a patient's name and add them to a waiting list (Queue).
 * 2.  **Schedule Patient from Waiting List:** Takes the next patient from the waiting list (if available) and schedules them for an appointment slot. For simplicity, the user will just enter a string representing the appointment time/slot (e.g., "10:00 AM Room 3"). The scheduled patient's name and the slot should be added to a list of scheduled appointments.
 * 3.  **View Waiting List:** Displays all patients currently in the waiting list queue.
 * 4.  **View Scheduled Appointments:** Displays all appointments that have been scheduled.
 * 5.  **Exit:** Terminates the program.
 * 
 * **Technical Specifications:**
 * 
 * *   You **must** use a `java.util.Queue` to manage the waiting list.
 * *   You **must** use a `java.util.ArrayList` to store the scheduled appointments.
 * *   You **must** declare the variable holding the scheduled appointments using the `java.util.List` interface (`List<String> scheduledAppointments = new ArrayList<>();`).
 * *   You **must** use `java.util.Scanner` to get user input for menu selection, patient names, and appointment slots.
 * *   You **must** use a `switch` statement to handle the different menu options.
 * *   You **must** use `System.err.println()` to display error messages (e.g., trying to schedule when the waiting list is empty, invalid menu input).
 * *   You **must** use `System.out.println()` for displaying the menu, prompts, successful operation messages, and lists of patients/appointments.
 * *   You **must** implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime issues within the main program loop (e.g., issues with Scanner or unexpected errors).
 * *   Implement input validation: Ensure patient names are not empty when adding to the queue. Handle cases where scheduling is attempted with an empty waiting list. Handle cases where viewing lists that are empty.
 * *   Follow Java best practices:
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain complex logic.
 *     *   Structure your code clearly.
 * 
 * **Expected Output:**
 * 
 * *   The program should continuously display a menu until the user selects the Exit option.
 * *   Adding a patient should confirm the addition.
 * *   Scheduling should confirm the patient scheduled and the slot, or print an error if the queue is empty.
 * *   Viewing lists should print each item on a new line or indicate if the list is empty.
 * *   Invalid menu input should result in an error message to `System.err`.
 * *   General errors within the main loop should be caught and reported to `System.err`.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice added to waiting list.
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient Bob added to waiting list.
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 3
 * --- Waiting List ---
 * Alice
 * Bob
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 2
 * Enter appointment slot (e.g., 10:00 AM Room 3): 10:00 AM Room 3
 * Scheduled Alice for 10:00 AM Room 3.
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 4
 * --- Scheduled Appointments ---
 * Alice - 10:00 AM Room 3
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 2
 * Enter appointment slot (e.g., 10:00 AM Room 3): 10:30 AM Room 4
 * Scheduled Bob for 10:30 AM Room 4.
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 3
 * --- Waiting List ---
 * (Waiting list is empty)
 * 
 * --- Hospital Scheduling Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Patient from Waiting List
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 5
 * Exiting Hospital Scheduling System.
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the `HospitalScheduler` system as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The code is organized within a `HospitalScheduler` class. This class encapsulates the state (`waitingList`, `scheduledAppointments`, `scanner`) and the behavior (methods for each operation and the main `run` loop).
 * 
 * 2.  **Data Structures:**
 *     *   `Queue<String> waitingList`: A `LinkedList` is used as the concrete implementation of the `Queue` interface. It stores patient names (as `String`) in a FIFO (First-In, First-Out) manner, which is suitable for a waiting list. `offer()` is used to add to the tail, and `poll()` is used to remove from the head.
 *     *   `List<String> scheduledAppointments`: An `ArrayList` is used as the concrete implementation of the `List` interface. It stores strings representing the scheduled appointments (patient name + slot). `ArrayList` is suitable here as we primarily add and iterate through the list. The variable is declared as `List` to adhere to the requirement of using the interface.
 * 
 * 3.  **User Input:** `java.util.Scanner` is used to read input from `System.in`. It's initialized once in the constructor and closed in the `finally` block to prevent resource leaks. `scanner.nextLine()` is used consistently to read entire lines, which helps avoid issues with leftover newlines after reading numbers. `trim()` is used to remove leading/trailing whitespace from user input.
 * 
 * 4.  **Flow Control:**
 *     *   A `boolean running` flag and a `while (running)` loop control the main program execution, keeping the menu active until the user chooses to exit.
 *     *   A `switch` statement is used within the loop to direct execution based on the user's integer choice, invoking the corresponding private method for each operation.
 *     *   `break` statements are used within the `switch` cases to exit the case block after the operation is performed.
 *     *   A `default` case in the `switch` handles invalid numeric input (numbers outside the 1-5 range).
 *     *   `continue` is used in the `NumberFormatException` catch block to skip the rest of the loop iteration and re-display the menu.
 * 
 * 5.  **Input Validation and Error Handling:**
 *     *   **Specific Operation Errors:**
 *         *   `addPatientToWaitingList()` checks if the entered name is empty using `isEmpty()` and prints an error to `System.err` if it is.
 *         *   `schedulePatientFromWaitingList()` checks if `waitingList.isEmpty()` before attempting to `poll()`. If empty, it prints an error to `System.err` and returns.
 *         *   `viewWaitingList()` and `viewScheduledAppointments()` check if their respective collections are empty using `isEmpty()` and print a user-friendly message instead of displaying nothing.
 *     *   **General Program Errors:**
 *         *   A `try-catch` block wraps the main `while` loop in the `run()` method. This catches potential `NumberFormatException` when parsing the user's choice (which is also handled specifically inside the loop) and, more importantly, any other unexpected `Exception` that might occur during program execution.
 *         *   Caught exceptions are reported to `System.err.println()`, including the exception message. `e.printStackTrace(System.err)` is also included in the general catch block for detailed debugging information directed to the error stream.
 *     *   **Resource Management:** The `scanner.close()` is placed in a `finally` block to ensure it is closed regardless of whether the program exits normally or due to an exception.
 * 
 * 6.  **Output:**
 *     *   `System.out.println()` is used for the menu, prompts, successful confirmations, and displaying the contents of the lists.
 *     *   `System.err.println()` is exclusively used for error messages, fulfilling the requirement.
 * 
 * 7.  **Best Practices:**
 *     *   **Encapsulation:** The data structures (`waitingList`, `scheduledAppointments`, `scanner`) are `private` members of the `HospitalScheduler` class, only accessible through its public (`run`, `main`) or private helper methods.
 *     *   **Meaningful Names:** Variables (`waitingList`, `scheduledAppointments`, `patientName`, `appointmentSlot`, `choice`, `running`) and methods (`displayMenu`, `addPatientToWaitingList`, `schedulePatientFromWaitingList`, `viewWaitingList`, `viewScheduledAppointments`, `run`) have clear names indicating their purpose.
 *     *   **Comments:** Comments are included to explain the purpose of classes, data structures, and specific code sections like input validation or switch cases.
 *     *   **Clean Structure:** The code is broken down into smaller, single-purpose methods (`addPatientToWaitingList`, `schedulePatientFromWaitingList`, etc.), making the `run` method cleaner and easier to understand.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrating an understanding of data structures, control flow, user input, and robust error handling, making it a suitable challenge for an advanced beginner or intermediate Java exam.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList is a common Queue implementation
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

public class HospitalScheduler {

    // Using LinkedList as the implementation for Queue
    private Queue<String> waitingList;
    // Using ArrayList as the implementation for List interface
    private List<String> scheduledAppointments;
    private Scanner scanner;

    public HospitalScheduler() {
        // Initialize the data structures
        waitingList = new LinkedList<>();
        scheduledAppointments = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    // Method to display the main menu
    private void displayMenu() {
        System.out.println("\n--- Hospital Scheduling Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Patient from Waiting List");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Operation 1: Add a patient to the waiting list
    private void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        String patientName = scanner.nextLine().trim(); // Trim whitespace

        // Input validation: check if name is empty
        if (patientName.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Exit the method if input is invalid
        }

        // Add the patient name to the end of the waiting list queue
        waitingList.offer(patientName);
        System.out.println("Patient " + patientName + " added to waiting list.");
    }

    // Operation 2: Schedule the next patient from the waiting list
    private void schedulePatientFromWaitingList() {
        // Check if the waiting list is empty
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule.");
            return; // Exit the method if queue is empty
        }

        // Get the next patient from the front of the queue (and remove them)
        String patientName = waitingList.poll();

        System.out.print("Enter appointment slot (e.g., 10:00 AM Room 3): ");
        String appointmentSlot = scanner.nextLine().trim(); // Get the slot input

        // Input validation: check if slot is empty (optional but good practice)
        if (appointmentSlot.isEmpty()) {
             System.err.println("Warning: Appointment slot was empty. Scheduling with empty slot.");
             // Could potentially offer the patient back to the queue or handle differently
        }


        // Create a string representation of the scheduled appointment
        String scheduledEntry = patientName + " - " + appointmentSlot;

        // Add the scheduled entry to the list of scheduled appointments
        scheduledAppointments.add(scheduledEntry);

        System.out.println("Scheduled " + patientName + " for " + appointmentSlot + ".");
    }

    // Operation 3: View the current waiting list
    private void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        // Check if the waiting list is empty
        if (waitingList.isEmpty()) {
            System.out.println("(Waiting list is empty)");
        } else {
            // Iterate and print each patient in the queue
            // Using a foreach loop here doesn't remove elements
            for (String patient : waitingList) {
                System.out.println(patient);
            }
        }
    }

    // Operation 4: View the scheduled appointments
    private void viewScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        // Check if the scheduled appointments list is empty
        if (scheduledAppointments.isEmpty()) {
            System.out.println("(No appointments scheduled)");
        } else {
            // Iterate and print each scheduled appointment
            for (String appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
        }
    }

    // Method to run the main program loop
    public void run() {
        boolean running = true;
        // Use a try-catch block to handle potential exceptions during execution
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    // Read the user's integer choice
                    choice = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    // Handle cases where input is not a valid integer
                    System.err.println("Error: Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop and show menu again
                }

                // Use a switch statement to handle different menu options
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        schedulePatientFromWaitingList();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        System.out.println("Exiting Hospital Scheduling System.");
                        running = false; // Set flag to exit loop
                        break;
                    default:
                        // Handle cases where the number is outside the valid range
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the program run
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Main method to start the program
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run();
    }
}
