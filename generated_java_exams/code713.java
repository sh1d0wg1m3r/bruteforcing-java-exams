/*
 * Exam Question #713
 * Generated on: 2025-05-12 16:29:21
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Support Ticket Management System**
 * 
 * **Objective:**
 * Implement a command-line application to manage support tickets for a small team. The system should allow users to add new tickets, process the next pending ticket, view pending tickets, and view processed tickets.
 * 
 * **Requirements:**
 * 
 * 1.  **SupportTicket Class:**
 *     *   Create a class `SupportTicket` with the following private fields:
 *         *   `id` (int): Unique identifier for the ticket.
 *         *   `description` (String): A brief description of the issue.
 *         *   `status` (String): The current status (e.g., "Pending", "Resolved").
 *     *   Provide a constructor that takes `id` and `description`, setting the initial status to "Pending".
 *     *   Provide public getter methods for all fields.
 *     *   Provide a public method `setStatus(String status)` to update the ticket's status.
 *     *   Override the `toString()` method to provide a user-friendly string representation of the ticket.
 * 
 * 2.  **SupportSystem Class:**
 *     *   Create a class `SupportSystem` to manage the ticket workflow.
 *     *   It must use a `Queue<SupportTicket>` (specifically, instantiate with `java.util.LinkedList`) to hold tickets that are pending processing (First-In, First-Out).
 *     *   It must use a `List<SupportTicket>` (specifically, instantiate with `java.util.ArrayList`) to hold tickets that have been processed.
 *     *   Maintain a private counter to generate unique ticket IDs.
 *     *   Provide the following public methods:
 *         *   `addTicket(String description)`: Creates a new `SupportTicket` with a unique ID and "Pending" status, and adds it to the pending queue.
 *         *   `processNextTicket()`: Removes the next ticket from the pending queue, updates its status to "Resolved", and adds it to the processed list. If the queue is empty, it should indicate that there are no tickets to process.
 *         *   `getPendingTickets()`: Returns a `List<SupportTicket>` containing all tickets currently in the pending queue (a snapshot).
 *         *   `getProcessedTickets()`: Returns the `List<SupportTicket>` containing all resolved tickets.
 * 
 * 3.  **Main Application Class (e.g., `SupportSystemApp`):**
 *     *   Implement a `main` method to run the application.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Ticket
 *         2.  Process Next Ticket
 *         3.  View Pending Tickets
 *         4.  View Processed Tickets
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 *     *   Implement a loop so the menu is displayed repeatedly until the user chooses to exit.
 *     *   **Input Validation & Error Handling:**
 *         *   Wrap the user input reading (for the menu choice) in a `try-catch` block to handle non-integer input (`java.util.InputMismatchException`). If invalid input is detected, print an error message and prompt the user again.
 *         *   Use `System.out` for all normal program output (menu, ticket details, success messages).
 *         *   Use `System.err` for all error messages (e.g., invalid menu choice, invalid input type, attempting to process ticket when queue is empty).
 *         *   Include a general `catch (Exception e)` block in the main loop's `try-catch` for any unexpected errors, printing the error details to `System.err`.
 *     *   Ensure the `Scanner` resource is properly closed upon exiting the application.
 * 
 * 4.  **General Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain logic.
 *     *   Ensure proper encapsulation (private fields, public methods).
 * 
 * **Required Java Components (must be used):**
 * *   `java.util.Queue`
 * *   `java.util.ArrayList`
 * *   `java.util.List`
 * *   `java.util.Scanner`
 * *   `switch` statement
 * *   `System.err`
 * *   `System.out`
 * *   Class-wide exception handling with `try-catch` blocks (demonstrated in the main application loop).
 * 
 * **Example Interaction:**
 * 
 * ```
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: Internet connection issue
 * Ticket #1 added: Internet connection issue [Pending]
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: Software installation failed
 * Ticket #2 added: Software installation failed [Pending]
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tickets ---
 * Ticket #1: Internet connection issue [Pending]
 * Ticket #2: Software installation failed [Pending]
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 2
 * Processing ticket #1...
 * Ticket #1 resolved.
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tickets ---
 * Ticket #2: Software installation failed [Pending]
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 4
 * --- Processed Tickets ---
 * Ticket #1: Internet connection issue [Resolved]
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Support Ticket System Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * Enter your choice: 5
 * Exiting Support Ticket System. Goodbye!
 * ```
 *
 * EXPLANATION:
 * This solution implements a basic support ticket management system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`SupportTicket` Class:** This class is a simple Plain Old Java Object (POJO) representing a ticket. It encapsulates the ticket's data (`id`, `description`, `status`) using private fields and provides public getter methods and a setter for the status, adhering to encapsulation principles. The `toString()` method provides a convenient way to print ticket information.
 * 
 * 2.  **`SupportSystem` Class:** This is the core class managing the ticket workflow.
 *     *   It uses a `Queue<SupportTicket>` (`pendingTickets`), specifically a `LinkedList` implementation, to store tickets waiting for processing. The `Queue` interface ensures FIFO (First-In, First-Out) behavior, which is appropriate for processing tickets in the order they are received.
 *     *   It uses a `List<SupportTicket>` (`processedTickets`), specifically an `ArrayList` implementation, to store tickets once they have been resolved. `ArrayList` is suitable here as processed tickets are typically accessed by index or iterated over, and dynamic resizing is handled automatically.
 *     *   The `addTicket` method creates a new ticket and adds it to the `pendingTickets` queue using `queue.add()`. It also manages a simple counter (`nextTicketId`) for unique IDs.
 *     *   The `processNextTicket` method uses `queue.poll()` to retrieve and remove the head of the `pendingTickets` queue. `poll()` is safer than `remove()` as it returns `null` if the queue is empty, allowing for graceful handling of this condition without throwing an exception. The processed ticket's status is updated, and it's added to the `processedTickets` list.
 *     *   `getPendingTickets` returns a `List` created from the current elements of the `pendingTickets` queue. This demonstrates converting between collection types and provides a snapshot of the queue's contents without exposing the internal `Queue` object directly, improving encapsulation.
 *     *   `getProcessedTickets` returns the `ArrayList` holding the processed tickets.
 * 
 * 3.  **`SupportSystemApp` Class (Main Application):**
 *     *   The `main` method drives the application loop.
 *     *   A `Scanner` is used to read user input from the console.
 *     *   A `while(true)` loop keeps the application running until explicitly exited.
 *     *   A `printMenu` helper method displays the available options.
 *     *   The core logic is within a `try-catch` block to handle potential runtime issues, specifically focusing on user input errors.
 *     *   `scanner.nextInt()` reads the menu choice. `scanner.nextLine()` is called immediately after to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls.
 *     *   A `switch` statement is used to direct execution based on the user's integer choice, calling the appropriate methods on the `SupportSystem` instance.
 *     *   `System.out` is used for all standard output, such as the menu, prompts, confirmation messages, and listing ticket details.
 *     *   `System.err` is explicitly used for error messages, including:
 *         *   Invalid menu choice (handled in the `default` case of the `switch`).
 *         *   Non-integer input for the menu choice (caught by `InputMismatchException`).
 *         *   Attempting to process a ticket when the queue is empty (handled within `processNextTicket` and printed from there).
 *         *   A general `catch (Exception e)` is included as a fallback for any other unexpected runtime errors, demonstrating broader exception handling.
 *     *   The `InputMismatchException` catch block is crucial for robust input handling with `Scanner`, preventing the program from crashing on non-numeric input and clearing the invalid input from the scanner buffer using `scanner.nextLine()`.
 *     *   The application exits using `System.exit(0)` after the `scanner` resource is closed, ensuring proper resource management.
 * 
 * This solution effectively combines the required Java collection types (`Queue`, `ArrayList`, `List`), control flow (`switch`), input/output (`Scanner`, `System.out`, `System.err`), and error handling (`try-catch`, `InputMismatchException`, general `Exception`) within a practical, encapsulated, and well-structured program, fulfilling all exam task requirements.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single support ticket
class SupportTicket {
    private int id;
    private String description;
    private String status;

    // Constructor
    public SupportTicket(int id, String description) {
        this.id = id;
        this.description = description;
        this.status = "Pending"; // Initial status
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // Setter for status
    public void setStatus(String status) {
        this.status = status;
    }

    // String representation of the ticket
    @Override
    public String toString() {
        return "Ticket #" + id + ": " + description + " [" + status + "]";
    }
}

// Manages the collection and workflow of support tickets
class SupportSystem {
    // Queue for tickets waiting to be processed (FIFO)
    private Queue<SupportTicket> pendingTickets;
    // List for tickets that have been processed
    private List<SupportTicket> processedTickets;
    // Counter for generating unique ticket IDs
    private int nextTicketId;

    // Constructor initializes data structures and ID counter
    public SupportSystem() {
        // Use LinkedList as an implementation of Queue
        this.pendingTickets = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.processedTickets = new ArrayList<>();
        this.nextTicketId = 1;
    }

    /**
     * Adds a new ticket to the pending queue.
     * @param description The description of the ticket.
     */
    public void addTicket(String description) {
        SupportTicket newTicket = new SupportTicket(nextTicketId++, description);
        pendingTickets.add(newTicket);
        System.out.println("Ticket #" + newTicket.getId() + " added: " + newTicket.getDescription() + " [" + newTicket.getStatus() + "]");
    }

    /**
     * Processes the next ticket in the pending queue.
     * Removes it from the queue, sets status to Resolved, and adds to processed list.
     * @return true if a ticket was processed, false if the queue was empty.
     */
    public boolean processNextTicket() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        SupportTicket ticketToProcess = pendingTickets.poll();

        if (ticketToProcess != null) {
            System.out.println("Processing ticket #" + ticketToProcess.getId() + "...");
            ticketToProcess.setStatus("Resolved");
            processedTickets.add(ticketToProcess);
            System.out.println("Ticket #" + ticketToProcess.getId() + " resolved.");
            return true;
        } else {
            // Use System.err as this is an error condition from the user's perspective
            System.err.println("Error: No pending tickets to process.");
            return false;
        }
    }

    /**
     * Gets a list of all tickets currently in the pending queue.
     * Returns a new ArrayList to avoid exposing the internal Queue structure directly.
     * @return A List of pending SupportTicket objects.
     */
    public List<SupportTicket> getPendingTickets() {
        // Create a new ArrayList from the elements of the Queue
        return new ArrayList<>(pendingTickets);
    }

    /**
     * Gets a list of all tickets that have been processed.
     * Returns the internal List reference.
     * @return A List of processed SupportTicket objects.
     */
    public List<SupportTicket> getProcessedTickets() {
        // Return the list of processed tickets
        return processedTickets;
    }
}

// Main application class
public class SupportSystemApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SupportSystem system = new SupportSystem();

        System.out.println("--- Welcome to the Support Ticket System ---");

        while (true) {
            printMenu();

            int choice = -1; // Default invalid choice
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Switch statement for menu selection
                switch (choice) {
                    case 1:
                        System.out.print("Enter ticket description: ");
                        String description = scanner.nextLine();
                        if (description == null || description.trim().isEmpty()) {
                             System.err.println("Error: Ticket description cannot be empty.");
                        } else {
                             system.addTicket(description);
                        }
                        break;
                    case 2:
                        system.processNextTicket();
                        break;
                    case 3:
                        List<SupportTicket> pending = system.getPendingTickets();
                        System.out.println("--- Pending Tickets ---");
                        if (pending.isEmpty()) {
                            System.out.println("No pending tickets.");
                        } else {
                            for (SupportTicket ticket : pending) {
                                System.out.println(ticket); // Uses SupportTicket's toString()
                            }
                        }
                        break;
                    case 4:
                        List<SupportTicket> processed = system.getProcessedTickets();
                        System.out.println("--- Processed Tickets ---");
                         if (processed.isEmpty()) {
                            System.out.println("No processed tickets.");
                        } else {
                            for (SupportTicket ticket : processed) {
                                System.out.println(ticket); // Uses SupportTicket's toString()
                            }
                        }
                        break;
                    case 5:
                        System.out.println("Exiting Support Ticket System. Goodbye!");
                        scanner.close(); // Close the scanner resource
                        System.exit(0); // Terminate the application
                        break;
                    default:
                        // Invalid choice, use System.err
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                        break;
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input using System.err
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions using System.err
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: e.printStackTrace(System.err); // For detailed debugging
            }
            System.out.println(); // Add a newline for better readability between menu cycles
        }
    }

    // Helper method to print the menu
    private static void printMenu() {
        System.out.println("--- Support Ticket System Menu ---");
        System.out.println("1. Add New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Processed Tickets");
        System.out.println("5. Exit");
    }
}
