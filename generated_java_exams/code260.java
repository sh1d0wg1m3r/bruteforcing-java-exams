/*
 * Exam Question #260
 * Generated on: 2025-05-11 22:45:54
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Advanced Java Programming Exam: Package Sorting Hub Simulation**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified simulation of a package sorting hub. Packages arrive at the hub and are placed in a queue for processing. A sorting operator takes the next package from the queue, identifies its destination zone, and places it into a specific sorting bay corresponding to that zone. The system should allow adding new packages, processing the next package from the queue, and viewing the packages currently in a specific sorting zone.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Package Representation:** Create a `Package` class with private fields for `packageId` (String) and `destinationZone` (int). Include a constructor and public getter methods.
 * 2.  **Sorting Hub Logic:** Create a `SortingHub` class that manages the incoming packages and the sorted packages.
 *     *   It must use a `java.util.Queue<Package>` to hold packages waiting to be processed.
 *     *   It must use a `java.util.List<java.util.List<Package>>` to represent the sorting bays for different zones. Each inner `List` (which should be an `ArrayList`) corresponds to a specific destination zone. Assume zones are numbered starting from 1. The outer `List` holds the lists for each zone. You will need to define a fixed number of zones (e.g., 4 zones).
 *     *   Implement a method `addPackage(Package pack)` to add a package to the incoming queue.
 *     *   Implement a method `processNextPackage()` that takes the next package from the queue, determines its zone, and adds it to the correct zone's list. If the queue is empty or the zone is invalid, handle the error appropriately.
 *     *   Implement a method `getPackagesInZone(int zoneId)` that returns a `List<Package>` for the specified zone. Handle invalid zone IDs.
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user commands from the console.
 *     *   Implement a command-line interface with the following options:
 *         *   `add`: Prompt for package ID and destination zone, then add the package to the queue.
 *         *   `process`: Process the next package from the queue.
 *         *   `view <zoneId>`: Display the packages in the specified zone's sorting bay.
 *         *   `status`: Display the number of packages in the queue and in each zone.
 *         *   `exit`: Terminate the program.
 *     *   Use a `switch` statement to handle the different commands.
 * 4.  **Error Handling:**
 *     *   Use `System.err` to print error messages (e.g., invalid command, invalid input format, invalid zone ID, queue empty).
 *     *   Use `System.out` for all other output (prompts, success messages, status, package details).
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around user input processing, to gracefully handle potential issues like non-numeric input when expecting numbers.
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments and basic documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Validate user input where necessary (e.g., zone ID range).
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, prompting the user for commands. Output should be clear, indicating success or failure of operations, current status, or contents of zones.
 * 
 * Example Interaction:
 * ```
 * Enter command (add, process, view <zoneId>, status, exit): add
 * Enter Package ID: P101
 * Enter Destination Zone (1-4): 2
 * Package P101 added to queue.
 * Enter command (add, process, view <zoneId>, status, exit): add
 * Enter Package ID: P102
 * Enter Destination Zone (1-4): 4
 * Package P102 added to queue.
 * Enter command (add, process, view <zoneId>, status, exit): status
 * Queue size: 2
 * Zone 1: 0 packages
 * Zone 2: 0 packages
 * Zone 3: 0 packages
 * Zone 4: 0 packages
 * Enter command (add, process, view <zoneId>, status, exit): process
 * Processing package: P101 (Zone 2)
 * Package P101 sorted into Zone 2.
 * Enter command (add, process, view <zoneId>, status, exit): process
 * Processing package: P102 (Zone 4)
 * Package P102 sorted into Zone 4.
 * Enter command (add, process, view <zoneId>, status, exit): status
 * Queue size: 0
 * Zone 1: 0 packages
 * Zone 2: 1 packages
 * Zone 3: 0 packages
 * Zone 4: 1 packages
 * Enter command (add, process, view <zoneId>, status, exit): view 2
 * Packages in Zone 2:
 * - Package ID: P101
 * Enter command (add, process, view <zoneId>, status, exit): view 5
 * Error: Invalid zone ID. Zone must be between 1 and 4.
 * Enter command (add, process, view <zoneId>, status, exit): process
 * Error: Queue is empty. No packages to process.
 * Enter command (add, process, view <zoneId>, status, exit): exit
 * Exiting Sorting Hub simulation.
 * ```
 * 
 * **Constraint:** You must use `java.util.Queue`, `java.util.ArrayList`, `java.util.List`, `java.util.Scanner`, `switch`, `System.err`, `System.out`, and class-wide `try-catch` as specified.
 *
 * EXPLANATION:
 * This solution implements a basic package sorting hub simulation demonstrating the required Java concepts.
 * 
 * 1.  **Package Class:** A simple POJO (`Plain Old Java Object`) representing a package with a `packageId` (String) and `destinationZone` (int). It uses private fields and public getters (`getPackageId`, `getDestinationZone`) for proper encapsulation. A `toString()` method is overridden for easy printing.
 * 
 * 2.  **SortingHub Class:**
 *     *   **`Queue<Package> incomingQueue`**: A `java.util.Queue` (implemented using `LinkedList`) is used to store packages that have arrived but are waiting to be processed. The `offer()` method is used to add packages, and `poll()` is used to retrieve and remove the head of the queue (returning `null` if empty).
 *     *   **`List<List<Package>> sortingBays`**: This represents the sorting bays. The outer `List` holds multiple inner `List` objects. Each inner `List` corresponds to a specific zone and is implemented using `java.util.ArrayList`. This structure fulfills the requirement of using both `List` and `ArrayList`. The number of inner lists is determined by `numberOfZones`.
 *     *   **Constructor:** Initializes the queue and the `sortingBays` list, creating an empty `ArrayList` for each zone.
 *     *   **`addPackage(Package pack)`**: Adds a package to the `incomingQueue` using `offer()`.
 *     *   **`processNextPackage()`**:
 *         *   Uses `incomingQueue.poll()` to get the next package.
 *         *   Checks if the result is `null` to handle an empty queue, printing an error to `System.err`.
 *         *   If a package is retrieved, it validates the `destinationZone`. Since zone IDs are 1-based and `List` indices are 0-based, it calculates `zoneIndex = zoneId - 1`.
 *         *   It checks if `zoneIndex` is within the valid range (`0` to `numberOfZones - 1`). If invalid, it prints an error to `System.err`.
 *         *   If the zone is valid, it retrieves the corresponding `ArrayList` from `sortingBays` using `sortingBays.get(zoneIndex)` and adds the package to it.
 *         *   Success messages and processing details are printed to `System.out`.
 *     *   **`getPackagesInZone(int zoneId)`**:
 *         *   Calculates the 0-based index from the 1-based `zoneId`.
 *         *   Validates the index range. If invalid, it prints an error to `System.err` and returns `null`.
 *         *   If valid, it returns the `List<Package>` (the `ArrayList`) at that index.
 *     *   **`getQueueSize()` and `getZoneSize(int zoneId)`**: Helper methods to get the current counts for status display. `getZoneSize` also includes zone validation and returns -1 for invalid zones.
 * 
 * 3.  **SortingHubApp (Main Class):**
 *     *   **`main` method:**
 *         *   Creates a `SortingHub` instance.
 *         *   Initializes a `Scanner` for user input.
 *         *   Enters a `while(running)` loop for the command-line interface.
 *         *   **Class-wide Exception Handling:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This demonstrates handling unexpected exceptions that might occur during the program's execution, printing the error and stack trace to `System.err`. A `finally` block ensures the `Scanner` is closed.
 *         *   Reads the user's command line using `scanner.nextLine()`.
 *         *   Splits the command line into parts to handle commands like `view 2`.
 *         *   **`switch` statement:** Used to dispatch the command based on the first part of the input line (`command`). Handles "add", "process", "view", "status", and "exit". A `default` case handles unknown commands, printing an error to `System.err`.
 *     *   **`handleAddCommand`**:
 *         *   Prompts for package ID and zone.
 *         *   Includes a specific `try-catch(InputMismatchException)` block to handle cases where the user enters non-numeric input for the zone ID, consuming the invalid input line and printing an error to `System.err`.
 *         *   Validates the entered zone ID against the `NUM_ZONES` range.
 *         *   If input is valid, creates a `Package` object and calls `hub.addPackage()`.
 *     *   **`handleViewCommand`**:
 *         *   Checks if the command line has the correct number of parts for "view".
 *         *   Uses a `try-catch(NumberFormatException)` block to handle cases where the second part of the command (`<zoneId>`) is not a valid integer, printing an error to `System.err`.
 *         *   Calls `hub.getPackagesInZone()`. Since `getPackagesInZone` handles invalid zone IDs by returning `null` and printing an error, the `handleViewCommand` only needs to check for the `null` return value before attempting to iterate and print packages.
 *     *   **`displayStatus`**: Calls `hub` methods to get sizes and prints them to `System.out`.
 * 
 * **Key Concepts Demonstrated:**
 * 
 * *   **Queue:** Used for managing items in a FIFO (First-In, First-Out) order (incoming packages).
 * *   **List & ArrayList:** `List<List<Package>>` structure demonstrates using the `List` interface and its `ArrayList` implementation to manage collections of collections, specifically representing the sorting bays for different zones.
 * *   **Scanner:** Used for interactive command-line input.
 * *   **Switch Statement:** Controls the main program flow based on user commands.
 * *   **System.err:** Dedicated stream used correctly for outputting error messages.
 * *   **System.out:** Used for all standard output, prompts, status updates, and success messages.
 * *   **Try-Catch Exception Handling:** Demonstrated in multiple places:
 *     *   A broad `try-catch` in `main` for class-wide handling of unexpected errors.
 *     *   Specific `try-catch` blocks in `handleAddCommand` and `handleViewCommand` to handle expected input format errors (`InputMismatchException`, `NumberFormatException`) gracefully.
 *     *   Implicit error handling within `SortingHub` methods (e.g., checking `queue.poll()` for `null`, validating zone index) with explicit error messages to `System.err`.
 * *   **Encapsulation:** Private fields and public methods in `Package` and `SortingHub`.
 * *   **Input Validation:** Checking for empty package ID, validating zone ID range, catching non-numeric input.
 * *   **Clean Code:** Meaningful names, comments, structured methods (`handleAddCommand`, `handleViewCommand`, `displayStatus`).
 * 
 * This solution provides a robust implementation covering all requirements, including error handling and best practices, suitable for an advanced programming exam.
 */

import java.util.Queue;
import java.util.LinkedList; // A common Queue implementation
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package with an ID and destination zone.
 */
class Package {
    private String packageId;
    private int destinationZone;

    /**
     * Constructs a new Package.
     * @param packageId The unique identifier for the package.
     * @param destinationZone The sorting zone the package belongs to.
     */
    public Package(String packageId, int destinationZone) {
        this.packageId = packageId;
        this.destinationZone = destinationZone;
    }

    /**
     * Gets the package ID.
     * @return The package ID.
     */
    public String getPackageId() {
        return packageId;
    }

    /**
     * Gets the destination zone.
     * @return The destination zone number.
     */
    public int getDestinationZone() {
        return destinationZone;
    }

    @Override
    public String toString() {
        return "Package ID: " + packageId;
    }
}

/**
 * Simulates a package sorting hub managing incoming packages and sorting bays.
 */
class SortingHub {
    private Queue<Package> incomingQueue;
    private List<List<Package>> sortingBays; // Outer list holds lists for each zone
    private final int numberOfZones;

    /**
     * Constructs a SortingHub with a specified number of zones.
     * @param numberOfZones The total number of sorting zones.
     */
    public SortingHub(int numberOfZones) {
        if (numberOfZones <= 0) {
            throw new IllegalArgumentException("Number of zones must be positive.");
        }
        this.numberOfZones = numberOfZones;
        this.incomingQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.sortingBays = new ArrayList<>(numberOfZones);
        // Initialize the sorting bays with empty ArrayLists for each zone
        for (int i = 0; i < numberOfZones; i++) {
            this.sortingBays.add(new ArrayList<>()); // Each zone bay is an ArrayList
        }
    }

    /**
     * Adds a package to the incoming queue.
     * @param pack The package to add.
     */
    public void addPackage(Package pack) {
        incomingQueue.offer(pack); // offer is generally preferred over add for queues
    }

    /**
     * Processes the next package from the queue and sorts it into the correct bay.
     * @return The processed package, or null if the queue was empty or zone invalid.
     */
    public Package processNextPackage() {
        Package nextPack = incomingQueue.poll(); // poll retrieves and removes the head, returns null if empty
        if (nextPack == null) {
            System.err.println("Error: Queue is empty. No packages to process.");
            return null;
        }

        int zoneId = nextPack.getDestinationZone();
        // Zones are 1-based, list indices are 0-based
        int zoneIndex = zoneId - 1;

        if (zoneIndex < 0 || zoneIndex >= numberOfZones) {
            System.err.println("Error: Package " + nextPack.getPackageId() + " has an invalid zone ID (" + zoneId + "). Cannot sort.");
            // Optionally, you could put it in an error bay or back in queue depending on requirements
            return null; // Indicate failure to sort
        }

        List<Package> zoneBay = sortingBays.get(zoneIndex);
        zoneBay.add(nextPack);
        System.out.println("Processing package: " + nextPack.getPackageId() + " (Zone " + zoneId + ")");
        System.out.println("Package " + nextPack.getPackageId() + " sorted into Zone " + zoneId + ".");
        return nextPack;
    }

    /**
     * Gets the list of packages in a specific sorting zone.
     * @param zoneId The ID of the zone (1-based).
     * @return A List of packages in the zone, or null if the zone ID is invalid.
     */
    public List<Package> getPackagesInZone(int zoneId) {
        // Zones are 1-based, list indices are 0-based
        int zoneIndex = zoneId - 1;

        if (zoneIndex < 0 || zoneIndex >= numberOfZones) {
            System.err.println("Error: Invalid zone ID. Zone must be between 1 and " + numberOfZones + ".");
            return null; // Indicate invalid zone
        }
        return sortingBays.get(zoneIndex);
    }

    /**
     * Gets the current size of the incoming queue.
     * @return The number of packages in the queue.
     */
    public int getQueueSize() {
        return incomingQueue.size();
    }

    /**
     * Gets the number of packages in a specific zone.
     * @param zoneId The ID of the zone (1-based).
     * @return The number of packages in the zone, or -1 if the zone ID is invalid.
     */
    public int getZoneSize(int zoneId) {
        // Zones are 1-based, list indices are 0-based
        int zoneIndex = zoneId - 1;

        if (zoneIndex < 0 || zoneIndex >= numberOfZones) {
             return -1; // Indicate invalid zone
        }
        return sortingBays.get(zoneIndex).size();
    }

    /**
     * Gets the total number of zones.
     * @return The number of zones.
     */
    public int getNumberOfZones() {
        return numberOfZones;
    }
}

public class SortingHubApp {

    private static final int NUM_ZONES = 4; // Define the fixed number of zones

    public static void main(String[] args) {
        SortingHub hub = new SortingHub(NUM_ZONES);
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("Welcome to the Package Sorting Hub Simulation!");
        System.out.println("Available commands: add, process, view <zoneId>, status, exit");

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                System.out.print("Enter command: ");
                String commandLine = scanner.nextLine().trim();
                String[] parts = commandLine.split(" ");
                String command = parts[0].toLowerCase();

                switch (command) {
                    case "add":
                        handleAddCommand(scanner, hub);
                        break;
                    case "process":
                        hub.processNextPackage();
                        break;
                    case "view":
                        handleViewCommand(parts, hub);
                        break;
                    case "status":
                        displayStatus(hub);
                        break;
                    case "exit":
                        System.out.println("Exiting Sorting Hub simulation.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Unknown command. Available commands: add, process, view <zoneId>, status, exit");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            scanner.close();
        }
    }

    /**
     * Handles the 'add' command logic.
     * @param scanner The Scanner object for input.
     * @param hub The SortingHub instance.
     */
    private static void handleAddCommand(Scanner scanner, SortingHub hub) {
        try {
            System.out.print("Enter Package ID: ");
            String packageId = scanner.nextLine().trim();
            if (packageId.isEmpty()) {
                System.err.println("Error: Package ID cannot be empty.");
                return;
            }

            System.out.print("Enter Destination Zone (1-" + NUM_ZONES + "): ");
            int zoneId = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            if (zoneId < 1 || zoneId > NUM_ZONES) {
                System.err.println("Error: Invalid zone ID. Zone must be between 1 and " + NUM_ZONES + ".");
                return;
            }

            Package newPackage = new Package(packageId, zoneId);
            hub.addPackage(newPackage);
            System.out.println("Package " + packageId + " added to queue.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for zone ID. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
            System.err.println("An error occurred while adding package: " + e.getMessage());
        }
    }

    /**
     * Handles the 'view' command logic.
     * @param parts The command line parts (expected: ["view", "<zoneId>"]).
     * @param hub The SortingHub instance.
     */
    private static void handleViewCommand(String[] parts, SortingHub hub) {
        if (parts.length != 2) {
            System.err.println("Error: Invalid 'view' command format. Use: view <zoneId>");
            return;
        }

        try {
            int zoneId = Integer.parseInt(parts[1]);
            List<Package> packagesInZone = hub.getPackagesInZone(zoneId);

            if (packagesInZone != null) { // getPackagesInZone returns null for invalid zone
                System.out.println("Packages in Zone " + zoneId + ":");
                if (packagesInZone.isEmpty()) {
                    System.out.println("  (Empty)");
                } else {
                    for (Package p : packagesInZone) {
                        System.out.println("  - " + p); // Package's toString is used here
                    }
                }
            }
            // Error message for invalid zone is handled within getPackagesInZone
        } catch (NumberFormatException e) {
            System.err.println("Error: Invalid zone ID format. Please enter a number.");
        } catch (Exception e) {
             System.err.println("An error occurred while viewing zone: " + e.getMessage());
        }
    }

    /**
     * Displays the current status of the queue and sorting bays.
     * @param hub The SortingHub instance.
     */
    private static void displayStatus(SortingHub hub) {
        System.out.println("Queue size: " + hub.getQueueSize());
        for (int i = 1; i <= hub.getNumberOfZones(); i++) {
            int zoneSize = hub.getZoneSize(i);
            // getZoneSize returns -1 for invalid zone, though with correct loop it won't happen
            if (zoneSize != -1) {
                 System.out.println("Zone " + i + ": " + zoneSize + " packages");
            }
        }
    }
}
