/*
 * Exam Question #218
 * Generated on: 2025-05-11 22:33:53
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Warehouse Inventory Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified warehouse inventory management system. The system needs to track incoming shipments and manage the current stock of items. Incoming shipments arrive and are placed in a queue to be processed later. When a shipment is processed, its contents are added to the main warehouse inventory.
 * 
 * **Your Task:**
 * 
 * Implement a Java program that simulates this warehouse management system. The program should present a menu to the user allowing them to:
 * 
 * 1.  **Add an Incoming Shipment:** The user specifies the number of items in the shipment, then enters the name and quantity for each item. This shipment is added to a queue.
 * 2.  **Process Next Shipment:** The system takes the next shipment from the front of the queue, and for each item in the shipment, adds its quantity to the corresponding item in the main inventory. If an item from the shipment does not exist in the inventory, it is added as a new inventory item.
 * 3.  **View Current Inventory:** Display the list of all items currently in the main warehouse inventory along with their quantities.
 * 4.  **Exit:** Terminate the program.
 * 
 * **Technical Requirements:**
 * 
 * Your solution **MUST** use the following Java components:
 * 
 * *   `java.util.Queue`: To store incoming shipments.
 * *   `java.util.ArrayList`: To implement the main warehouse inventory.
 * *   `java.util.List` interface: Declare the inventory using this interface.
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To print error messages (e.g., invalid input, attempting to process an empty queue).
 * *   `System.out`: To print normal output (menu, prompts, success messages, inventory display).
 * *   Class-wide exception handling with `try-catch` blocks: Implement robust error handling, particularly for user input (e.g., non-numeric input where a number is expected) and operational errors (e.g., processing an empty queue).
 * 
 * **Design Requirements:**
 * 
 * *   Implement appropriate classes to model the system (e.g., `InventoryItem`, `Shipment`, `Warehouse`).
 * *   Use proper encapsulation (private fields, public methods).
 * *   Use meaningful variable and method names.
 * *   Include comments and documentation (basic Javadoc or inline comments explaining logic).
 * *   Implement input validation (e.g., ensure quantities are positive integers).
 * *   Structure the code cleanly.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu and respond to user commands.
 * *   For "Add Shipment", it should prompt for details and confirm addition.
 * *   For "Process Shipment", it should indicate which shipment was processed or report an error if the queue is empty.
 * *   For "View Inventory", it should list inventory items or state if inventory is empty.
 * *   Invalid inputs or errors should be reported clearly using `System.err`.
 * *   Normal operations should be reported using `System.out`.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * Warehouse Management System
 * 1. Add Incoming Shipment
 * 2. Process Next Shipment
 * 3. View Current Inventory
 * 4. Exit
 * Enter your choice: 1
 * Enter number of items in shipment: 2
 * Enter item name: Laptop
 * Enter quantity: 10
 * Enter item name: Mouse
 * Enter quantity: 50
 * Shipment added to queue.
 * 
 * Warehouse Management System
 * ...
 * Enter your choice: 2
 * Processing shipment...
 * Shipment processed. Inventory updated.
 * 
 * Warehouse Management System
 * ...
 * Enter your choice: 3
 * Current Inventory:
 * Laptop: 10
 * Mouse: 50
 * 
 * Warehouse Management System
 * ...
 * Enter your choice: 2
 * Processing shipment...
 * Error: No shipments in the queue to process.
 * 
 * Warehouse Management System
 * ...
 * Enter your choice: 5
 * Error: Invalid choice. Please enter a number between 1 and 4.
 * 
 * Warehouse Management System
 * ...
 * Enter your choice: 1
 * Enter number of items in shipment: 1
 * Enter item name: Keyboard
 * Enter quantity: abc
 * Error: Invalid quantity. Please enter a positive integer.
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic warehouse management system demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:**
 *     *   `InventoryItem`: Represents a single type of item with a name and quantity. It includes a constructor, getters, and a method `addQuantity` to easily update stock. `toString()` is overridden for easy printing. Input validation for non-negative quantity is included in the constructor and `addQuantity`.
 *     *   `Shipment`: Represents a collection of `InventoryItem`s arriving together. It holds a `List<InventoryItem>`. A defensive copy is made in the constructor and getter to ensure the internal list cannot be modified directly from outside the class.
 *     *   `Warehouse`: This is the core class managing the state. It has a `Queue<Shipment>` (`incomingShipments`) to hold pending deliveries and a `List<InventoryItem>` (`inventory`) to represent the current stock.
 *     *   `WarehouseApp`: Contains the `main` method, handles user interaction, and orchestrates operations by calling methods on the `Warehouse` object.
 * 
 * 2.  **Required Component Usage:**
 *     *   `java.util.Queue`: The `incomingShipments` field in the `Warehouse` class is declared as a `Queue` and instantiated using `LinkedList`. `offer()` is used to add shipments, and `poll()` is used to retrieve and remove the next shipment.
 *     *   `java.util.ArrayList`: The `inventory` field in the `Warehouse` class is instantiated as an `ArrayList`, providing a dynamic array implementation for the list of items.
 *     *   `java.util.List` interface: The `inventory` field is declared using the `List` interface (`private List<InventoryItem> inventory;`), promoting good practice by programming to the interface rather than the specific implementation (`ArrayList`). The `Shipment` class also uses `List<InventoryItem>`.
 *     *   `java.util.Scanner`: Used in the `WarehouseApp.main` method to read user input from `System.in`.
 *     *   `switch` statement: Used in `WarehouseApp.main` to control the program flow based on the user's menu choice.
 *     *   `System.err`: Used to print error messages, such as invalid menu choices, invalid input during shipment creation (non-numeric quantity), or attempting to process a shipment when the queue is empty.
 *     *   `System.out`: Used for all standard output, including printing the menu, prompts for input, success messages for adding/processing shipments, and displaying the current inventory.
 *     *   `try-catch` blocks:
 *         *   A general `try-catch` block wraps the main `while` loop in `WarehouseApp.main` to catch any unexpected exceptions that might occur during the program's execution, providing a basic level of robustness.
 *         *   Specific `try-catch(InputMismatchException)` blocks are used when reading integer inputs (menu choice, number of items, quantity) to gracefully handle cases where the user enters non-numeric text.
 *         *   An inner `try-catch` loop is used when reading item quantities during shipment creation to re-prompt for valid input if a non-negative integer is not entered.
 *         *   `IllegalArgumentException` is handled when creating `InventoryItem`s in the shipment input loop to catch cases where the quantity validation in the constructor fails (though the input validation loop should prevent this specific constructor exception in this design).
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `InventoryItem`, `Shipment`, and `Warehouse` are `private`. Access and modification are done through public methods (getters, `addQuantity`, `addShipment`, `processNextShipment`). Defensive copies are used in `Shipment` to protect its internal list.
 *     *   **Meaningful Names:** Class names (`InventoryItem`, `Shipment`, `Warehouse`, `WarehouseApp`), field names (`name`, `quantity`, `items`, `inventory`, `incomingShipments`), and method names (`addQuantity`, `processNextShipment`, `viewInventory`, `findInventoryItem`) are descriptive.
 *     *   **Comments and Documentation:** Javadoc comments explain the purpose of classes and methods. Inline comments clarify specific logic points.
 *     *   **Input Validation:** Checks are performed to ensure the number of items is positive and item quantities are non-negative integers. `InputMismatchException` handling specifically addresses non-numeric input.
 *     *   **Error Handling:** `System.err` is used for errors. Specific error conditions (empty queue, invalid input type, invalid quantity value) are checked and reported. The `try-catch` structure provides robustness.
 *     *   **Clean Code Structure:** The code is divided into logical classes. The `main` method focuses on user interaction and calling warehouse operations, keeping the core warehouse logic separate. Helper methods like `findInventoryItem` and `printMenu` improve readability and modularity.
 * 
 * This solution effectively integrates the required components within a practical scenario, demonstrating understanding of data structures (`Queue`, `List`), object-oriented principles (encapsulation, class design), input/output, control flow (`switch`, loops), and exception handling (`try-catch`).
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner

/**
 * Represents an item in the warehouse inventory.
 */
class InventoryItem {
    private String name;
    private int quantity;

    /**
     * Constructs an InventoryItem.
     * @param name The name of the item.
     * @param quantity The quantity of the item. Must be non-negative.
     * @throws IllegalArgumentException if quantity is negative.
     */
    public InventoryItem(String name, int quantity) {
        if (quantity < 0) {
            throw new IllegalArgumentException("Quantity cannot be negative.");
        }
        this.name = name;
        this.quantity = quantity;
    }

    public String getName() {
        return name;
    }

    public int getQuantity() {
        return quantity;
    }

    /**
     * Adds the specified quantity to the current item quantity.
     * @param amount The amount to add. Must be non-negative.
     * @throws IllegalArgumentException if amount is negative.
     */
    public void addQuantity(int amount) {
        if (amount < 0) {
            throw new IllegalArgumentException("Cannot add negative quantity.");
        }
        this.quantity += amount;
    }

    @Override
    public String toString() {
        return name + ": " + quantity;
    }
}

/**
 * Represents an incoming shipment containing a list of items.
 */
class Shipment {
    private List<InventoryItem> items;

    /**
     * Constructs a Shipment.
     * @param items The list of items included in the shipment.
     */
    public Shipment(List<InventoryItem> items) {
        // Create a defensive copy to prevent external modification
        this.items = new ArrayList<>(items);
    }

    public List<InventoryItem> getItems() {
        // Return a defensive copy to prevent external modification
        return new ArrayList<>(items);
    }
}

/**
 * Manages the warehouse inventory and incoming shipments.
 */
class Warehouse {
    // Use List interface, implemented by ArrayList for inventory
    private List<InventoryItem> inventory;
    // Use Queue interface, implemented by LinkedList for shipments
    private Queue<Shipment> incomingShipments;

    /**
     * Constructs a Warehouse.
     */
    public Warehouse() {
        this.inventory = new ArrayList<>();
        this.incomingShipments = new LinkedList<>();
    }

    /**
     * Adds a shipment to the incoming shipments queue.
     * @param shipment The shipment to add.
     */
    public void addShipment(Shipment shipment) {
        incomingShipments.offer(shipment); // offer is preferred over add for queues
    }

    /**
     * Processes the next shipment from the queue and updates the inventory.
     * @return true if a shipment was processed, false if the queue was empty.
     */
    public boolean processNextShipment() {
        Shipment nextShipment = incomingShipments.poll(); // poll retrieves and removes, returns null if empty

        if (nextShipment == null) {
            return false; // No shipment to process
        }

        // Process items in the shipment
        for (InventoryItem shipmentItem : nextShipment.getItems()) {
            // Find the item in the current inventory
            InventoryItem existingItem = findInventoryItem(shipmentItem.getName());

            if (existingItem != null) {
                // Item exists, add quantity
                existingItem.addQuantity(shipmentItem.getQuantity());
            } else {
                // Item does not exist, add it to inventory
                // Create a new InventoryItem instance to avoid sharing references
                inventory.add(new InventoryItem(shipmentItem.getName(), shipmentItem.getQuantity()));
            }
        }
        return true; // Shipment processed successfully
    }

    /**
     * Displays the current inventory.
     */
    public void viewInventory() {
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            System.out.println("Current Inventory:");
            for (InventoryItem item : inventory) {
                System.out.println(item); // InventoryItem's toString() is used
            }
        }
    }

    /**
     * Helper method to find an item in the inventory by name.
     * @param itemName The name of the item to find.
     * @return The InventoryItem if found, otherwise null.
     */
    private InventoryItem findInventoryItem(String itemName) {
        for (InventoryItem item : inventory) {
            if (item.getName().equalsIgnoreCase(itemName)) { // Case-insensitive comparison
                return item;
            }
        }
        return null; // Item not found
    }
}

/**
 * Main class to run the Warehouse Management System application.
 */
public class WarehouseApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Warehouse warehouse = new Warehouse();
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default to an invalid choice

                // Handle input for choice
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip to the next iteration
                }

                // Use switch statement for menu options
                switch (choice) {
                    case 1: // Add Shipment
                        try {
                            System.out.print("Enter number of items in shipment: ");
                            int numItems = scanner.nextInt();
                            scanner.nextLine(); // Consume newline

                            if (numItems <= 0) {
                                System.err.println("Error: Number of items must be positive.");
                                break; // Exit case 1
                            }

                            List<InventoryItem> shipmentItems = new ArrayList<>();
                            for (int i = 0; i < numItems; i++) {
                                System.out.print("Enter item name: ");
                                String itemName = scanner.nextLine();

                                int quantity = -1;
                                boolean validQuantity = false;
                                while (!validQuantity) {
                                    try {
                                        System.out.print("Enter quantity: ");
                                        quantity = scanner.nextInt();
                                        scanner.nextLine(); // Consume newline

                                        if (quantity >= 0) { // Allow 0 quantity items in shipment? Let's allow non-negative
                                            shipmentItems.add(new InventoryItem(itemName, quantity));
                                            validQuantity = true;
                                        } else {
                                            System.err.println("Error: Quantity must be non-negative.");
                                        }
                                    } catch (InputMismatchException e) {
                                        System.err.println("Error: Invalid quantity. Please enter a non-negative integer.");
                                        scanner.nextLine(); // Consume invalid input
                                    } catch (IllegalArgumentException e) {
                                         // Catching potential negative quantity error from InventoryItem constructor
                                         System.err.println("Error creating item: " + e.getMessage());
                                    }
                                }
                            }
                            warehouse.addShipment(new Shipment(shipmentItems));
                            System.out.println("Shipment added to queue.");
                        } catch (InputMismatchException e) {
                             System.err.println("Error reading number of items: Invalid input.");
                             scanner.nextLine(); // Consume invalid input
                        } catch (Exception e) {
                            // Catch any other unexpected errors during shipment creation
                            System.err.println("An unexpected error occurred while adding shipment: " + e.getMessage());
                            // Depending on severity, might need to clear scanner or re-prompt
                        }
                        break;

                    case 2: // Process Shipment
                        System.out.println("Processing shipment...");
                        if (warehouse.processNextShipment()) {
                            System.out.println("Shipment processed. Inventory updated.");
                        } else {
                            System.err.println("Error: No shipments in the queue to process.");
                        }
                        break;

                    case 3: // View Inventory
                        warehouse.viewInventory();
                        break;

                    case 4: // Exit
                        System.out.println("Exiting Warehouse Management System. Goodbye!");
                        running = false;
                        break;

                    default: // Invalid choice
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // General catch for any unexpected exceptions in the main loop
            System.err.println("An unexpected fatal error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Warehouse Management System ---");
        System.out.println("1. Add Incoming Shipment");
        System.out.println("2. Process Next Shipment");
        System.out.println("3. View Current Inventory");
        System.out.println("4. Exit");
        System.out.println("-----------------------------------");
    }
}
