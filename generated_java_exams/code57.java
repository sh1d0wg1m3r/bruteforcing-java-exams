/*
 * Exam Question #57
 * Generated on: 2025-05-11 22:06:35
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam - Event Check-in System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Event Check-in System for a large conference. The system needs to manage a list of registered attendees, process their check-in upon arrival, and provide status updates.
 * 
 * **Requirements:**
 * 
 * 1.  **Attendee Management:**
 *     *   Maintain a list of *registered* attendees. Each attendee has a unique integer ID and a name.
 *     *   Attendees arrive and join a *check-in queue*.
 *     *   The system processes check-ins one by one from the front of the queue.
 *     *   Only registered attendees can be added to the check-in queue.
 *     *   An attendee can only be checked in if they are in the queue.
 *     *   Once checked in, an attendee is marked as such and removed from the queue.
 * 
 * 2.  **User Interface:**
 *     *   The system should interact with the user via the console.
 *     *   Provide a menu of options:
 *         *   `1`: Add Registered Attendee (ID, Name)
 *         *   `2`: Simulate Attendee Arrival (Add to Check-in Queue by ID)
 *         *   `3`: Process Next Check-in
 *         *   `4`: View Check-in Queue
 *         *   `5`: View Event Status (Total Registered, Total Checked-in, Queue Size)
 *         *   `6`: Exit
 *     *   Use `Scanner` to read user input for menu choices and attendee details.
 *     *   Use a `switch` statement to handle the different menu options.
 * 
 * 3.  **Data Structures:**
 *     *   Use `java.util.ArrayList` to store the list of *registered* attendees.
 *     *   Use `java.util.Queue` (specifically, you can use `LinkedList` which implements `Queue`) to represent the *check-in queue*.
 *     *   Declare variables using the `java.util.List` interface where appropriate.
 * 
 * 4.  **Error Handling & Output:**
 *     *   Use `System.out` for all normal output (menu, prompts, successful operations, status reports, queue contents).
 *     *   Use `System.err` for all error messages (e.g., attendee not found, attendee already registered, queue empty, invalid input).
 *     *   Implement robust input validation (e.g., checking if attendee ID exists, checking if queue is empty before processing).
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle unexpected issues, particularly around user input processing or critical operations.
 * 
 * 5.  **Code Structure & Best Practices:**
 *     *   Create an `Attendee` class with private fields (`id`, `name`, `isRegistered`, `isCheckedIn`) and public methods (constructor, getters, maybe a method to mark as checked-in).
 *     *   Create an `EventManager` class that encapsulates the `List` of registered attendees and the `Queue` for check-in. It should contain methods for each menu operation (add registered, add to queue, process check-in, view status, etc.).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments to explain complex logic.
 *     *   Ensure proper encapsulation (private fields, public methods).
 * 
 * **Initial State:**
 * 
 * You can start with an empty list of registered attendees and an empty check-in queue.
 * 
 * **Expected Output:**
 * 
 * The system should respond to user commands, printing confirmations, status updates, or error messages as appropriate. For example:
 * 
 * ```
 * --- Event Check-in System ---
 * Menu:
 * 1: Add Registered Attendee
 * 2: Simulate Attendee Arrival
 * 3: Process Next Check-in
 * 4: View Check-in Queue
 * 5: View Event Status
 * 6: Exit
 * Enter choice: 1
 * Enter Attendee ID: 101
 * Enter Attendee Name: Alice
 * Attendee 101 (Alice) registered successfully.
 * 
 * Enter choice: 1
 * Enter Attendee ID: 102
 * Enter Attendee Name: Bob
 * Attendee 102 (Bob) registered successfully.
 * 
 * Enter choice: 2
 * Enter Attendee ID to arrive: 101
 * Attendee 101 (Alice) added to check-in queue.
 * 
 * Enter choice: 2
 * Enter Attendee ID to arrive: 999
 * Error: Attendee with ID 999 is not registered.
 * 
 * Enter choice: 2
 * Enter Attendee ID to arrive: 102
 * Attendee 102 (Bob) added to check-in queue.
 * 
 * Enter choice: 4
 * Check-in Queue:
 * 101 (Alice)
 * 102 (Bob)
 * 
 * Enter choice: 3
 * Processing check-in...
 * Attendee 101 (Alice) checked in successfully.
 * 
 * Enter choice: 5
 * Event Status:
 * Total Registered: 2
 * Total Checked-in: 1
 * Check-in Queue Size: 1
 * 
 * Enter choice: 3
 * Processing check-in...
 * Attendee 102 (Bob) checked in successfully.
 * 
 * Enter choice: 3
 * Processing check-in...
 * Error: Check-in queue is empty.
 * 
 * Enter choice: 6
 * Exiting system. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * This solution implements the Event Check-in System as requested, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Attendee Class:**
 *     *   The `Attendee` class is a simple Plain Old Java Object (POJO) representing an attendee with `id`, `name`, and boolean flags for `isRegistered` (implicitly true upon creation in the registered list) and `isCheckedIn`.
 *     *   It uses `private` fields for encapsulation and provides `public` getters.
 *     *   The `checkIn()` method modifies the internal state, demonstrating object behavior.
 *     *   `toString()` is overridden for easy printing.
 * 
 * 2.  **EventManager Class:**
 *     *   This is the main class containing the application logic and data structures.
 *     *   **Data Structures:**
 *         *   `private List<Attendee> registeredAttendees = new ArrayList<>();`: An `ArrayList` is used to store the master list of attendees who are registered for the event. It's declared using the `List` interface type, adhering to good practice.
 *         *   `private Queue<Attendee> checkInQueue = new LinkedList<>();`: A `LinkedList` is used, cast to the `Queue` interface type, to manage the check-in line. `Queue` methods like `offer()` (add to end) and `poll()` (remove from front) are used to simulate the queue behavior.
 *     *   **Encapsulation:** Both the registered list and the queue are `private`, accessed only through the class's public methods.
 *     *   **Methods:** Each menu option corresponds to a dedicated public method (`addRegisteredAttendee`, `simulateAttendeeArrival`, `processNextCheckIn`, `viewCheckInQueue`, `viewEventStatus`). Helper methods like `findRegisteredAttendeeById` and `getIntInput` improve code organization and reusability.
 *     *   **Scanner:** A single `Scanner` instance is used throughout the class for reading user input. It's closed when the application exits.
 * 
 * 3.  **User Interaction and Flow Control:**
 *     *   The `run()` method contains the main application loop.
 *     *   It repeatedly prints the menu and reads the user's choice using the `Scanner`.
 *     *   A `switch` statement is used to dispatch the execution to the appropriate method based on the user's integer input.
 *     *   A `while` loop keeps the application running until the user chooses the "Exit" option (choice 6).
 * 
 * 4.  **Error Handling and Output:**
 *     *   `System.out` is used for printing the menu, prompts, successful operation messages, and status reports.
 *     *   `System.err` is used for printing error messages, such as when an attendee ID is not found, an attendee is already registered/checked-in, the queue is empty, or input is invalid.
 *     *   **Input Validation:** Methods like `addRegisteredAttendee` and `simulateAttendeeArrival` check for conditions like duplicate IDs or unregistered attendees before proceeding. The `getIntInput` helper method specifically handles non-integer input errors from the `Scanner`.
 *     *   **Exception Handling:**
 *         *   A `try-catch (InputMismatchException e)` block is wrapped around the `scanner.nextInt()` call within the main loop's `run()` method and also in the `getIntInput` helper method. This catches cases where the user enters non-integer input when an integer is expected, preventing the program from crashing.
 *         *   A general `try-catch (Exception e)` block is also included in the main loop as a "class-wide" handler to catch any other unexpected runtime exceptions that might occur during the execution of the chosen operation, providing a basic level of robustness. It prints an error message to `System.err` and the stack trace for debugging.
 * 
 * 5.  **Best Practices:**
 *     *   Meaningful names are used for classes, variables, and methods (`EventManager`, `checkInQueue`, `addRegisteredAttendee`).
 *     *   Comments explain the purpose of classes and methods.
 *     *   Encapsulation is used in the `Attendee` and `EventManager` classes.
 *     *   Input validation and error handling are implemented using `if` checks, `System.err`, and `try-catch`.
 *     *   Using `List` interface for `registeredAttendees` promotes flexibility.
 *     *   Using `Queue` interface for `checkInQueue` emphasizes its role as a queue and allows switching the underlying implementation (e.g., to `ArrayDeque`) easily.
 * 
 * This solution effectively integrates all the required components into a practical, albeit simplified, system, demonstrating a solid understanding of core and intermediate Java concepts necessary for building more complex applications.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single attendee
class Attendee {
    private int id;
    private String name;
    private boolean isRegistered; // Always true if in the registered list
    private boolean isCheckedIn;

    public Attendee(int id, String name) {
        this.id = id;
        this.name = name;
        this.isRegistered = true; // Assuming creation means registered
        this.isCheckedIn = false;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public boolean isCheckedIn() {
        return isCheckedIn;
    }

    // Method to mark as checked in
    public void checkIn() {
        this.isCheckedIn = true;
    }

    @Override
    public String toString() {
        return id + " (" + name + ")";
    }
}

// Manages the event attendees and check-in process
class EventManager {
    // List of all registered attendees
    private List<Attendee> registeredAttendees;
    // Queue for attendees waiting to check in
    private Queue<Attendee> checkInQueue;
    private Scanner scanner;

    public EventManager() {
        this.registeredAttendees = new ArrayList<>();
        this.checkInQueue = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
    }

    // --- Core Operations ---

    // Adds a new attendee to the registered list
    public void addRegisteredAttendee() {
        System.out.print("Enter Attendee ID: ");
        int id = getIntInput();
        if (id == -1) return; // Input error handled

        // Check if attendee with this ID already exists
        if (findRegisteredAttendeeById(id) != null) {
            System.err.println("Error: Attendee with ID " + id + " is already registered.");
            return;
        }

        System.out.print("Enter Attendee Name: ");
        String name = scanner.nextLine();

        Attendee newAttendee = new Attendee(id, name);
        registeredAttendees.add(newAttendee);
        System.out.println("Attendee " + newAttendee + " registered successfully.");
    }

    // Simulates an attendee arriving and joining the check-in queue
    public void simulateAttendeeArrival() {
        System.out.print("Enter Attendee ID to arrive: ");
        int id = getIntInput();
        if (id == -1) return; // Input error handled

        // Find the attendee in the registered list
        Attendee attendee = findRegisteredAttendeeById(id);

        if (attendee == null) {
            System.err.println("Error: Attendee with ID " + id + " is not registered.");
            return;
        }

        if (attendee.isCheckedIn()) {
             System.err.println("Error: Attendee " + attendee + " is already checked in.");
             return;
        }

        // Check if already in queue (optional, but good practice)
        if (checkInQueue.contains(attendee)) {
             System.err.println("Error: Attendee " + attendee + " is already in the check-in queue.");
             return;
        }


        // Add to the check-in queue
        checkInQueue.offer(attendee); // offer is preferred over add for queues (returns false instead of exception)
        System.out.println("Attendee " + attendee + " added to check-in queue.");
    }

    // Processes the next attendee in the check-in queue
    public void processNextCheckIn() {
        System.out.println("Processing check-in...");
        Attendee nextAttendee = checkInQueue.poll(); // Retrieve and remove the head of the queue

        if (nextAttendee == null) {
            System.err.println("Error: Check-in queue is empty.");
            return;
        }

        // Mark attendee as checked in
        nextAttendee.checkIn();
        System.out.println("Attendee " + nextAttendee + " checked in successfully.");
    }

    // Views the current attendees in the check-in queue
    public void viewCheckInQueue() {
        System.out.println("--- Check-in Queue ---");
        if (checkInQueue.isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        // Iterate through the queue without removing elements
        for (Attendee attendee : checkInQueue) {
            System.out.println(attendee);
        }
        System.out.println("----------------------");
    }

    // Views the overall event status
    public void viewEventStatus() {
        int totalRegistered = registeredAttendees.size();
        int totalCheckedIn = 0;
        for (Attendee attendee : registeredAttendees) {
            if (attendee.isCheckedIn()) {
                totalCheckedIn++;
            }
        }
        int queueSize = checkInQueue.size();

        System.out.println("--- Event Status ---");
        System.out.println("Total Registered: " + totalRegistered);
        System.out.println("Total Checked-in: " + totalCheckedIn);
        System.out.println("Check-in Queue Size: " + queueSize);
        System.out.println("--------------------");
    }

    // --- Helper Methods ---

    // Finds a registered attendee by ID
    private Attendee findRegisteredAttendeeById(int id) {
        for (Attendee attendee : registeredAttendees) {
            if (attendee.getId() == id) {
                return attendee;
            }
        }
        return null; // Not found
    }

    // Handles integer input with basic error handling
    private int getIntInput() {
        while (true) {
            try {
                int value = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over
                return value;
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter an integer.");
                scanner.nextLine(); // Consume the invalid input line
                return -1; // Indicate error
            }
        }
    }

    // --- Main Application Loop ---

    public void run() {
        int choice = 0;
        while (choice != 6) {
            printMenu();
            System.out.print("Enter choice: ");

            // Class-wide exception handling for the main loop's input processing
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                // Use switch statement for flow control
                switch (choice) {
                    case 1:
                        addRegisteredAttendee();
                        break;
                    case 2:
                        simulateAttendeeArrival();
                        break;
                    case 3:
                        processNextCheckIn();
                        break;
                    case 4:
                        viewCheckInQueue();
                        break;
                    case 5:
                        viewEventStatus();
                        break;
                    case 6:
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
                choice = 0; // Reset choice to stay in loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during operation
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
            System.out.println(); // Add a blank line for readability
        }
        scanner.close(); // Close the scanner when done
    }

    // Prints the main menu
    private void printMenu() {
        System.out.println("--- Event Check-in System ---");
        System.out.println("Menu:");
        System.out.println("1: Add Registered Attendee");
        System.out.println("2: Simulate Attendee Arrival");
        System.out.println("3: Process Next Check-in");
        System.out.println("4: View Check-in Queue");
        System.out.println("5: View Event Status");
        System.out.println("6: Exit");
    }

    // Main method to start the application
    public static void main(String[] args) {
        EventManager manager = new EventManager();
        manager.run();
    }
}
