/*
 * Exam Question #249
 * Generated on: 2025-05-11 22:39:09
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Patient Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified patient management system for a small hospital clinic. The system needs to keep track of all registered patients and manage a queue of patients currently waiting to be seen by a doctor.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (an integer, automatically generated) and `name` (a String). Include a constructor and public getter methods for these fields. Implement a `toString()` method to easily print patient information.
 * 
 * 2.  **System Class:** Create a `HospitalQueueSystem` class to manage the patients and the waiting queue.
 *     *   It must have a private `List` to store *all* registered `Patient` objects. Use `ArrayList` as the concrete implementation.
 *     *   It must have a private `Queue` to store `Patient` objects who are currently waiting. Use a suitable `Queue` implementation like `LinkedList`.
 *     *   It must have a private `Scanner` object for reading user input.
 *     *   It must have a private counter for generating unique patient IDs.
 * 
 * 3.  **Functionality (Menu-Driven):** The system should present a menu to the user and perform actions based on their choice. Use a `switch` statement to handle the menu options. The options are:
 *     *   `1`: Register New Patient - Prompts for patient name, creates a new `Patient` object with a unique ID, and adds them to the list of registered patients.
 *     *   `2`: Add Patient to Waiting Queue - Prompts for a registered patient's ID. Finds the patient in the registered list and adds them to the waiting queue. Handle cases where the ID is not found or the patient is already in the queue.
 *     *   `3`: See Next Patient - Removes the patient at the front of the waiting queue and prints their details, simulating them being seen by a doctor. Handle the case where the queue is empty.
 *     *   `4`: View Waiting Queue - Lists all patients currently in the waiting queue in order. Handle the case where the queue is empty.
 *     *   `5`: View All Registered Patients - Lists all patients ever registered with the system. Handle the case where the list is empty.
 *     *   `6`: Exit - Terminates the program.
 * 
 * 4.  **Input Handling:** Use `Scanner` to read user input for menu choices, patient names, and patient IDs. Implement robust input validation. Handle non-integer input for menu choices and IDs, and ensure patient names are not empty.
 * 
 * 5.  **Error Handling:**
 *     *   Use `try-catch` blocks to handle potential runtime errors, such as `InputMismatchException` when reading numbers or attempting operations on empty collections.
 *     *   Use `System.err.println()` to display specific error messages (e.g., "Invalid input.", "Patient not found.", "Waiting queue is empty.").
 *     *   Use `System.out.println()` for menu display, prompts, success messages, and displaying list contents.
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Structure the code logically into classes and methods.
 * 
 * **Expected Output:**
 * 
 * *   The program should display a menu.
 * *   Based on the user's valid input, it should perform the requested action, printing appropriate messages to `System.out`.
 * *   If input is invalid or an operation cannot be performed (e.g., seeing next patient when queue is empty), an informative error message should be printed to `System.err`.
 * *   The system should loop until the user chooses to exit.
 * 
 * **Constraints:**
 * *   You MUST use `java.util.Queue`, `java.util.ArrayList`, `java.util.List`, `java.util.Scanner`.
 * *   You MUST use a `switch` statement for menu handling.
 * *   You MUST use `System.err` for error messages and `System.out` for normal output.
 * *   You MUST use `try-catch` for exception handling.
 * 
 * **Evaluation:**
 * Your solution will be evaluated on correctness, adherence to all requirements (especially the use of specified components), robustness (input validation, error handling), code quality (encapsulation, naming, comments), and logical structure.
 *
 * EXPLANATION:
 * This solution implements a simple hospital patient management system demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Patient` Class:** This class serves as a simple Plain Old Java Object (POJO) representing a patient.
 *     *   It has `private` fields (`patientId`, `name`) ensuring data encapsulation.
 *     *   `public` getter methods provide controlled access to the data.
 *     *   `toString()` is overridden for easy printing of patient details.
 *     *   `equals()` and `hashCode()` are overridden based on `patientId`. This is crucial for correctly checking if a `Patient` object is already present in the `waitingQueue` using `contains()`.
 * 
 * 2.  **`HospitalQueueSystem` Class:** This is the main class managing the system's logic and data structures.
 *     *   **`List<Patient> registeredPatients`**: Declared as `List` and instantiated as `ArrayList`. This `ArrayList` stores *all* patients ever registered. `ArrayList` is suitable here because we might need to iterate through all patients or search for a specific patient by ID, which involves iterating.
 *     *   **`Queue<Patient> waitingQueue`**: Declared as `Queue` and instantiated as `LinkedList`. `Queue` is the perfect data structure for a waiting line because it enforces First-In, First-Out (FIFO) processing. `LinkedList` is a common and efficient implementation of `Queue`. Patients are added to the back (`offer`) and removed from the front (`poll`).
 *     *   **`Scanner scanner`**: Used to read user input from the console (`System.in`). It's a class-wide field managed by the `HospitalQueueSystem` instance.
 *     *   **`nextPatientId`**: A simple counter to ensure each registered patient gets a unique ID.
 * 
 * 3.  **Functionality (`run` method and helpers):**
 *     *   The `run` method contains the main application loop (`do-while`).
 *     *   `displayMenu` prints the options to `System.out`.
 *     *   User input for the menu choice is read using `scanner.nextInt()`.
 *     *   A `switch` statement is used to direct execution based on the user's `choice`. This directly fulfills the `switch` requirement.
 *     *   Helper methods (`registerNewPatient`, `addPatientToWaitingQueue`, `seeNextPatient`, `viewWaitingQueue`, `viewAllRegisteredPatients`, `findPatientById`) break down the logic into smaller, manageable units, improving code readability and maintainability.
 *     *   `registerNewPatient` adds a new patient to the `registeredPatients` `List`.
 *     *   `addPatientToWaitingQueue` demonstrates interaction between the `List` and the `Queue`. It first finds the patient in the `registeredPatients` `List` using `findPatientById` (which iterates the `ArrayList`), and *then* adds them to the `waitingQueue` using `offer()`. It also checks if the patient is already in the queue using `contains()`, which relies on the `equals()` method in the `Patient` class.
 *     *   `seeNextPatient` uses `waitingQueue.poll()` to remove and retrieve the patient at the head of the queue, simulating them being seen. `poll()` is preferred over `remove()` as it returns `null` if the queue is empty, making it easier to handle the empty case without an exception.
 *     *   `viewWaitingQueue` iterates through the `waitingQueue` to display its contents in FIFO order.
 *     *   `viewAllRegisteredPatients` iterates through the `registeredPatients` `List` to display all registered patients.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   A `try-catch` block is placed around the input reading for the menu choice (`scanner.nextInt()`) to catch `InputMismatchException` if the user enters non-integer input.
 *     *   Inside `addPatientToWaitingQueue`, another `try-catch` handles `InputMismatchException` specifically for the patient ID input.
 *     *   Input validation is done for the patient name in `registerNewPatient` (checking if it's empty).
 *     *   Operations on empty collections (`waitingQueue.poll()` or iterating empty lists) are checked using `isEmpty()` before attempting the operation or displaying contents, preventing errors and providing user-friendly messages.
 *     *   Error messages (invalid input, patient not found, queue empty, etc.) are explicitly printed to `System.err.println()`, distinguishing them from normal output.
 *     *   Normal messages (menu, prompts, success messages, list contents) are printed to `System.out.println()`.
 *     *   A general `catch (Exception e)` is included in the main loop's `try` block as a fallback for any other unexpected runtime errors, printing a message to `System.err`.
 * 
 * 5.  **Best Practices:**
 *     *   Encapsulation is used in both `Patient` and `HospitalQueueSystem` classes by making fields `private`.
 *     *   Method and variable names are descriptive (e.g., `registeredPatients`, `waitingQueue`, `registerNewPatient`, `findPatientById`).
 *     *   Javadoc comments are included for classes and methods, explaining their purpose.
 *     *   The code is structured logically with a dedicated class for the entity (`Patient`) and a class for the system logic (`HospitalQueueSystem`).
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, menu-driven application while adhering to best practices for robust and maintainable code.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Represents a patient in the hospital system
class Patient {
    private int patientId;
    private String name;

    /**
     * Constructs a new Patient.
     * @param patientId The unique ID for the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the Patient.
     * @return A formatted string with patient ID and name.
     */
    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Name: " + name;
    }

    /**
     * Checks if two Patient objects are equal based on their ID.
     * @param o The object to compare with.
     * @return true if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Patient patient = (Patient) o;
        return patientId == patient.patientId;
    }

    /**
     * Returns a hash code value for the Patient based on their ID.
     * @return The hash code.
     */
    @Override
    public int hashCode() {
        return Integer.hashCode(patientId);
    }
}

// Manages the hospital patient registration and waiting queue
public class HospitalQueueSystem {

    // List to store all registered patients (using ArrayList)
    private List<Patient> registeredPatients;
    // Queue to store patients currently waiting (using LinkedList)
    private Queue<Patient> waitingQueue;
    // Scanner for user input
    private Scanner scanner;
    // Counter for generating unique patient IDs
    private int nextPatientId;

    /**
     * Constructs a new HospitalQueueSystem.
     * Initializes the patient list, waiting queue, scanner, and ID counter.
     */
    public HospitalQueueSystem() {
        this.registeredPatients = new ArrayList<>(); // Use ArrayList for the List
        this.waitingQueue = new LinkedList<>();     // Use LinkedList for the Queue
        this.scanner = new Scanner(System.in);
        this.nextPatientId = 1; // Start IDs from 1
    }

    /**
     * Runs the main application loop, displaying the menu and processing user input.
     */
    public void run() {
        int choice;
        do {
            displayMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Use switch for menu handling
                switch (choice) {
                    case 1:
                        registerNewPatient();
                        break;
                    case 2:
                        addPatientToWaitingQueue();
                        break;
                    case 3:
                        seeNextPatient();
                        break;
                    case 4:
                        viewWaitingQueue();
                        break;
                    case 5:
                        viewAllRegisteredPatients();
                        break;
                    case 6:
                        System.out.println("Exiting Hospital Patient Management System. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = 0; // Reset choice to continue loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
                choice = 0; // Reset choice to continue loop
            }
            System.out.println(); // Add a newline for better readability between operations
        } while (choice != 6);

        // Close the scanner when exiting
        scanner.close();
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- Hospital Patient Management ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Add Patient to Waiting Queue");
        System.out.println("3. See Next Patient");
        System.out.println("4. View Waiting Queue");
        System.out.println("5. View All Registered Patients");
        System.out.println("6. Exit");
        System.out.println("---------------------------------");
    }

    /**
     * Registers a new patient by getting their name and adding them to the registered list.
     */
    private void registerNewPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Patient name cannot be empty.");
            return;
        }

        Patient newPatient = new Patient(nextPatientId++, name);
        registeredPatients.add(newPatient);
        System.out.println("Patient registered successfully: " + newPatient);
    }

    /**
     * Adds a registered patient to the waiting queue based on their ID.
     */
    private void addPatientToWaitingQueue() {
        System.out.print("Enter patient ID to add to queue: ");
        try {
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            Patient patientToAdd = findPatientById(patientId);

            if (patientToAdd == null) {
                System.err.println("Patient with ID " + patientId + " not found in registered patients.");
            } else if (waitingQueue.contains(patientToAdd)) {
                System.err.println("Patient " + patientToAdd.getName() + " (ID: " + patientId + ") is already in the waiting queue.");
            } else {
                waitingQueue.offer(patientToAdd); // Use offer() for adding to queue
                System.out.println("Patient " + patientToAdd.getName() + " (ID: " + patientId + ") added to the waiting queue.");
            }

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid integer for patient ID.");
            scanner.nextLine(); // Consume invalid input
        }
    }

    /**
     * Finds a patient in the registered patients list by their ID.
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found, null otherwise.
     */
    private Patient findPatientById(int patientId) {
        // Iterate through the List to find the patient
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Removes and displays the patient at the front of the waiting queue.
     */
    private void seeNextPatient() {
        // Use poll() to retrieve and remove the head of the queue (returns null if empty)
        Patient nextPatient = waitingQueue.poll();

        if (nextPatient == null) {
            System.err.println("Waiting queue is empty. No patients to see.");
        } else {
            System.out.println("Seeing next patient: " + nextPatient);
        }
    }

    /**
     * Displays all patients currently in the waiting queue.
     */
    private void viewWaitingQueue() {
        if (waitingQueue.isEmpty()) {
            System.out.println("Waiting queue is currently empty.");
        } else {
            System.out.println("--- Patients in Waiting Queue (FIFO) ---");
            // Iterate through the Queue (order is preserved)
            int position = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(position++ + ". " + patient);
            }
            System.out.println("----------------------------------------");
        }
    }

    /**
     * Displays all patients registered with the system.
     */
    private void viewAllRegisteredPatients() {
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            System.out.println("--- All Registered Patients ---");
            // Iterate through the List
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
            System.out.println("-------------------------------");
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalQueueSystem system = new HospitalQueueSystem();
        system.run();
    }
}
