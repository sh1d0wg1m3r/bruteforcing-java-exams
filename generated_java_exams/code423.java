/*
 * Exam Question #423
 * Generated on: 2025-05-11 23:08:57
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Simple Clinic Management System**
 * 
 * **Objective:** Design and implement a command-line based simulation of a simplified clinic's patient management system. The system should manage two types of patients: those with scheduled appointments who have checked in, and walk-in patients waiting to be seen. This task requires demonstrating proficiency in using core Java collections, input handling, control flow, and exception management.
 * 
 * **Scenario:**
 * A small clinic needs a basic digital system. Scheduled patients who arrive are added to a list of "checked-in" patients. Walk-in patients are added to a waiting queue and are seen in the order they arrived. The system should allow managing these two groups.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage the waiting list for **walk-in patients**. Patients should be processed in First-In, First-Out (FIFO) order.
 *     *   Use a `java.util.ArrayList` to store the list of **scheduled patients** who have checked in. You can use the `List` interface type reference.
 *     *   Store patient names as `String` objects.
 * 
 * 2.  **Functionality:** Implement a menu-driven command-line interface with the following options:
 *     *   Add a new walk-in patient to the waiting queue.
 *     *   Add a scheduled patient to the checked-in list.
 *     *   View the current walk-in waiting queue (without removing patients).
 *     *   View the list of scheduled patients who have checked in.
 *     *   Process the next patient from the walk-in queue (remove and display).
 *     *   Exit the application.
 * 
 * 3.  **Input Handling:**
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient names.
 *     *   Implement input validation:
 *         *   Ensure patient names are not empty.
 *         *   Ensure menu choices are valid integers corresponding to the options.
 * 
 * 4.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options selected by the user.
 *     *   Use a loop to keep the menu running until the user chooses to exit.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and lists/queue contents.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue is empty when trying to process).
 * 
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential errors during input (e.g., user enters text instead of a number for a menu choice) and operational errors (e.g., trying to process a patient from an empty queue). A general catch block wrapping the main operational loop is required, in addition to specific catches where appropriate.
 * 
 * 7.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Ensure resources like `Scanner` are properly managed (e.g., closed).
 * 
 * **Expected Output:**
 * The program should display a menu, accept user input, perform the requested action, print results or errors, and loop back to the menu until the user chooses to exit.
 * 
 * *   When viewing the queue, display the patients in their waiting order.
 * *   When viewing the scheduled list, display the patients as they were added.
 * *   When processing a walk-in patient, display the name of the patient being processed.
 * *   When the queue is empty and processing is attempted, print an error message to `System.err`.
 * *   When invalid input is provided (non-numeric for menu, empty name), print an error message to `System.err`.
 * 
 * **Constraint Checklist:**
 * *   [x] Use `java.util.Queue`
 * *   [x] Use `java.util.ArrayList`
 * *   [x] Use `java.util.List` interface reference
 * *   [x] Use `java.util.Scanner`
 * *   [x] Use `switch` statement
 * *   [x] Use `System.err`
 * *   [x] Use `System.out`
 * *   [x] Use class-wide `try-catch` blocks
 * 
 * **Challenge:** Integrate all these components cohesively into a functional, robust application demonstrating good design and error handling.
 *
 * EXPLANATION:
 * This solution implements the Simple Clinic Management System as requested, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Data Structures:**
 *     *   `walkInQueue`: A `Queue<String>` implemented using `java.util.LinkedList`. This correctly models a waiting line where patients are processed in the order they arrive (FIFO). `offer()` is used to add patients and `poll()` is used to remove the head of the queue.
 *     *   `scheduledPatients`: A `List<String>` referenced by the `java.util.ArrayList` implementation. This stores patients who have checked in but don't necessarily follow a strict processing order within this simplified system (though they could be processed from this list in a more complex version). `add()` is used to add patients.
 * 
 * 2.  **Functionality & Control Flow:**
 *     *   The `runSystem()` method contains the main application loop (`while(running)`).
 *     *   Inside the loop, `displayMenu()` shows the options.
 *     *   `getUserChoice()` reads the user's input.
 *     *   A `switch` statement branches the execution based on the user's valid integer choice, calling the appropriate private method for each operation.
 *     *   Option `6` sets `running` to `false`, exiting the loop.
 * 
 * 3.  **Input Handling & Validation:**
 *     *   `java.util.Scanner` is used throughout to read console input.
 *     *   `getUserChoice()` specifically handles `InputMismatchException` if the user enters non-integer input for the menu choice, printing an error to `System.err` and consuming the invalid input line using `scanner.nextLine()` to prevent an infinite loop.
 *     *   `addWalkInPatient()` and `addScheduledPatient()` read patient names using `scanner.nextLine()`. They include validation (`name.isEmpty()`) to ensure names are not blank, printing an error to `System.err` if invalid. `trim()` is used to handle names consisting only of whitespace.
 * 
 * 4.  **Output:**
 *     *   `System.out.println()` is used for displaying the menu, prompts, successful messages (e.g., "Patient added"), and listing the contents of the queue and list.
 *     *   `System.err.println()` is used exclusively for error messages, making them distinguishable from normal output (e.g., "Invalid choice", "Queue is empty", "Patient name cannot be empty").
 * 
 * 5.  **Error Handling:**
 *     *   A specific `try-catch (InputMismatchException)` is used in `getUserChoice()` for handling incorrect input type for the menu.
 *     *   `processNextWalkIn()` uses `poll()` which returns `null` if the queue is empty, allowing for a clean check (`if (nextPatient == null)`) and an error message to `System.err`.
 *     *   A `try-catch (Exception e)` block wraps the `switch` statement inside the `runSystem()` loop. This catches any unexpected exceptions that might occur *during* the execution of one of the case methods, preventing the program from crashing immediately and printing an error to `System.err`.
 *     *   A final, class-wide `try-catch (Exception mainLoopException)` is placed around the entire `while(running)` loop within `runSystem()`. This demonstrates a broader exception handling scope, catching any errors that might occur outside the specific operational try-catch or within the loop management itself. This fulfills the requirement for class-wide exception handling.
 *     *   A `finally` block ensures that the `scanner` resource is closed when the `runSystem()` method finishes, whether by exiting the loop normally or due to an exception.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** The data structures (`walkInQueue`, `scheduledPatients`) and the `scanner` are declared as `private`, accessible only through the class's public or private methods.
 *     *   **Naming:** Variable and method names are descriptive (e.g., `walkInQueue`, `addScheduledPatient`, `processNextWalkIn`).
 *     *   **Comments:** Javadoc comments are provided for the class and key methods, explaining their purpose. Inline comments clarify specific logic points (like using `poll()` or `offer()`).
 *     *   **Clean Code:** The code is structured into separate methods for each distinct action (adding, viewing, processing, displaying menu), improving readability and maintainability. The `main` method is kept minimal, primarily creating a `ClinicSystem` instance and calling its `runSystem()` method.
 * 
 * This solution effectively integrates all required components within a practical scenario, demonstrating a solid understanding of Java fundamentals, collections, input/output, and error management.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

/**
 * A simple Clinic Management System simulation.
 * Manages a waiting queue for walk-in patients and a list for scheduled patients.
 */
public class ClinicSystem {

    private Queue<String> walkInQueue;
    private List<String> scheduledPatients;
    private Scanner scanner;
    private boolean running;

    /**
     * Constructs a new ClinicSystem.
     * Initializes the patient queues and lists, and the scanner.
     */
    public ClinicSystem() {
        this.walkInQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.scheduledPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.running = true;
    }

    /**
     * Runs the main system loop, displaying the menu and processing user input.
     * Contains the main switch statement and input handling.
     */
    public void runSystem() {
        System.out.println("--- Welcome to Simple Clinic Management System ---");

        // Class-wide try-catch wrapping the main operational loop
        try {
            while (running) {
                displayMenu();
                int choice = getUserChoice();

                // Specific try-catch for potential issues within switch cases
                try {
                    switch (choice) {
                        case 1:
                            addWalkInPatient();
                            break;
                        case 2:
                            addScheduledPatient();
                            break;
                        case 3:
                            viewWalkInQueue();
                            break;
                        case 4:
                            viewScheduledPatients();
                            break;
                        case 5:
                            processNextWalkIn();
                            break;
                        case 6:
                            running = false;
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (Exception e) {
                    // Catch any unexpected errors during operation execution
                    System.err.println("An unexpected error occurred during operation: " + e.getMessage());
                    // Optional: e.printStackTrace(); // For debugging purposes
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception mainLoopException) {
            // General catch for critical errors outside specific operation handling
            System.err.println("A critical system error occurred: " + mainLoopException.getMessage());
            mainLoopException.printStackTrace(); // Print stack trace for critical errors
        } finally {
            // Ensure scanner is closed regardless of how the loop exits or errors occur
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Displays the main menu options to the console.
     */
    private void displayMenu() {
        System.out.println("Please choose an option:");
        System.out.println("1. Add Walk-in Patient");
        System.out.println("2. Add Scheduled Patient");
        System.out.println("3. View Walk-in Queue");
        System.out.println("4. View Scheduled Patients");
        System.out.println("5. Process Next Walk-in Patient");
        System.out.println("6. Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Reads the user's menu choice from the console.
     * Handles non-integer input errors.
     * @return The integer choice entered by the user.
     * @throws InputMismatchException If the user enters non-integer input.
     */
    private int getUserChoice() throws InputMismatchException {
        int choice = -1;
        try {
            choice = scanner.nextInt();
        } finally {
            // Consume the rest of the line, including the newline character
            // This prevents issues in subsequent scanner.nextLine() calls
            scanner.nextLine();
        }
        return choice;
    }

    /**
     * Adds a new walk-in patient to the waiting queue.
     * Prompts the user for the patient's name and validates it.
     */
    private void addWalkInPatient() {
        System.out.print("Enter walk-in patient name: ");
        String name = scanner.nextLine().trim(); // Use trim to remove leading/trailing whitespace

        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
        } else {
            walkInQueue.offer(name); // offer() is generally preferred over add() for queues as it doesn't throw exception on capacity constraints (though LinkedList is unbounded)
            System.out.println("Walk-in patient '" + name + "' added to the queue.");
        }
    }

    /**
     * Adds a scheduled patient to the checked-in list.
     * Prompts the user for the patient's name and validates it.
     */
    private void addScheduledPatient() {
        System.out.print("Enter scheduled patient name: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
        } else {
            scheduledPatients.add(name);
            System.out.println("Scheduled patient '" + name + "' added to checked-in list.");
        }
    }

    /**
     * Displays the current list of walk-in patients in the waiting queue.
     */
    private void viewWalkInQueue() {
        if (walkInQueue.isEmpty()) {
            System.out.println("Walk-in queue is empty.");
        } else {
            System.out.println("--- Walk-in Queue (FIFO) ---");
            int i = 1;
            for (String patient : walkInQueue) {
                System.out.println(i++ + ". " + patient);
            }
            System.out.println("----------------------------");
        }
    }

    /**
     * Displays the current list of scheduled patients who have checked in.
     */
    private void viewScheduledPatients() {
        if (scheduledPatients.isEmpty()) {
            System.out.println("No scheduled patients have checked in yet.");
        } else {
            System.out.println("--- Scheduled Patients Checked In ---");
            int i = 1;
            for (String patient : scheduledPatients) {
                System.out.println(i++ + ". " + patient);
            }
            System.out.println("-------------------------------------");
        }
    }

    /**
     * Processes (removes) the next patient from the walk-in queue.
     * Handles the case where the queue is empty.
     */
    private void processNextWalkIn() {
        String nextPatient = walkInQueue.poll(); // poll() retrieves and removes the head, returns null if queue is empty

        if (nextPatient == null) {
            System.err.println("Error: Walk-in queue is empty. No patient to process.");
        } else {
            System.out.println("Processing walk-in patient: '" + nextPatient + "'");
        }
    }

    /**
     * Main method to start the clinic system.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicSystem system = new ClinicSystem();
        system.runSystem();
    }
}
