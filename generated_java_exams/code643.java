/*
 * Exam Question #643
 * Generated on: 2025-05-12 16:19:06
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Advanced Programming Exam Task: Document Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified document processing system for a small office. The system manages a list of documents available for printing and processes print jobs submitted by users. Print jobs are handled in the order they are submitted.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must meet the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of `Document` objects available for printing.
 *     *   Maintain a queue of `PrintJob` objects representing submitted jobs waiting to be processed.
 *     *   Maintain a list of `PrintJob` objects that have been completed (successfully or failed).
 * 
 * 2.  **Classes:**
 *     *   Create a `Document` class with private fields for `name` (String) and `pages` (int). Include a constructor, public getters, and a `toString()` method.
 *     *   Create a `PrintJob` class with private fields for a unique `jobId` (int, auto-generated starting from 1), a reference to the `Document` being printed, and a `status` (String, e.g., "Pending", "Processing", "Completed", "Failed"). Include a constructor, public getters, a method to update status (`setStatus`), and a `toString()` method. The `jobId` should be assigned automatically upon job creation.
 *     *   Create a `DocumentProcessingSystem` class that encapsulates the data structures and processing logic. It should have methods for:
 *         *   Adding initial documents to the available list.
 *         *   Submitting a print job (takes an index from the available documents list, creates a `PrintJob`, and adds it to the queue).
 *         *   Processing the next job from the queue (simulates printing, updates job status, moves to completed list). Simulate a random 10% chance of processing failure.
 *         *   Viewing the list of available documents.
 *         *   Viewing the current print queue.
 *         *   Viewing the list of completed jobs.
 * 
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to interact with the user via a command-line menu.
 *     *   The menu should offer options like:
 *         1.  View Available Documents
 *         2.  Submit Print Job
 *         3.  Process Next Job
 *         4.  View Print Queue
 *         5.  View Completed Jobs
 *         6.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   Validate user input (e.g., ensure submitted job index is valid).
 *     *   Use `System.err` to print error messages (e.g., invalid input, queue is empty when trying to process).
 *     *   Use `System.out` for normal output (menu, lists, success messages).
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around user input operations that might throw exceptions (like `InputMismatchException`) and potentially around the main processing logic loop to catch unexpected errors.
 * 
 * 5.  **Java Components:** Your solution *must* explicitly use and demonstrate understanding of:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (as interface types for variables)
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err`
 *     *   `System.out`
 *     *   `try-catch` blocks
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure.
 * 
 * **Initial Data:**
 * 
 * Populate the system with at least 3 initial `Document` objects available for printing.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, perform the requested action, and display results or errors accordingly. Lists/queues should be printed clearly.
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * --- Document Processing System Menu ---
 * 1. View Available Documents
 * 2. Submit Print Job
 * 3. Process Next Job
 * 4. View Print Queue
 * 5. View Completed Jobs
 * 6. Exit
 * Enter your choice: 1
 * Available Documents:
 * 0: Document{name='Report.pdf', pages=15}
 * 1: Document{name='Presentation.pptx', pages=30}
 * 2: Document{name='Draft.txt', pages=5}
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 2
 * Enter the index of the document to print: 0
 * Job ID 1 submitted for Document 'Report.pdf'.
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 2
 * Enter the index of the document to print: 2
 * Job ID 2 submitted for Document 'Draft.txt'.
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 4
 * Print Queue:
 * [Job ID 1: Document 'Report.pdf' (Pending), Job ID 2: Document 'Draft.txt' (Pending)]
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 3
 * Processing Job ID 1: Document 'Report.pdf'...
 * Job ID 1 completed successfully.
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 4
 * Print Queue:
 * [Job ID 2: Document 'Draft.txt' (Pending)]
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 5
 * Completed Jobs:
 * [Job ID 1: Document 'Report.pdf' (Completed)]
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 3
 * Processing Job ID 2: Document 'Draft.txt'...
 * Job ID 2 processing failed.
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 5
 * Completed Jobs:
 * [Job ID 1: Document 'Report.pdf' (Completed), Job ID 2: Document 'Draft.txt' (Failed)]
 * 
 * --- Document Processing System Menu ---
 * ...
 * Enter your choice: 6
 * Exiting Document Processing System.
 * ```
 * 
 * **Constraint:** The solution must be provided as a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements the `DocumentProcessingSystem` as required, demonstrating the use of all specified Java components in a cohesive manner.
 * 
 * 1.  **Class Structure:**
 *     *   `Document` class holds basic document information (`name`, `pages`) with appropriate encapsulation (private fields, public getters).
 *     *   `PrintJob` class represents a specific instance of a print request. It links to a `Document`, has a unique `jobId` (managed by a static counter), and tracks its `status`. This separates the concept of a document from the concept of a job processing that document.
 *     *   `DocumentProcessingSystem` is the main class orchestrating the system. It holds the core data structures and the application logic.
 * 
 * 2.  **Data Structures:**
 *     *   `List<Document> availableDocuments`: An `ArrayList` is used to store the documents that can be submitted for printing. `ArrayList` is suitable here because we primarily need to access documents by index (for submission) and iterate through the list.
 *     *   `Queue<PrintJob> printQueue`: A `LinkedList` is used to implement the `Queue` interface. `Queue` is the correct choice for managing print jobs because they are processed in First-In, First-Out (FIFO) order â€“ jobs are processed in the sequence they were submitted. The `offer()` method adds to the tail, and `poll()` retrieves and removes from the head.
 *     *   `List<PrintJob> completedJobs`: An `ArrayList` is used to store jobs after they have been processed (either successfully or failed). A `List` is sufficient as the order of completed jobs doesn't strictly matter for typical viewing, and `ArrayList` provides efficient storage and iteration.
 * 
 * 3.  **User Interaction (`Scanner`, `switch`, `System.out`, `System.err`):**
 *     *   The `run()` method contains the main application loop.
 *     *   `Scanner` is used to read user input from the console. It's wrapped in a try-with-resources block to ensure it's closed automatically.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   A `switch` statement directs the program flow based on the integer input received from the user's menu choice.
 *     *   `System.out.println()` is used for displaying the menu, available documents, queue contents, completed jobs, and success messages.
 *     *   `System.err.println()` is used specifically for printing error messages, such as invalid menu choices, invalid document indices for submission, or attempting to process an empty queue.
 * 
 * 4.  **Input Validation and Exception Handling (`try-catch`):**
 *     *   Input validation is performed within the `submitPrintJob` method to check if the provided document index is within the valid range of the `availableDocuments` list.
 *     *   `try-catch` blocks are used in the `run()` method to handle potential `InputMismatchException` that can occur if the user enters non-integer input when an integer is expected (for menu choice or document index). The `scanner.nextLine()` call inside the `catch` block is crucial to consume the invalid input and prevent an infinite loop.
 *     *   A general `catch (Exception e)` is included in the main loop's `try` block as a fallback to catch any other unexpected runtime exceptions, printing the error message and stack trace to `System.err` for debugging purposes.
 * 
 * 5.  **Processing Logic:**
 *     *   `submitPrintJob` creates a new `PrintJob` instance linked to the chosen `Document` and adds it to the `printQueue` using `offer()`.
 *     *   `processNextJob` checks if the `printQueue` is empty. If not, it removes the next job using `poll()`, simulates processing (including a random chance of failure using `java.util.Random`), updates the job's status, and moves it to the `completedJobs` list.
 * 
 * 6.  **Best Practices:**
 *     *   Private fields and public methods enforce encapsulation.
 *     *   Variable names (`availableDocuments`, `printQueue`, `completedJobs`, `jobId`, `processNextJob`) are descriptive.
 *     *   Basic Javadoc comments are provided for classes and methods to explain their purpose.
 *     *   The code is structured into logical methods within the main system class.
 * 
 * This solution effectively integrates the required Java features to build a functional simulation of a document processing system, demonstrating understanding of data structures, control flow, object-oriented principles, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Random;

/**
 * Represents a document available for printing.
 */
class Document {
    private String name;
    private int pages;

    /**
     * Constructs a new Document.
     * @param name The name of the document.
     * @param pages The number of pages in the document.
     */
    public Document(String name, int pages) {
        this.name = name;
        this.pages = pages;
    }

    /**
     * Gets the name of the document.
     * @return The document name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the number of pages in the document.
     * @return The number of pages.
     */
    public int getPages() {
        return pages;
    }

    /**
     * Returns a string representation of the Document.
     * @return String representation.
     */
    @Override
    public String toString() {
        return "Document{name='" + name + "', pages=" + pages + '}';
    }
}

/**
 * Represents a print job for a specific document.
 */
class PrintJob {
    private static int nextJobId = 1; // Static counter for unique job IDs
    private int jobId;
    private Document document;
    private String status; // e.g., "Pending", "Processing", "Completed", "Failed"

    /**
     * Constructs a new PrintJob.
     * Automatically assigns a unique job ID and sets status to "Pending".
     * @param document The document to be printed.
     */
    public PrintJob(Document document) {
        this.jobId = nextJobId++; // Assign unique ID and increment counter
        this.document = document;
        this.status = "Pending";
    }

    /**
     * Gets the job ID.
     * @return The job ID.
     */
    public int getJobId() {
        return jobId;
    }

    /**
     * Gets the document associated with this job.
     * @return The document.
     */
    public Document getDocument() {
        return document;
    }

    /**
     * Gets the current status of the print job.
     * @return The job status.
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the print job.
     * @param status The new status.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Returns a string representation of the PrintJob.
     * @return String representation.
     */
    @Override
    public String toString() {
        return "Job ID " + jobId + ": " + document.getName() + " (" + status + ")";
    }
}

/**
 * Manages the document processing system, including available documents,
 * print queue, and completed jobs.
 */
public class DocumentProcessingSystem {

    private List<Document> availableDocuments;
    private Queue<PrintJob> printQueue;
    private List<PrintJob> completedJobs;
    private Random random; // For simulating processing failure

    /**
     * Constructs a new DocumentProcessingSystem.
     * Initializes data structures and populates available documents.
     */
    public DocumentProcessingSystem() {
        availableDocuments = new ArrayList<>();
        printQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        completedJobs = new ArrayList<>();
        random = new Random();

        // Add some initial documents
        availableDocuments.add(new Document("Report.pdf", 15));
        availableDocuments.add(new Document("Presentation.pptx", 30));
        availableDocuments.add(new Document("Draft.txt", 5));
        availableDocuments.add(new Document("Image.jpg", 1));
    }

    /**
     * Adds a document to the list of available documents.
     * @param doc The document to add.
     */
    public void addAvailableDocument(Document doc) {
        availableDocuments.add(doc);
        System.out.println("Added document: " + doc.getName());
    }

    /**
     * Submits a print job for a document from the available list.
     * @param documentIndex The index of the document in the available list.
     * @return true if the job was submitted successfully, false otherwise.
     */
    public boolean submitPrintJob(int documentIndex) {
        if (documentIndex < 0 || documentIndex >= availableDocuments.size()) {
            System.err.println("Error: Invalid document index.");
            return false;
        }

        Document docToPrint = availableDocuments.get(documentIndex);
        PrintJob newJob = new PrintJob(docToPrint);
        printQueue.offer(newJob); // offer adds to the queue
        System.out.println("Job ID " + newJob.getJobId() + " submitted for Document '" + docToPrint.getName() + "'.");
        return true;
    }

    /**
     * Processes the next job from the print queue.
     * Simulates processing and moves the job to the completed list.
     * Includes a chance of simulated failure.
     */
    public void processNextJob() {
        if (printQueue.isEmpty()) {
            System.err.println("Error: Print queue is empty. Nothing to process.");
            return;
        }

        PrintJob jobToProcess = printQueue.poll(); // poll retrieves and removes the head
        System.out.println("Processing " + jobToProcess + "...");
        jobToProcess.setStatus("Processing"); // Simulate starting processing

        // Simulate processing time (optional, not required by prompt but adds realism)
        // try { Thread.sleep(500); } catch (InterruptedException e) {}

        // Simulate processing success or failure (10% chance of failure)
        if (random.nextInt(10) < 1) { // 0 is failure, 1-9 is success
            jobToProcess.setStatus("Failed");
            System.err.println("Job ID " + jobToProcess.getJobId() + " processing failed.");
        } else {
            jobToProcess.setStatus("Completed");
            System.out.println("Job ID " + jobToProcess.getJobId() + " completed successfully.");
        }

        completedJobs.add(jobToProcess); // Move to completed list
    }

    /**
     * Displays the list of available documents.
     */
    public void viewAvailableDocuments() {
        System.out.println("\nAvailable Documents:");
        if (availableDocuments.isEmpty()) {
            System.out.println("No documents available.");
        } else {
            for (int i = 0; i < availableDocuments.size(); i++) {
                System.out.println(i + ": " + availableDocuments.get(i));
            }
        }
    }

    /**
     * Displays the current print queue.
     */
    public void viewPrintQueue() {
        System.out.println("\nPrint Queue:");
        if (printQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterating over a Queue does not remove elements
            System.out.println(printQueue.toString());
            // Or print line by line:
            // printQueue.forEach(System.out::println);
        }
    }

    /**
     * Displays the list of completed jobs.
     */
    public void viewCompletedJobs() {
        System.out.println("\nCompleted Jobs:");
        if (completedJobs.isEmpty()) {
            System.out.println("No jobs completed yet.");
        } else {
            completedJobs.forEach(System.out::println);
        }
    }

    /**
     * Runs the main application loop with the user menu.
     */
    public void run() {
        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            int choice = -1;
            while (choice != 6) {
                printMenu();
                System.out.print("Enter your choice: ");

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    switch (choice) {
                        case 1:
                            viewAvailableDocuments();
                            break;
                        case 2:
                            viewAvailableDocuments(); // Show docs before asking for index
                            System.out.print("Enter the index of the document to print: ");
                            try {
                                int docIndex = scanner.nextInt();
                                scanner.nextLine(); // Consume newline
                                submitPrintJob(docIndex);
                            } catch (InputMismatchException e) {
                                System.err.println("Error: Invalid input. Please enter a number.");
                                scanner.nextLine(); // Consume the invalid input
                            }
                            break;
                        case 3:
                            processNextJob();
                            break;
                        case 4:
                            viewPrintQueue();
                            break;
                        case 5:
                            viewCompletedJobs();
                            break;
                        case 6:
                            System.out.println("Exiting Document Processing System.");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    choice = -1; // Reset choice to prevent exiting
                } catch (Exception e) {
                    // Catch any other unexpected exceptions
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    e.printStackTrace(System.err); // Print stack trace to error stream
                }
                System.out.println(); // Add a newline for better formatting
            }
        } // Scanner is automatically closed here
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Document Processing System Menu ---");
        System.out.println("1. View Available Documents");
        System.out.println("2. Submit Print Job");
        System.out.println("3. Process Next Job");
        System.out.println("4. View Print Queue");
        System.out.println("5. View Completed Jobs");
        System.out.println("6. Exit");
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DocumentProcessingSystem system = new DocumentProcessingSystem();
        system.run();
    }
}
