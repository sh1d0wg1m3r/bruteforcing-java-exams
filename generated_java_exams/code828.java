/*
 * Exam Question #828
 * Generated on: 2025-05-12 16:47:13
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified system for a small clinic to manage patient appointments. Patients arrive and are added to a waiting list (a queue). The clinic staff can then process patients one by one from the front of the waiting list. The system also needs to maintain a complete record of all patients who have ever been added to the system, regardless of whether they are currently waiting.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this scenario. Your program must:
 * 
 * 1.  **Model a Patient:** Create a `Patient` class with a private `String` field for the patient's name and a public constructor and getter method for the name.
 * 2.  **Manage Data Structures:**
 *     *   Use a `java.util.Queue<Patient>` to represent the waiting list for appointments. Patients should be added to the rear and removed from the front.
 *     *   Use a `java.util.ArrayList<Patient>` to store a record of *all* patients ever added to the system.
 *     *   Declare the variable holding the list of all patients using the `java.util.List` interface (`List<Patient>`).
 * 3.  **Provide User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         *   Add a new patient to the system and the waiting list.
 *         *   View the current waiting list.
 *         *   Process the next patient from the waiting list.
 *         *   List all patients ever added to the system.
 *         *   Exit the program.
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **Implement Core Functionality:**
 *     *   **Add Patient:** Prompt the user for a patient name. Validate that the name is not empty. If valid, create a new `Patient` object, add it to both the list of all patients and the waiting list queue.
 *     *   **View Waiting List:** Display the names of the patients currently in the waiting list, in the order they will be processed. If the list is empty, display a message indicating this.
 *     *   **Process Next Patient:** Remove and display the name of the patient at the front of the waiting list. If the waiting list is empty, display an error message.
 *     *   **List All Patients:** Display the names of all patients stored in the system's record list. If the list is empty, display a message.
 * 5.  **Error Handling and Output:**
 *     *   Use `System.out.println()` for normal program output (menus, confirmations, lists).
 *     *   Use `System.err.println()` to report errors (e.g., invalid input, attempting to process from an empty queue).
 *     *   Implement class-wide exception handling using a `try-catch` block around the main application loop to catch any unexpected runtime errors.
 * 6.  **Adhere to Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments to explain complex parts.
 *     *   Ensure proper encapsulation in the `Patient` class.
 *     *   Structure the code logically, perhaps in a main application class (`AppointmentScheduler`).
 * 
 * **Expected Output Structure:**
 * 
 * The program should loop, displaying the menu and processing user commands until the user chooses to exit.
 * 
 * ```
 * --- Appointment Scheduler Menu ---
 * 1. Add Patient
 * 2. View Waiting List
 * 3. Process Next Patient
 * 4. List All Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * 
 * Patient "Alice" added to system and waiting list.
 * 
 * --- Appointment Scheduler Menu ---
 * 1. Add Patient
 * ...
 * Enter your choice: 2
 * 
 * --- Current Waiting List ---
 * Alice
 * 
 * --- Appointment Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * 
 * Processing patient: Alice
 * 
 * --- Appointment Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * Error: Waiting list is empty. Cannot process patient.
 * 
 * --- Appointment Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- All Patients in System ---
 * Alice
 * Bob
 * Charlie
 * 
 * --- Appointment Scheduler Menu ---
 * ...
 * Enter your choice: 5
 * 
 * Exiting Appointment Scheduler.
 * ```
 * 
 * **Constraints:**
 * 
 * *   The program should run from a `main` method.
 * *   Focus on the core logic; persistent storage is not required.
 * *   The `Scanner` should be closed when the program exits.
 * 
 * Implement the complete Java code to fulfill these requirements.
 *
 * EXPLANATION:
 * This solution implements the Hospital Appointment Scheduler according to the requirements, demonstrating the use of the specified Java components and best practices.
 * 
 * 1.  **`Patient` Class:** A simple class encapsulating the patient's name. It has a private field (`name`) and a public getter (`getName()`), adhering to encapsulation principles. The `toString()` method is overridden for convenient printing.
 * 
 * 2.  **Data Structures:**
 *     *   `waitingList`: Declared as `Queue<Patient>` and initialized with `new LinkedList<>()`. This correctly uses the `Queue` interface for FIFO (First-In, First-Out) behavior, suitable for a waiting line. `offer()` is used for adding (enqueueing) and `poll()` for removing (dequeueing) patients.
 *     *   `allPatients`: Declared as `List<Patient>` and initialized with `new ArrayList<>()`. This fulfills the requirement to use the `List` interface while utilizing the dynamic array implementation of `ArrayList` to store all patients added over time. Elements are added using `add()`.
 * 
 * 3.  **User Interaction (`Scanner`, `Switch`, `System.out`, `System.err`):**
 *     *   `Scanner`: An instance is created to read input from `System.in`. It's used within the `run()` method to get the user's menu choice and patient names.
 *     *   `System.out`: Used for displaying the menu, successful operations, and lists of patients.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid input (empty name, non-numeric choice) or attempting to process an empty queue.
 *     *   `Switch Statement`: The `switch (choice)` block in the `run()` method directs the program flow based on the user's numeric input, calling the appropriate private methods (`addPatient`, `viewWaitingList`, etc.). The `default` case handles invalid numeric choices.
 * 
 * 4.  **Core Functionality Methods:**
 *     *   `addPatient()`: Prompts for a name, uses `scanner.nextLine()`, validates if the name is empty, creates a `Patient` object, adds it to both `allPatients` (`List`) and `waitingList` (`Queue`), and prints a success message.
 *     *   `viewWaitingList()`: Checks if the `waitingList` is empty. If not, it iterates through the `Queue` using an enhanced for loop (which traverses elements without removing them) and prints each patient's name.
 *     *   `processNextPatient()`: Checks if the `waitingList` is empty. If not, it uses `waitingList.poll()` to remove and retrieve the patient at the front, then prints their name. If empty, it prints an error to `System.err`.
 *     *   `listAllPatients()`: Checks if `allPatients` is empty. If not, it iterates through the `List` and prints each patient's name with a number.
 * 
 * 5.  **Exception Handling (`try-catch`, `finally`):**
 *     *   A `try-catch(Exception e)` block is placed around the core `do-while` loop in the `run()` method. This serves as a class-wide or main operational block exception handler, fulfilling the requirement. While specific input errors are handled with `if` checks and a `NumberFormatException` catch within the loop, this outer block catches any other unexpected runtime issues that might occur.
 *     *   A `finally` block is used to ensure the `scanner.close()` method is called, releasing the system resource used by the `Scanner`, regardless of whether an exception occurred or the loop exited normally.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** The `Patient` class demonstrates this.
 *     *   **Naming:** Variables (`waitingList`, `allPatients`, `scanner`, `choice`, `name`, `newPatient`, `processedPatient`) and methods (`displayMenu`, `addPatient`, `viewWaitingList`, `processNextPatient`, `listAllPatients`, `run`) have clear, descriptive names.
 *     *   **Comments:** Comments are used to explain the purpose of classes, methods, fields, and specific code sections (like why `LinkedList` is used for `Queue`, or the difference between `offer`/`poll` and `add`/`remove`).
 *     *   **Input Validation:** The `addPatient` method explicitly checks for an empty name. The `run` method includes a `try-catch(NumberFormatException)` around `Integer.parseInt` to handle non-numeric input for the menu choice.
 *     *   **Error Handling:** Uses `System.err` for errors and checks for empty collections before attempting operations that would fail (like polling from an empty queue).
 *     *   **Structure:** The code is organized into a `Patient` class and an `AppointmentScheduler` class with a `main` method to start the application, promoting modularity.
 * 
 * This solution effectively integrates all required components into a functional, albeit simplified, real-world simulation, demonstrating a solid understanding of fundamental and intermediate Java concepts.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Represents a patient in the system
class Patient {
    private String name;

    // Constructor
    public Patient(String name) {
        this.name = name;
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Override toString for easy printing
    @Override
    public String toString() {
        return name;
    }
}

// Main class for the Appointment Scheduling System
public class AppointmentScheduler {

    // Use Queue for the waiting list (FIFO)
    private Queue<Patient> waitingList;

    // Use List (implemented by ArrayList) to keep track of all patients ever added
    private List<Patient> allPatients;

    // Scanner for user input
    private Scanner scanner;

    // Constructor to initialize data structures and scanner
    public AppointmentScheduler() {
        waitingList = new LinkedList<>(); // LinkedList is a common Queue implementation
        allPatients = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    // Displays the main menu
    private void displayMenu() {
        System.out.println("\n--- Appointment Scheduler Menu ---");
        System.out.println("1. Add Patient");
        System.out.println("2. View Waiting List");
        System.out.println("3. Process Next Patient");
        System.out.println("4. List All Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Adds a new patient to the system and waiting list
    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim(); // Read input and trim whitespace

        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Stop if name is invalid
        }

        Patient newPatient = new Patient(name);

        // Add to the list of all patients
        allPatients.add(newPatient);

        // Add to the waiting list queue
        waitingList.offer(newPatient); // offer() is generally preferred over add() for queues

        System.out.println("Patient \"" + name + "\" added to system and waiting list.");
    }

    // Displays the current waiting list
    private void viewWaitingList() {
        System.out.println("\n--- Current Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(patient.getName());
            }
        }
    }

    // Processes (removes) the next patient from the waiting list
    private void processNextPatient() {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot process patient.");
        } else {
            // Remove and retrieve the head of the queue
            Patient processedPatient = waitingList.poll(); // poll() returns null if empty, but we checked isEmpty()
            System.out.println("Processing patient: " + processedPatient.getName());
        }
    }

    // Lists all patients ever added to the system
    private void listAllPatients() {
        System.out.println("\n--- All Patients in System ---");
        if (allPatients.isEmpty()) {
            System.out.println("No patients have been added yet.");
        } else {
            // Iterate through the list of all patients
            for (int i = 0; i < allPatients.size(); i++) {
                System.out.println((i + 1) + ". " + allPatients.get(i).getName());
            }
        }
    }

    // Main method to run the scheduler
    public void run() {
        int choice = 0;
        // Class-wide exception handling for the main loop
        try {
            do {
                displayMenu();
                // Read user choice (handling potential non-integer input gracefully)
                try {
                    choice = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration
                }

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        viewWaitingList();
                        break;
                    case 3:
                        processNextPatient();
                        break;
                    case 4:
                        listAllPatients();
                        break;
                    case 5:
                        System.out.println("Exiting Appointment Scheduler.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } while (choice != 5);
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    // Main method to start the application
    public static void main(String[] args) {
        AppointmentScheduler scheduler = new AppointmentScheduler();
        scheduler.run();
    }
}
