/*
 * Exam Question #320
 * Generated on: 2025-05-11 22:54:39
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Task Management System
 * 
 * **Scenario:** You are tasked with building a simple command-line Task Management System for a small team. The system needs to handle two types of tasks: Urgent and Regular. Urgent tasks should be prioritized for completion in the order they were added (FIFO), while Regular tasks can be managed more flexibly.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a `Task` class to hold task details: a `String` description and a `boolean` indicating if it's urgent.
 * 2.  **Task Storage:**
 *     *   Maintain a collection for **Urgent** tasks using a `java.util.Queue`. Urgent tasks must follow a First-In, First-Out (FIFO) processing order.
 *     *   Maintain a collection for **Regular** tasks using a `java.util.ArrayList`, declared using the `java.util.List` interface.
 * 3.  **User Interface:** Implement a command-line interface using `java.util.Scanner` with the following menu options:
 *     *   **Add Task:** Prompt the user for the task description and whether it's urgent (e.g., by typing "yes" or "no"). Add the task to the appropriate storage.
 *     *   **View All Tasks:** Display all tasks currently in the system. Urgent tasks must be listed first (in their FIFO order), followed by Regular tasks (in the order they were added). Number the tasks sequentially starting from 1 across both lists for user reference when marking tasks complete.
 *     *   **Mark Task Complete:** Prompt the user to enter the number of the task to mark complete (using the number displayed in the "View All Tasks" list).
 *         *   **Specific Rule:** For Urgent tasks, *only* the task currently at the head of the queue (which will always be displayed as number 1 if urgent tasks exist) can be marked complete via this option. If the user enters a number corresponding to an urgent task that is *not* at the head (i.e., an urgent task number greater than 1), display an error message stating that only the next urgent task (number 1) can be completed. Upon successful completion of the head urgent task, remove it from the queue.
 *         *   For Regular tasks, any task can be marked complete using its number. Upon successful completion, remove it from the ArrayList.
 *         *   Handle cases where the entered task number is invalid (out of range).
 *     *   **Exit:** Terminate the program.
 * 4.  **Flow Control:** Use a `switch` statement to handle the user's menu choice in the main application loop.
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, task lists, and successful operation messages.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid input, invalid task number, attempting to complete a non-head urgent task, empty description).
 * 6.  **Error Handling:**
 *     *   Implement robust input validation (e.g., task description cannot be empty; handle non-integer input for menu choices and task numbers).
 *     *   Use `try-catch` blocks for exception handling. Include a class-wide `try-catch` block in the main application loop to catch unexpected runtime exceptions and print an error using `System.err`. Handle specific exceptions like `InputMismatchException` and `IllegalArgumentException` where appropriate.
 * 7.  **Best Practices:** Adhere to Java best practices, including proper encapsulation (private fields, public methods), meaningful variable and method names, appropriate comments and documentation (e.g., Javadoc), and clean code structure.
 * 
 * **Expected Interaction Example (Partial):**
 * 
 * ```
 * --- Task Manager ---
 * 1. Add Task
 * 2. View All Tasks
 * 3. Mark Task Complete
 * 4. Exit
 * Enter your choice: 1
 * --- Add New Task ---
 * Enter task description: Finish report draft
 * Is this task urgent? (yes/no): yes
 * Urgent task added.
 * 
 * 1. Add Task
 * 2. View All Tasks
 * 3. Mark Task Complete
 * 4. Exit
 * Enter your choice: 1
 * --- Add New Task ---
 * Enter task description: Schedule meeting
 * Is this task urgent? (yes/no): no
 * Regular task added.
 * 
 * 1. Add Task
 * 2. View All Tasks
 * 3. Mark Task Complete
 * 4. Exit
 * Enter your choice: 2
 * --- All Tasks ---
 * --- Urgent ---
 * 1. Finish report draft
 * --- Regular ---
 * 2. Schedule meeting
 * 
 * 1. Add Task
 * 2. View All Tasks
 * 3. Mark Task Complete
 * 4. Exit
 * Enter your choice: 3
 * --- Mark Task Complete ---
 * --- All Tasks ---
 * --- Urgent ---
 * 1. Finish report draft
 * --- Regular ---
 * 2. Schedule meeting
 * Enter the number of the task to mark complete: 1
 * Completed urgent task: Finish report draft
 * 
 * 1. Add Task
 * 2. View All Tasks
 * 3. Mark Task Complete
 * 4. Exit
 * Enter your choice: 2
 * --- All Tasks ---
 * --- Urgent ---
 * No urgent tasks.
 * --- Regular ---
 * 1. Schedule meeting
 * 
 * ... (further interactions) ...
 * ```
 * 
 * Your solution should include the necessary class(es) to implement this system.
 *
 * EXPLANATION:
 * This solution implements the Task Management System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Task Class:** The `Task` class is a simple Plain Old Java Object (POJO) with private fields `description` and `isUrgent`. It provides a constructor that validates the description (ensuring it's not empty) and public getter methods (`getDescription`, `isUrgent`). The `toString` method is overridden for easy printing. This adheres to encapsulation.
 * 
 * 2.  **Task Storage:**
 *     *   `urgentTasks` is declared as a `Queue<Task>` and instantiated as a `LinkedList<Task>`. `LinkedList` is a common implementation of the `Queue` interface in `java.util` and provides the necessary FIFO behavior using methods like `offer()` (to add to the tail) and `poll()` (to remove and return the head).
 *     *   `regularTasks` is declared as a `List<Task>` and instantiated as an `ArrayList<Task>`. This demonstrates the use of the `List` interface, allowing for potential future changes in implementation (e.g., to `LinkedList`) without altering code that interacts only with the `List` interface. `ArrayList` provides efficient indexed access and removal needed for regular tasks.
 * 
 * 3.  **User Interface and Flow Control:**
 *     *   A `Scanner` is used to read input from `System.in`.
 *     *   The `run()` method contains the main application loop.
 *     *   A `displayMenu()` helper method shows the options.
 *     *   A `switch` statement in `run()` directs the program flow based on the user's integer input, calling the appropriate methods (`addTask`, `viewTasks`, `markTaskComplete`).
 * 
 * 4.  **Task Operations (`addTask`, `viewTasks`, `markTaskComplete`):**
 *     *   `addTask()` prompts for details, validates the description using the `Task` constructor's `IllegalArgumentException`, and adds the new task to either `urgentTasks` (using `offer()`) or `regularTasks` (using `add()`) based on urgency. Basic validation for the urgency input string is also included.
 *     *   `viewTasks()` iterates through the `urgentTasks` queue first (using an enhanced for loop, which doesn't remove elements) and then the `regularTasks` list. It prints each task with a sequential 1-based index, necessary for the `markTaskComplete` function.
 *     *   `markTaskComplete()` is the most complex method. It first calls `viewTasks()` to show the numbered list. It then prompts for a task number.
 *         *   It calculates the total number of tasks and validates the input number's range.
 *         *   It determines if the entered number corresponds to an urgent or regular task based on the count of urgent tasks (`urgentCount`).
 *         *   **Urgent Task Logic:** If the index is within the urgent range (`taskIndex <= urgentCount`), it applies the specific rule: it checks if `taskIndex` is exactly 1 (the head of the queue in the display). If yes, it removes the task using `urgentTasks.poll()`. If `taskIndex` is greater than 1, it prints an error using `System.err`, enforcing the rule that only the next urgent task can be completed.
 *         *   **Regular Task Logic:** If the index is outside the urgent range (`taskIndex > urgentCount`), it calculates the corresponding 0-based index for the `regularTasks` list (`regularIndex = taskIndex - urgentCount - 1`). It then removes the task from the `regularTasks` list using `regularTasks.remove(regularIndex)`.
 *         *   Both successful completion paths print a message using `System.out`.
 * 
 * 5.  **Error Handling:**
 *     *   `System.err` is used consistently for all error messages, distinguishing them from normal output.
 *     *   `try-catch` blocks are used for specific error handling:
 *         *   `InputMismatchException` is caught in `run()` and `markTaskComplete()` to handle cases where the user enters non-integer input when a number is expected. `scanner.nextLine()` is called in the catch block to clear the invalid input from the scanner buffer.
 *         *   `IllegalArgumentException` is caught in `addTask()` to handle the empty description error from the `Task` constructor.
 *         *   `IndexOutOfBoundsException` is included in a `try-catch` around `regularTasks.remove()` in `markTaskComplete()` as a safety measure, although the prior index range check should ideally prevent this.
 *     *   A general `try-catch(Exception e)` is present in the `run()` loop. This serves as the "class-wide" or application-level exception handler, catching any other unexpected runtime exceptions that might occur in any of the called methods and preventing the program from crashing abruptly, printing a general error to `System.err`.
 * 
 * 6.  **Best Practices:** The code uses private fields, public/private methods appropriately, descriptive variable and method names, and includes basic Javadoc comments. The separation into `Task` and `TaskManager` classes provides a clean structure.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical scenario, requiring careful logic for indexing, data structure manipulation, and error handling, making it a suitable challenging exam question.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description and urgency status.
 */
class Task {
    private String description;
    private boolean isUrgent;

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task. Cannot be null or empty.
     * @param isUrgent    True if the task is urgent, false otherwise.
     * @throws IllegalArgumentException if the description is null or empty.
     */
    public Task(String description, boolean isUrgent) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        this.description = description.trim();
        this.isUrgent = isUrgent;
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Checks if the task is urgent.
     * @return True if urgent, false otherwise.
     */
    public boolean isUrgent() {
        return isUrgent;
    }

    @Override
    public String toString() {
        return description + (isUrgent ? " (URGENT)" : "");
    }
}

/**
 * Manages a collection of urgent and regular tasks.
 * Provides a command-line interface for task operations.
 */
public class TaskManager {

    // Queue for urgent tasks (FIFO processing)
    private Queue<Task> urgentTasks;
    // List for regular tasks (declared as List, instantiated as ArrayList)
    private List<Task> regularTasks;
    private Scanner scanner;

    /**
     * Constructs a new TaskManager, initializing task collections and scanner.
     */
    public TaskManager() {
        urgentTasks = new LinkedList<>(); // LinkedList implements Queue
        regularTasks = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Runs the main task manager application loop.
     * Displays menu, gets user input, and processes choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("--- Task Manager ---");
        boolean running = true;
        while (running) {
            try { // Class-wide exception handling for unexpected errors
                displayMenu();
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        viewTasks();
                        break;
                    case 3:
                        markTaskComplete();
                        break;
                    case 4:
                        System.out.println("Exiting Task Manager. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (InputMismatchException e) {
                // Specific handling for non-integer input for menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during the loop
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(System.err); // Optional: uncomment for detailed debugging
            }
            System.out.println(); // Add a blank line for readability between operations
        }
        scanner.close(); // Close the scanner when the application exits
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("1. Add Task");
        System.out.println("2. View All Tasks");
        System.out.println("3. Mark Task Complete");
        System.out.println("4. Exit");
    }

    /**
     * Prompts the user for task details (description and urgency)
     * and adds the task to the appropriate collection.
     * Handles input validation for description and urgency.
     */
    private void addTask() {
        System.out.println("\n--- Add New Task ---");
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();

        try {
            System.out.print("Is this task urgent? (yes/no): ");
            String urgencyInput = scanner.nextLine().trim().toLowerCase();

            boolean isUrgent;
            if (urgencyInput.equals("yes")) {
                isUrgent = true;
            } else if (urgencyInput.equals("no")) {
                isUrgent = false;
            } else {
                // Handle invalid urgency input gracefully
                System.err.println("Invalid input for urgency. Task will be added as non-urgent.");
                isUrgent = false; // Default to non-urgent on invalid input
            }

            // Task constructor handles empty description validation
            Task newTask = new Task(description, isUrgent);

            if (isUrgent) {
                urgentTasks.offer(newTask); // Use offer() for adding to Queue
                System.out.println("Urgent task added.");
            } else {
                regularTasks.add(newTask); // Use add() for adding to List/ArrayList
                System.out.println("Regular task added.");
            }
        } catch (IllegalArgumentException e) {
            // Catch exception thrown by Task constructor for empty description
            System.err.println("Error adding task: " + e.getMessage());
        }
    }

    /**
     * Displays all tasks currently in the system.
     * Lists urgent tasks first (FIFO order), then regular tasks (addition order).
     * Tasks are numbered sequentially for user reference.
     */
    private void viewTasks() {
        System.out.println("\n--- All Tasks ---");
        if (urgentTasks.isEmpty() && regularTasks.isEmpty()) {
            System.out.println("No tasks available.");
            return;
        }

        int index = 1; // Start numbering from 1

        // Display Urgent Tasks (from Queue)
        System.out.println("--- Urgent ---");
        if (urgentTasks.isEmpty()) {
            System.out.println("No urgent tasks.");
        } else {
            // Iterate through the queue to display without removing elements
            for (Task task : urgentTasks) {
                System.out.println(index++ + ". " + task.getDescription());
            }
        }

        // Display Regular Tasks (from List)
        System.out.println("--- Regular ---");
        if (regularTasks.isEmpty()) {
            System.out.println("No regular tasks.");
        } else {
            for (Task task : regularTasks) {
                System.out.println(index++ + ". " + task.getDescription());
            }
        }
    }

    /**
     * Prompts the user for a task index to mark complete and removes it
     * from the appropriate collection based on the specific rules.
     * Handles input validation and index calculation.
     */
    private void markTaskComplete() {
        System.out.println("\n--- Mark Task Complete ---");
        if (urgentTasks.isEmpty() && regularTasks.isEmpty()) {
            System.err.println("No tasks to mark complete.");
            return;
        }

        viewTasks(); // Show tasks with their current numbers

        System.out.print("Enter the number of the task to mark complete: ");
        try {
            int taskIndex = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            int urgentCount = urgentTasks.size();
            int totalTasks = urgentCount + regularTasks.size();

            // Validate if the entered index is within the valid range
            if (taskIndex < 1 || taskIndex > totalTasks) {
                System.err.println("Invalid task number. Please enter a number between 1 and " + totalTasks + ".");
                return;
            }

            // Check if the index corresponds to an urgent task based on the display order
            if (taskIndex <= urgentCount) {
                // It's an index pointing to an urgent task in the display
                // Apply the specific rule: only the head of the queue (displayed as index 1) can be completed
                if (taskIndex == 1) {
                    // Use poll() to remove and retrieve the head of the queue
                    Task completedTask = urgentTasks.poll();
                    if (completedTask != null) { // poll() returns null if queue is empty, but we checked urgentCount > 0
                         System.out.println("Completed urgent task: " + completedTask.getDescription());
                    } else {
                        // Should not happen if urgentCount > 0 and taskIndex == 1
                        System.err.println("An internal error occurred while completing the urgent task.");
                    }
                } else {
                    // User tried to complete an urgent task that is not the head (index > 1)
                    System.err.println("Only the next urgent task (number 1) can be marked complete from this menu.");
                }
            } else {
                // It's an index pointing to a regular task in the display
                // Calculate the 0-based index in the regularTasks list
                int regularIndex = taskIndex - urgentCount - 1;

                try {
                    // Remove the task from the ArrayList using its calculated index
                    Task completedTask = regularTasks.remove(regularIndex);
                    System.out.println("Completed regular task: " + completedTask.getDescription());
                } catch (IndexOutOfBoundsException e) {
                    // This catch handles potential issues with the calculated index,
                    // although the initial taskIndex range check should largely prevent this.
                    System.err.println("Error: Could not find regular task at the specified index.");
                }
            }

        } catch (InputMismatchException e) {
            // Specific handling for non-integer input for task number
            System.err.println("Invalid input. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    /**
     * Main method to start the Task Manager application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run();
    }
}
