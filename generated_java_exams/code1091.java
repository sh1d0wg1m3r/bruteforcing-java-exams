/*
 * Exam Question #1091
 * Generated on: 2025-05-12 17:23:41
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Automated Package Processing Center Simulation**
 * 
 * You are tasked with developing a simplified simulation of an automated package processing center. Packages arrive, are placed in an incoming queue, processed one by one, and then sorted into different destination zones.
 * 
 * Your program must allow a user to interact with this system via a command-line menu.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a class `Package` with the following attributes:
 *     *   `packageId` (String) - Unique identifier for the package.
 *     *   `destinationZone` (char) - Represents the destination zone ('A', 'B', or 'C').
 *     *   Implement appropriate getters and a `toString()` method for easy printing. Ensure attributes are private and accessed via public methods (encapsulation).
 * 
 * 2.  **Processing Center Logic:** Create a class `ProcessingCenter` that manages the package flow. It must contain:
 *     *   An incoming queue (`Queue<Package>`) to hold packages waiting to be processed.
 *     *   Separate lists (`List<Package>`) for packages processed for each zone (e.g., `zoneAList`, `zoneBList`, `zoneCList`). Use `ArrayList` for the implementation of these lists and declare them using the `List` interface.
 *     *   A `Scanner` object to read user input for menu choices and package details.
 * 
 * 3.  **User Interface (Menu):** Implement a command-line menu with the following options:
 *     *   `1. Add New Package`: Prompt the user for package ID and destination zone ('A', 'B', or 'C'). Validate the input. Create a `Package` object and add it to the incoming queue.
 *     *   `2. Process Next Package`: Take the next package from the *front* of the incoming queue. Based on its `destinationZone`, add it to the corresponding zone list (`zoneAList`, `zoneBList`, or `zoneCList`). Handle the case where the incoming queue is empty.
 *     *   `3. View Status`: Display the contents of the incoming queue and each zone list.
 *     *   `4. Exit`: Terminate the program.
 * 
 * 4.  **Core Java Component Usage:** You *must* explicitly use and demonstrate the functionality of ALL the following components within your solution:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (by declaring your zone lists using this interface)
 *     *   `java.util.Scanner`
 *     *   `switch` statement (for the main menu)
 *     *   `System.err` (for displaying error messages, e.g., invalid input, queue empty)
 *     *   `System.out` (for displaying the menu, prompts, and status)
 *     *   Class-wide exception handling using `try-catch` blocks (wrap the main program loop or a significant portion of the logic to catch potential runtime errors).
 * 
 * 5.  **Error Handling and Validation:**
 *     *   Validate user input for the destination zone ('A', 'B', 'C').
 *     *   Handle the scenario where the user tries to process a package when the incoming queue is empty.
 *     *   Use `System.err` for all error messages.
 *     *   Implement a general `try-catch` block to catch unexpected exceptions during program execution.
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation in the `Package` class.
 *     *   Close the `Scanner` resource properly.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, perform the requested actions, and display status or error messages accordingly. The output should be clear and follow the requirements for `System.out` and `System.err`.
 * 
 * *Example Interaction:*
 * 
 * ```
 * Package Processing Center Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Package ID: P101
 * Enter Destination Zone (A, B, or C): A
 * Package P101 added to incoming queue.
 * 
 * Package Processing Center Menu:
 * 1. Add New Package
 * ...
 * Enter your choice: 2
 * Processing package from incoming queue...
 * Package P101 processed and moved to Zone A.
 * 
 * Package Processing Center Menu:
 * ...
 * Enter your choice: 3
 * --- Current Status ---
 * Incoming Queue: []
 * Zone A Packages: [Package{id='P101', zone=A}]
 * Zone B Packages: []
 * Zone C Packages: []
 * ----------------------
 * 
 * Package Processing Center Menu:
 * ...
 * Enter your choice: 2
 * Processing package from incoming queue...
 * System.err: Error: Incoming queue is empty. No package to process.
 * 
 * Package Processing Center Menu:
 * ...
 * Enter your choice: 1
 * Enter Package ID: P102
 * Enter Destination Zone (A, B, or C): Z
 * System.err: Error: Invalid destination zone 'Z'. Please enter A, B, or C.
 * Package not added.
 * ```
 * 
 * Develop the complete Java code for this simulation.
 *
 * EXPLANATION:
 * This solution implements the `Package Processing Center Simulation` as requested, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`Package` Class:**
 *     *   Represents the data structure for a package.
 *     *   Uses `private` fields (`packageId`, `destinationZone`) and `public` getter methods (`getPackageId`, `getDestinationZone`) to enforce encapsulation.
 *     *   Provides a helpful `toString()` method for easy printing of package details when viewing status.
 * 
 * 2.  **`ProcessingCenter` Class:**
 *     *   This is the main class containing the application logic.
 *     *   **`Queue<Package> incomingQueue`**: A `LinkedList` is used here because it implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior required for an incoming queue where packages are processed in the order they arrive. `offer()` is used for adding and `poll()` for removing, which are standard `Queue` operations.
 *     *   **`List<Package> zoneAList`, `zoneBList`, `zoneCList`**: `ArrayList` is used for the implementation of these lists, providing dynamic arrays to store processed packages for each zone. They are declared using the `List` interface, fulfilling the requirement to use both `ArrayList` and the `List` interface.
 *     *   **`Scanner scanner`**: Used to read input from `System.in` for menu choices and package details. It's initialized in the constructor and closed in the `finally` block to release system resources.
 *     *   **`displayMenu()`**: A helper method to print the menu options using `System.out`.
 *     *   **`addPackage()`**: Reads package ID and destination zone from the user. It performs input validation to ensure the zone is 'A', 'B', or 'C'. If valid, it creates a `Package` object and adds it to the `incomingQueue` using `offer()`. Invalid input results in an error message printed to `System.err`.
 *     *   **`processNextPackage()`**: Retrieves and removes the next package from the `incomingQueue` using `poll()`. If the queue is empty, `poll()` returns `null`, and an error message is printed to `System.err`. If a package is retrieved, a `switch` statement is used to determine its `destinationZone` and add the package to the corresponding zone `List` (`zoneAList`, `zoneBList`, or `zoneCList`). This demonstrates the use of the `switch` statement for flow control based on the zone character.
 *     *   **`viewStatus()`**: Prints the current contents of the `incomingQueue` and each zone list using `System.out`. The `toString()` methods of the collections and the `Package` class are implicitly called here for convenient display.
 *     *   **`run()`**: This method contains the main application loop (`while (choice != 4)`). It repeatedly displays the menu, reads user input, and uses a `switch` statement to call the appropriate method based on the user's choice.
 *     *   **Class-wide Exception Handling (`try-catch`)**: The `run()` method is wrapped in a `try-catch` block.
 *         *   An inner `try-catch` specifically handles `InputMismatchException` that can occur if the user enters non-integer input when prompted for the menu choice. This specific handling prevents the program from crashing and allows the loop to continue.
 *         *   An outer `catch (Exception e)` block demonstrates class-wide handling by catching any other unexpected `Exception` that might occur during the execution of the `run` method's logic. It prints a generic error message and the stack trace to `System.err`.
 *         *   A `finally` block ensures that the `scanner` is closed when the `run()` method finishes, whether normally or due to an exception.
 *     *   **`main()`**: The entry point of the program, which simply creates an instance of `ProcessingCenter` and calls its `run()` method.
 * 
 * This solution effectively integrates the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical simulation, demonstrating input handling, data structure manipulation, flow control, and basic error management.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a package with an ID and destination zone
class Package {
    private String packageId;
    private char destinationZone; // 'A', 'B', or 'C'

    /**
     * Constructs a new Package object.
     * @param packageId The unique identifier for the package.
     * @param destinationZone The destination zone ('A', 'B', or 'C').
     */
    public Package(String packageId, char destinationZone) {
        this.packageId = packageId;
        this.destinationZone = destinationZone;
    }

    /**
     * Gets the package ID.
     * @return The package ID.
     */
    public String getPackageId() {
        return packageId;
    }

    /**
     * Gets the destination zone.
     * @return The destination zone ('A', 'B', or 'C').
     */
    public char getDestinationZone() {
        return destinationZone;
    }

    /**
     * Returns a string representation of the Package object.
     * @return A string in the format "Package{id='...', zone=...}".
     */
    @Override
    public String toString() {
        return "Package{id='" + packageId + "', zone=" + destinationZone + '}';
    }
}

// Manages the package processing flow
public class ProcessingCenter {

    // Use LinkedList as a Queue implementation
    private Queue<Package> incomingQueue;

    // Use ArrayLists declared as Lists for destination zones
    private List<Package> zoneAList;
    private List<Package> zoneBList;
    private List<Package> zoneCList;

    private Scanner scanner;

    /**
     * Constructs a new ProcessingCenter.
     * Initializes the queue, lists, and scanner.
     */
    public ProcessingCenter() {
        incomingQueue = new LinkedList<>(); // LinkedList implements Queue
        zoneAList = new ArrayList<>();      // ArrayList implements List
        zoneBList = new ArrayList<>();
        zoneCList = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nPackage Processing Center Menu:");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Status");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new package to the incoming queue based on user input.
     */
    private void addPackage() {
        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine();

        char zone = ' '; // Default to invalid character
        System.out.print("Enter Destination Zone (A, B, or C): ");
        String zoneInput = scanner.nextLine().trim().toUpperCase();

        if (zoneInput.length() == 1) {
            zone = zoneInput.charAt(0);
        }

        // Input validation for zone
        if (zone == 'A' || zone == 'B' || zone == 'C') {
            Package newPackage = new Package(id, zone);
            incomingQueue.offer(newPackage); // offer is generally preferred over add for queues (returns false instead of throwing exception on capacity limits, though LinkedList is unbounded)
            System.out.println("Package " + id + " added to incoming queue.");
        } else {
            System.err.println("Error: Invalid destination zone '" + zoneInput + "'. Please enter A, B, or C.");
            System.err.println("Package not added.");
        }
    }

    /**
     * Processes the next package from the incoming queue and sorts it into the correct zone list.
     */
    private void processNextPackage() {
        System.out.println("Processing package from incoming queue...");
        Package packageToProcess = incomingQueue.poll(); // Retrieves and removes the head of this queue, or returns null if this queue is empty.

        if (packageToProcess != null) {
            char zone = packageToProcess.getDestinationZone();
            switch (zone) { // Using switch statement for sorting based on zone
                case 'A':
                    zoneAList.add(packageToProcess);
                    break;
                case 'B':
                    zoneBList.add(packageToProcess);
                    break;
                case 'C':
                    zoneCList.add(packageToProcess);
                    break;
                default:
                    // This case should ideally not happen due to addPackage validation,
                    // but included for robustness.
                    System.err.println("Error: Processed package with invalid zone '" + zone + "'. Package ID: " + packageToProcess.getPackageId());
                    // Could potentially add to a 'rejected' list or re-queue
                    return; // Exit method after handling error
            }
            System.out.println("Package " + packageToProcess.getPackageId() + " processed and moved to Zone " + zone + ".");
        } else {
            System.err.println("Error: Incoming queue is empty. No package to process.");
        }
    }

    /**
     * Displays the current status of the incoming queue and all zone lists.
     */
    private void viewStatus() {
        System.out.println("\n--- Current Status ---");
        System.out.println("Incoming Queue: " + incomingQueue);
        System.out.println("Zone A Packages: " + zoneAList);
        System.out.println("Zone B Packages: " + zoneBList);
        System.out.println("Zone C Packages: " + zoneCList);
        System.out.println("----------------------");
    }

    /**
     * Runs the main application loop, handling user interaction and menu choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1; // Initialize with a value that won't match a menu option
        try { // Class-wide exception handling
            while (choice != 4) {
                displayMenu();
                try {
                    // Read the integer choice
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    switch (choice) { // Using switch statement for menu navigation
                        case 1:
                            addPackage();
                            break;
                        case 2:
                            processNextPackage();
                            break;
                        case 3:
                            viewStatus();
                            break;
                        case 4:
                            System.out.println("Exiting Package Processing Center. Goodbye!");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to continue loop
                }
            }
        } catch (Exception e) { // Catch any other unexpected exceptions
            System.err.println("An unexpected error occurred during program execution:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed regardless of how the loop exits or if an exception occurs
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProcessingCenter center = new ProcessingCenter();
        center.run(); // Start the main application loop
    }
}
