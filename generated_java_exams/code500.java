/*
 * Exam Question #500
 * Generated on: 2025-05-11 23:20:38
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Patient Triage System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Hospital Patient Triage System. Patients arrive and are added to a waiting list. Doctors process patients from the waiting list in the order they arrived. The system also needs to keep a record of all patients who have been processed.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following:
 * 
 * 1.  **Core Data Structures:**
 *     *   Use a `java.util.Queue` to manage the patient waiting list (First-In, First-Out).
 *     *   Use a `java.util.ArrayList` to store patients who have been processed.
 *     *   Declare the processed patients list using the `java.util.List` interface type (`List<Patient> processedPatients = new ArrayList<>();`).
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Patient to Waiting List
 *         2.  View Waiting List
 *         3.  Process Next Patient
 *         4.  View Processed Patients
 *         0.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 3.  **Output:**
 *     *   Use `System.out` for displaying the menu, confirmation messages, lists of patients, and normal program output.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, trying to process from an empty queue).
 * 
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle unexpected issues (e.g., non-integer input for menu choice).
 *     *   Implement input validation for patient names (e.g., not empty).
 *     *   Handle cases where the user tries to process a patient when the waiting list is empty.
 * 
 * 5.  **Object-Oriented Design:**
 *     *   Create a `Patient` class with a private field for the patient's name and a public getter method.
 *     *   Create a main class (e.g., `HospitalSystem`) that encapsulates the data structures (`Queue`, `List`) and the operational methods (add, view, process).
 *     *   Ensure fields are private and methods are public where appropriate (proper encapsulation).
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Structure the code cleanly.
 *     *   Ensure resources like `Scanner` are properly closed.
 * 
 * **Expected Output:**
 * 
 * The program should loop, displaying the menu and processing user input.
 * *   Adding a patient should confirm success.
 * *   Viewing lists should print the names of patients in the respective list/queue.
 * *   Processing a patient should remove them from the waiting list and add them to the processed list, confirming the action.
 * *   Attempting to process from an empty queue should print an error to `System.err`.
 * *   Invalid menu input should print an error to `System.err`.
 * *   Entering '0' should exit the program gracefully.
 * 
 * **Time Allotment:** 45-60 minutes
 * 
 * **Evaluation Criteria:** Correctness of implementation, adherence to all requirements (especially the use of specified components), proper error handling, code structure, and use of best practices.
 *
 * EXPLANATION:
 * This solution implements the Hospital Patient Triage System according to the specified requirements, demonstrating the use of various core Java concepts.
 * 
 * 1.  **Patient Class:** A simple `Patient` class is created with a `private String name` field and a `public String getName()` getter, adhering to encapsulation principles. The `toString()` method is overridden for convenient printing.
 * 
 * 2.  **HospitalSystem Class:** This is the main class managing the system.
 *     *   **Data Structures:**
 *         *   `private Queue<Patient> waitingQueue = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface. This is appropriate for the waiting list because a queue naturally enforces the First-In, First-Out (FIFO) order required for triage. Patients are added to the end (`offer`) and removed from the front (`poll`).
 *         *   `private List<Patient> processedPatients = new ArrayList<>();`: An `ArrayList` is used to store patients after they have been processed. It implements the `List` interface. `ArrayList` provides dynamic resizing and efficient element access, suitable for keeping a record of processed patients. Declaring it as `List` demonstrates programming to the interface, a good practice.
 *     *   **Scanner:** `private Scanner scanner = new Scanner(System.in);` is initialized to read user input from the console (`System.in`).
 *     *   **Methods:**
 *         *   `addPatient()`: Prompts for a patient name, reads it using `scanner.nextLine()`, performs validation to ensure the name is not empty, creates a `Patient` object, and adds it to the `waitingQueue` using `offer()`.
 *         *   `viewWaitingList()`: Checks if the `waitingQueue` is empty. If not, it iterates through the queue (using `forEach`, which doesn't remove elements) and prints each patient's name to `System.out`.
 *         *   `processNextPatient()`: Checks if the `waitingQueue` is empty. If so, it prints an error message to `System.err`. Otherwise, it uses `waitingQueue.poll()` to remove the patient at the front of the queue and adds this patient to the `processedPatients` list using `processedPatients.add()`. Confirmation is printed to `System.out`.
 *         *   `viewProcessedPatients()`: Checks if the `processedPatients` list is empty. If not, it iterates through the list and prints each patient's name to `System.out`.
 *         *   `displayMenu()`: A helper method to print the menu options to `System.out`.
 *         *   `run()`: This method contains the main application loop. It repeatedly displays the menu, reads user input, and processes the choice.
 *         *   `closeScanner()`: A helper method to ensure the `Scanner` resource is closed, preventing resource leaks.
 * 
 * 3.  **User Input and `switch`:** The `run()` method reads the user's menu choice. It reads the entire line as a `String` first (`scanner.nextLine()`) and then attempts to parse it into an integer using `Integer.parseInt()`. This approach, combined with a `try-catch` for `NumberFormatException`, allows for robust handling of non-integer input. The parsed integer is then used in a `switch` statement to direct the program flow to the appropriate method (`addPatient`, `viewWaitingList`, etc.). A `default` case handles invalid integer choices.
 * 
 * 4.  **Error Handling (`try-catch` and `System.err`):**
 *     *   **Class-wide `try-catch`:** The `run()` method's core logic (the `while` loop) is wrapped in a `try-catch(Exception e)` block. This provides a top-level safety net for any unexpected runtime exceptions that might occur within the loop, printing an error to `System.err` and the stack trace.
 *     *   **Input Validation:** Inside `addPatient()`, `name.isEmpty()` checks for empty input, printing an error to `System.err` if invalid.
 *     *   **Operational Error Handling:** Inside `processNextPatient()`, `waitingQueue.isEmpty()` checks if there's a patient to process. If not, an error is printed to `System.err`.
 *     *   **Input Parsing Error:** A specific `try-catch(NumberFormatException e)` is nested *inside* the `run` loop's main `try` block to catch cases where the user enters non-numeric input for the menu choice. An error is printed to `System.err`.
 *     *   **`System.err` vs `System.out`:** Error messages (invalid input, empty queue operations, unexpected errors) are directed to `System.err`, while normal output (menu, confirmations, lists) goes to `System.out`.
 * 
 * 5.  **Resource Management (`finally`):** The `run()` method uses a `finally` block in conjunction with the outer `try` block. This ensures that the `closeScanner()` method is called when the `run()` method finishes, either normally (when the user chooses option 0) or abnormally (if an unexpected `Exception` is caught).
 * 
 * 6.  **Best Practices:**
 *     *   Fields (`waitingQueue`, `processedPatients`, `scanner`) are `private`.
 *     *   Public methods provide the interface for interacting with the `HospitalSystem`.
 *     *   Variable and method names are descriptive (e.g., `waitingQueue`, `processNextPatient`).
 *     *   Basic Javadoc comments are included for classes and methods.
 *     *   The code is structured logically with separate methods for each operation.
 * 
 * This solution effectively integrates all required Java components into a functional, well-structured, and robust application that simulates a real-world triage scenario.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the patient (just the name).
     * @return The patient's name.
     */
    @Override
    public String toString() {
        return name;
    }
}

/**
 * Manages the hospital's patient triage and processing system.
 */
public class HospitalSystem {

    private Queue<Patient> waitingQueue;
    private List<Patient> processedPatients;
    private Scanner scanner;

    /**
     * Constructs a new HospitalSystem.
     * Initializes the waiting queue, processed patients list, and scanner.
     */
    public HospitalSystem() {
        // Use LinkedList as an implementation of Queue for FIFO
        this.waitingQueue = new LinkedList<>();
        // Use ArrayList as an implementation of List to store processed patients
        this.processedPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the waiting list based on user input.
     * Performs input validation.
     */
    public void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim(); // Read full line and trim whitespace

        // Input validation
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Exit method if input is invalid
        }

        Patient newPatient = new Patient(name);
        waitingQueue.offer(newPatient); // offer is generally preferred over add for capacity-constrained queues, though LinkedList is not capacity-constrained. It's good practice.
        System.out.println(name + " added to the waiting list.");
    }

    /**
     * Displays the current patients in the waiting list.
     */
    public void viewWaitingList() {
        if (waitingQueue.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            System.out.println("--- Waiting List ---");
            // Iterate through the queue without removing elements
            waitingQueue.forEach(patient -> System.out.println("- " + patient.getName()));
            System.out.println("--------------------");
        }
    }

    /**
     * Processes the next patient from the waiting list (removes from queue, adds to processed list).
     * Handles the case where the waiting list is empty.
     */
    public void processNextPatient() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting list is empty. No patient to process.");
            return; // Exit method if queue is empty
        }

        // Remove the head of the queue
        Patient nextPatient = waitingQueue.poll(); // poll returns null if queue is empty, but we already checked
        processedPatients.add(nextPatient); // Add to the processed list

        System.out.println("Processed patient: " + nextPatient.getName());
    }

    /**
     * Displays the list of patients who have been processed.
     */
    public void viewProcessedPatients() {
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            System.out.println("--- Processed Patients ---");
            // Iterate through the list
            processedPatients.forEach(patient -> System.out.println("- " + patient.getName()));
            System.out.println("--------------------------");
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Triage System ---");
        System.out.println("1. Add New Patient to Waiting List");
        System.out.println("2. View Waiting List");
        System.out.println("3. Process Next Patient");
        System.out.println("4. View Processed Patients");
        System.out.println("0. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user interaction and menu choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1; // Initialize with a non-menu value

        // Class-wide try-catch block for the main operational loop
        try {
            while (choice != 0) {
                displayMenu();
                String inputLine = scanner.nextLine(); // Read the entire line

                try {
                    choice = Integer.parseInt(inputLine); // Attempt to parse as integer

                    // Use switch statement for flow control based on user choice
                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            viewWaitingList();
                            break;
                        case 3:
                            processNextPatient();
                            break;
                        case 4:
                            viewProcessedPatients();
                            break;
                        case 0:
                            System.out.println("Exiting Hospital Triage System. Goodbye!");
                            break;
                        default:
                            // Handle invalid integer choices
                            System.err.println("Error: Invalid choice. Please enter a number between 0 and 4.");
                    }
                } catch (NumberFormatException e) {
                    // Catch error if input is not a valid integer
                    System.err.println("Error: Invalid input. Please enter a number.");
                    // No need to consume line here, as nextLine() already consumed the invalid input
                }
                // Any other unexpected exceptions within the switch block would be caught by the outer try-catch
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions during the system's operation
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure scanner is closed when the application exits or an unexpected error occurs
            closeScanner();
        }
    }

    /**
     * Closes the scanner resource.
     */
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Main method to start the HospitalSystem application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run(); // Start the application loop
    }
}
