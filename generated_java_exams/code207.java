/*
 * Exam Question #207
 * Generated on: 2025-05-11 22:32:08
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Objective:** Design and implement a console-based application to manage patient appointments in a simplified hospital setting. The system should handle patients arriving and being placed in a waiting queue, processing the next patient in line, and keeping track of both waiting and processed appointments.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Data Structures:**
 *     *   Use a `java.util.Queue` to manage the waiting list of patients.
 *     *   Use a `java.util.ArrayList` to store appointments that have been processed.
 *     *   Declare the collection holding processed appointments using the `java.util.List` interface (`List<Appointment> processedAppointments = new ArrayList<>();`).
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to obtain user input for menu selections and appointment details.
 *     *   Implement a menu-driven interface using a `switch` statement for the main application flow.
 * 
 * 3.  **Input/Output:**
 *     *   Display normal program output (menu, status messages, list contents) using `System.out`.
 *     *   Display error messages (e.g., invalid input, trying to process from an empty queue) using `System.err`.
 * 
 * 4.  **Error Handling:**
 *     *   Implement robust error handling using `try-catch` blocks. This should include:
 *         *   Handling potential issues with user input (e.g., non-integer input for menu choices, empty patient names).
 *         *   Handling operations on the queue that might fail (e.g., attempting to process an appointment when the queue is empty).
 *         *   Include a class-wide or main loop `try-catch` to gracefully handle unexpected exceptions.
 * 
 * 5.  **Object-Oriented Design & Best Practices:**
 *     *   Create a simple `Appointment` class to represent an appointment (minimum: patient name, appointment type).
 *     *   Implement the main application logic within a separate class (e.g., `HospitalAppointmentSystem`).
 *     *   Ensure proper encapsulation: use private fields and public methods where appropriate.
 *     *   Use meaningful variable, method, and class names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style comments for classes and public methods).
 *     *   Include basic input validation (e.g., checking if required input fields are empty).
 *     *   Properly close resources, specifically the `Scanner`.
 * 
 * **Functionality:**
 * 
 * The system should provide the following menu options:
 * 
 * 1.  **Add New Appointment:** Prompt the user for patient name and appointment type (e.g., "General", "Specialist", "Emergency"). Create an `Appointment` object and add it to the waiting queue. Validate that the patient name is not empty.
 * 2.  **Process Next Appointment:** Remove the next appointment from the front of the waiting queue. If the queue is empty, print an error message to `System.err`. Otherwise, print a message indicating which appointment is being processed and add it to the list of processed appointments.
 * 3.  **View Waiting Queue:** Display the details of all appointments currently in the waiting queue, in order. If the queue is empty, print a message indicating that.
 * 4.  **View Processed Appointments:** Display the details of all appointments that have been processed. If the list is empty, print a message indicating that.
 * 5.  **Exit:** Terminate the program.
 * 
 * **Expected Output:**
 * 
 * The program should loop, presenting the menu and responding to user input. Output should be clear, using `System.out` for success messages and lists, and `System.err` for errors.
 * 
 * *Example Flow:*
 * ```
 * --- Hospital Appointment System ---
 * 1. Add New Appointment
 * 2. Process Next Appointment
 * 3. View Waiting Queue
 * 4. View Processed Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter appointment type: General
 * Appointment for Alice (General) added to the waiting queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * --- Waiting Queue ---
 * 1. Alice (General)
 * --- End of Waiting Queue ---
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Processing appointment for Alice (General)...
 * Appointment processed.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * --- Waiting Queue ---
 * Queue is empty.
 * --- End of Waiting Queue ---
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 4
 * --- Processed Appointments ---
 * 1. Alice (General)
 * --- End of Processed Appointments ---
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Error: No appointments in the waiting queue to process.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 99
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 5
 * Exiting Hospital Appointment System. Goodbye!
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the `HospitalAppointmentSystem` as required, demonstrating the use of the specified Java components and best practices.
 * 
 * 1.  **`Appointment` Class:** A simple POJO (`Plain Old Java Object`) is created to encapsulate the data for a single appointment: `patientName` and `appointmentType`. Fields are `private`, and public getter methods are provided, demonstrating encapsulation. The `toString()` method is overridden for easy printing of appointment details.
 * 
 * 2.  **`HospitalAppointmentSystem` Class:** This class contains the core logic and manages the collections.
 *     *   **`Queue<Appointment> waitingQueue`:** Declared as a `Queue` interface, implemented using `LinkedList`. `LinkedList` is a common choice for implementing a `Queue` as it provides efficient additions to the end (`offer`) and removals from the beginning (`poll`).
 *     *   **`List<Appointment> processedAppointments`:** Declared as a `List` interface, implemented using `ArrayList`. `ArrayList` is suitable here as processed appointments are simply stored and iterated over; random access or insertions/deletions in the middle are not frequent operations.
 *     *   **`Scanner scanner`:** An instance is managed for reading user input. The `main` method uses a try-with-resources block to ensure the `Scanner` is automatically closed, preventing resource leaks.
 *     *   **Encapsulation:** The collections (`waitingQueue`, `processedAppointments`) are `private`, accessible only through the class's methods.
 * 
 * 3.  **Methods:**
 *     *   **`addAppointment(Scanner scanner)`:** Reads patient name and type using the provided `Scanner`. It includes basic input validation (`patientName.isEmpty()`) and uses `scanner.nextLine().trim()` to handle potential leading/trailing whitespace and correctly consume the entire line after reading. `waitingQueue.offer()` adds the new `Appointment` to the queue.
 *     *   **`processNextAppointment()`:** Uses `waitingQueue.poll()` to retrieve and remove the head of the queue. `poll()` is preferred over `remove()` in this context because it returns `null` if the queue is empty, allowing for graceful handling without throwing a `NoSuchElementException`. If an appointment is retrieved, it's added to the `processedAppointments` list. Error messages for an empty queue are printed to `System.err`.
 *     *   **`viewWaitingQueue()`:** Iterates through the `waitingQueue` (which provides an iterator view without modifying the queue) and prints each appointment.
 *     *   **`viewProcessedAppointments()`:** Iterates through the `processedAppointments` `List` and prints each processed appointment.
 *     *   **`displayMenu()`:** A simple helper method to print the menu options to `System.out`.
 * 
 * 4.  **`main` Method:**
 *     *   Sets up the `HospitalAppointmentSystem` and the main application loop (`while(running)`).
 *     *   Uses a **try-with-resources** block for the `Scanner` instance (`try (Scanner scanner = new Scanner(System.in)) { ... }`) to ensure it is closed automatically upon exiting the block.
 *     *   Implements **class-wide exception handling** by wrapping the main `while` loop within a `try-catch(Exception e)` block. This catches any unhandled exceptions that might occur during the execution of the menu operations.
 *     *   Includes a **nested `try-catch(InputMismatchException e)`** specifically for reading the integer menu choice. This handles cases where the user enters non-numeric input. The `scanner.next()` or `scanner.nextLine()` in the `finally` block is crucial after reading an integer to consume the remaining newline character, preventing input issues in subsequent `nextLine()` calls in other methods.
 *     *   Uses a **`switch` statement** to control the flow based on the user's menu choice, calling the appropriate method for each option.
 *     *   Includes a `default` case in the `switch` to handle invalid integer choices, printing an error to `System.err`.
 * 
 * 5.  **Error Handling (`try-catch`, `System.err`):**
 *     *   Specific `try-catch` blocks are used for anticipated issues like `InputMismatchException` during menu selection.
 *     *   The `poll()` method on the `Queue` is used to avoid `NoSuchElementException` when the queue is empty, handling the empty case explicitly with an `if (nextAppointment == null)` check and printing to `System.err`.
 *     *   Input validation (e.g., checking for empty patient name) is performed within the `addAppointment` method, providing feedback via `System.err`.
 *     *   A general `catch (Exception e)` block in `main` acts as a fallback for any other unexpected runtime errors, printing a generic error message to `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names (`waitingQueue`, `processNextAppointment`, `patientName`).
 *     *   Comments explaining the purpose of classes and methods (Javadoc-style).
 *     *   Encapsulation (private fields).
 *     *   Input validation and clear error messages using `System.err`.
 *     *   Proper resource management (`Scanner` closed via try-with-resources).
 *     *   Clear separation of concerns (Appointment data vs. System logic).
 * 
 * This solution effectively utilizes all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) in a cohesive program that simulates a real-world scenario, demonstrating advanced understanding of Java collections, I/O, control flow, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner nextInt issues
import java.util.NoSuchElementException; // Specific exception for Queue operations

/**
 * Represents a patient appointment with basic details.
 */
class Appointment {
    private String patientName;
    private String appointmentType;

    /**
     * Constructs a new Appointment.
     * @param patientName The name of the patient.
     * @param appointmentType The type of appointment (e.g., General, Specialist).
     */
    public Appointment(String patientName, String appointmentType) {
        this.patientName = patientName;
        this.appointmentType = appointmentType;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getPatientName() {
        return patientName;
    }

    /**
     * Gets the appointment type.
     * @return The appointment type.
     */
    public String getAppointmentType() {
        return appointmentType;
    }

    @Override
    public String toString() {
        return patientName + " (" + appointmentType + ")";
    }
}

/**
 * Manages hospital appointments using a waiting queue and a processed list.
 */
public class HospitalAppointmentSystem {

    private Queue<Appointment> waitingQueue;
    private List<Appointment> processedAppointments;
    private Scanner scanner;

    /**
     * Constructs a new HospitalAppointmentSystem.
     * Initializes the waiting queue and processed appointments list.
     */
    public HospitalAppointmentSystem() {
        // Using LinkedList as a concrete implementation of Queue
        this.waitingQueue = new LinkedList<>();
        // Using ArrayList as the concrete implementation of List
        this.processedAppointments = new ArrayList<>();
        // Scanner is initialized in main and passed or managed carefully.
        // For this structure, let's initialize it here and manage its closing.
        // Better practice might be passing it, but this simplifies the exam structure.
        // Using try-with-resources in main is crucial for closing.
    }

    /**
     * Adds a new appointment to the waiting queue based on user input.
     * @param scanner The Scanner object for reading user input.
     */
    public void addAppointment(Scanner scanner) {
        System.out.print("Enter patient name: ");
        String patientName = scanner.nextLine().trim(); // Use nextLine() and trim

        // Basic input validation
        if (patientName.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        System.out.print("Enter appointment type: ");
        String appointmentType = scanner.nextLine().trim(); // Use nextLine() and trim

        // Optional: More validation for appointment type if needed

        Appointment newAppointment = new Appointment(patientName, appointmentType);
        waitingQueue.offer(newAppointment); // offer() is safer than add() as it doesn't throw exception on capacity limits (though LinkedList is unbounded)
        System.out.println("Appointment for " + newAppointment + " added to the waiting queue.");
    }

    /**
     * Processes the next appointment from the waiting queue.
     * Removes it from the queue and adds it to the processed list.
     */
    public void processNextAppointment() {
        // poll() is safer than remove() as it returns null if queue is empty
        Appointment nextAppointment = waitingQueue.poll();

        if (nextAppointment == null) {
            System.err.println("Error: No appointments in the waiting queue to process.");
        } else {
            System.out.println("Processing appointment for " + nextAppointment + "...");
            processedAppointments.add(nextAppointment);
            System.out.println("Appointment processed.");
        }
    }

    /**
     * Displays the appointments currently in the waiting queue.
     */
    public void viewWaitingQueue() {
        System.out.println("--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            int index = 1;
            // Iterating over the queue provides a view without removing elements
            for (Appointment appointment : waitingQueue) {
                System.out.println(index++ + ". " + appointment);
            }
        }
        System.out.println("--- End of Waiting Queue ---");
    }

    /**
     * Displays the appointments that have been processed.
     */
    public void viewProcessedAppointments() {
        System.out.println("--- Processed Appointments ---");
        if (processedAppointments.isEmpty()) {
            System.out.println("No appointments have been processed yet.");
        } else {
            int index = 1;
            for (Appointment appointment : processedAppointments) {
                System.out.println(index++ + ". " + appointment);
            }
        }
        System.out.println("--- End of Processed Appointments ---");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add New Appointment");
        System.out.println("2. Process Next Appointment");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Processed Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * The main method to run the Hospital Appointment System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Use try-with-resources to ensure the Scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            HospitalAppointmentSystem system = new HospitalAppointmentSystem();
            boolean running = true;

            // Class-wide exception handling around the main loop
            try {
                while (running) {
                    system.displayMenu();
                    int choice = -1;
                    // Use a nested try-catch for input parsing
                    try {
                        choice = scanner.nextInt();
                    } catch (InputMismatchException e) {
                        System.err.println("Error: Invalid input. Please enter a number.");
                        scanner.next(); // Consume the invalid input
                        continue; // Skip the rest of the loop and show menu again
                    } finally {
                         // Consume the newline character left by nextInt()
                         scanner.nextLine();
                    }


                    // Switch statement for menu control
                    switch (choice) {
                        case 1:
                            system.addAppointment(scanner);
                            break;
                        case 2:
                            system.processNextAppointment();
                            break;
                        case 3:
                            system.viewWaitingQueue();
                            break;
                        case 4:
                            system.viewProcessedAppointments();
                            break;
                        case 5:
                            running = false;
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            break;
                        default:
                            System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                            break;
                    }
                }
            } catch (Exception e) {
                // Catch any unexpected runtime exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }

        } // Scanner is automatically closed here by try-with-resources
    }
}
