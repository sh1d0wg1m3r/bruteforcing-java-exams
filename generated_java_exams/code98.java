/*
 * Exam Question #98
 * Generated on: 2025-05-11 22:13:59
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Help Desk Ticket Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a basic command-line application to simulate a Help Desk Ticket Management System. The system should allow users to submit new support tickets, process the next ticket in the queue, view the list of pending tickets, and see which agents are available. Tickets are processed in the order they are received.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must be implemented in Java and adhere strictly to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage pending support tickets. Tickets should be processed in First-In, First-Out (FIFO) order.
 *     *   Use a `java.util.ArrayList` as the concrete implementation for a collection of available agents.
 *     *   Declare the collection of available agents using the `java.util.List` interface type.
 * 2.  **Input/Output:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Use `System.out` for displaying menus, system information, and ticket details.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, trying to process a ticket when the queue is empty).
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the main menu options chosen by the user.
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main application loop to gracefully handle potential runtime errors, especially related to user input (like entering non-numeric values for menu options) or system state (like attempting operations on an empty queue).
 * 5.  **Object-Oriented Design:**
 *     *   Create a `Ticket` class to represent a single support ticket (with properties like ID, description, status, assigned agent).
 *     *   Create a `HelpDeskSystem` class that encapsulates the ticket queue, the list of agents, and the core system logic (adding tickets, processing tickets, viewing lists).
 *     *   Ensure proper encapsulation using `private` fields and `public` methods.
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style comments for classes and methods).
 *     *   Implement basic input validation where necessary (e.g., ensuring menu choice is valid).
 *     *   Structure the code cleanly.
 * 
 * **Functionality Details:**
 * 
 * *   The system should start with a few predefined agents.
 * *   Each ticket should have a unique automatically generated ID.
 * *   The main loop should present a menu with options:
 *     1.  Submit New Ticket
 *     2.  Process Next Ticket
 *     3.  View Pending Tickets
 *     4.  View Available Agents
 *     5.  Exit
 * *   **Submit New Ticket:** Prompts the user for a ticket description and adds a new ticket to the pending queue with a unique ID and "Pending" status.
 * *   **Process Next Ticket:** Removes the next ticket from the queue. If the queue is empty, print an error to `System.err`. If there are agents, assign the ticket to the first available agent (for simplicity, just pick the first agent from the list). Update the ticket status (e.g., to "Processing") and print its details to `System.out`. If no agents are available, indicate that the ticket is being processed by the "System".
 * *   **View Pending Tickets:** Displays the details of all tickets currently in the pending queue. If the queue is empty, print a message to `System.out`.
 * *   **View Available Agents:** Displays the list of agents.
 * *   **Exit:** Terminates the application.
 * 
 * **Expected Output:**
 * 
 * The application should run interactively. Example interactions might look like:
 * 
 * ```
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Available Agents
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: My printer is not working.
 * Ticket 1 submitted: My printer is not working. Status: Pending
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Available Agents
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tickets ---
 * ID: 1, Description: My printer is not working., Status: Pending, Assigned Agent: None
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Available Agents
 * 5. Exit
 * Enter your choice: 2
 * Processing ticket 1: My printer is not working. Assigned to Agent Alpha.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Available Agents
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tickets ---
 * No pending tickets.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Available Agents
 * 5. Exit
 * Enter your choice: invalid_input
 * Error: Invalid input. Please enter a number.
 * ```
 * 
 * Your solution should be provided as a single block of code containing all necessary classes.
 * 
 * **Time Allotment:** 45-60 minutes
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of all required Java components.
 * *   Correct implementation of the specified functionality.
 * *   Effective use of object-oriented principles (encapsulation).
 * *   Robust input validation and error handling using `try-catch` and `System.err`.
 * *   Clean code structure, meaningful names, and comments.
 *
 * EXPLANATION:
 * This solution implements a basic Help Desk Ticket Management System, fulfilling all the specified requirements and demonstrating advanced Java concepts.
 * 
 * 1.  **`Ticket` Class:** This class is a simple Plain Old Java Object (POJO) representing a ticket. It has `private` fields (`id`, `description`, `status`, `assignedAgent`) to enforce encapsulation. Public getter and setter methods provide controlled access to the ticket's state. The `toString()` method is overridden for easy printing of ticket details.
 * 
 * 2.  **`HelpDeskSystem` Class:** This is the core class managing the system's state and logic.
 *     *   `pendingTickets`: Declared as a `Queue<Ticket>` and initialized with a `LinkedList`. This correctly models the FIFO nature of a ticket queue, ensuring tickets are processed in the order they are submitted.
 *     *   `availableAgents`: Declared as a `List<String>` and initialized with an `ArrayList`. This stores the names of agents, demonstrating the use of the `List` interface with a concrete `ArrayList` implementation.
 *     *   `nextTicketId`: A simple counter to generate unique ticket IDs.
 *     *   **Encapsulation:** All data fields are `private`. Public methods like `addTicket`, `processNextTicket`, `viewPendingTickets`, and `viewAvailableAgents` provide the interface for interacting with the system.
 *     *   **`addTicket(String description)`:** Creates a new `Ticket` object with the next available ID and adds it to the `pendingTickets` queue using `offer()`. `offer()` is preferred over `add()` for queues as it returns `false` if the element cannot be added (though for `LinkedList`, it typically won't fail unless memory is exhausted).
 *     *   **`processNextTicket()`:**
 *         *   Checks if the `pendingTickets` queue is empty using `isEmpty()`. If so, it prints an error to `System.err`.
 *         *   If tickets exist, it removes the head of the queue using `poll()`. `poll()` is safe as it returns `null` if the queue is empty (though the preceding check prevents this).
 *         *   It then checks if `availableAgents` is empty. If not, it assigns the ticket to the first agent in the list. If the list is empty, it assigns to a default "System" agent and prints a warning to `System.err`.
 *         *   The ticket's status and assigned agent are updated, and the processing action is printed to `System.out`.
 *     *   **`viewPendingTickets()`:** Iterates through the `pendingTickets` queue using a for-each loop to display the details of each ticket without removing them. It prints a "No pending tickets" message to `System.out` if the queue is empty.
 *     *   **`viewAvailableAgents()`:** Iterates through the `availableAgents` list and prints each agent's name to `System.out`.
 *     *   **`displayMenu()`:** A helper method to print the menu options to `System.out`.
 *     *   **`run()`:** This method contains the main application loop.
 *         *   It uses a `try-with-resources` block to ensure the `Scanner` is automatically closed when the method exits, which is a best practice for managing resources.
 *         *   A `while(running)` loop keeps the application active until the user chooses to exit.
 *         *   Inside the loop, a `try-catch` block is used for class-wide exception handling.
 *             *   `try`: Contains the logic for displaying the menu, reading the user's choice (`scanner.nextInt()`), consuming the leftover newline (`scanner.nextLine()`), and the `switch` statement.
 *             *   `catch (InputMismatchException e)`: Specifically catches errors when the user enters non-integer input for the menu choice. An error message is printed to `System.err`, and `scanner.next()` is called to consume the invalid token, preventing an infinite loop caused by the scanner repeatedly failing on the same input.
 *             *   `catch (Exception e)`: A general catch block to handle any other unexpected runtime exceptions that might occur within the loop iteration. The error message is printed to `System.err`.
 *         *   The `switch` statement handles the user's valid integer input, calling the appropriate `HelpDeskSystem` methods or setting the `running` flag to `false` for the exit case. A `default` case handles invalid integer choices, printing an error to `System.err`.
 *         *   Input validation is performed for the ticket description to ensure it's not empty.
 * 
 * 3.  **`HelpDeskApp` Class:** This is the main class with the `main` method. Its sole purpose is to create an instance of `HelpDeskSystem` and call its `run()` method to start the application.
 * 
 * This solution effectively integrates the required data structures (`Queue`, `List`, `ArrayList`), input/output mechanisms (`Scanner`, `System.out`, `System.err`), control flow (`switch`), and error handling (`try-catch`) within a practical, object-oriented structure, demonstrating a solid understanding of these core Java concepts.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single support ticket in the help desk system.
 */
class Ticket {
    private int id;
    private String description;
    private String status; // e.g., "Pending", "Processing", "Resolved"
    private String assignedAgent; // Can be null

    /**
     * Constructs a new Ticket.
     * @param id The unique ID for the ticket.
     * @param description The description of the issue.
     */
    public Ticket(int id, String description) {
        this.id = id;
        this.description = description;
        this.status = "Pending";
        this.assignedAgent = null;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    public String getAssignedAgent() {
        return assignedAgent;
    }

    // --- Setters ---
    public void setStatus(String status) {
        this.status = status;
    }

    public void setAssignedAgent(String assignedAgent) {
        this.assignedAgent = assignedAgent;
    }

    /**
     * Provides a string representation of the Ticket.
     * @return Formatted string with ticket details.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Description: %s, Status: %s, Assigned Agent: %s",
                             id, description, status, (assignedAgent == null ? "None" : assignedAgent));
    }
}

/**
 * Manages the help desk system, including the ticket queue and agents.
 */
class HelpDeskSystem {
    // Using LinkedList as a concrete implementation of Queue for FIFO
    private Queue<Ticket> pendingTickets;
    // Using ArrayList as a concrete implementation of List for agents
    private List<String> availableAgents;
    private int nextTicketId;

    /**
     * Constructs a new HelpDeskSystem.
     * Initializes the ticket queue, agents list, and ticket ID counter.
     */
    public HelpDeskSystem() {
        this.pendingTickets = new LinkedList<>();
        this.availableAgents = new ArrayList<>();
        this.nextTicketId = 1;

        // Add some initial agents
        availableAgents.add("Agent Alpha");
        availableAgents.add("Agent Beta");
        availableAgents.add("Agent Gamma");
    }

    /**
     * Adds a new ticket to the pending queue.
     * @param description The description of the issue.
     */
    public void addTicket(String description) {
        Ticket newTicket = new Ticket(nextTicketId++, description);
        pendingTickets.offer(newTicket); // offer is safer than add for queues
        System.out.println("Ticket " + newTicket.getId() + " submitted: " + newTicket.getDescription() + ". Status: " + newTicket.getStatus());
    }

    /**
     * Processes the next ticket from the pending queue.
     * Assigns it to an available agent (or "System" if none available).
     */
    public void processNextTicket() {
        if (pendingTickets.isEmpty()) {
            System.err.println("Error: No pending tickets to process.");
            return;
        }

        Ticket ticketToProcess = pendingTickets.poll(); // poll returns null if empty, but we checked already
        String assignedAgent = "System"; // Default if no agents available

        if (!availableAgents.isEmpty()) {
            // For simplicity, just assign to the first agent in the list
            assignedAgent = availableAgents.get(0);
        } else {
            System.err.println("Warning: No agents available, assigning ticket " + ticketToProcess.getId() + " to System.");
        }

        ticketToProcess.setStatus("Processing");
        ticketToProcess.setAssignedAgent(assignedAgent);

        System.out.println("Processing ticket " + ticketToProcess.getId() + ": " + ticketToProcess.getDescription() + ". Assigned to " + assignedAgent + ".");
        // In a real system, the ticket might move to a 'processing' list here
    }

    /**
     * Displays all tickets currently in the pending queue.
     */
    public void viewPendingTickets() {
        System.out.println("--- Pending Tickets ---");
        if (pendingTickets.isEmpty()) {
            System.out.println("No pending tickets.");
        } else {
            // Iterating over the queue without removing elements
            for (Ticket ticket : pendingTickets) {
                System.out.println(ticket);
            }
        }
    }

    /**
     * Displays the list of available agents.
     */
    public void viewAvailableAgents() {
        System.out.println("--- Available Agents ---");
        if (availableAgents.isEmpty()) {
            System.out.println("No agents currently available.");
        } else {
            for (String agent : availableAgents) {
                System.out.println("- " + agent);
            }
        }
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("\n--- Help Desk Menu ---");
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Available Agents");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and menu options.
     */
    public void run() {
        // Use try-with-resources to ensure the scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            boolean running = true;
            while (running) {
                displayMenu();

                try {
                    int choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();

                    switch (choice) {
                        case 1:
                            System.out.print("Enter ticket description: ");
                            String description = scanner.nextLine();
                            if (description == null || description.trim().isEmpty()) {
                                System.err.println("Error: Ticket description cannot be empty.");
                            } else {
                                addTicket(description);
                            }
                            break;
                        case 2:
                            processNextTicket();
                            break;
                        case 3:
                            viewPendingTickets();
                            break;
                        case 4:
                            viewAvailableAgents();
                            break;
                        case 5:
                            System.out.println("Exiting Help Desk System. Goodbye!");
                            running = false; // Set flag to exit loop
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Handles cases where user enters non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                    // Consume the invalid input to prevent an infinite loop
                    scanner.next();
                } catch (Exception e) {
                    // Catch any other unexpected runtime exceptions during loop execution
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for debugging
                }
            }
        } // Scanner is automatically closed here by try-with-resources
    }
}

/**
 * Main class to start the Help Desk Ticket Management System.
 */
public class HelpDeskApp {
    public static void main(String[] args) {
        HelpDeskSystem system = new HelpDeskSystem();
        system.run();
    }
}
