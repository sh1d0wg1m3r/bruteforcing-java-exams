/*
 * Exam Question #802
 * Generated on: 2025-05-12 16:42:52
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam: Hospital Patient Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Patient Management System. The system needs to manage registered patients and handle an urgent care waiting list. Patients can be registered, added to the urgent care queue, processed from the urgent care queue, and lists of patients/waiting queue can be viewed.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with `patientId` (int) and `name` (String). Ensure proper encapsulation (private fields, public getters). Override `toString()` for easy printing.
 * 2.  **Hospital Management Class:** Create a `HospitalManagement` class to encapsulate the system logic.
 *     *   It must maintain a collection of all registered patients. Use a `List` interface type, implemented by an `ArrayList`.
 *     *   It must maintain an urgent care waiting list. Use a `Queue` interface type, implemented by `java.util.LinkedList` (a common `Queue` implementation).
 *     *   Include methods for the required operations (see below).
 *     *   Use a simple counter within this class to generate unique `patientId`s.
 * 3.  **Functionality:** The system must support the following operations via a command-line interface:
 *     *   **Register Patient:** Prompt for the patient's name, create a new `Patient` object with a unique ID, and add it to the list of registered patients. Print the registered patient's ID and name.
 *     *   **Add to Urgent Care:** Prompt for a `patientId`, find the patient in the registered list, and add them to the urgent care waiting list. If the patient ID is not found, print an error message.
 *     *   **Process Next Urgent Care Patient:** Remove and retrieve the patient at the front of the urgent care waiting list. Print a message indicating which patient is being processed. If the queue is empty, print a message indicating that.
 *     *   **View Registered Patients:** List all registered patients (ID and name). If the list is empty, print a message.
 *     *   **View Urgent Care Waiting List:** List all patients currently in the urgent care waiting list (ID and name) in queue order. If the queue is empty, print a message.
 *     *   **Exit:** Terminate the program.
 * 4.  **User Interface:** Implement a simple command-line menu using `java.util.Scanner` to get user input for selecting operations and providing necessary details (like patient name or ID).
 * 5.  **Control Flow:** Use a `switch` statement to handle the user's menu selection.
 * 6.  **Error Handling:**
 *     *   Use `try-catch` blocks to handle potential exceptions, particularly when parsing user input (e.g., expecting an integer ID).
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, patient not found, invalid menu choice).
 *     *   Use `System.out` for displaying normal output (menu, successful operations, lists).
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation.
 *     *   Use meaningful variable and method names.
 *     *   Include comments and basic documentation (Javadocs for classes/methods).
 *     *   Validate user input where appropriate (e.g., check if patient ID exists).
 *     *   Ensure the `Scanner` resource is properly managed (closed).
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt the user for input, and display output based on the selected operation. Error messages should go to standard error, and normal output to standard output.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Hospital Management Menu ---
 * 1. Register Patient
 * 2. Add to Urgent Care
 * 3. Process Next Urgent Care Patient
 * 4. View Registered Patients
 * 5. View Urgent Care Waiting List
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient registered: ID=1, Name=Alice
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient registered: ID=2, Name=Bob
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Enter patient ID to add to urgent care: 1
 * Patient ID 1 (Alice) added to urgent care waiting list.
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Enter patient ID to add to urgent care: 3
 * Error: Patient with ID 3 not found.
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 5
 * Urgent Care Waiting List:
 * Patient ID=1, Name=Alice
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 3
 * Processing urgent care patient: Patient ID=1, Name=Alice
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 3
 * Urgent care waiting list is empty.
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 4
 * Registered Patients:
 * Patient ID=1, Name=Alice
 * Patient ID=2, Name=Bob
 * 
 * --- Hospital Management Menu ---
 * ... (menu repeats) ...
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic Hospital Patient Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Patient` Class:** This class encapsulates the data for a patient (`patientId`, `name`) with private fields and public getter methods, adhering to encapsulation principles. The `toString()` method provides a convenient way to represent patient objects as strings for printing.
 * 
 * 2.  **`HospitalManagement` Class:** This class acts as the core logic handler.
 *     *   It uses `List<Patient> registeredPatients = new ArrayList<>();` to store all patients. `List` is used as the interface type, promoting flexibility, while `ArrayList` provides the concrete implementation suitable for accessing and iterating through registered patients.
 *     *   It uses `Queue<Patient> urgentCareWaitingList = new LinkedList<>();` for the urgent care queue. `Queue` ensures FIFO behavior, and `LinkedList` is a common and efficient implementation for queue operations (`offer`, `poll`).
 *     *   `nextPatientId` provides a simple mechanism for generating unique IDs.
 *     *   Methods like `registerPatient`, `addToUrgentCare`, `processNextUrgentCarePatient`, `findPatientById`, `getRegisteredPatients`, and `getUrgentCareWaitingList` encapsulate the system's operations. `findPatientById` is a private helper method, demonstrating good design by breaking down tasks.
 * 
 * 3.  **`HospitalSystem` Class (Main):** This class contains the `main` method and handles the user interface logic.
 *     *   A `Scanner` object is used to read input from `System.in`. It's declared as `static` and managed carefully to ensure it's closed at the end of the program using a `finally` block within the main `try-catch`.
 *     *   The `runSystem` method contains the main application loop. It repeatedly displays a menu and prompts for user input.
 *     *   A `try-catch` block is used around `Integer.parseInt(scanner.nextLine())` when reading the menu choice to gracefully handle `NumberFormatException` if the user enters non-numeric input, printing an error to `System.err`. A similar `try-catch` is used when reading the patient ID for the urgent care queue.
 *     *   A `switch` statement is used based on the parsed integer choice to direct the program flow to the appropriate handling method (e.g., `registerPatient()`, `addToUrgentCare()`). The `default` case handles invalid menu numbers, printing an error to `System.err`.
 *     *   Separate private methods (`registerPatient`, `addToUrgentCare`, etc.) are used to handle the logic for each menu option, improving code organization and readability.
 *     *   `System.out.println()` is used for normal program output, such as menus, successful operation confirmations, and list contents.
 *     *   `System.err.println()` is used specifically for error messages, such as invalid input formats, patient not found errors, or invalid menu choices.
 *     *   A top-level `try-catch` block in `main` wraps the `runSystem()` call. While the specific menu logic handles input errors, this outer block provides a safety net for any other unexpected runtime exceptions that might occur, ensuring the program doesn't crash abruptly and the `Scanner` is closed in the `finally` block.
 * 
 * 4.  **Usage of Required Components:**
 *     *   `Queue`: Used for `urgentCareWaitingList` (FIFO behavior). `offer` and `poll` methods are used.
 *     *   `ArrayList`: Used as the concrete implementation for `registeredPatients`.
 *     *   `List`: Used as the interface type for `registeredPatients`.
 *     *   `Scanner`: Used in `HospitalSystem` to read user input from the console.
 *     *   `Switch`: Used in `runSystem` to handle the main menu choices.
 *     *   `System.err`: Used for all error messages.
 *     *   `System.out`: Used for all normal output.
 *     *   `try-catch`: Used for handling `NumberFormatException` during input parsing and a general catch for unexpected errors in `main`.
 * 
 * This solution effectively integrates all required components into a functional program that simulates a practical scenario, while adhering to good programming practices like encapsulation, meaningful naming, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int patientId;
    private String name;

    /**
     * Constructs a new Patient.
     * @param patientId The unique ID for the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getPatientId() {
        return patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the Patient.
     * @return A string in the format "Patient ID=..., Name=...".
     */
    @Override
    public String toString() {
        return "Patient ID=" + patientId + ", Name=" + name;
    }
}

/**
 * Manages hospital patients and the urgent care waiting list.
 */
class HospitalManagement {
    // Using List interface, implemented by ArrayList for general patient registry
    private List<Patient> registeredPatients;
    // Using Queue interface, implemented by LinkedList for urgent care FIFO
    private Queue<Patient> urgentCareWaitingList;
    private int nextPatientId;

    /**
     * Constructs a new HospitalManagement system.
     * Initializes patient lists and ID counter.
     */
    public HospitalManagement() {
        this.registeredPatients = new ArrayList<>();
        this.urgentCareWaitingList = new LinkedList<>();
        this.nextPatientId = 1; // Start patient IDs from 1
    }

    /**
     * Registers a new patient with a unique ID.
     * @param name The name of the patient to register.
     * @return The newly registered Patient object.
     */
    public Patient registerPatient(String name) {
        Patient newPatient = new Patient(nextPatientId++, name);
        registeredPatients.add(newPatient);
        return newPatient;
    }

    /**
     * Finds a patient by their ID in the registered patients list.
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findPatientById(int patientId) {
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Adds a registered patient to the urgent care waiting list.
     * @param patientId The ID of the patient to add.
     * @return The Patient object added to the queue, or null if patient not found.
     */
    public Patient addToUrgentCare(int patientId) {
        Patient patient = findPatientById(patientId);
        if (patient != null) {
            urgentCareWaitingList.offer(patient); // offer is generally preferred over add for queues
            return patient;
        }
        return null; // Patient not found
    }

    /**
     * Processes (removes) the next patient from the urgent care waiting list.
     * @return The Patient object processed, or null if the queue is empty.
     */
    public Patient processNextUrgentCarePatient() {
        // poll retrieves and removes the head of the queue, returns null if empty
        return urgentCareWaitingList.poll();
    }

    /**
     * Gets the list of all registered patients.
     * @return The list of registered patients.
     */
    public List<Patient> getRegisteredPatients() {
        return registeredPatients;
    }

    /**
     * Gets the urgent care waiting list.
     * @return The queue of patients in urgent care.
     */
    public Queue<Patient> getUrgentCareWaitingList() {
        return urgentCareWaitingList;
    }
}

/**
 * Main class to run the Hospital Patient Management System.
 * Handles user interaction and orchestrates operations.
 */
public class HospitalSystem {

    private static HospitalManagement hospital = new HospitalManagement();
    private static Scanner scanner = new Scanner(System.in);

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Hospital Management Menu ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Add to Urgent Care");
        System.out.println("3. Process Next Urgent Care Patient");
        System.out.println("4. View Registered Patients");
        System.out.println("5. View Urgent Care Waiting List");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Main method to run the hospital system application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Class-wide try-catch block for potential unexpected exceptions
        try {
            runSystem();
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Optional: for debugging
        } finally {
            // Ensure scanner is closed even if an exception occurs
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("System terminated.");
        }
    }

    /**
     * Contains the main loop for the hospital system operations.
     */
    private static void runSystem() {
        boolean running = true;

        while (running) {
            displayMenu();

            // Use try-catch for reading the integer choice
            int choice = -1; // Default to an invalid choice
            try {
                // Check if there's an integer available, otherwise read as String
                // to handle non-integer input gracefully without crashing nextInt()
                String inputLine = scanner.nextLine();
                choice = Integer.parseInt(inputLine);

            } catch (NumberFormatException e) {
                // Handle non-integer input specifically
                System.err.println("Error: Invalid input. Please enter a number.");
                continue; // Skip to the next loop iteration
            } catch (Exception e) {
                 // Catch any other potential issues during input
                 System.err.println("Error reading input: " + e.getMessage());
                 continue;
            }


            // Use switch statement for menu navigation
            switch (choice) {
                case 1:
                    registerPatient();
                    break;
                case 2:
                    addToUrgentCare();
                    break;
                case 3:
                    processNextUrgentCarePatient();
                    break;
                case 4:
                    viewRegisteredPatients();
                    break;
                case 5:
                    viewUrgentCareWaitingList();
                    break;
                case 6:
                    running = false; // Exit the loop
                    System.out.println("Exiting system.");
                    break;
                default:
                    // Handle invalid menu choices
                    System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    break;
            }
        }
    }

    /**
     * Handles the registration of a new patient.
     */
    private static void registerPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return;
        }
        Patient newPatient = hospital.registerPatient(name.trim());
        System.out.println("Patient registered: " + newPatient);
    }

    /**
     * Handles adding a patient to the urgent care queue.
     */
    private static void addToUrgentCare() {
        System.out.print("Enter patient ID to add to urgent care: ");
        // Use try-catch for parsing the patient ID input
        try {
            int patientId = Integer.parseInt(scanner.nextLine());
            Patient patient = hospital.addToUrgentCare(patientId);
            if (patient != null) {
                System.out.println("Patient ID " + patientId + " (" + patient.getName() + ") added to urgent care waiting list.");
            } else {
                // Error message for patient not found goes to System.err
                System.err.println("Error: Patient with ID " + patientId + " not found.");
            }
        } catch (NumberFormatException e) {
            // Error message for invalid ID format goes to System.err
            System.err.println("Error: Invalid patient ID format. Please enter a number.");
        }
    }

    /**
     * Handles processing the next patient from the urgent care queue.
     */
    private static void processNextUrgentCarePatient() {
        Patient nextPatient = hospital.processNextUrgentCarePatient();
        if (nextPatient != null) {
            System.out.println("Processing urgent care patient: " + nextPatient);
        } else {
            System.out.println("Urgent care waiting list is empty.");
        }
    }

    /**
     * Handles displaying all registered patients.
     */
    private static void viewRegisteredPatients() {
        List<Patient> patients = hospital.getRegisteredPatients();
        if (patients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            System.out.println("Registered Patients:");
            for (Patient patient : patients) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Handles displaying the urgent care waiting list.
     */
    private static void viewUrgentCareWaitingList() {
        Queue<Patient> waitingList = hospital.getUrgentCareWaitingList();
        if (waitingList.isEmpty()) {
            System.out.println("Urgent care waiting list is empty.");
        } else {
            System.out.println("Urgent Care Waiting List:");
            // Iterate through the queue without removing elements (using a copy or iterator)
            // Simple iteration is fine for display purposes
            for (Patient patient : waitingList) {
                System.out.println(patient);
            }
        }
    }
}
