/*
 * Exam Question #991
 * Generated on: 2025-05-12 17:09:37
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment and Waiting List System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment management system for a small hospital. The system needs to handle booking appointments with specific doctors and managing a waiting list for patients when a doctor is unavailable.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system with the following features:
 * 
 * 1.  **Core Data Structures:**
 *     *   Maintain a list of available doctors.
 *     *   Maintain a list of currently booked appointments. Assume for simplicity that each doctor can only be booked by **one** patient at any given time.
 *     *   Maintain a waiting list for each doctor. If a patient tries to book an appointment with a doctor who is already booked, they are added to that doctor's waiting list.
 * 
 * 2.  **User Interaction:**
 *     *   Present a menu-driven interface to the user.
 *     *   Allow the user to perform the following actions:
 *         *   View available doctors.
 *         *   Book an appointment: Prompt for patient name and doctor name.
 *         *   Cancel an appointment: Prompt for patient name and doctor name.
 *         *   View currently booked appointments.
 *         *   View the waiting list for a specific doctor.
 *         *   Exit the application.
 * 
 * 3.  **System Logic:**
 *     *   When booking:
 *         *   Check if the requested doctor exists. If not, display an error.
 *         *   Check if the doctor is currently booked.
 *         *   If the doctor is free, book the appointment.
 *         *   If the doctor is booked, add the patient to the *end* of that doctor's waiting list.
 *     *   When cancelling:
 *         *   Check if the specified appointment exists (patient + doctor match). If not, display an error.
 *         *   If the appointment exists, remove it.
 *         *   Check the waiting list for that doctor. If there are patients waiting, automatically book the *first* patient from the waiting list into the newly freed slot.
 * 
 * 4.  **Required Java Components:**
 *     *   `java.util.Queue` (used for waiting lists)
 *     *   `java.util.ArrayList` (used for lists where dynamic resizing and direct access might be beneficial, like storing doctors or booked appointments)
 *     *   `java.util.List` interface (used for variable declarations or method return types where appropriate, demonstrating abstraction)
 *     *   `java.util.Scanner` (for reading user input)
 *     *   `switch` statement (for handling menu choices)
 *     *   `System.err` (for displaying error messages)
 *     *   `System.out` (for displaying menu, prompts, success messages, and lists)
 *     *   Class-wide exception handling with `try-catch` blocks (wrap the main application loop or critical sections to handle potential runtime errors like invalid input).
 * 
 * 5.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Implement basic input validation (e.g., checking if doctor exists, handling non-numeric input for menu).
 *     *   Ensure resources like `Scanner` are closed properly.
 *     *   Structure your code into appropriate classes (e.g., `Patient`, `Doctor`, `Appointment`, `HospitalAppointmentSystem`).
 * 
 * **Implementation Details:**
 * 
 * *   You can pre-populate a few doctors in the system for simplicity.
 * *   Assume patient names and doctor names are unique for identification within the system.
 * *   The `Appointment` class should link a `Patient` to a `Doctor`.
 * *   The waiting lists can be managed using a `Map<String, Queue<Patient>>` where the key is the doctor's name.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input based on the selected option, and providing feedback (success messages, error messages via `System.err`, or list displays).
 * 
 * Example interaction flow:
 * 
 * ```
 * Hospital Appointment System Menu:
 * 1. View Doctors
 * 2. Book Appointment
 * 3. Cancel Appointment
 * 4. View Booked Appointments
 * 5. View Doctor's Waiting List
 * 6. Exit
 * Enter choice: 1
 * 
 * --- Available Doctors ---
 * - Dr. Smith
 * - Dr. Jones
 * - Dr. Adams
 * ------------------------
 * 
 * Hospital Appointment System Menu:
 * 1. View Doctors
 * 2. Book Appointment
 * 3. Cancel Appointment
 * 4. View Booked Appointments
 * 5. View Doctor's Waiting List
 * 6. Exit
 * Enter choice: 2
 * Enter patient name: Alice
 * Enter doctor name (e.g., Smith): Dr. Smith
 * Appointment booked for Alice with Dr. Smith.
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 2
 * Enter patient name: Bob
 * Enter doctor name (e.g., Smith): Dr. Smith
 * Dr. Smith is currently booked. Bob added to the waiting list.
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 4
 * 
 * --- Booked Appointments ---
 * Patient: Alice, Doctor: Dr. Smith
 * --------------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 5
 * Enter doctor name (e.g., Smith): Dr. Smith
 * 
 * --- Waiting List for Dr. Smith ---
 * - Bob
 * ---------------------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 3
 * Enter patient name for cancellation: Alice
 * Enter doctor name for cancellation (e.g., Smith): Dr. Smith
 * Appointment for Alice with Dr. Smith cancelled.
 * Slot freed by cancellation. Bob from the waiting list is now booked with Dr. Smith.
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 4
 * 
 * --- Booked Appointments ---
 * Patient: Bob, Doctor: Dr. Smith
 * --------------------------
 * 
 * Hospital Appointment System Menu:
 * ...
 * Enter choice: 6
 * Exiting system. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment and Waiting List System, demonstrating the required Java concepts and best practices.
 * 
 * **Core Design:**
 * 
 * *   The system is structured around a `HospitalAppointmentSystem` class which acts as the main controller.
 * *   Helper classes `Patient`, `Doctor`, and `Appointment` represent the core entities with simple encapsulated properties (private fields and public getters).
 * *   The `HospitalApp` class contains the `main` method, handling user interaction, the main application loop, and top-level exception handling.
 * 
 * **Usage of Required Components:**
 * 
 * 1.  **`java.util.Queue`:** Used to implement the waiting lists (`waitingLists`). A `LinkedList` is used because it implements the `Queue` interface and is suitable for FIFO (First-In, First-Out) operations required for a waiting list (`offer` to add to the end, `poll` to remove from the front).
 * 2.  **`java.util.ArrayList`:** Used for `doctors` and `bookedAppointments`. `ArrayList` is chosen for its dynamic size and efficient iteration/access, suitable for managing collections of doctors and current bookings.
 * 3.  **`java.util.List` interface:** The `doctors` and `bookedAppointments` variables in `HospitalAppointmentSystem` are declared using the `List` interface (`private List<Doctor> doctors;`, `private List<Appointment> bookedAppointments;`). This demonstrates programming to the interface, allowing flexibility to change the underlying implementation (e.g., to `LinkedList` or another `List` implementation) without modifying the code that uses these variables, as long as the operations needed are supported by the `List` interface.
 * 4.  **`java.util.Scanner`:** An instance of `Scanner` is created in the `main` method (`HospitalApp`) to read user input from the console (`System.in`) for menu choices and required details (patient name, doctor name).
 * 5.  **`switch` statement:** Used in the `main` method (`HospitalApp`) to handle the user's menu choice, directing the program flow to the appropriate method in the `HospitalAppointmentSystem`.
 * 6.  **`System.err`:** Used specifically for displaying error messages to the user, such as invalid menu choices, doctor not found errors, or issues with booking/cancellation input. This separates error output from normal program output (`System.out`).
 * 7.  **`System.out`:** Used for all normal program output, including displaying the menu, prompting the user for input, printing success messages, and listing doctors, booked appointments, and waiting list contents.
 * 8.  **Class-wide exception handling with `try-catch`:** A large `try-catch` block wraps the main `while` loop in the `main` method (`HospitalApp`). This block specifically catches `InputMismatchException` which can occur if the user enters non-numeric input when a number is expected (like the menu choice). It also includes a general `catch (Exception e)` block to catch any other unexpected runtime exceptions that might occur within the loop, printing an error message and the stack trace to `System.err`. A `finally` block ensures the `Scanner` resource is closed regardless of whether an exception occurred or the loop exited normally.
 * 
 * **System Logic Implementation:**
 * 
 * *   **Booking:** The `bookAppointment` method checks for doctor existence and whether the doctor is currently booked (by iterating through `bookedAppointments`). If booked, the patient is added to the specific doctor's `Queue` using `offer()`. If not booked, a new `Appointment` is created and added to the `bookedAppointments` `ArrayList`.
 * *   **Cancellation:** The `cancelAppointment` method finds the specific appointment in `bookedAppointments` (by iterating). If found, it's removed from the `ArrayList`. Crucially, it then checks the corresponding doctor's `Queue` in `waitingLists`. If the queue is not empty, `poll()` is used to retrieve and remove the first waiting patient, who is then immediately booked into the now-available slot.
 * *   **Viewing:** Methods like `viewDoctors`, `viewBookedAppointments`, and `viewWaitingList` iterate through the respective collections (`doctors` `ArrayList`, `bookedAppointments` `ArrayList`, or the specific doctor's `Queue` via the `Map`) and print the details using `System.out`. Iterating a `Queue` directly (as done in `viewWaitingList`) allows viewing elements without removing them.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** Fields in `Patient`, `Doctor`, `Appointment`, and `HospitalAppointmentSystem` are `private`, accessed and modified only through public methods (getters and system logic methods).
 * *   **Meaningful Names:** Variables (`patientName`, `waitingLists`), methods (`bookAppointment`, `findDoctorByName`), and classes (`HospitalAppointmentSystem`, `Appointment`) have names that clearly indicate their purpose.
 * *   **Comments and Documentation:** Javadoc comments are provided for classes and public methods, explaining their purpose, parameters, and return values. Inline comments are used for clarity where needed.
 * *   **Input Validation:** Basic validation is included, such as checking for empty names and handling non-numeric input for the menu choice using a `try-catch` block specifically for `InputMismatchException`.
 * *   **Resource Management:** The `Scanner` is closed in a `finally` block to release the system resource.
 * *   **Clean Structure:** The code is divided into logical classes, separating data representation (`Patient`, `Doctor`, `Appointment`) from system logic (`HospitalAppointmentSystem`) and the application entry point (`HospitalApp`).
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, object-oriented principles, user interaction handling, and robust error management.
 */

import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.InputMismatchException;

/**
 * Represents a Patient in the hospital system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Represents a Doctor in the hospital system.
 */
class Doctor {
    private String name;

    /**
     * Constructs a new Doctor.
     * @param name The name of the doctor.
     */
    public Doctor(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the doctor.
     * @return The doctor's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Dr. " + name;
    }
}

/**
 * Represents a booked appointment linking a Patient and a Doctor.
 */
class Appointment {
    private Patient patient;
    private Doctor doctor;

    /**
     * Constructs a new Appointment.
     * @param patient The patient for the appointment.
     * @param doctor The doctor for the appointment.
     */
    public Appointment(Patient patient, Doctor doctor) {
        this.patient = patient;
        this.doctor = doctor;
    }

    /**
     * Gets the patient associated with the appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the doctor associated with the appointment.
     * @return The Doctor object.
     */
    public Doctor getDoctor() {
        return doctor;
    }

    @Override
    public String toString() {
        return "Patient: " + patient.getName() + ", Doctor: " + doctor.getName();
    }
}

/**
 * Manages hospital appointments and waiting lists.
 */
class HospitalAppointmentSystem {
    private List<Doctor> doctors;
    private List<Appointment> bookedAppointments;
    private Map<String, Queue<Patient>> waitingLists; // Doctor name -> Queue of waiting patients

    /**
     * Constructs the HospitalAppointmentSystem and initializes data.
     */
    public HospitalAppointmentSystem() {
        // Use ArrayList for dynamic lists of doctors and appointments
        doctors = new ArrayList<>();
        bookedAppointments = new ArrayList<>();
        waitingLists = new HashMap<>(); // Use HashMap for the Map implementation

        // Pre-populate some doctors
        doctors.add(new Doctor("Smith"));
        doctors.add(new Doctor("Jones"));
        doctors.add(new Doctor("Adams"));

        // Initialize a waiting list (Queue) for each doctor
        for (Doctor doc : doctors) {
            waitingLists.put(doc.getName(), new LinkedList<>()); // LinkedList implements Queue
        }
    }

    /**
     * Finds a doctor by name (case-insensitive).
     * @param name The name of the doctor to find.
     * @return The Doctor object if found, otherwise null.
     */
    private Doctor findDoctorByName(String name) {
        for (Doctor doc : doctors) {
            if (doc.getName().equalsIgnoreCase(name)) {
                return doc;
            }
        }
        return null; // Doctor not found
    }

    /**
     * Displays the list of available doctors.
     * Uses System.out for normal output.
     */
    public void viewDoctors() {
        System.out.println("\n--- Available Doctors ---");
        if (doctors.isEmpty()) {
            System.out.println("No doctors available.");
        } else {
            for (Doctor doc : doctors) {
                System.out.println("- " + doc); // Uses Doctor's toString()
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Books an appointment for a patient with a doctor.
     * If the doctor is booked, adds the patient to the waiting list.
     * Uses System.out for success messages and System.err for errors.
     *
     * @param patientName The name of the patient.
     * @param doctorName  The name of the doctor.
     */
    public void bookAppointment(String patientName, String doctorName) {
        if (patientName == null || patientName.trim().isEmpty() || doctorName == null || doctorName.trim().isEmpty()) {
             System.err.println("Error: Patient name and doctor name cannot be empty.");
             return;
        }
        
        Patient patient = new Patient(patientName.trim());
        Doctor doctor = findDoctorByName(doctorName.trim());

        if (doctor == null) {
            System.err.println("Error: Doctor '" + doctorName.trim() + "' not found.");
            return;
        }

        // Check if this doctor is currently booked by ANYONE
        boolean isDoctorBooked = false;
        for (Appointment appt : bookedAppointments) {
            if (appt.getDoctor().getName().equalsIgnoreCase(doctor.getName())) {
                isDoctorBooked = true;
                break;
            }
        }

        if (isDoctorBooked) {
            // Doctor is booked, add patient to the waiting list for this doctor
            Queue<Patient> waitingList = waitingLists.get(doctor.getName());
            waitingList.offer(patient); // offer() is the preferred way to add to a queue
            System.out.println(doctor + " is currently booked. " + patient.getName() + " added to the waiting list.");
        } else {
            // Doctor is free, book the appointment
            Appointment newAppointment = new Appointment(patient, doctor);
            bookedAppointments.add(newAppointment); // Add to ArrayList
            System.out.println("Appointment booked for " + patient.getName() + " with " + doctor + ".");
        }
    }

    /**
     * Cancels a booked appointment.
     * If a patient is waiting for this doctor, books the next patient from the queue.
     * Uses System.out for success messages and System.err for errors.
     *
     * @param patientName The name of the patient whose appointment to cancel.
     * @param doctorName  The name of the doctor for the appointment to cancel.
     */
    public void cancelAppointment(String patientName, String doctorName) {
         if (patientName == null || patientName.trim().isEmpty() || doctorName == null || doctorName.trim().isEmpty()) {
             System.err.println("Error: Patient name and doctor name cannot be empty.");
             return;
        }
        
        String trimmedPatientName = patientName.trim();
        String trimmedDoctorName = doctorName.trim();

        Doctor doctor = findDoctorByName(trimmedDoctorName);
        if (doctor == null) {
             System.err.println("Error: Doctor '" + trimmedDoctorName + "' not found.");
             return;
        }

        Appointment appointmentToRemove = null;
        // Iterate through the booked appointments (ArrayList) to find the one to cancel
        for (Appointment appt : bookedAppointments) {
            if (appt.getPatient().getName().equalsIgnoreCase(trimmedPatientName) &&
                appt.getDoctor().getName().equalsIgnoreCase(trimmedDoctorName)) {
                appointmentToRemove = appt;
                break;
            }
        }

        if (appointmentToRemove != null) {
            bookedAppointments.remove(appointmentToRemove); // Remove from ArrayList
            System.out.println("Appointment for " + trimmedPatientName + " with " + doctor + " cancelled.");

            // Check the waiting list (Queue) for this doctor and book the next patient if available
            Queue<Patient> waitingList = waitingLists.get(doctor.getName());
            if (waitingList != null && !waitingList.isEmpty()) {
                Patient nextPatient = waitingList.poll(); // Get and remove the head of the queue
                if (nextPatient != null) {
                     // Book the next patient from the waiting list
                     Appointment nextAppointment = new Appointment(nextPatient, doctor);
                     bookedAppointments.add(nextAppointment); // Add to ArrayList
                     System.out.println("Slot freed by cancellation. " + nextPatient.getName() + " from the waiting list is now booked with " + doctor + ".");
                }
            }
        } else {
            System.err.println("Error: No active appointment found for " + trimmedPatientName + " with " + doctor + ".");
        }
    }

    /**
     * Displays all currently booked appointments.
     * Uses System.out for output.
     */
    public void viewBookedAppointments() {
        System.out.println("\n--- Booked Appointments ---");
        if (bookedAppointments.isEmpty()) {
            System.out.println("No appointments currently booked.");
        } else {
            // Iterate through the booked appointments (ArrayList)
            for (Appointment appt : bookedAppointments) {
                System.out.println(appt); // Uses Appointment's toString()
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Displays the waiting list for a specific doctor.
     * Uses System.out for output and System.err for errors.
     *
     * @param doctorName The name of the doctor whose waiting list to view.
     */
    public void viewWaitingList(String doctorName) {
         if (doctorName == null || doctorName.trim().isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty.");
             return;
        }
        
        String trimmedDoctorName = doctorName.trim();
        Doctor doctor = findDoctorByName(trimmedDoctorName);

        if (doctor == null) {
            System.err.println("Error: Doctor '" + trimmedDoctorName + "' not found.");
            return;
        }

        Queue<Patient> waitingList = waitingLists.get(doctor.getName());
        if (waitingList == null || waitingList.isEmpty()) {
            System.out.println("Waiting list for " + doctor + " is empty.");
        } else {
            System.out.println("\n--- Waiting List for " + doctor + " ---");
            // Iterate through the Queue to display elements without removing them
            for (Patient patient : waitingList) {
                System.out.println("- " + patient.getName());
            }
            System.out.println("---------------------------------");
        }
    }
}

/**
 * Main class to run the Hospital Appointment System application.
 * Contains the main loop, menu handling, and exception handling.
 */
public class HospitalApp {

    public static void main(String[] args) {
        HospitalAppointmentSystem system = new HospitalAppointmentSystem();
        Scanner scanner = new Scanner(System.in);

        // Class-wide exception handling for the main application loop
        try {
            while (true) {
                // Display menu using System.out
                System.out.println("\n--- Hospital Appointment System Menu ---");
                System.out.println("1. View Doctors");
                System.out.println("2. Book Appointment");
                System.out.println("3. Cancel Appointment");
                System.out.println("4. View Booked Appointments");
                System.out.println("5. View Doctor's Waiting List");
                System.out.println("6. Exit");
                System.out.println("----------------------------------------");
                System.out.print("Enter your choice: ");

                int choice = -1;
                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the while loop
                } finally {
                     scanner.nextLine(); // Consume the newline character left by nextInt()
                }


                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        system.viewDoctors();
                        break;
                    case 2:
                        System.out.print("Enter patient name: ");
                        String pName = scanner.nextLine();
                        System.out.print("Enter doctor name (e.g., Smith): ");
                        String dName = scanner.nextLine();
                        system.bookAppointment(pName, dName);
                        break;
                    case 3:
                        System.out.print("Enter patient name for cancellation: ");
                        String cancelPName = scanner.nextLine();
                        System.out.print("Enter doctor name for cancellation (e.g., Smith): ");
                        String cancelDName = scanner.nextLine();
                        system.cancelAppointment(cancelPName, cancelDName);
                        break;
                    case 4:
                        system.viewBookedAppointments();
                        break;
                    case 5:
                        System.out.print("Enter doctor name to view waiting list (e.g., Smith): ");
                        String waitDName = scanner.nextLine();
                        system.viewWaitingList(waitDName);
                        break;
                    case 6:
                        System.out.println("Exiting system. Goodbye!");
                        return; // Exit the main method
                    default:
                        // Handle invalid menu choices using System.err
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that might occur in the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to standard error
        } finally {
            // Ensure the Scanner resource is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }
}
