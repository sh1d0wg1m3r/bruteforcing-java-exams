/*
 * Exam Question #540
 * Generated on: 2025-05-11 23:26:44
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Advanced Task Processing System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based system to manage and process tasks. The system should allow users to add new tasks, process the next task waiting in a queue, view the list of tasks currently in the queue, and view a history of tasks that have been completed.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a simple `Task` class (or similar) to represent a task. It should minimally store a `String` description of the task.
 * 2.  **System Class:** Create a main class, e.g., `TaskProcessorSystem`, to manage the task processing logic. This class will contain the core data structures and methods.
 * 3.  **Data Structures:**
 *     *   Use a `Queue` (specifically, an implementation like `LinkedList` which implements `Queue`) to hold tasks that are waiting to be processed. Tasks should be processed in the order they were added (FIFO).
 *     *   Use a `List` (specifically, an `ArrayList` which implements `List`) to store tasks that have been successfully processed.
 * 4.  **User Interaction:** The system should interact with the user via the console using `Scanner`. It should present a menu of options:
 *     *   Add a new task.
 *     *   Process the next task from the queue.
 *     *   View the current task queue.
 *     *   View completed tasks history.
 *     *   Exit the system.
 * 5.  **Flow Control:** Use a `switch` statement to handle the different user commands based on their input.
 * 6.  **Error Handling:**
 *     *   Use `System.err` to display error messages (e.g., invalid command, attempting to process when the queue is empty, invalid input).
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main interaction loop of your `TaskProcessorSystem` class to catch potential unexpected issues during user input or processing. Handle specific exceptions where appropriate (like `InputMismatchException`) and a general `Exception` as a fallback.
 *     *   Validate user input where necessary (e.g., ensure task description is not empty).
 * 7.  **Output:** Use `System.out` for all standard output (menu, prompts, task details, queue contents, completed task history).
 * 8.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (e.g., Javadoc for classes/methods).
 *     *   Structure your code cleanly.
 * 
 * **Execution:**
 * 
 * The program should start, display the menu, and repeatedly prompt the user for input until they choose to exit.
 * 
 * **Example Interaction (Partial):**
 * 
 * ```
 * --- Task Processing System Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write report
 * Task added to queue.
 * 
 * --- Task Processing System Menu ---
 * 1. Add Task
 * ...
 * Enter your choice: 2
 * Processing task: Write report
 * Task completed and moved to history.
 * 
 * --- Task Processing System Menu ---
 * 1. Add Task
 * ...
 * Enter your choice: 3
 * --- Current Task Queue ---
 * Queue is empty.
 * 
 * --- Task Processing System Menu ---
 * 1. Add Task
 * ...
 * Enter your choice: 4
 * --- Completed Tasks History ---
 * [1] Write report
 * 
 * --- Task Processing System Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * ```
 * 
 * Your solution should provide the complete Java code for the `Task` and `TaskProcessorSystem` classes within a single file (or demonstrate how they would interact).
 * 
 * **Deliverables:**
 * 
 * *   Complete Java source code for the Task Processing System.
 *
 * EXPLANATION:
 * This solution implements a `TaskProcessingSystem` that meets all the specified requirements.
 * 
 * 1.  **`Task` Class:** A simple class `Task` is created with a private `description` field and a public getter `getDescription()`. The constructor includes basic validation to ensure the description is not null or empty, throwing an `IllegalArgumentException` if it is. The `toString()` method is overridden for easy printing. This demonstrates encapsulation and basic input validation within an object.
 * 
 * 2.  **`TaskProcessorSystem` Class:** This is the core class managing the system logic.
 *     *   **Data Structures:**
 *         *   `taskQueue`: Declared as `Queue<Task>` and initialized with `new LinkedList<>()`. This correctly uses the `Queue` interface type and an implementing class (`LinkedList`) to store tasks in FIFO order, ready for processing.
 *         *   `completedTasks`: Declared as `List<Task>` and initialized with `new ArrayList<>()`. This correctly uses the `List` interface type and an implementing class (`ArrayList`) to store completed tasks in the order they were finished.
 *     *   **`Scanner`:** A `Scanner` object is used to read user input from `System.in`. It's a private field, initialized in the constructor, and closed upon system exit or in the final `finally` block.
 *     *   **Methods:** Private helper methods (`displayMenu`, `addTask`, `processNextTask`, `viewTaskQueue`, `viewCompletedTasks`, `exitSystem`) encapsulate specific functionalities, promoting modularity and readability.
 *     *   **`run()` Method:** This public method contains the main system loop (`while(running)`).
 *         *   **Class-wide `try-catch`:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This provides a top-level safety net to catch any unexpected runtime errors that might occur during the system's operation and prevent the program from crashing abruptly, printing an error message to `System.err`. A `finally` block ensures the `Scanner` is closed.
 *         *   **Input Handling `try-catch`:** Inside the loop, another `try-catch(InputMismatchException e)` specifically handles cases where the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input (`scanner.next()`) to prevent an infinite loop caused by the `Scanner` repeatedly failing on the same input. A `finally` block after the inner `try-catch` is used to consume the rest of the line (`scanner.nextLine()`), which is crucial after reading an integer with `nextInt()` to prepare for subsequent `nextLine()` calls (like when reading the task description).
 *         *   **`switch` Statement:** A `switch` statement handles the user's integer choice, directing execution to the appropriate method (`addTask`, `processNextTask`, etc.). The `default` case handles invalid numerical input, printing an error to `System.err`.
 *     *   **`addTask()`:** Reads the description using `scanner.nextLine()`. It wraps the `Task` creation in a `try-catch` to handle the `IllegalArgumentException` thrown by the `Task` constructor for invalid descriptions, printing the error to `System.err`.
 *     *   **`processNextTask()`:** Uses `taskQueue.poll()` to retrieve and remove the next task. It checks if the result is `null` (meaning the queue was empty) and prints an error to `System.err` if so. Otherwise, it adds the processed task to the `completedTasks` list.
 *     *   **`viewTaskQueue()` and `viewCompletedTasks()`:** Iterate through the respective collections and print their contents using `System.out`. They check for emptiness and provide appropriate messages. `viewTaskQueue` iterates using a for-each loop, while `viewCompletedTasks` uses an indexed for loop to demonstrate both approaches.
 *     *   **`exitSystem()`:** Sets the `running` flag to `false` to terminate the main loop and closes the `Scanner`.
 * 
 * 3.  **Main Method:** The `main` method simply creates an instance of `TaskProcessorSystem` and calls its `run()` method to start the application.
 * 
 * This solution effectively demonstrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) in a practical, structured, and well-commented manner, following best practices like encapsulation and input validation. The use of nested `try-catch` blocks and the `finally` block for resource management (Scanner) and input consumption (`nextLine` after `nextInt`) adds complexity and demonstrates robust error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description.
 */
class Task {
    private String description;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     */
    public Task(String description) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        this.description = description.trim();
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return description;
    }
}

/**
 * Manages the task processing system, including a queue of pending tasks
 * and a list of completed tasks.
 */
public class TaskProcessorSystem {

    private Queue<Task> taskQueue;
    private List<Task> completedTasks;
    private Scanner scanner;
    private boolean running;

    /**
     * Constructs a new TaskProcessorSystem.
     * Initializes the task queue, completed tasks list, and scanner.
     */
    public TaskProcessorSystem() {
        this.taskQueue = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
        this.running = true;
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Processing System Menu ---");
        System.out.println("1. Add Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Task Queue");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task to the queue.
     */
    private void addTask() {
        System.out.print("Enter task description: ");
        String description = scanner.nextLine();
        try {
            Task newTask = new Task(description);
            taskQueue.add(newTask);
            System.out.println("Task added to queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding task: " + e.getMessage());
        }
    }

    /**
     * Processes the next task from the queue.
     */
    private void processNextTask() {
        Task nextTask = taskQueue.poll(); // Retrieves and removes the head of the queue
        if (nextTask != null) {
            System.out.println("Processing task: " + nextTask.getDescription());
            // Simulate processing...
            completedTasks.add(nextTask); // Add to completed list
            System.out.println("Task completed and moved to history.");
        } else {
            System.err.println("Task queue is empty. No tasks to process.");
        }
    }

    /**
     * Displays the current tasks in the queue.
     */
    private void viewTaskQueue() {
        System.out.println("\n--- Current Task Queue ---");
        if (taskQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate without removing elements
            int index = 1;
            for (Task task : taskQueue) {
                System.out.println("[" + index++ + "] " + task.getDescription());
            }
        }
    }

    /**
     * Displays the history of completed tasks.
     */
    private void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks History ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks have been completed yet.");
        } else {
            for (int i = 0; i < completedTasks.size(); i++) {
                System.out.println("[" + (i + 1) + "] " + completedTasks.get(i).getDescription());
            }
        }
    }

    /**
     * Stops the system execution.
     */
    private void exitSystem() {
        System.out.println("Exiting Task Processing System. Goodbye!");
        running = false;
        scanner.close(); // Close the scanner resource
    }

    /**
     * Runs the main interaction loop of the system.
     * Includes class-wide exception handling.
     */
    public void run() {
        // Class-wide exception handling for the main loop
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Default invalid choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } finally {
                     // Consume the rest of the line after reading the integer choice
                     // This is important to prevent issues with nextLine() calls later
                     if (scanner.hasNextLine()) {
                         scanner.nextLine();
                     }
                }


                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        processNextTask();
                        break;
                    case 3:
                        viewTaskQueue();
                        break;
                    case 4:
                        viewCompletedTasks();
                        break;
                    case 5:
                        exitSystem();
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed even if an unexpected exception occurs
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("System shutdown complete.");
        }
    }

    /**
     * Main method to start the Task Processing System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskProcessorSystem system = new TaskProcessorSystem();
        system.run();
    }
}
