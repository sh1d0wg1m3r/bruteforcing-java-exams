/*
 * Exam Question #256
 * Generated on: 2025-05-11 22:45:43
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Management System**
 * 
 * You are tasked with creating a simplified Hospital Appointment Management System. The system needs to manage a list of available doctors and a waiting queue of patients. Patients arrive and are added to a queue. When a doctor becomes available, the next patient from the queue is assigned to a specific doctor.
 * 
 * Your solution must demonstrate proficiency in core Java data structures and control flow mechanisms.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of `Doctor` objects using `java.util.ArrayList`. Store this in a variable declared as `java.util.List`.
 *     *   Maintain a waiting list of `Patient` objects using `java.util.Queue`. A `LinkedList` is a suitable implementation for `Queue`.
 * 
 * 2.  **Classes:**
 *     *   Create a `Doctor` class with a private `name` (String) and appropriate constructor and getter.
 *     *   Create a `Patient` class with a private `name` (String) and appropriate constructor and getter.
 *     *   Create an `AppointmentManager` class that encapsulates the `List<Doctor>` and `Queue<Patient>`. This class should contain methods to perform the system's operations.
 * 
 * 3.  **Functionality:**
 *     *   **Add Doctor:** Allow adding new doctors to the system.
 *     *   **Add Patient to Queue:** Allow adding new patients to the waiting queue.
 *     *   **Process Next Appointment:** Take the next patient from the queue and assign them to a specified doctor (if the doctor exists).
 *     *   **List Doctors:** Display all registered doctors.
 *     *   **List Waiting Patients:** Display all patients currently in the waiting queue.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input for menu choices and data (names).
 *     *   Present a menu of options to the user.
 *     *   Use a `switch` statement to handle the different menu options.
 * 
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for displaying the menu, success messages, and lists.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue empty, doctor not found).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks, particularly around input operations (`Scanner`) and operations that might fail (like processing an appointment when the queue is empty or a doctor isn't found). Handle `InputMismatchException` specifically for integer input errors and a general `Exception` for other potential issues.
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments where necessary.
 *     *   Implement basic input validation (e.g., checking if names are empty strings, handling non-integer menu input).
 *     *   Ensure clean code structure.
 * 
 * **Expected Interaction (Example Flow):**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Doctor
 * 2. Add Patient to Queue
 * 3. Process Next Appointment
 * 4. List Doctors
 * 5. List Waiting Patients
 * 6. Exit
 * Enter your choice: 1
 * Enter doctor name: Dr. Smith
 * Dr. Smith added.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Enter patient name: Alice
 * Alice added to queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Enter patient name: Bob
 * Bob added to queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 5
 * Waiting Patients:
 * - Alice
 * - Bob
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter doctor name for appointment: Dr. Smith
 * Processing appointment for Alice with Dr. Smith.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 5
 * Waiting Patients:
 * - Bob
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter doctor name for appointment: Dr. Jones
 * Error: Doctor 'Dr. Jones' not found. Patient Bob remains in queue. // Example error output to System.err
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 7 // Invalid choice
 * Error: Invalid choice. Please enter a number between 1 and 6. // Example error output to System.err
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: abc // Invalid input type
 * Error: Invalid input. Please enter a number. // Example error output to System.err
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the Hospital Appointment Management System as required, demonstrating the use of various Java concepts and best practices.
 * 
 * 1.  **Class Structure and Encapsulation:**
 *     *   `Doctor` and `Patient` are simple classes with private `name` fields, accessed via public getters. This adheres to encapsulation principles.
 *     *   `AppointmentManager` is the core class holding the system's state (`doctors` and `waitingPatients`) and logic. Its fields are private, and operations are performed via public methods.
 * 
 * 2.  **Data Structures (`List` and `Queue`):**
 *     *   `List<Doctor> doctors`: An `ArrayList` is used to store the collection of `Doctor` objects. The variable is declared using the `List` interface type, promoting good practice and allowing for potential future changes in the underlying list implementation without affecting the rest of the code that interacts with this variable.
 *     *   `Queue<Patient> waitingPatients`: A `LinkedList` is used to implement the `Queue` interface for the patient waiting list. `Queue` is appropriate here because patients are processed in a First-In, First-Out (FIFO) manner. Methods like `offer()` (to add) and `poll()` (to remove the head) are used for queue operations. `peek()` is used to check the head without removing it.
 * 
 * 3.  **User Input (`Scanner`) and Control Flow (`Switch`):**
 *     *   `Scanner` is used to read input from `System.in`. `scanner.nextLine()` is used for reading names (handling spaces), and `scanner.nextInt()` is used for reading the menu choice. Crucially, `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing input issues in subsequent `nextLine()` calls.
 *     *   A `switch` statement in the `run()` method handles the user's menu choice, directing execution to the appropriate method within `AppointmentManager`.
 * 
 * 4.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for standard output: displaying the menu, confirmation messages (doctor/patient added, appointment processed), and listing doctors/patients.
 *     *   `System.err.println()` is specifically used for error messages: invalid input, queue empty, doctor not found, invalid menu choice. This directs error output to the standard error stream, which is a best practice for separating normal output from error information.
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch` block is wrapped around the core menu logic within the `run()` method.
 *     *   `InputMismatchException` is specifically caught to handle cases where the user enters non-integer input when a number is expected for the menu choice. The invalid input is consumed (`scanner.nextLine()`) within the catch block to prevent an infinite loop.
 *     *   A general `Exception` catch block is included as a safety net for any other unexpected runtime errors, printing an error message using `System.err`. This demonstrates robust, class-wide exception handling for the main operational loop.
 *     *   Specific error conditions like an empty queue (`waitingPatients.peek() == null`) or doctor not found are handled with `if` statements and error messages to `System.err` *before* attempting operations that would fail, which is often clearer than relying solely on exceptions for expected operational failures.
 * 
 * 6.  **Best Practices:**
 *     *   **Meaningful Names:** Variables (`doctors`, `waitingPatients`, `choice`, `name`, `targetDoctor`) and methods (`addDoctor`, `processNextAppointment`, `listDoctors`, `run`) have descriptive names.
 *     *   **Input Validation:** Basic validation checks if input names are empty strings. The `try-catch` for `InputMismatchException` handles incorrect data types for the menu choice.
 *     *   **Comments:** Javadoc-style comments explain the purpose of classes and methods, and inline comments clarify specific logic points (e.g., using `peek()` vs `poll()`, consuming newline after `nextInt()`).
 *     *   **Resource Management:** The `Scanner` is explicitly closed when the program exits (`scanner.close()`).
 * 
 * This solution effectively integrates the required Java components into a functional, well-structured program that simulates a practical scenario while demonstrating key programming concepts and error handling techniques suitable for an advanced exam.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a Doctor in the system
class Doctor {
    private String name;

    /**
     * Constructs a new Doctor object.
     * @param name The name of the doctor.
     */
    public Doctor(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the doctor.
     * @return The doctor's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a Patient in the system
class Patient {
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Manages appointments, doctors, and the patient queue
class AppointmentManager {
    // Use List interface for flexibility, implemented by ArrayList
    private List<Doctor> doctors;
    // Use Queue interface for waiting list, implemented by LinkedList
    private Queue<Patient> waitingPatients;
    private Scanner scanner;

    /**
     * Constructs an AppointmentManager.
     * Initializes the doctor list, patient queue, and scanner.
     */
    public AppointmentManager() {
        this.doctors = new ArrayList<>();
        this.waitingPatients = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new doctor to the system.
     * Validates input name.
     */
    public void addDoctor() {
        System.out.print("Enter doctor name: ");
        String name = scanner.nextLine().trim(); // Read full line and trim whitespace
        if (name.isEmpty()) {
            System.err.println("Error: Doctor name cannot be empty.");
            return;
        }
        // Optional: Check for duplicate doctor names
        for (Doctor doctor : doctors) {
            if (doctor.getName().equalsIgnoreCase(name)) {
                System.err.println("Error: Doctor '" + name + "' already exists.");
                return;
            }
        }
        doctors.add(new Doctor(name));
        System.out.println(name + " added.");
    }

    /**
     * Adds a new patient to the waiting queue.
     * Validates input name.
     */
    public void addPatientToQueue() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        waitingPatients.offer(new Patient(name)); // Use offer for adding to queue
        System.out.println(name + " added to queue.");
    }

    /**
     * Processes the next appointment from the queue.
     * Assigns the patient to a specified doctor if available.
     * Handles empty queue and doctor not found scenarios.
     */
    public void processNextAppointment() {
        // Peek first to check if queue is empty without removing
        Patient nextPatient = waitingPatients.peek();

        if (nextPatient == null) {
            System.err.println("Error: Waiting queue is empty. No appointments to process.");
            return;
        }

        System.out.print("Enter doctor name for appointment: ");
        String doctorName = scanner.nextLine().trim();

        if (doctorName.isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty.");
             return;
        }

        // Find the doctor
        Doctor targetDoctor = null;
        for (Doctor doctor : doctors) {
            if (doctor.getName().equalsIgnoreCase(doctorName)) {
                targetDoctor = doctor;
                break;
            }
        }

        if (targetDoctor == null) {
            System.err.println("Error: Doctor '" + doctorName + "' not found. Patient " + nextPatient.getName() + " remains in queue.");
            // Patient remains in queue as appointment couldn't be processed with specified doctor
        } else {
            // Doctor found, now remove patient from queue
            Patient processedPatient = waitingPatients.poll(); // Poll removes the head of the queue
            System.out.println("Processing appointment for " + processedPatient.getName() + " with " + targetDoctor.getName() + ".");
        }
    }

    /**
     * Lists all registered doctors.
     */
    public void listDoctors() {
        if (doctors.isEmpty()) {
            System.out.println("No doctors registered.");
        } else {
            System.out.println("Registered Doctors:");
            for (int i = 0; i < doctors.size(); i++) {
                System.out.println("- " + doctors.get(i).getName());
            }
        }
    }

    /**
     * Lists all patients currently in the waiting queue.
     */
    public void listWaitingPatients() {
        if (waitingPatients.isEmpty()) {
            System.out.println("Waiting queue is empty.");
        } else {
            System.out.println("Waiting Patients:");
            // Iterate through the queue without removing elements
            for (Patient patient : waitingPatients) {
                System.out.println("- " + patient.getName());
            }
        }
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Doctor");
        System.out.println("2. Add Patient to Queue");
        System.out.println("3. Process Next Appointment");
        System.out.println("4. List Doctors");
        System.out.println("5. List Waiting Patients");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     * Handles user input and calls appropriate methods using a switch statement.
     * Includes comprehensive exception handling.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            int choice = -1; // Default invalid choice

            try {
                // Read the integer choice first
                choice = scanner.nextInt();
                // Consume the rest of the line to prevent issues with nextLine() after nextInt()
                scanner.nextLine();

                // Use a switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addDoctor();
                        break;
                    case 2:
                        addPatientToQueue();
                        break;
                    case 3:
                        processNextAppointment();
                        break;
                    case 4:
                        listDoctors();
                        break;
                    case 5:
                        listWaitingPatients();
                        break;
                    case 6:
                        System.out.println("Exiting system.");
                        running = false;
                        break;
                    default:
                        // Handles valid integer input but invalid choice range
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                // Handles non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catches any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        // Close the scanner when exiting
        scanner.close();
    }

    // Main method to start the application
    public static void main(String[] args) {
        AppointmentManager manager = new AppointmentManager();
        manager.run();
    }
}
