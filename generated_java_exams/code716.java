/*
 * Exam Question #716
 * Generated on: 2025-05-12 16:29:50
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Technical Support Request Management System**
 * 
 * You are tasked with developing a simple technical support request management system. The system should allow users (simulating support staff) to manage incoming support requests.
 * 
 * **Scenario:**
 * 
 * Support requests arrive and are placed in a queue to be handled in a First-In, First-Out (FIFO) manner. Support staff can process the next request from the front of the queue. Completed requests should be moved to a separate list for tracking.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store pending support requests.
 *     *   Use an `ArrayList` to store completed support requests.
 *     *   Declare the completed requests collection using the `List` interface type.
 * 2.  **Classes:**
 *     *   Create a class `SupportRequest` to represent a single support request. It should have:
 *         *   A unique integer ID (automatically generated).
 *         *   A String description of the problem.
 *         *   A status (e.g., "PENDING", "COMPLETED").
 *     *   Create a class `SupportQueueManager` that encapsulates the `Queue` and `List` and provides methods to manage requests.
 *     *   Include a main class (or main method within `SupportQueueManager`) to run the application loop.
 * 3.  **Functionality:**
 *     *   Present a menu to the user with options:
 *         *   Add New Request
 *         *   Process Next Request
 *         *   View Pending Requests
 *         *   View Completed Requests
 *         *   Exit
 *     *   Implement the functionality for each menu option.
 *     *   When adding a request, prompt the user for the description. The description cannot be empty.
 *     *   When processing a request, take the request from the front of the pending queue, change its status to "COMPLETED", and add it to the completed list. If the queue is empty, display an error message.
 *     *   When viewing requests, display the ID, description, and status for each request in the respective list/queue.
 * 4.  **Input and Output:**
 *     *   Use `Scanner` to read user input (menu choice, request description).
 *     *   Use `System.out` for menu display, prompts, and successful output (listing requests, confirmation messages).
 *     *   Use `System.err` for error messages (e.g., invalid menu choice, empty queue, empty description).
 * 5.  **Control Flow:**
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use a loop to keep the application running until the user chooses to exit.
 * 6.  **Error Handling:**
 *     *   Implement input validation (e.g., check for empty request description).
 *     *   Handle the case where the user tries to process a request when the queue is empty.
 *     *   Include class-wide exception handling using `try-catch` blocks. A `try-catch` block should surround the main application loop or critical operations to catch potential unexpected runtime errors.
 * 7.  **Best Practices:**
 *     *   Use proper encapsulation (`private` fields, `public` methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Structure the code logically.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt for input, and display results or errors based on the user's actions. Examples:
 * 
 * ```
 * --- Support Request System ---
 * 1. Add New Request
 * 2. Process Next Request
 * 3. View Pending Requests
 * 4. View Completed Requests
 * 5. Exit
 * Enter your choice: 1
 * Enter request description: Printer not working
 * 
 * Request added with ID: 1.
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 3
 * --- Pending Requests ---
 * ID: 1, Description: Printer not working, Status: PENDING
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 2
 * 
 * Processing request ID: 1.
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 3
 * --- Pending Requests ---
 * (Queue is empty)
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 4
 * --- Completed Requests ---
 * ID: 1, Description: Printer not working, Status: COMPLETED
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * --- Support Request System ---
 * ...
 * Enter your choice: 2
 * Error: No pending requests to process.
 * 
 * --- Support Request System ---
 * ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple technical support request management system using the required Java components and following best practices.
 * 
 * 1.  **`SupportRequest` Class:**
 *     *   Represents a single request with `id`, `description`, and `status`.
 *     *   Uses `private` fields for encapsulation.
 *     *   Provides `public` getters to access the data and a `public` setter for the status.
 *     *   Includes a `static` variable `nextId` to ensure each request gets a unique, automatically generated ID.
 *     *   The `toString()` method provides a convenient way to print request details.
 * 
 * 2.  **`SupportQueueManager` Class:**
 *     *   This class encapsulates the core data structures:
 *         *   `private Queue<SupportRequest> pendingRequests`: A `Queue` (specifically a `LinkedList` implementation) is used to store requests that are waiting to be processed. The `Queue` interface guarantees FIFO behavior, which is suitable for a support queue. `offer()` is used for adding and `poll()` for removing from the head.
 *         *   `private List<SupportRequest> completedRequests`: A `List` (specifically an `ArrayList` implementation) is used to store requests once they have been processed. `ArrayList` is suitable here as we only need to add and iterate through completed items; order matters, but FIFO processing doesn't apply to *accessing* completed items. We use the `List` interface type for better practice (programming to the interface).
 *     *   `addRequest(String description)`: Creates a new `SupportRequest` and adds it to the `pendingRequests` queue using `offer()`. It includes input validation to check for an empty description, printing an error to `System.err` if invalid.
 *     *   `processNextRequest()`: Uses `poll()` to retrieve and remove the request at the front of the `pendingRequests` queue. If `poll()` returns `null` (meaning the queue was empty), it prints an error to `System.err`. Otherwise, it updates the request's status to "COMPLETED" and adds it to the `completedRequests` list.
 *     *   `listPendingRequests()`: Iterates through the `pendingRequests` queue to display its contents. It uses a `for-each` loop which iterates without removing elements. Prints to `System.out`.
 *     *   `listCompletedRequests()`: Iterates through the `completedRequests` list to display its contents. Prints to `System.out`.
 * 
 * 3.  **`main` Method (within `SupportQueueManager`):**
 *     *   This method serves as the application entry point and handles the user interface.
 *     *   A `Scanner` is initialized to read input from `System.in`.
 *     *   A `SupportQueueManager` instance is created.
 *     *   A `boolean running` variable controls the main application loop.
 *     *   **Class-wide Exception Handling:** A `try-catch (Exception e)` block wraps the main `while(running)` loop. This demonstrates catching unexpected runtime exceptions that might occur anywhere within the loop, providing a basic level of robustness and preventing the program from crashing abruptly. A `finally` block ensures the `Scanner` is closed.
 *     *   Inside the loop:
 *         *   The menu is displayed using `System.out`.
 *         *   User input is read using `scanner.nextLine()`.
 *         *   Input validation for the menu choice is done using `Integer.parseInt()` within its own `try-catch (NumberFormatException e)` block. This specifically handles non-integer input and prints an error to `System.err`.
 *         *   A `switch` statement is used to direct the program flow based on the valid integer choice, calling the appropriate methods in the `SupportQueueManager`.
 *         *   The `default` case in the `switch` handles invalid menu numbers, printing an error to `System.err`.
 * 
 * This solution effectively integrates `Queue`, `ArrayList` (as `List`), `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` within a practical scenario, demonstrating key Java concepts and best practices like encapsulation, input validation, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a single technical support request.
 */
class SupportRequest {
    private int id;
    private String description;
    private String status; // e.g., "PENDING", "COMPLETED"

    private static int nextId = 1; // To generate unique IDs

    /**
     * Constructs a new SupportRequest with a generated ID and PENDING status.
     *
     * @param description The description of the support issue.
     */
    public SupportRequest(String description) {
        this.id = nextId++;
        this.description = description;
        this.status = "PENDING";
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for status ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the SupportRequest.
     *
     * @return A formatted string detailing the request.
     */
    @Override
    public String toString() {
        return "ID: " + id + ", Description: " + description + ", Status: " + status;
    }
}

/**
 * Manages the queue of pending support requests and a list of completed requests.
 */
class SupportQueueManager {
    // Queue for pending requests (FIFO)
    private Queue<SupportRequest> pendingRequests;
    // List for completed requests
    private List<SupportRequest> completedRequests;

    /**
     * Constructs a new SupportQueueManager, initializing the queue and list.
     */
    public SupportQueueManager() {
        this.pendingRequests = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.completedRequests = new ArrayList<>(); // ArrayList for completed requests
    }

    /**
     * Adds a new support request to the pending queue.
     *
     * @param description The description for the new request.
     */
    public void addRequest(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Request description cannot be empty.");
            return;
        }
        SupportRequest newRequest = new SupportRequest(description.trim());
        pendingRequests.offer(newRequest); // offer is preferred over add for queues
        System.out.println("\nRequest added with ID: " + newRequest.getId() + ".");
    }

    /**
     * Processes the next request from the pending queue.
     * Moves the request to the completed list after changing its status.
     */
    public void processNextRequest() {
        SupportRequest nextRequest = pendingRequests.poll(); // poll retrieves and removes the head, returns null if empty

        if (nextRequest == null) {
            System.err.println("Error: No pending requests to process.");
        } else {
            nextRequest.setStatus("COMPLETED");
            completedRequests.add(nextRequest);
            System.out.println("\nProcessing request ID: " + nextRequest.getId() + ".");
        }
    }

    /**
     * Displays all pending requests currently in the queue.
     */
    public void listPendingRequests() {
        System.out.println("\n--- Pending Requests ---");
        if (pendingRequests.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            for (SupportRequest request : pendingRequests) {
                System.out.println(request);
            }
        }
    }

    /**
     * Displays all completed requests currently in the list.
     */
    public void listCompletedRequests() {
        System.out.println("\n--- Completed Requests ---");
        if (completedRequests.isEmpty()) {
            System.out.println("(No completed requests yet)");
        } else {
            for (SupportRequest request : completedRequests) {
                System.out.println(request);
            }
        }
    }

    /**
     * Main method to run the Support Request Management System.
     * Handles user interaction loop and menu choices.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SupportQueueManager manager = new SupportQueueManager();
        boolean running = true;

        // Class-wide try-catch to handle unexpected exceptions during execution
        try {
            while (running) {
                System.out.println("\n--- Support Request System ---");
                System.out.println("1. Add New Request");
                System.out.println("2. Process Next Request");
                System.out.println("3. View Pending Requests");
                System.out.println("4. View Completed Requests");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");

                int choice = -1;
                try {
                    choice = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement for menu control
                switch (choice) {
                    case 1:
                        System.out.print("Enter request description: ");
                        String description = scanner.nextLine();
                        manager.addRequest(description);
                        break;
                    case 2:
                        manager.processNextRequest();
                        break;
                    case 3:
                        manager.listPendingRequests();
                        break;
                    case 4:
                        manager.listCompletedRequests();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed
            scanner.close();
        }
    }
}
