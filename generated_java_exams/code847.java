/*
 * Exam Question #847
 * Generated on: 2025-05-12 16:49:56
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified console-based application for a hospital reception desk. The system needs to manage patients waiting to be seen and schedule appointments for them.
 * 
 * **Requirements:**
 * 
 * 1.  **System Design:** Create a Java application that simulates the core functions of a hospital reception desk.
 * 2.  **Patient Management:**
 *     *   Maintain a waiting room using a **Queue** data structure. Patients are added to the end of the queue upon arrival.
 *     *   Allow reception to "call" the next patient from the front of the queue. The called patient should be held temporarily for potential scheduling.
 * 3.  **Appointment Management:**
 *     *   Maintain a list of scheduled appointments using a **List** data structure.
 *     *   Allow reception to schedule an appointment for the patient who was most recently "called" from the waiting room.
 * 4.  **User Interface:**
 *     *   Provide a text-based menu interface for the user (receptionist) to interact with the system.
 *     *   The menu should include options for:
 *         1.  Add Patient to Waiting Room
 *         2.  Call Next Patient from Waiting Room
 *         3.  Schedule Appointment for Called Patient
 *         4.  View Waiting Room Queue
 *         5.  View Scheduled Appointments
 *         6.  Exit
 * 5.  **Input Handling:** Use the **Scanner** class to read user input for menu choices and patient/appointment details.
 * 6.  **Flow Control:** Use a **switch** statement to handle the different menu options selected by the user.
 * 7.  **Output:**
 *     *   Use **System.out** for displaying the menu, prompts, success messages, and the contents of the waiting room and scheduled appointments.
 *     *   Use **System.err** for displaying all error messages (e.g., invalid menu choice, waiting room is empty, no patient has been called to schedule).
 * 8.  **Error Handling:**
 *     *   Implement **class-wide exception handling** using **try-catch** blocks to gracefully handle potential runtime errors, such as invalid input format (e.g., entering text when a number is expected).
 *     *   Implement specific checks for operational errors (e.g., trying to call a patient from an empty queue, trying to schedule an appointment when no patient has been called) and report them to `System.err`.
 * 9.  **Best Practices:**
 *     *   Employ proper encapsulation by using private fields and public methods in your classes.
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include comments where necessary to explain complex logic or the purpose of different parts of the code.
 *     *   Implement basic input validation (e.g., checking if required input is provided, handling empty queue scenarios).
 *     *   Ensure a clean and organized code structure.
 * 
 * **Classes to Consider:**
 * 
 * *   `Patient`: Should store patient information (e.g., name, a unique ID).
 * *   `Appointment`: Should store appointment details (e.g., the Patient object, doctor name, time slot).
 * *   `HospitalSystem`: The main class that orchestrates the system, containing the `Queue` and `List`, handling the menu loop, and managing interactions between patients, appointments, and user input.
 * 
 * **Expected Output Format:**
 * 
 * The system should repeatedly display the menu, prompt for input, and display results or errors based on the user's choice.
 * 
 * ```
 * --- Hospital Reception Menu ---
 * 1. Add Patient to Waiting Room
 * 2. Call Next Patient
 * 3. Schedule Appointment for Called Patient
 * 4. View Waiting Room Queue
 * 5. View Scheduled Appointments
 * 6. Exit
 * Enter your choice: 
 * ```
 * 
 * Success messages and list contents should go to `System.out`. Error messages must go to `System.err`.
 * 
 * **Challenge:** The system must correctly manage the state of the "currently called patient" to enable scheduling only after a patient has been removed from the queue.
 * 
 * **Evaluation:** Your solution will be evaluated based on correctness, adherence to all requirements (including using specified Java components and output streams), code quality (readability, structure, comments), and robust error handling.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple class representing a patient with a unique ID and name. It uses a static counter (`nextId`) to automatically generate IDs, ensuring each patient has a distinct identifier.
 *     *   `Appointment`: Represents a scheduled appointment, linking a `Patient` object with a doctor's name and a time slot.
 *     *   `HospitalSystem`: This is the main class orchestrating the system. It holds the core data structures (`waitingRoom` and `scheduledAppointments`) and contains the logic for the menu-driven application.
 * 
 * 2.  **Data Structures (`Queue` and `List`):**
 *     *   `Queue<Patient> waitingRoom`: A `LinkedList` is used here, implementing the `Queue` interface. The `LinkedList` is suitable because it provides efficient `offer()` (add to end) and `poll()` (remove from front) operations, which are typical for managing a waiting line.
 *     *   `List<Appointment> scheduledAppointments`: An `ArrayList` is used here, implementing the `List` interface. An `ArrayList` is efficient for storing and iterating through scheduled appointments. The order of appointments in this list isn't strictly managed by the system beyond the order they are added, which is acceptable for this simulation.
 * 
 * 3.  **User Input (`Scanner`) and Flow Control (`switch`):**
 *     *   A `Scanner` object reads input from `System.in`. `scanner.nextLine()` is used consistently to read entire lines, followed by `Integer.parseInt()` when a number is expected. This avoids common pitfalls when mixing `nextInt()` and `nextLine()`.
 *     *   The main application logic is within the `runSystem()` method, which contains a `while` loop that continues until the user chooses to exit.
 *     *   A `switch` statement within the loop directs the program flow based on the user's integer input, calling the corresponding private methods (`addPatient`, `callNextPatient`, etc.). The `default` case handles invalid menu numbers.
 * 
 * 4.  **State Management (`currentlyCalledPatient`):**
 *     *   A `Patient` field `currentlyCalledPatient` is used to maintain the state of the patient who was most recently removed from the waiting room using the "Call Next Patient" option.
 *     *   The `scheduleAppointment` method checks this field. An appointment can only be scheduled if `currentlyCalledPatient` is not null. After scheduling, the field is reset to null, preventing the same patient from being scheduled again until they are called again (if they somehow re-entered the queue).
 * 
 * 5.  **Output Streams (`System.out` and `System.err`):**
 *     *   All normal user interactions, prompts, success messages, and list/queue displays are printed to `System.out`.
 *     *   All error conditions, such as invalid input format, trying to perform an action on an empty queue, or attempting to schedule without a called patient, are reported specifically to `System.err`. This clearly distinguishes operational messages from errors.
 * 
 * 6.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch (NumberFormatException e)` block is wrapped around the `Integer.parseInt(input)` call within the main loop. This handles cases where the user enters non-integer input for the menu choice, preventing the program from crashing and printing an informative error message to `System.err`.
 *     *   A broader `try-catch (Exception e)` block is placed around the main `while` loop in `runSystem()`. This serves as a top-level handler for any other unexpected runtime exceptions that might occur, printing the error message and stack trace to `System.err` for debugging purposes.
 *     *   Specific operational error conditions (e.g., `waitingRoom.isEmpty()`, `currentlyCalledPatient == null`) are checked using `if` statements, and corresponding error messages are printed to `System.err`. This is a form of input/state validation combined with error reporting.
 * 
 * 7.  **Best Practices:**
 *     *   **Encapsulation:** Fields (`waitingRoom`, `scheduledAppointments`, `scanner`, `currentlyCalledPatient`) are `private`. Operations are exposed via `public` methods (`runSystem`) or `private` helper methods called from the main loop. `Patient` and `Appointment` fields are also private with public getters.
 *     *   **Meaningful Names:** Class names (`Patient`, `Appointment`, `HospitalSystem`), variable names (`waitingRoom`, `scheduledAppointments`, `currentlyCalledPatient`, `doctorName`), and method names (`addPatient`, `callNextPatient`, `scheduleAppointment`, `viewWaitingRoom`, `runSystem`) are descriptive.
 *     *   **Comments:** Comments are included to explain the purpose of classes, key methods, and specific logic like the static ID counter or the state management field.
 *     *   **Input Validation/Error Reporting:** Checks for empty names/time slots, empty queue, and null `currentlyCalledPatient` are performed, and errors are reported to `System.err`.
 *     *   **Clean Structure:** The code is divided into logical classes and methods. The `runSystem` method clearly outlines the main application flow.
 * 
 * This solution effectively integrates the required Java components to solve a practical problem, demonstrating understanding of data structures, control flow, input/output, state management, and robust error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient
class Patient {
    private static int nextId = 1; // Class-level counter for unique IDs
    private int patientId;
    private String name;

    public Patient(String name) {
        this.patientId = nextId++;
        this.name = name;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient [ID=" + patientId + ", Name=" + name + "]";
    }
}

// Represents a scheduled appointment
class Appointment {
    private Patient patient;
    private String doctorName;
    private String timeSlot;

    public Appointment(Patient patient, String doctorName, String timeSlot) {
        this.patient = patient;
        this.doctorName = doctorName;
        this.timeSlot = timeSlot;
    }

    public Patient getPatient() {
        return patient;
    }

    public String getDoctorName() {
        return doctorName;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Appointment [Patient=" + patient.getName() + " (ID:" + patient.getPatientId() + "), Doctor=" + doctorName + ", Time=" + timeSlot + "]";
    }
}

// Main class to manage the hospital system
public class HospitalSystem {

    // Using LinkedList as a concrete implementation of Queue for the waiting room
    private Queue<Patient> waitingRoom;
    // Using ArrayList as a concrete implementation of List for scheduled appointments
    private List<Appointment> scheduledAppointments;
    private Scanner scanner;
    private Patient currentlyCalledPatient; // Holds the patient who was last called

    public HospitalSystem() {
        waitingRoom = new LinkedList<>();
        scheduledAppointments = new ArrayList<>();
        scanner = new Scanner(System.in);
        currentlyCalledPatient = null; // No patient called initially
    }

    // --- Menu Options ---

    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        Patient newPatient = new Patient(name.trim());
        waitingRoom.offer(newPatient); // Add patient to the end of the queue
        System.out.println("Patient '" + newPatient.getName() + "' (ID:" + newPatient.getPatientId() + ") added to the waiting room.");
    }

    private void callNextPatient() {
        currentlyCalledPatient = waitingRoom.poll(); // Remove and get the head of the queue

        if (currentlyCalledPatient != null) {
            System.out.println("Calling next patient: " + currentlyCalledPatient.getName() + " (ID:" + currentlyCalledPatient.getPatientId() + ")");
            System.out.println("This patient is now ready to be scheduled for an appointment.");
        } else {
            System.err.println("Error: The waiting room is empty. No patient to call.");
            // Ensure currentlyCalledPatient is null if queue was empty
            currentlyCalledPatient = null;
        }
    }

    private void scheduleAppointment() {
        if (currentlyCalledPatient == null) {
            System.err.println("Error: No patient has been called from the waiting room yet.");
            return;
        }

        System.out.println("Scheduling appointment for: " + currentlyCalledPatient.getName() + " (ID:" + currentlyCalledPatient.getPatientId() + ")");
        System.out.print("Enter doctor's name: ");
        String doctorName = scanner.nextLine();
        if (doctorName == null || doctorName.trim().isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty. Appointment not scheduled.");
             return;
        }

        System.out.print("Enter time slot (e.g., 10:00 AM): ");
        String timeSlot = scanner.nextLine();
         if (timeSlot == null || timeSlot.trim().isEmpty()) {
             System.err.println("Error: Time slot cannot be empty. Appointment not scheduled.");
             return;
        }


        Appointment newAppointment = new Appointment(currentlyCalledPatient, doctorName.trim(), timeSlot.trim());
        scheduledAppointments.add(newAppointment); // Add appointment to the list

        System.out.println("Appointment scheduled successfully:");
        System.out.println(newAppointment);

        // Reset the currently called patient after scheduling
        currentlyCalledPatient = null;
        System.out.println("Patient has been scheduled. Waiting room status updated.");
    }

    private void viewWaitingRoom() {
        System.out.println("\n--- Waiting Room Queue ---");
        if (waitingRoom.isEmpty()) {
            System.out.println("Waiting room is empty.");
        } else {
            // Iterate and print queue contents without removing
            int index = 1;
            for (Patient patient : waitingRoom) {
                System.out.println(index++ + ". " + patient);
            }
        }
        System.out.println("--------------------------");
    }

    private void viewScheduledAppointments() {
        System.out.println("\n--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            // Iterate and print list contents
            int index = 1;
            for (Appointment appt : scheduledAppointments) {
                System.out.println(index++ + ". " + appt);
            }
        }
        System.out.println("------------------------------");
    }

    // --- Main System Loop ---

    public void runSystem() {
        int choice = -1;

        // Use a try-catch block around the main loop to catch potential unexpected errors
        try {
            while (choice != 6) {
                printMenu();

                // Use try-catch for input parsing specifically
                try {
                    System.out.print("Enter your choice: ");
                    String input = scanner.nextLine();
                    choice = Integer.parseInt(input);

                    // Use switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            callNextPatient();
                            break;
                        case 3:
                            scheduleAppointment();
                            break;
                        case 4:
                            viewWaitingRoom();
                            break;
                        case 5:
                            viewScheduledAppointments();
                            break;
                        case 6:
                            System.out.println("Exiting Hospital System. Goodbye!");
                            break;
                        default:
                            // Handle invalid menu choices
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                            break;
                    }
                } catch (NumberFormatException e) {
                    // Catch error if input is not a valid integer
                    System.err.println("Error: Invalid input. Please enter a number.");
                }
                System.out.println(); // Add a newline for better readability between actions
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions at the top level
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    private void printMenu() {
        System.out.println("--- Hospital Reception Menu ---");
        System.out.println("1. Add Patient to Waiting Room");
        System.out.println("2. Call Next Patient");
        System.out.println("3. Schedule Appointment for Called Patient");
        System.out.println("4. View Waiting Room Queue");
        System.out.println("5. View Scheduled Appointments");
        System.out.println("6. Exit");
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.runSystem();
    }
}
