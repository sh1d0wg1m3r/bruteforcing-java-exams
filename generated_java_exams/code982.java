/*
 * Exam Question #982
 * Generated on: 2025-05-12 17:08:23
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Scheduling System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified console-based Hospital Appointment Scheduling System. The system should manage patients waiting to be scheduled and those who have confirmed appointments.
 * 
 * **Functionality Requirements:**
 * 
 * 1.  **Add Patient to Waiting List:** Allow users to add a new patient's name to a waiting list.
 * 2.  **Schedule Next Appointment:** Move the patient at the front of the waiting list to the confirmed appointments list. If the waiting list is empty, display an error.
 * 3.  **View Waiting List:** Display the names of all patients currently in the waiting list, showing their position.
 * 4.  **View Scheduled Appointments:** Display the names of all patients who have confirmed appointments.
 * 5.  **Cancel Appointment:** Allow users to cancel a scheduled appointment by entering the patient's name. If the patient is not found in the scheduled list, display an error.
 * 6.  **Exit:** Terminate the program.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must use and demonstrate understanding of the following Java components:
 * 
 * *   `java.util.Queue`: To manage the waiting list (First-In, First-Out).
 * *   `java.util.ArrayList`: To store the confirmed appointments.
 * *   `java.util.List`: The `ArrayList` instance should be declared using the `List` interface type.
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To display error messages (e.g., empty list/queue, patient not found).
 * *   `System.out`: To display menus, prompts, successful messages, and list contents.
 * *   Class-wide exception handling: Implement `try-catch` blocks to handle potential exceptions that might occur during program execution, particularly around the main operational loop or input processing.
 * 
 * **Best Practices Requirements:**
 * 
 * *   **Encapsulation:** Use private fields and public methods.
 * *   **Meaningful Names:** Use descriptive names for variables, methods, and classes.
 * *   **Comments/Documentation:** Include Javadoc for classes/methods and inline comments for complex logic.
 * *   **Input Validation:** Validate user input where necessary (e.g., menu choices, checking if lists/queues are empty before operations).
 * *   **Error Handling:** Gracefully handle errors and inform the user using `System.err`.
 * *   **Clean Code:** Organize code logically into methods and classes.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's choice, it should perform the corresponding action, providing appropriate feedback using `System.out` for normal operations and `System.err` for errors.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Appointment
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Cancel Appointment
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * 
 * Alice added to waiting list.
 * 
 * Enter your choice: 1
 * Enter patient name: Bob
 * 
 * Bob added to waiting list.
 * 
 * Enter your choice: 3
 * 
 * --- Waiting List ---
 * 1. Alice
 * 2. Bob
 * --------------------
 * 
 * Enter your choice: 2
 * 
 * Scheduling next patient...
 * Alice scheduled for an appointment.
 * 
 * Enter your choice: 3
 * 
 * --- Waiting List ---
 * 1. Bob
 * --------------------
 * 
 * Enter your choice: 4
 * 
 * --- Scheduled Appointments ---
 * Alice
 * ------------------------------
 * 
 * Enter your choice: 5
 * Enter name of patient to cancel: Alice
 * 
 * Appointment for Alice cancelled.
 * 
 * Enter your choice: 4
 * 
 * --- Scheduled Appointments ---
 * ------------------------------
 * 
 * Enter your choice: 5
 * Enter name of patient to cancel: Charlie
 * 
 * Error: Patient 'Charlie' not found in scheduled appointments.
 * 
 * Enter your choice: 6
 * 
 * Exiting Hospital Appointment System.
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Scheduling System demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:**
 *     *   A simple class to represent a patient with a private `name` field and a public getter method (`getName()`), demonstrating encapsulation.
 *     *   The `toString()` method is overridden for convenient printing.
 * 
 * 2.  **`HospitalSystem` Class:**
 *     *   **Data Structures:**
 *         *   `private Queue<Patient> waitingList;`: Declared as a `Queue` interface type, initialized with `new LinkedList<>()`. This correctly uses `Queue` for FIFO behavior, essential for a waiting list where the person who arrived first is scheduled first.
 *         *   `private List<Patient> appointments;`: Declared as a `List` interface type, initialized with `new ArrayList<>()`. This uses `List` and `ArrayList` to store confirmed appointments, allowing easy addition and removal by object or index (though we search by name here).
 *     *   **Input:**
 *         *   `private Scanner scanner;`: An instance of `Scanner` is created in the constructor to read user input from `System.in`.
 *     *   **Methods:**
 *         *   `displayMenu()`: A helper method to show the user options.
 *         *   `addPatientToWaitingList()`: Reads the patient's name, creates a `Patient` object, and adds it to the `waitingList` using `offer()`. Includes basic input validation for an empty name.
 *         *   `scheduleNextAppointment()`: Uses `waitingList.poll()` to retrieve and remove the patient at the front of the queue. If `poll()` returns `null` (queue is empty), it prints an error to `System.err`. Otherwise, it adds the patient to the `appointments` list.
 *         *   `viewWaitingList()`: Iterates through the `waitingList` using an enhanced for loop (which doesn't remove elements) and prints each patient's name with their position. Checks if the list is empty. Output goes to `System.out`.
 *         *   `viewScheduledAppointments()`: Iterates through the `appointments` list and prints each patient's name. Checks if the list is empty. Output goes to `System.out`.
 *         *   `cancelAppointment()`: Reads the patient's name to cancel. It iterates through the `appointments` list to find the matching patient by name (case-insensitive comparison). If found, it removes the patient object from the list using `appointments.remove()`. If not found after checking the entire list, it prints an error to `System.err`.
 *         *   `runSystem()`: Contains the main application loop.
 *             *   It repeatedly displays the menu and reads user input.
 *             *   It reads the entire line using `scanner.nextLine()` and then attempts to parse it as an integer using `Integer.parseInt()`. This is a robust way to handle potential `InputMismatchException` if the user enters non-numeric input, allowing us to catch `NumberFormatException`.
 *             *   **`try-catch` (Class-wide):** The main `while` loop within `runSystem` is wrapped in a `try-catch(Exception e)` block. This provides a form of class-wide exception handling, catching any unexpected runtime errors that might occur within the system's core operation loop and printing the error details to `System.err`.
 *             *   **`switch` statement:** Used to direct execution based on the user's valid integer choice, calling the appropriate method for each option.
 *             *   Input validation for the menu choice is handled by the `default` case in the `switch` and the `NumberFormatException` catch block.
 *             *   **`finally` block:** Ensures that the `scanner` resource is closed when the `runSystem` method exits, regardless of whether it completes normally or due to an exception caught by the outer `try-catch`.
 *     *   **`main` Method:**
 *         *   The entry point of the program.
 *         *   Creates an instance of `HospitalSystem` and calls its `runSystem()` method to start the application loop.
 * 
 * 3.  **Error Handling:**
 *     *   `System.err` is used specifically for displaying error messages (e.g., empty queue, patient not found, invalid menu input).
 *     *   `System.out` is used for all normal output (menu, prompts, successful operations, list contents).
 *     *   Input validation is performed for patient names and menu choices.
 *     *   The `try-catch` block around the main loop handles unexpected exceptions, providing a basic level of robustness for the system's operation. A specific `catch (NumberFormatException)` handles invalid numeric input for the menu.
 * 
 * This solution effectively combines the required data structures (`Queue`, `ArrayList` via `List`), input handling (`Scanner`), control flow (`switch`), and error reporting (`System.err`, `try-catch`) within a structured, object-oriented design following best practices like encapsulation and meaningful names.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient with the given name.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Manages the hospital appointment scheduling system.
 */
public class HospitalSystem {

    private Queue<Patient> waitingList;
    private List<Patient> appointments;
    private Scanner scanner;

    /**
     * Constructs a new HospitalSystem.
     * Initializes the waiting list, appointments list, and scanner.
     */
    public HospitalSystem() {
        // Use LinkedList as a concrete implementation of Queue
        this.waitingList = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List
        this.appointments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Appointment");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Cancel Appointment");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list.
     */
    private void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        Patient newPatient = new Patient(name);
        // offer() is preferred over add() for queues as it handles capacity constraints gracefully
        waitingList.offer(newPatient);
        System.out.println("\n" + name + " added to waiting list.");
    }

    /**
     * Schedules the next patient from the waiting list.
     */
    private void scheduleNextAppointment() {
        // poll() retrieves and removes the head of this queue, or returns null if this queue is empty.
        Patient nextPatient = waitingList.poll();

        if (nextPatient == null) {
            System.err.println("\nError: Waiting list is empty. No patients to schedule.");
        } else {
            appointments.add(nextPatient);
            System.out.println("\nScheduling next patient...");
            System.out.println(nextPatient.getName() + " scheduled for an appointment.");
        }
    }

    /**
     * Displays the current waiting list.
     */
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            int i = 1;
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(i++ + ". " + patient.getName());
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays the currently scheduled appointments.
     */
    private void viewScheduledAppointments() {
        System.out.println("\n--- Scheduled Appointments ---");
        if (appointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            for (Patient patient : appointments) {
                System.out.println(patient.getName());
            }
        }
        System.out.println("------------------------------");
    }

    /**
     * Cancels a scheduled appointment by patient name.
     */
    private void cancelAppointment() {
        System.out.print("Enter name of patient to cancel: ");
        String nameToCancel = scanner.nextLine().trim();

        if (nameToCancel.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        boolean foundAndRemoved = false;
        // Iterate and remove carefully. Using removeIf or an iterator is safer
        // than a simple for loop with remove, but a simple loop works if we break after finding.
        // Let's use a standard loop and break or a removal flag.
        // Alternatively, find the patient first then remove by index or object.
        // Finding the patient object first is cleaner.
        Patient patientToRemove = null;
        for (Patient patient : appointments) {
            if (patient.getName().equalsIgnoreCase(nameToCancel)) {
                patientToRemove = patient;
                break; // Found the patient
            }
        }

        if (patientToRemove != null) {
            appointments.remove(patientToRemove);
            System.out.println("\nAppointment for " + patientToRemove.getName() + " cancelled.");
            foundAndRemoved = true;
        }

        if (!foundAndRemoved) {
            System.err.println("\nError: Patient '" + nameToCancel + "' not found in scheduled appointments.");
        }
    }

    /**
     * Runs the main loop of the hospital system, handling user input.
     * Includes class-wide exception handling for the main loop.
     */
    public void runSystem() {
        int choice = 0;
        // Class-wide exception handling wrapping the main operational loop
        try {
            while (choice != 6) {
                displayMenu();
                // Use nextLine() and parse to avoid InputMismatchException with nextInt()
                String input = scanner.nextLine();

                try {
                    choice = Integer.parseInt(input);
                } catch (NumberFormatException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration of the loop
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        scheduleNextAppointment();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        cancelAppointment();
                        break;
                    case 6:
                        System.out.println("\nExiting Hospital Appointment System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the system's operation
            System.err.println("\nAn unexpected error occurred during system operation:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed when the system exits (either normally or via exception)
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the Hospital System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.runSystem();
    }
}
