/*
 * Exam Question #86
 * Generated on: 2025-05-11 22:11:27
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Logistics Hub Package Management**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified package management system for a logistics hub. The system needs to handle incoming packages, queue them for delivery, and assign them to available delivery trucks based on truck capacity.
 * 
 * The system should be interactive, allowing a dispatcher to perform actions like adding new packages, attempting to assign pending packages to trucks, viewing the status of the pending queue and truck loads, and exiting the application.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Data Structures:**
 *     *   Maintain a queue of packages that are waiting to be assigned to a truck. Packages should be processed in a First-In, First-Out (FIFO) manner for assignment attempts.
 *     *   Maintain a list of available delivery trucks.
 * 
 * 2.  **Classes:**
 *     *   Create a `Package` class with private fields for `packageId` (String), `destination` (String), and `weight` (double). Include a constructor and public getter methods.
 *     *   Create a `Truck` class with private fields for `truckId` (String), `capacity` (double - maximum total weight it can carry), and a `List<Package>` to store the packages currently assigned to it. Include a constructor, public getter methods, a method to add a package (`addPackage(Package pkg)`), a method to calculate current load weight, and a method to check if a package can be added (`canAddPackage(Package pkg)`).
 * 
 * 3.  **LogisticsHub Class:**
 *     *   Create a `LogisticsHub` class containing the `main` method.
 *     *   This class should manage the `Queue<Package>` for pending packages and the `List<Truck>` for available trucks.
 *     *   Implement the main application loop and user interaction logic within this class.
 * 
 * 4.  **Functionality:**
 *     *   **Add Package:** Prompt the user for package details (ID, destination, weight). Validate the input (e.g., weight must be positive). Create a `Package` object and add it to the pending package queue.
 *     *   **Assign Packages to Trucks:** Attempt to assign packages from the *front* of the pending queue to available trucks. Iterate through the pending queue. For each package, find the *first* truck in the list that has enough remaining capacity. If a suitable truck is found, assign the package to that truck and remove the package from the pending queue. If no truck has capacity for the current package, it remains in the queue, and the system should proceed to the next package in the queue (this implies packages might be skipped if no truck can take them at the moment). This process should continue until all packages that *can* be assigned have been, or the queue is empty.
 *     *   **View Status:** Display the contents of the pending package queue (ID, destination, weight for each). For each truck, display its ID, capacity, current load weight, and the list of packages assigned to it (ID, destination for each).
 *     *   **Exit:** Terminate the application.
 * 
 * 5.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Add Package, Assign Packages, View Status, Exit).
 *     *   Use a `switch` statement to handle the user's choice.
 * 
 * 6.  **Error Handling:**
 *     *   Implement robust input validation (e.g., ensuring numeric input is valid, package ID/destination are not empty). Use `System.err.println()` for invalid input messages.
 *     *   Use `try-catch` blocks for potential exceptions, such as `NumberFormatException` when parsing input.
 *     *   Implement class-wide exception handling by wrapping the main application loop in a `try-catch(Exception e)` block to catch unexpected errors and print an error message to `System.err`.
 * 
 * 7.  **Output:**
 *     *   Use `System.out.println()` for menu options, prompts, success messages, and status displays.
 *     *   Use `System.err.println()` exclusively for error messages.
 * 
 * 8.  **Best Practices:**
 *     *   Use appropriate Java collections (`Queue`, `List`, `ArrayList`).
 *     *   Ensure proper encapsulation (private fields, public getters/methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Structure the code logically into classes and methods.
 * 
 * **Example Interaction Flow (Partial):**
 * 
 * ```
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG001
 * Enter Destination: New York
 * Enter Weight (kg): 15.5
 * Package PKG001 added to pending queue.
 * 
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG002
 * Enter Destination: Los Angeles
 * Enter Weight (kg): 30.0
 * Package PKG002 added to pending queue.
 * 
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 3
 * --- Logistics Hub Status ---
 * Pending Packages Queue:
 * [PKG001 (New York, 15.5 kg), PKG002 (Los Angeles, 30.0 kg)]
 * 
 * Trucks:
 * Truck ID: TRK001, Capacity: 50.0 kg, Current Load: 0.0 kg
 *   Packages: []
 * Truck ID: TRK002, Capacity: 40.0 kg, Current Load: 0.0 kg
 *   Packages: []
 * ----------------------------
 * 
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 2
 * Attempting to assign packages from queue...
 * Package PKG001 (15.5 kg) assigned to Truck TRK001.
 * Package PKG002 (30.0 kg) assigned to Truck TRK002.
 * Assignment process completed.
 * 
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 3
 * --- Logistics Hub Status ---
 * Pending Packages Queue:
 * []
 * 
 * Trucks:
 * Truck ID: TRK001, Capacity: 50.0 kg, Current Load: 15.5 kg
 *   Packages: [PKG001 (New York)]
 * Truck ID: TRK002, Capacity: 40.0 kg, Current Load: 30.0 kg
 *   Packages: [PKG002 (Los Angeles)]
 * ----------------------------
 * 
 * Logistics Hub Menu:
 * 1. Add New Package
 * 2. Assign Packages to Trucks
 * 3. View Status
 * 4. Exit
 * Enter your choice: 4
 * Exiting Logistics Hub system.
 * ```
 * 
 * **Note:** Assume initial trucks are pre-configured within the code (e.g., TRK001 with 50kg capacity, TRK002 with 40kg capacity). The assignment logic should prioritize packages at the front of the queue and the first available truck with sufficient capacity.
 * 
 * **Expected Output:** Your program should produce output similar to the example flow, clearly indicating menu options, prompts, success messages, error messages (using `System.err`), and the system status.
 *
 * EXPLANATION:
 * This solution implements a simplified logistics hub package management system using the required Java components.
 * 
 * 1.  **Structure:** The code is organized into three classes: `Package`, `Truck`, and `LogisticsHub`. This demonstrates good object-oriented design principles with clear responsibilities for each class.
 * 2.  **`Package` Class:** A simple Plain Old Java Object (POJO) representing a package with encapsulated `packageId`, `destination`, and `weight`. It includes a constructor with basic validation and public getter methods. The `toString()` method provides a convenient representation for printing.
 * 3.  **`Truck` Class:** Represents a delivery truck. It has an ID, a maximum `capacity`, and uses an `ArrayList<Package>` to store the packages currently loaded onto it.
 *     *   `addPackage`: Attempts to add a package after checking capacity.
 *     *   `getCurrentLoadWeight`: Calculates the total weight of packages on the truck by iterating through its internal `List`.
 *     *   `canAddPackage`: Checks if adding a specific package would exceed the truck's capacity.
 *     *   `getPackagesOnTruck`: Returns a *copy* of the list of packages to maintain encapsulation, preventing external code from modifying the truck's load directly.
 *     *   `displayStatus`: A utility method to print the truck's details and its contents.
 * 4.  **`LogisticsHub` Class:** This is the main application class.
 *     *   It holds the core data structures: a `Queue<Package>` named `pendingPackages` (implemented using `LinkedList`) and a `List<Truck>` named `availableTrucks` (implemented using `ArrayList`).
 *     *   The constructor initializes these collections and adds some sample `Truck` objects to the `availableTrucks` list.
 *     *   **`start()` Method:** Contains the main application loop.
 *         *   It calls `printMenu()` to show options.
 *         *   It reads user input using `Scanner`.
 *         *   It uses a `switch` statement to dispatch control based on the user's integer choice.
 *         *   **Class-wide Exception Handling:** The entire `while(true)` loop is wrapped in a `try-catch(Exception e)`. This catches any unhandled exceptions that might occur during the execution of the menu options, preventing the program from crashing abruptly and printing an error message to `System.err`.
 *         *   **Specific Exception Handling:** Inside the loop, nested `try-catch` blocks are used to handle expected errors like `NumberFormatException` during input parsing and `IllegalArgumentException` thrown by the `Package` constructor due to invalid data. These specific errors are also reported using `System.err`.
 *         *   The `finally` block ensures the `Scanner` is closed when the application exits (either normally or due to an unexpected error).
 *     *   **`addPackage()` Method:** Prompts the user for package details, performs basic validation (non-empty ID/destination, positive weight), catches `NumberFormatException` for weight input, creates a `Package` object, and adds it to the `pendingPackages` queue using `offer()`. Input validation errors are reported via `System.err`.
 *     *   **`assignPackages()` Method:** Implements the core assignment logic.
 *         *   It iterates through the `pendingPackages` queue using an `Iterator`. Using an `Iterator` is crucial here because it allows safe removal of elements from the collection *while iterating* using `iterator.remove()`.
 *         *   For each `currentPackage` from the queue, it iterates through the `availableTrucks` list.
 *         *   It checks if the current truck `canAddPackage(currentPackage)`.
 *         *   If capacity is sufficient, the package is added to the truck using `truck.addPackage()`, `iterator.remove()` is called to remove the package from the pending queue, and the inner loop (`for trucks`) is broken because the package has been assigned. The outer loop (`while packageIterator.hasNext()`) then continues to the next package in the queue.
 *         *   If a package cannot be assigned to any truck after checking all available trucks, it simply remains in the queue, and the outer loop continues.
 *     *   **`viewStatus()` Method:** Prints the contents of the `pendingPackages` queue and calls `displayStatus()` for each truck in the `availableTrucks` list. `System.out` is used for all status output.
 *     *   **`main()` Method:** Creates an instance of `LogisticsHub` and calls its `start()` method to run the application.
 * 
 * This solution effectively demonstrates the required components:
 * *   `Queue` (`LinkedList`) for managing pending items in FIFO order.
 * *   `List` (`ArrayList`) for managing a dynamic collection of trucks and for packages within a truck.
 * *   `Scanner` for console input.
 * *   `switch` for menu control.
 * *   `System.err` for error reporting.
 * *   `System.out` for standard output.
 * *   `try-catch` for both specific input validation errors and class-wide unexpected exceptions.
 * *   Best practices like encapsulation, meaningful names, and clear structure are applied. The assignment logic using the `Iterator` for safe removal is a key part of demonstrating advanced collection handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Iterator; // Needed for safe queue processing

// Represents a package to be delivered
class Package {
    private String packageId;
    private String destination;
    private double weight;

    public Package(String packageId, String destination, double weight) {
        if (packageId == null || packageId.trim().isEmpty()) {
            throw new IllegalArgumentException("Package ID cannot be null or empty.");
        }
        if (destination == null || destination.trim().isEmpty()) {
            throw new IllegalArgumentException("Destination cannot be null or empty.");
        }
        if (weight <= 0) {
            throw new IllegalArgumentException("Weight must be positive.");
        }
        this.packageId = packageId.trim();
        this.destination = destination.trim();
        this.weight = weight;
    }

    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeight() {
        return weight;
    }

    @Override
    public String toString() {
        return packageId + " (" + destination + ", " + weight + " kg)";
    }
}

// Represents a delivery truck with a certain capacity
class Truck {
    private String truckId;
    private double capacity; // Maximum total weight
    private List<Package> packagesOnTruck; // List to hold assigned packages

    public Truck(String truckId, double capacity) {
        if (truckId == null || truckId.trim().isEmpty()) {
            throw new IllegalArgumentException("Truck ID cannot be null or empty.");
        }
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity must be positive.");
        }
        this.truckId = truckId.trim();
        this.capacity = capacity;
        this.packagesOnTruck = new ArrayList<>(); // Using ArrayList for packages on truck
    }

    public String getTruckId() {
        return truckId;
    }

    public double getCapacity() {
        return capacity;
    }

    public List<Package> getPackagesOnTruck() {
        // Return a copy or unmodifiable list to prevent external modification
        return new ArrayList<>(packagesOnTruck);
    }

    public double getCurrentLoadWeight() {
        double currentLoad = 0;
        for (Package pkg : packagesOnTruck) {
            currentLoad += pkg.getWeight();
        }
        return currentLoad;
    }

    public boolean canAddPackage(Package pkg) {
        if (pkg == null) {
            return false; // Cannot add a null package
        }
        return getCurrentLoadWeight() + pkg.getWeight() <= capacity;
    }

    public boolean addPackage(Package pkg) {
        if (canAddPackage(pkg)) {
            packagesOnTruck.add(pkg);
            return true;
        }
        // Optionally throw an exception or return false indicating failure
        return false;
    }

    public void displayStatus() {
        System.out.println("Truck ID: " + truckId + ", Capacity: " + capacity + " kg, Current Load: " + getCurrentLoadWeight() + " kg");
        System.out.print("  Packages: [");
        for (int i = 0; i < packagesOnTruck.size(); i++) {
            System.out.print(packagesOnTruck.get(i).getPackageId() + " (" + packagesOnTruck.get(i).getDestination() + ")");
            if (i < packagesOnTruck.size() - 1) {
                System.out.print(", ");
            }
        }
        System.out.println("]");
    }
}

// Main class for the Logistics Hub system
public class LogisticsHub {
    private Queue<Package> pendingPackages; // Queue for packages awaiting assignment
    private List<Truck> availableTrucks; // List of available trucks
    private Scanner scanner;

    public LogisticsHub() {
        this.pendingPackages = new LinkedList<>(); // LinkedList implements Queue
        this.availableTrucks = new ArrayList<>();   // Using ArrayList for trucks
        this.scanner = new Scanner(System.in);

        // Initialize with some trucks
        availableTrucks.add(new Truck("TRK001", 50.0));
        availableTrucks.add(new Truck("TRK002", 40.0));
        availableTrucks.add(new Truck("TRK003", 75.0));

        System.out.println("Logistics Hub system initialized with " + availableTrucks.size() + " trucks.");
    }

    public void start() {
        int choice;
        // Class-wide exception handling for the main loop
        try {
            while (true) {
                printMenu();
                try {
                    System.out.print("Enter your choice: ");
                    choice = Integer.parseInt(scanner.nextLine()); // Read line and parse

                    switch (choice) {
                        case 1:
                            addPackage();
                            break;
                        case 2:
                            assignPackages();
                            break;
                        case 3:
                            viewStatus();
                            break;
                        case 4:
                            System.out.println("Exiting Logistics Hub system.");
                            return; // Exit the loop and method
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                } catch (IllegalArgumentException e) {
                    System.err.println("Input validation error: " + e.getMessage());
                }
                System.out.println(); // Add a newline for better readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main execution flow
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to stderr
        } finally {
            // Ensure scanner is closed
            scanner.close();
        }
    }

    private void printMenu() {
        System.out.println("Logistics Hub Menu:");
        System.out.println("1. Add New Package");
        System.out.println("2. Assign Packages to Trucks");
        System.out.println("3. View Status");
        System.out.println("4. Exit");
    }

    private void addPackage() {
        System.out.println("\n--- Add New Package ---");
        String packageId;
        String destination;
        double weight = -1; // Use -1 to indicate uninitialized/invalid

        System.out.print("Enter Package ID: ");
        packageId = scanner.nextLine().trim();
        if (packageId.isEmpty()) {
             System.err.println("Package ID cannot be empty.");
             return;
        }

        System.out.print("Enter Destination: ");
        destination = scanner.nextLine().trim();
         if (destination.isEmpty()) {
             System.err.println("Destination cannot be empty.");
             return;
        }

        System.out.print("Enter Weight (kg): ");
        try {
            weight = Double.parseDouble(scanner.nextLine());
            if (weight <= 0) {
                 System.err.println("Weight must be a positive number.");
                 return;
            }
        } catch (NumberFormatException e) {
            System.err.println("Invalid weight format. Please enter a number.");
            return; // Stop if weight is invalid
        }

        try {
            Package newPackage = new Package(packageId, destination, weight);
            pendingPackages.offer(newPackage); // Add to the end of the queue
            System.out.println("Package " + packageId + " added to pending queue.");
        } catch (IllegalArgumentException e) {
             System.err.println("Error creating package: " + e.getMessage());
        }
    }

    private void assignPackages() {
        System.out.println("\n--- Assigning Packages ---");
        if (pendingPackages.isEmpty()) {
            System.out.println("No packages in the pending queue.");
            return;
        }

        System.out.println("Attempting to assign packages from queue...");

        // Use an iterator to safely remove elements while iterating
        Iterator<Package> packageIterator = pendingPackages.iterator();
        List<Package> assignedThisRound = new ArrayList<>(); // Temporarily hold assigned packages

        while (packageIterator.hasNext()) {
            Package currentPackage = packageIterator.next();
            boolean assigned = false;

            // Try to assign the current package to the first available truck
            for (Truck truck : availableTrucks) {
                if (truck.canAddPackage(currentPackage)) {
                    truck.addPackage(currentPackage);
                    assignedThisRound.add(currentPackage); // Mark for removal
                    System.out.println("Package " + currentPackage.getPackageId() + " (" + currentPackage.getWeight() + " kg) assigned to Truck " + truck.getTruckId() + ".");
                    assigned = true;
                    // Do NOT break the inner loop immediately. The assignment logic is:
                    // For the current package, find the *first* truck. Once assigned, move to the *next* package.
                    // So, we break the inner truck loop and continue the outer package loop.
                    break;
                }
            }

            if (!assigned) {
                System.out.println("Package " + currentPackage.getPackageId() + " (" + currentPackage.getWeight() + " kg) could not be assigned to any truck (no capacity).");
                // The package remains in the queue. The iterator will handle this.
            }
        }

        // Remove packages that were assigned from the pending queue
        // This is safer than removing directly during iteration with standard for loop
        // Using Iterator.remove() is also an option, but collecting and removing is clearer here.
        // Let's refine: instead of collecting and removing after, let's use Iterator.remove()
        // This is the standard way to modify a collection during iteration.

        packageIterator = pendingPackages.iterator(); // Get a new iterator
        while (packageIterator.hasNext()) {
             Package currentPackage = packageIterator.next();
             boolean assigned = false;
             for (Truck truck : availableTrucks) {
                 if (truck.canAddPackage(currentPackage)) {
                     truck.addPackage(currentPackage);
                     System.out.println("Package " + currentPackage.getPackageId() + " (" + currentPackage.getWeight() + " kg) assigned to Truck " + truck.getTruckId() + ".");
                     packageIterator.remove(); // Safely remove from the queue
                     assigned = true;
                     break; // Move to the next package after assigning the current one
                 }
             }
             if (!assigned) {
                 // Package remains in the queue, do nothing (iterator moves on)
                 // System.out.println("Package " + currentPackage.getPackageId() + " could not be assigned."); // Optional: inform user
             }
        }


        System.out.println("Assignment process completed.");
    }


    private void viewStatus() {
        System.out.println("\n--- Logistics Hub Status ---");

        System.out.println("Pending Packages Queue:");
        if (pendingPackages.isEmpty()) {
            System.out.println("[]");
        } else {
            System.out.println(pendingPackages); // Queue's toString is helpful
        }

        System.out.println("\nTrucks:");
        if (availableTrucks.isEmpty()) {
            System.out.println("No trucks available.");
        } else {
            for (Truck truck : availableTrucks) {
                truck.displayStatus();
            }
        }
        System.out.println("----------------------------");
    }


    public static void main(String[] args) {
        LogisticsHub hub = new LogisticsHub();
        hub.start();
    }
}
