/*
 * Exam Question #777
 * Generated on: 2025-05-12 16:39:14
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Kitchen Order Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified backend system for a restaurant kitchen to manage incoming food orders. The system should handle orders as they arrive, allow chefs to process the next order in line, and provide views of both pending and completed orders.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this kitchen order management system. Your solution must adhere to the following specific requirements:
 * 
 * 1.  **Order Representation:** Create a class named `Order` to represent a single food order. It should have:
 *     *   A unique integer `orderId`.
 *     *   A `List` of `String` objects representing the items in the order.
 *     *   A `String` status (e.g., "PENDING", "PROCESSED").
 *     *   Appropriate private fields, a constructor, and public getter methods. Include a method to mark the order as processed.
 *     *   Override `toString()` for easy printing.
 * 
 * 2.  **Kitchen Manager Class:** Create a class named `KitchenManager` to manage the orders. It should contain:
 *     *   A `Queue` to hold orders that are pending processing.
 *     *    an `ArrayList` to store orders that have been processed.
 *     *   A `Scanner` object to read user input from the console.
 *     *   A constructor to initialize these data structures and the `Scanner`.
 * 
 * 3.  **Functionality:** The `KitchenManager` class must implement the following operations based on user input via a command-line menu:
 *     *   **Add New Order:** Prompt the user for an order ID (a positive integer) and a comma-separated list of items. Create an `Order` object with status "PENDING" and add it to the pending orders `Queue`.
 *     *   **Process Next Order:** Take the oldest order from the front of the pending orders `Queue`. If an order is retrieved, mark its status as "PROCESSED" and move it to the processed orders `ArrayList`. Handle the case where there are no pending orders.
 *     *   **View Pending Orders:** Display all orders currently in the pending orders `Queue` without removing them. Show their ID, status, and items.
 *     *   **View Processed Orders:** Display all orders currently in the processed orders `ArrayList`. Show their ID, status, and items.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:** Present a menu of options to the user using `System.out`. Read the user's choice using `Scanner`.
 * 
 * 5.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 
 * 6.  **Error Handling & Validation:**
 *     *   Use `System.err` to print error messages (e.g., for invalid menu choices, invalid input formats, or when trying to process an order from an empty queue).
 *     *   Implement input validation for the order ID (must be a positive integer). Handle `InputMismatchException` when reading integer input.
 *     *   Implement **class-wide exception handling** using a `try-catch` block that wraps the main loop of your program, catching potential unexpected errors during the execution of menu options.
 * 
 * 7.  **Best Practices:**
 *     *   Use appropriate variable and method names.
 *     *   Include necessary comments to explain complex parts.
 *     *   Ensure proper encapsulation.
 *     *   Handle resources (like the `Scanner`) properly (e.g., close it).
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input, and showing results or error messages based on the user's actions. Example interactions:
 * 
 * ```
 * --- Kitchen Order Management System ---
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 1
 * --- Add New Order ---
 * Enter Order ID (integer > 0): 101
 * Enter items (comma-separated, e.g., Burger,Fries,Drink): Pizza,Coke
 * Order 101 added to pending queue.
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 1
 * --- Add New Order ---
 * Enter Order ID (integer > 0): 102
 * Enter items (comma-separated, e.g., Burger,Fries,Drink): Salad
 * Order 102 added to pending queue.
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 3
 * --- Pending Orders ---
 * 1. Order [ID=101, Status=PENDING, Items=[Pizza, Coke]]
 * 2. Order [ID=102, Status=PENDING, Items=[Salad]]
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 2
 * --- Process Next Order ---
 * Processed order: 101
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 3
 * --- Pending Orders ---
 * 1. Order [ID=102, Status=PENDING, Items=[Salad]]
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 4
 * --- Processed Orders ---
 * 1. Order [ID=101, Status=PROCESSED, Items=[Pizza, Coke]]
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: invalid
 * Invalid input. Please enter a number.
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Processed Orders
 * 5. Exit
 * Enter choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * Your code should be complete and runnable as a single file (or with inner classes if preferred).
 *
 * EXPLANATION:
 * This solution implements a simple kitchen order management system demonstrating the required Java concepts.
 * 
 * 1.  **`Order` Class:** Represents an individual order with an ID, a list of items, and a status. It follows encapsulation principles with private fields and public methods (`getOrderId`, `getItems`, `getStatus`, `markAsProcessed`). The constructor initializes the status to "PENDING". The `toString()` method provides a convenient way to print order details. A defensive copy is made for the `items` list in the constructor and getter to prevent external modification of the internal list state.
 * 
 * 2.  **`KitchenManager` Class:** This is the main class orchestrating the system.
 *     *   It uses a `Queue<Order>` (`pendingOrders`) implemented by `LinkedList` to store orders awaiting processing. The `Queue` naturally enforces the First-In, First-Out (FIFO) order required for processing orders in the order they arrive.
 *     *   It uses a `List<Order>` (`processedOrders`) implemented by `ArrayList` to store orders that have been completed. `ArrayList` is suitable here as processed orders are typically viewed or archived, and indexed access might be useful (though not strictly required by this problem).
 *     *   A `Scanner` is used for console input.
 * 
 * 3.  **`run()` Method:** This method contains the main application loop. It repeatedly displays the menu and reads the user's choice.
 *     *   It uses a `while` loop that continues until the user selects the "Exit" option (choice 5).
 *     *   A `switch` statement directs the program flow to the appropriate method based on the user's valid integer choice.
 *     *   **Class-wide Exception Handling:** The entire `while` loop is wrapped in a `try-catch` block. This demonstrates catching potential exceptions that might occur *during the execution* of any of the menu options. A specific `catch (InputMismatchException e)` is included to handle cases where the user enters non-integer input for the menu choice, preventing the program from crashing and allowing the loop to continue after clearing the invalid input from the scanner buffer (`scanner.nextLine()`). A general `catch (Exception e)` is also included as a fallback for any other unexpected runtime errors within the loop, printing the error to `System.err` and the stack trace for debugging.
 *     *   A `finally` block ensures that the `Scanner` resource is closed when the `run()` method finishes, whether normally or due to an unhandled exception.
 * 
 * 4.  **Menu Options Methods (`addNewOrder`, `processNextOrder`, `viewPendingOrders`, `viewProcessedOrders`):**
 *     *   `addNewOrder()`: Prompts for ID and items. It includes a `while` loop with a nested `try-catch` to specifically handle `InputMismatchException` and validate that the entered order ID is a positive integer, ensuring robust input reading before proceeding. It splits the comma-separated items string and adds the new `Order` to the `pendingOrders` queue using `offer()`.
 *     *   `processNextOrder()`: Uses `pendingOrders.poll()` to retrieve and remove the head of the queue. `poll()` is safe as it returns `null` if the queue is empty, which is checked before attempting to process. The processed order's status is updated, and it's added to the `processedOrders` list.
 *     *   `viewPendingOrders()`: Checks if the queue is empty. If not, it iterates through the `pendingOrders` queue using an enhanced `for` loop (or an iterator). This iteration *does not* remove elements from the queue, fulfilling the requirement to view without processing.
 *     *   `viewProcessedOrders()`: Checks if the list is empty. If not, it iterates through the `processedOrders` `ArrayList` using an index-based `for` loop, demonstrating standard `List` traversal.
 * 
 * 5.  **`System.out` and `System.err`:** `System.out` is used for the menu, prompts, and successful operation messages. `System.err` is used specifically for displaying error conditions like invalid input or invalid menu choices, directing error output to the standard error stream as per best practices.
 * 
 * 6.  **`main` Method:** Creates an instance of `KitchenManager` and calls the `run()` method to start the application.
 * 
 * This solution effectively integrates all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical, object-oriented structure, demonstrating input validation, error handling, and basic data structure manipulation suitable for an advanced programming exam.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner

// Represents a single food order
class Order {
    private int orderId;
    private List<String> items;
    private String status; // "PENDING", "PROCESSED"

    /**
     * Constructs a new Order.
     *
     * @param orderId The unique identifier for the order.
     * @param items   The list of items in the order.
     */
    public Order(int orderId, List<String> items) {
        this.orderId = orderId;
        // Create a defensive copy of the items list
        this.items = new ArrayList<>(items);
        this.status = "PENDING"; // Initial status
    }

    // --- Getters ---
    public int getOrderId() {
        return orderId;
    }

    public List<String> getItems() {
        // Return a new list or unmodifiable list to prevent external modification
        return new ArrayList<>(items);
    }

    public String getStatus() {
        return status;
    }

    /**
     * Marks the order's status as PROCESSED.
     */
    public void markAsProcessed() {
        this.status = "PROCESSED";
    }

    /**
     * Provides a string representation of the Order.
     */
    @Override
    public String toString() {
        return "Order [ID=" + orderId + ", Status=" + status + ", Items=" + items + "]";
    }
}

// Manages the flow of orders in the kitchen
public class KitchenManager {
    // Queue for orders waiting to be processed (FIFO)
    private Queue<Order> pendingOrders;
    // List for orders that have been processed
    private List<Order> processedOrders;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new KitchenManager, initializing order queues and scanner.
     */
    public KitchenManager() {
        // Use LinkedList as a concrete implementation of the Queue interface
        this.pendingOrders = new LinkedList<>();
        // Use ArrayList as a concrete implementation of the List interface
        this.processedOrders = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Starts the main application loop, displaying the menu and handling user input.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1;
        System.out.println("--- Kitchen Order Management System ---");

        // Class-wide exception handling for the main application loop
        try {
            // Loop until the user chooses to exit (choice 5)
            while (choice != 5) {
                printMenu();
                System.out.print("Enter choice: ");

                try {
                    // Read the integer choice
                    choice = scanner.nextInt();
                    // Consume the leftover newline character after reading the integer
                    scanner.nextLine();

                    // Use a switch statement to handle different menu options
                    switch (choice) {
                        case 1:
                            addNewOrder();
                            break;
                        case 2:
                            processNextOrder();
                            break;
                        case 3:
                            viewPendingOrders();
                            break;
                        case 4:
                            viewProcessedOrders();
                            break;
                        case 5:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            // Handle invalid integer choices
                            System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input for the menu choice
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to ensure loop continues
                } catch (Exception e) {
                     // Catch any other unexpected exceptions that might occur during a menu operation
                     System.err.println("An unexpected error occurred: " + e.getMessage());
                     // Print stack trace to error stream for debugging
                     e.printStackTrace(System.err);
                     choice = -1; // Reset choice to ensure loop continues
                }
                System.out.println(); // Add a newline for better spacing between interactions
            }
        } finally {
            // Ensure the scanner resource is closed when the application exits or errors occur
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("1. Add New Order");
        System.out.println("2. Process Next Order");
        System.out.println("3. View Pending Orders");
        System.out.println("4. View Processed Orders");
        System.out.println("5. Exit");
    }

    /**
     * Handles adding a new order based on user input.
     * Includes input validation for Order ID.
     */
    private void addNewOrder() {
        System.out.println("--- Add New Order ---");
        int orderId = -1;
        boolean validInput = false;

        // Loop for robust input of Order ID with validation
        while (!validInput) {
            System.out.print("Enter Order ID (integer > 0): ");
            try {
                orderId = scanner.nextInt();
                if (orderId > 0) {
                    validInput = true; // Input is valid, exit loop
                } else {
                    // Invalid ID value
                    System.err.println("Order ID must be a positive integer.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input
                System.err.println("Invalid input. Please enter an integer for Order ID.");
                scanner.nextLine(); // Consume the invalid input
            }
        }
        // Consume the leftover newline after reading the integer ID
        scanner.nextLine();

        // Get the items string from the user
        System.out.print("Enter items (comma-separated, e.g., Burger,Fries,Drink): ");
        String itemsString = scanner.nextLine();
        String[] itemArray = itemsString.split(","); // Split the string by comma

        // Create a List of items, trimming whitespace
        List<String> items = new ArrayList<>();
        for (String item : itemArray) {
            items.add(item.trim());
        }

        // Create the new Order object
        Order newOrder = new Order(orderId, items);
        // Add the new order to the pending queue. offer() is generally preferred over add() in queues
        pendingOrders.offer(newOrder);
        System.out.println("Order " + orderId + " added to pending queue.");
    }

    /**
     * Processes the next available order from the pending queue.
     */
    private void processNextOrder() {
        System.out.println("--- Process Next Order ---");
        // Retrieve and remove the head of the queue. poll() returns null if queue is empty.
        Order orderToProcess = pendingOrders.poll();

        if (orderToProcess != null) {
            // Mark the order as processed
            orderToProcess.markAsProcessed();
            // Add the processed order to the processed list
            processedOrders.add(orderToProcess);
            System.out.println("Processed order: " + orderToProcess.getOrderId());
        } else {
            // Handle the case where the queue is empty
            System.out.println("No pending orders to process.");
        }
    }

    /**
     * Displays all orders currently in the pending queue without removing them.
     */
    private void viewPendingOrders() {
        System.out.println("--- Pending Orders ---");
        if (pendingOrders.isEmpty()) {
            System.out.println("No orders currently pending.");
        } else {
            // Iterate through the queue using enhanced for loop (or iterator)
            // This does NOT remove elements from the queue
            int count = 1;
            for (Order order : pendingOrders) {
                System.out.println(count + ". " + order);
                count++;
            }
            // Alternative: Convert to List if indexed access was needed
            // List<Order> pendingList = new ArrayList<>(pendingOrders);
            // for (int i = 0; i < pendingList.size(); i++) {
            //     System.out.println((i + 1) + ". " + pendingList.get(i));
            // }
        }
    }

    /**
     * Displays all orders that have been processed.
     */
    private void viewProcessedOrders() {
        System.out.println("--- Processed Orders ---");
        if (processedOrders.isEmpty()) {
            System.out.println("No orders have been processed yet.");
        } else {
            // Iterate through the ArrayList using index
            for (int i = 0; i < processedOrders.size(); i++) {
                System.out.println((i + 1) + ". " + processedOrders.get(i));
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        KitchenManager manager = new KitchenManager();
        manager.run(); // Start the main application loop
    }
}
