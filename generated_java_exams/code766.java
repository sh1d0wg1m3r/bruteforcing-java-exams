/*
 * Exam Question #766
 * Generated on: 2025-05-12 16:37:45
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Workshop Registration System**
 * 
 * You are tasked with developing a simple command-line application for managing registrations for a workshop. The workshop has a fixed maximum capacity. Attendees register by providing their name and email. If the workshop is not full, the attendee is added to the list of registered attendees. If the workshop is full, the attendee is added to a waiting list. The system should allow viewing registered attendees and the waiting list, and also provide a function to process the waiting list to fill any spots that become available (e.g., due to cancellations, although cancellation logic itself is not required for this problem; assume spots become available and need filling from the waiting list).
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.List` (specifically an `ArrayList`) to store the registered attendees.
 *     *   Use a `java.util.Queue` (specifically a `LinkedList` which implements `Queue`) to store attendees on the waiting list.
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a menu-driven interface with options to:
 *         *   Register a new attendee.
 *         *   View registered attendees.
 *         *   View the waiting list.
 *         *   Process the waiting list (move attendees from waiting list to registered list if space is available).
 *         *   Exit the application.
 * 
 * 3.  **Flow Control:**
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 4.  **Output:**
 *     *   Use `System.out` for normal output, such as menu display, prompts, success messages, and listing attendees.
 *     *   Use `System.err` for displaying error messages, such as invalid input, registration failure (if applicable beyond just waiting list), or validation errors.
 * 
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to manage potential runtime errors, especially related to user input (e.g., non-integer input for menu choices).
 *     *   Include basic input validation (e.g., ensure name and email are not empty during registration).
 * 
 * 6.  **Object-Oriented Principles:**
 *     *   Create a separate class (`Attendee`) to represent an attendee with private fields (name, email) and public methods (constructor, getters, `toString`).
 *     *   Implement proper encapsulation in the main system class (`WorkshopRegistrationSystem`) by keeping data fields private and providing public methods for interaction.
 * 
 * 7.  **Code Quality:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments to explain complex logic or sections.
 *     *   Structure the code logically into methods.
 * 
 * **Workshop Capacity:**
 * Set a small maximum capacity for the workshop (e.g., 3 or 5) to easily test the waiting list functionality.
 * 
 * **Expected Output:**
 * The program should display a menu, accept user input, perform the requested action, and provide feedback using `System.out` for success/information and `System.err` for errors. When listing attendees or the waiting list, display them in a readable format (e.g., numbered list).
 * 
 * Your task is to provide the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic workshop registration system demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Attendee` Class:** A simple class `Attendee` is created to encapsulate the data for each person (name and email). It follows encapsulation principles with private fields and public getter methods. The `toString()` method provides a convenient way to print attendee details.
 * 
 * 2.  **`WorkshopRegistrationSystem` Class:** This is the main class managing the registration logic.
 *     *   **Data Members:** It holds the `maxCapacity`, a `List<Attendee>` (`registeredAttendees`) implemented as `ArrayList` for the main list, and a `Queue<Attendee>` (`waitingList`) implemented as `LinkedList` for the waiting list. A `Scanner` is used for input. All data members are `private` for encapsulation.
 *     *   **Constructor:** Initializes the capacity, the `ArrayList`, the `LinkedList` (as a `Queue`), and the `Scanner`.
 *     *   **`run()` Method:** This is the main application loop. It displays the menu, reads user input, and uses a `switch` statement to dispatch to the appropriate handler method based on the user's choice.
 *         *   **Class-wide Exception Handling:** A `try-catch(Exception e)` block wraps the entire `do-while` loop in `run()`. This catches any unexpected runtime errors that might occur within the system's operation, preventing the program from crashing abruptly and printing an error message to `System.err`.
 *         *   **Input-specific Exception Handling:** An inner `try-catch(InputMismatchException e)` is used specifically when reading the integer menu choice. This handles cases where the user enters non-integer input, prints an error to `System.err`, consumes the invalid input from the `Scanner` to prevent an infinite loop, and allows the program to continue.
 *         *   **`finally` Block:** Ensures the `Scanner` resource is closed when the `run` method finishes (either by exiting the loop or catching an exception).
 *     *   **`displayMenu()`:** A helper method to print the available options using `System.out`.
 *     *   **`registerAttendee()`:** Prompts for name and email, performs basic validation (checks for empty strings), creates an `Attendee` object. It checks if `registeredAttendees.size()` is less than `maxCapacity`. If yes, the attendee is added to the `registeredAttendees` `List` using `add()`. If full, the attendee is added to the `waitingList` `Queue` using `offer()`. Success messages are printed to `System.out`, validation errors to `System.err`.
 *     *   **`viewRegisteredAttendees()`:** Iterates through the `registeredAttendees` `List` and prints each attendee's details using `System.out`. It also shows the current count and capacity.
 *     *   **`viewWaitingList()`:** Iterates through the `waitingList` `Queue` using an enhanced for loop (which iterates without removing elements) and prints each attendee's details using `System.out`.
 *     *   **`processWaitingList()`:** Calculates the number of available spots. If spots exist, it enters a loop that continues as long as there are spots and the `waitingList` is not empty. Inside the loop, `waitingList.poll()` is used to retrieve and remove the next attendee from the head of the queue. This attendee is then added to the `registeredAttendees` `List` using `add()`. Messages about attendees being moved are printed to `System.out`.
 *     *   **`main()`:** The entry point of the program. It sets the workshop capacity, creates an instance of `WorkshopRegistrationSystem`, and calls the `run()` method to start the application.
 * 
 * This solution effectively integrates `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` in a practical scenario, demonstrating key Java programming skills including data structure usage, user interaction, control flow, error handling, and basic object-oriented design.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents an attendee for the workshop
class Attendee {
    private String name;
    private String email;

    /**
     * Constructs a new Attendee.
     * @param name The name of the attendee.
     * @param email The email address of the attendee.
     */
    public Attendee(String name, String email) {
        this.name = name;
        this.email = email;
    }

    // --- Getters ---
    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    /**
     * Returns a string representation of the Attendee.
     * @return Formatted string like "Name (email)".
     */
    @Override
    public String toString() {
        return name + " (" + email + ")";
    }
}

/**
 * Manages registrations for a workshop, including a waiting list.
 */
public class WorkshopRegistrationSystem {

    private int maxCapacity;
    private List<Attendee> registeredAttendees;
    private Queue<Attendee> waitingList;
    private Scanner scanner;

    /**
     * Constructs a WorkshopRegistrationSystem with a specified capacity.
     * @param maxCapacity The maximum number of attendees allowed in the workshop.
     */
    public WorkshopRegistrationSystem(int maxCapacity) {
        this.maxCapacity = maxCapacity;
        // Use ArrayList for easy access to registered attendees
        this.registeredAttendees = new ArrayList<>();
        // Use LinkedList as a Queue implementation for the waiting list
        this.waitingList = new LinkedList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Starts the workshop registration system application loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("--- Workshop Registration System ---");

        // Class-wide try-catch block to handle unexpected errors during execution
        try {
            int choice;
            // Loop until the user chooses to exit (choice 5)
            do {
                displayMenu();
                System.out.print("Enter your choice: ");

                // Specific try-catch for handling input type mismatches
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character after reading int

                    // Use switch statement to handle different menu options
                    switch (choice) {
                        case 1:
                            registerAttendee();
                            break;
                        case 2:
                            viewRegisteredAttendees();
                            break;
                        case 3:
                            viewWaitingList();
                            break;
                        case 4:
                            processWaitingList();
                            break;
                        case 5:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            // Invalid choice is an error
                            System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Handle cases where input is not an integer
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = 0; // Reset choice to a non-exit value to continue loop
                }
                System.out.println(); // Print a blank line for better readability between actions

            } while (choice != 5);

        } catch (Exception e) {
            // Catch any other unexpected exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Optional: e.printStackTrace(); for detailed debugging
        } finally {
            // Ensure the scanner resource is closed when the program exits or encounters a critical error
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("Menu:");
        System.out.println("1. Register Attendee");
        System.out.println("2. View Registered Attendees");
        System.out.println("3. View Waiting List");
        System.out.println("4. Process Waiting List");
        System.out.println("5. Exit");
    }

    /**
     * Handles the registration process for a new attendee.
     * Adds to registered list if space available, otherwise adds to waiting list.
     */
    private void registerAttendee() {
        System.out.println("--- Register New Attendee ---");
        System.out.print("Enter Attendee Name: ");
        String name = scanner.nextLine().trim(); // Use trim() to remove leading/trailing whitespace
        System.out.print("Enter Attendee Email: ");
        String email = scanner.nextLine().trim();

        // Basic input validation: Check if name or email are empty
        if (name.isEmpty() || email.isEmpty()) {
            System.err.println("Error: Name and Email cannot be empty.");
            return; // Exit the method if validation fails
        }

        Attendee newAttendee = new Attendee(name, email);

        // Check if current registered attendees count is less than maximum capacity
        if (registeredAttendees.size() < maxCapacity) {
            registeredAttendees.add(newAttendee); // Add to the List of registered attendees
            System.out.println("Successfully registered: " + newAttendee);
        } else {
            // If full, add to the Queue (waiting list)
            waitingList.offer(newAttendee); // offer() is preferred over add() for bounded queues, though LinkedList is unbounded
            System.out.println("Workshop is full. " + newAttendee + " added to waiting list.");
        }
    }

    /**
     * Displays the list of attendees currently registered for the workshop.
     */
    private void viewRegisteredAttendees() {
        System.out.println("--- Registered Attendees (" + registeredAttendees.size() + "/" + maxCapacity + ") ---");
        if (registeredAttendees.isEmpty()) {
            System.out.println("No attendees registered yet.");
        } else {
            // Iterate and print attendees from the List
            for (int i = 0; i < registeredAttendees.size(); i++) {
                System.out.println((i + 1) + ". " + registeredAttendees.get(i));
            }
        }
    }

    /**
     * Displays the list of attendees currently on the waiting list.
     */
    private void viewWaitingList() {
        System.out.println("--- Waiting List (" + waitingList.size() + ") ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate and print attendees from the Queue without removing them
            int i = 1;
            for (Attendee attendee : waitingList) {
                System.out.println((i++) + ". " + attendee);
            }
        }
    }

    /**
     * Processes the waiting list, moving attendees to the registered list
     * if there are available spots.
     */
    private void processWaitingList() {
        System.out.println("--- Processing Waiting List ---");
        // Calculate how many spots are available
        int spotsAvailable = maxCapacity - registeredAttendees.size();

        if (spotsAvailable <= 0) {
            System.out.println("No spots available. Workshop is already at full capacity (" + maxCapacity + ").");
            return; // No need to process if no spots are open
        }

        System.out.println(spotsAvailable + " spot(s) available to fill from the waiting list.");
        int movedCount = 0;

        // Move attendees from waiting list to registered list as long as there's space and people waiting
        while (spotsAvailable > 0 && !waitingList.isEmpty()) {
            Attendee attendeeToMove = waitingList.poll(); // Get and remove the head of the queue
            if (attendeeToMove != null) { // poll() can return null if queue is empty, but we check !waitingList.isEmpty()
                registeredAttendees.add(attendeeToMove); // Add to the registered list
                System.out.println("Moved from waiting list to registered: " + attendeeToMove);
                spotsAvailable--; // Decrement available spots
                movedCount++; // Increment count of moved attendees
            }
        }

        if (movedCount == 0) {
            System.out.println("Waiting list is empty or no spots were available.");
        } else {
            System.out.println(movedCount + " attendee(s) successfully moved from waiting list.");
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Set the workshop capacity for demonstration
        int workshopCapacity = 3; // Example capacity

        WorkshopRegistrationSystem system = new WorkshopRegistrationSystem(workshopCapacity);
        system.run(); // Start the main application loop
    }
}
