/*
 * Exam Question #48
 * Generated on: 2025-05-11 22:05:03
 * Generated by: Account 3
 * 
 * QUESTION:
 * ```
 * Subject: Advanced Java Programming - Exam Task
 * 
 * Duration: 45-60 minutes
 * 
 * Task: Simple Task Management System
 * 
 * Scenario:
 * A small software development team needs a basic command-line tool to manage their daily tasks. Tasks are added to a processing queue and are completed in a first-in, first-out manner. Once completed, tasks are moved to an archive list. The system should allow users to add new tasks, view pending tasks, complete the next task in the queue, and view archived tasks.
 * 
 * Your task is to implement this system in Java, adhering to the specific requirements below.
 * 
 * Requirements:
 * 1.  **Data Structures:**
 *     *   Implement a `Task` class with private fields for `id` (auto-generated integer, starting from 1), `description` (String), and `priority` (enum: `HIGH`, `MEDIUM`, `LOW`). Include a constructor, getters, and a meaningful `toString()` method. Basic validation for description and priority in the constructor is recommended.
 *     *   Implement a `Priority` enum with constants `HIGH`, `MEDIUM`, `LOW`. Include a static helper method (e.g., `fromString`) to parse a case-insensitive string into a `Priority` enum, throwing `IllegalArgumentException` for invalid input strings.
 *     *   Implement a `TaskManager` class that manages the tasks. It must contain:
 *         *   A private field `taskQueue` of type `java.util.Queue<Task>` to hold pending tasks (use `java.util.LinkedList` as the concrete implementation).
 *         *   A private field `completedTasks` of type `java.util.List<Task>` to hold completed tasks (use `java.util.ArrayList` as the concrete implementation).
 *         *   A private field `scanner` of type `java.util.Scanner` for user input (initialized with `System.in`).
 *         *   A private boolean field `running` to control the main application loop.
 * 2.  **Functionality:**
 *     *   The `TaskManager` class must have public methods:
 *         *   `addTask(String description, String priorityStr)`: Adds a new task to the `taskQueue`. It should parse the `priorityStr` using your `Priority.fromString` method. Handle potential `IllegalArgumentException` during parsing.
 *         *   `viewPendingTasks()`: Prints all tasks currently in the `taskQueue` to `System.out`. Indicate if the queue is empty. The order should reflect the queue's FIFO nature.
 *         *   `completeNextTask()`: Removes the next task from the `taskQueue` (FIFO) and adds it to the `completedTasks` list. Print a success message to `System.out` showing the completed task. If the `taskQueue` is empty, print an informative error message to `System.err`.
 *         *   `viewCompletedTasks()`: Prints all tasks in the `completedTasks` list to `System.out`. Indicate if the list is empty. The order should reflect the order of completion.
 *         *   `run()`: This method should contain the main application loop. It should repeatedly display a menu to the user, read their choice using the `Scanner`, and perform the selected action. The loop should continue while the `running` field is true.
 * 3.  **User Interface & Control Flow:**
 *     *   Display a clear menu with numbered options for: 1. Add New Task, 2. View Pending Tasks, 3. Complete Next Task, 4. View Completed Tasks, 5. Exit.
 *     *   Use a `switch` statement based on the user's menu choice (read as a String) within the `run()` method.
 *     *   Use `System.out` for all standard output (menu, prompts, task lists, success messages).
 *     *   Use `System.err` for all error messages (invalid menu choice, invalid priority input, attempting to complete task from empty queue, unexpected errors).
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks within the `TaskManager` class.
 *     *   Specifically, handle `IllegalArgumentException` that may occur when parsing the priority string or creating a `Task`. Print an informative error message to `System.err`.
 *     *   Include a general `try-catch (Exception e)` block around the main command processing logic within the `run()` method to catch any unexpected runtime exceptions and print an error message to `System.err`.
 *     *   Handle the business logic error of trying to complete a task when the queue is empty by checking `taskQueue.isEmpty()` and printing a message to `System.err`.
 * 5.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for classes, methods, variables, and enum constants.
 *     *   Include basic comments or Javadoc for classes and methods explaining their purpose.
 *     *   Perform input validation where necessary (e.g., priority string, non-empty description).
 *     *   Close the `Scanner` resource when the application exits (when `running` becomes false).
 * 
 * Expected Output:
 * The program should run interactively. It should display a menu, accept user input, and perform actions based on the input. Output should clearly distinguish between normal information (`System.out`) and errors (`System.err`). Examples of expected interactions include:
 * - Displaying the menu.
 * - Prompting for task details when adding a task.
 * - Displaying a success message after adding/completing a task.
 * - Listing pending or completed tasks in their respective orders.
 * - Displaying an error message on `System.err` for invalid menu choices, invalid priority input, or attempting to complete a task when none are pending.
 * - Exiting gracefully when option 5 is chosen.
 * 
 * Example Interaction Snippet:
 * ```
 * Welcome to the Task Management System!
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. View Pending Tasks
 * 3. Complete Next Task
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Implement Task Class
 * Enter priority (HIGH, MEDIUM, LOW): HIGH
 * 
 * --> Task added: Task #1 [Priority: HIGH] - Implement Task Class
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 2
 * --- Pending Tasks ---
 * 1. Task #1 [Priority: HIGH] - Implement Task Class
 * ---------------------
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 3
 * 
 * --> Task completed: Task #1 [Priority: HIGH] - Implement Task Class
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 4
 * --- Completed Tasks ---
 * 1. Task #1 [Priority: HIGH] - Implement Task Class
 * -----------------------
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 3
 * Error: No tasks in the queue to complete.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 1
 * Enter task description: Write Exam Question
 * Enter priority (HIGH, MEDIUM, LOW): URGENT
 * Error adding task: Invalid priority: URGENT. Valid options are HIGH, MEDIUM, LOW.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * ... (menu options) ...
 * Enter your choice: 5
 * Exiting Task Management System. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes and the main method.
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System using several core Java concepts and data structures as required.
 * 
 * **Overall Structure:**
 * The program is organized into four classes:
 * 1.  `Priority` (enum): Defines the allowed priority levels for tasks and provides a robust method for parsing priority strings.
 * 2.  `Task` (class): Represents a single task object, encapsulating its ID, description, and priority. It includes basic validation and a formatted `toString` method.
 * 3.  `TaskManager` (class): Contains the main logic for managing tasks. It holds the pending and completed task collections, handles user interaction, and processes commands.
 * 4.  `TaskManagerApp` (class): Contains the `main` method, serving as the entry point to create and run the `TaskManager`.
 * 
 * **Required Components Usage:**
 * -   **`Queue` (`java.util.Queue`)**: The `taskQueue` field in `TaskManager` is declared as a `Queue<Task>` and initialized with a `LinkedList`. This structure correctly implements the FIFO (First-In, First-Out) processing order required for pending tasks. Methods like `offer()` (to add) and `poll()` (to remove from the head) are used.
 * -   **`ArrayList` (`java.util.ArrayList`)**: The `completedTasks` field in `TaskManager` is initialized as an `ArrayList<Task>`. This provides a dynamic array implementation to store tasks after they are completed.
 * -   **`List` (`java.util.List`)**: The `completedTasks` field is declared with the `List<Task>` interface type, demonstrating programming to the interface rather than the concrete implementation (`ArrayList`).
 * -   **`Scanner` (`java.util.Scanner`)**: A `Scanner` object is used in the `TaskManager` class to read user input from the console (`System.in`) for menu choices, task descriptions, and priorities. The `nextLine()` method is used to read entire lines of input. The scanner is closed when the application exits.
 * -   **`Switch` statement**: The `run()` method in `TaskManager` uses a `switch` statement based on the user's menu choice (read as a string) to direct execution to the appropriate task management method (`addTask`, `viewPendingTasks`, `completeNextTask`, `viewCompletedTasks`, or exit).
 * -   **`System.err`**: Used specifically for outputting error messages, such as invalid menu choices, errors during task creation (e.g., invalid priority), and attempting to complete a task when the queue is empty. This separates error output from normal program output.
 * -   **`System.out`**: Used for all standard program output, including the welcome message, the menu display, prompts for input, listing pending and completed tasks, and success messages for adding or completing tasks.
 * -   **`try-catch` blocks (Class-wide Exception Handling)**:
 *     *   Within the `addTask` method, a `try-catch(IllegalArgumentException e)` block is used to specifically handle errors that occur during the parsing of the priority string (`Priority.fromString`) or during `Task` object creation (e.g., empty description). This demonstrates handling specific, anticipated input-related exceptions.
 *     *   Within the `run()` method, a general `try-catch(Exception e)` block wraps the core `switch` statement and input reading logic. This provides a broader, "class-wide" exception handling mechanism within the `TaskManager` class, catching any other unexpected runtime errors that might occur during the processing of user commands and preventing the program from crashing abruptly.
 * 
 * **Best Practices Implementation:**
 * -   **Encapsulation:** Fields in `Task` and `TaskManager` classes are declared as `private`, with access provided through public methods (getters, functional methods like `addTask`, `completeNextTask`).
 * -   **Meaningful Names:** Classes (`Task`, `TaskManager`, `Priority`), methods (`addTask`, `viewPendingTasks`, `completeNextTask`, `fromString`, `run`), and variables (`taskQueue`, `completedTasks`, `description`, `priorityStr`) have names that clearly indicate their purpose. Enum constants (`HIGH`, `MEDIUM`, `LOW`) are also descriptive.
 * -   **Comments and Documentation:** Basic Javadoc comments are included for classes and methods, explaining their purpose and parameters/return values where applicable. Inline comments clarify specific logic sections.
 * -   **Input Validation:** The `Priority.fromString` method validates the input string format, throwing `IllegalArgumentException` if it's invalid. The `Task` constructor validates that the description is not empty. These validations are handled by catching the exceptions in `addTask`. The `run` method implicitly validates the menu choice via the `switch` statement's `default` case.
 * -   **Error Handling:** As detailed above, `try-catch` blocks handle exceptions, while `if` checks handle business logic errors (like an empty queue), with messages directed to `System.err`.
 * -   **Clean Code Structure:** The code is divided into logical units (classes, methods) with clear responsibilities, making it readable and maintainable.
 * 
 * This solution effectively integrates the required Java components to create a functional and robust command-line application, demonstrating key principles of object-oriented design, data structure usage, and error handling in Java.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.NoSuchElementException; // Imported but not strictly needed with poll() and isEmpty()

// --- Priority Enum ---

/**
 * Represents the priority level of a task.
 */
enum Priority {
    HIGH, MEDIUM, LOW;

    /**
     * Parses a string into a Priority enum, case-insensitive.
     * @param priorityStr The string to parse.
     * @return The corresponding Priority enum.
     * @throws IllegalArgumentException if the string does not match any priority or is null/empty.
     */
    public static Priority fromString(String priorityStr) {
        if (priorityStr == null || priorityStr.trim().isEmpty()) {
            throw new IllegalArgumentException("Priority string cannot be null or empty.");
        }
        for (Priority p : Priority.values()) {
            if (p.name().equalsIgnoreCase(priorityStr.trim())) {
                return p;
            }
        }
        throw new IllegalArgumentException("Invalid priority: '" + priorityStr + "'. Valid options are HIGH, MEDIUM, LOW.");
    }
}

// --- Task Class ---

/**
 * Represents a single task with a description and priority.
 */
class Task {
    private static int nextId = 1; // Auto-generated unique ID for tasks
    private int id;
    private String description;
    private Priority priority;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     * @param priority The priority of the task.
     * @throws IllegalArgumentException if description is empty or priority is null.
     */
    public Task(String description, Priority priority) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        if (priority == null) {
             // This check is technically redundant if using Priority.fromString,
             // but good for robustness if Task is constructed differently.
             throw new IllegalArgumentException("Task priority cannot be null.");
        }
        this.id = nextId++; // Assign unique ID and increment
        this.description = description.trim();
        this.priority = priority;
    }

    // --- Getters ---
    public int getId() { return id; }
    public String getDescription() { return description; }
    public Priority getPriority() { return priority; }

    /**
     * Returns a user-friendly string representation of the task.
     */
    @Override
    public String toString() {
        return String.format("Task #%d [Priority: %s] - %s", id, priority, description);
    }
}

// --- TaskManager Class ---

/**
 * Manages a queue of pending tasks and a list of completed tasks.
 * Provides a command-line interface for task management.
 */
class TaskManager {
    private Queue<Task> taskQueue;      // Queue for pending tasks (FIFO)
    private List<Task> completedTasks;   // List for completed tasks archive
    private Scanner scanner;             // Scanner for user input
    private boolean running;             // Flag to control the main loop

    /**
     * Constructs a TaskManager, initializing the task queue and completed task list.
     */
    public TaskManager() {
        taskQueue = new LinkedList<>();   // LinkedList implements Queue
        completedTasks = new ArrayList<>(); // ArrayList implements List
        scanner = new Scanner(System.in);
        running = true;
    }

    /**
     * Adds a new task to the pending queue.
     * Handles parsing of priority string and potential errors during task creation.
     * @param description The task description.
     * @param priorityStr The priority as a string (e.g., "HIGH").
     */
    public void addTask(String description, String priorityStr) {
        // Use try-catch to handle potential exceptions during priority parsing or task creation
        try {
            // Attempt to parse priority string, can throw IllegalArgumentException
            Priority priority = Priority.fromString(priorityStr);
            // Attempt to create task, can throw IllegalArgumentException for empty description
            Task newTask = new Task(description, priority);
            taskQueue.offer(newTask); // Add task to the queue (offer is preferred over add)
            System.out.println(System.lineSeparator() + "--> Task added: " + newTask + System.lineSeparator());
        } catch (IllegalArgumentException e) {
            // Catch specific exceptions related to invalid input (priority string or description)
            System.err.println(System.lineSeparator() + "Error adding task: " + e.getMessage() + System.lineSeparator());
        } catch (Exception e) {
             // Catch any other unexpected errors during the add process
             System.err.println(System.lineSeparator() + "An unexpected error occurred while adding task: " + e.getMessage() + System.lineSeparator());
             // e.printStackTrace(System.err); // Uncomment for detailed debugging during exam
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    public void viewPendingTasks() {
        System.out.println(System.lineSeparator() + "--- Pending Tasks ---");
        if (taskQueue.isEmpty()) {
            System.out.println("No tasks currently pending.");
        } else {
            // Iterate through the queue without removing elements using a for-each loop
            int index = 1;
            for (Task task : taskQueue) {
                System.out.println(index++ + ". " + task);
            }
        }
        System.out.println("---------------------" + System.lineSeparator());
    }

    /**
     * Completes the next task in the queue (FIFO).
     * Removes it from the queue and adds it to the completed tasks list.
     * Handles the case where the queue is empty.
     */
    public void completeNextTask() {
        if (taskQueue.isEmpty()) {
            // Business logic error: queue is empty. Print error to System.err.
            System.err.println(System.lineSeparator() + "Error: No tasks in the queue to complete." + System.lineSeparator());
        } else {
            Task completedTask = taskQueue.poll(); // Get and remove the head of the queue (returns null if empty, but we checked)
            if (completedTask != null) { // Defensive check, though isEmpty() check makes this unlikely to be null here
                completedTasks.add(completedTask); // Add to the completed list (ArrayList)
                System.out.println(System.lineSeparator() + "--> Task completed: " + completedTask + System.lineSeparator());
            }
        }
    }

     /**
     * Displays all tasks that have been completed.
     */
    public void viewCompletedTasks() {
        System.out.println(System.lineSeparator() + "--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks have been completed yet.");
        } else {
            // Iterate through the ArrayList using a standard for loop to show index
            for (int i = 0; i < completedTasks.size(); i++) {
                System.out.println((i + 1) + ". " + completedTasks.get(i));
            }
        }
        System.out.println("-----------------------" + System.lineSeparator());
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- Task Manager Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. View Pending Tasks");
        System.out.println("3. Complete Next Task");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and operations.
     * Includes class-wide exception handling for unexpected errors during command processing.
     */
    public void run() {
        System.out.println("Welcome to the Task Management System!");

        // Main application loop
        while (running) {
            displayMenu();

            // Use a try-catch block around the core command processing logic
            // to catch unexpected runtime exceptions that might occur during the switch.
            // This fulfills the "class-wide" exception handling requirement for the main operations.
            try {
                String choice = scanner.nextLine().trim(); // Read user choice as a string

                switch (choice) {
                    case "1":
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter priority (HIGH, MEDIUM, LOW): ");
                        String priorityStr = scanner.nextLine();
                        addTask(description, priorityStr); // Call method to add task (handles its own specific exceptions)
                        break;
                    case "2":
                        viewPendingTasks(); // Call method to view pending tasks
                        break;
                    case "3":
                        completeNextTask(); // Call method to complete task (handles empty queue business logic)
                        break;
                    case "4":
                        viewCompletedTasks(); // Call method to view completed tasks
                        break;
                    case "5":
                        System.out.println("Exiting Task Management System. Goodbye!");
                        running = false; // Set flag to exit loop
                        break;
                    default:
                        // Handle invalid menu choices by printing to System.err
                        System.err.println(System.lineSeparator() + "Invalid choice. Please enter a number between 1 and 5." + System.lineSeparator());
                }
            } catch (Exception e) {
                // Catch any unexpected exceptions that might occur during the switch block or input reading
                System.err.println(System.lineSeparator() + "An unexpected error occurred during command processing: " + e.getMessage() + System.lineSeparator());
                // e.printStackTrace(System.err); // Uncomment for detailed debugging during exam
            }
        }
        scanner.close(); // Close the scanner resource when the application exits
    }
}

// --- Main Application Class ---

/**
 * Entry point for the Task Management System application.
 */
public class TaskManagerApp {
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run(); // Start the application loop
    }
}
