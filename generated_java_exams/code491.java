/*
 * Exam Question #491
 * Generated on: 2025-05-11 23:18:59
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: E-commerce Order Processing System**
 * 
 * You are tasked with building a simplified E-commerce system that manages product inventory and processes customer orders. The system should allow users (acting as administrators or customers) to interact via a command-line interface.
 * 
 * Your solution must demonstrate a strong understanding of core Java collections, control flow, and error handling.
 * 
 * **System Requirements:**
 * 
 * 1.  **Inventory Management:**
 *     *   Maintain a list of available products (items). Each item should have a unique ID (integer), a name (String), a price (double), and a current stock quantity (integer).
 *     *   Allow adding new items to the inventory.
 *     *   Allow viewing the current inventory with all details.
 * 
 * 2.  **Order Management:**
 *     *   Maintain a queue of pending customer orders. Orders are processed in the order they are received (FIFO).
 *     *   Each order should have a unique Order ID (integer), a customer name (String), and a list of items requested in the order (including the item ID and the quantity requested).
 *     *   Allow creating a new customer order and adding it to the pending orders queue.
 *     *   Allow processing the next order from the queue. Processing an order involves checking if sufficient stock is available for *all* items in the order.
 *         *   If sufficient stock is available for *all* items, decrement the stock for each item in the inventory and report the order as successfully processed using `System.out`.
 *         *   If sufficient stock is *not* available for *any* item in the order, report the failure using `System.err` and *do not* decrement stock for any item in that order. The order is effectively cancelled in this simplified model.
 *     *   Allow viewing the list of pending orders in the queue.
 * 
 * **Implementation Requirements:**
 * 
 * *   Use `java.util.Queue` (specifically, a concrete implementation like `LinkedList`) to manage pending orders.
 * *   Use `java.util.List` (specifically, `java.util.ArrayList`) to manage the product inventory and the list of items within an order.
 * *   Use `java.util.Scanner` to read user input from the console.
 * *   Use a `switch` statement to handle the main menu options selected by the user.
 * *   Use `System.out` for displaying the menu, inventory, pending orders, and successful operation messages (like successful order processing).
 * *   Use `System.err` for displaying all error messages (invalid input, item not found, insufficient stock, empty queue, etc.).
 * *   Implement robust error handling using `try-catch` blocks. This should include handling potential `InputMismatchException` or `NumberFormatException` when reading numeric input, as well as handling business logic errors (like trying to process an order from an empty queue or insufficient stock). Implement class-wide exception handling in the main operational loop.
 * *   Follow best practices:
 *     *   Use private fields and public methods (encapsulation) for your classes (`Item`, `Order`, `ECommerceSystem`).
 *     *   Use meaningful variable and method names.
 *     *   Add appropriate comments and basic documentation (e.g., Javadoc-style for classes/methods).
 *     *   Implement input validation (e.g., positive quantities, valid item IDs).
 * 
 * **User Interface (Command-Line Menu):**
 * 
 * The system should present a menu like this:
 * 
 * ```
 * E-commerce System Menu:
 * 1. Add New Item to Inventory
 * 2. View Inventory
 * 3. Create New Order
 * 4. Process Next Pending Order
 * 5. View Pending Orders
 * 6. Exit
 * Enter your choice:
 * ```
 * 
 * **Expected Output:**
 * 
 * *   Menu and prompts should be clear (`System.out`).
 * *   Inventory display should list all items with details (`System.out`).
 * *   Pending orders display should list orders in the queue (`System.out`).
 * *   Successful actions (e.g., item added, order created, order processed successfully) should be confirmed (`System.out`).
 * *   Error conditions (e.g., invalid input, item not found, insufficient stock, empty queue, general errors) must be reported clearly using `System.err`.
 * 
 * **Grading Criteria:**
 * 
 * *   Correct usage of all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Correct implementation of inventory and order management logic.
 * *   Effective use of encapsulation and meaningful names.
 * *   Proper input validation and error handling using `try-catch` and `System.err`.
 * *   Clean code structure and appropriate comments.
 * *   Meeting all functional requirements.
 * 
 * Implement the `Item`, `OrderItem`, `Order`, and `ECommerceSystem` classes, along with a `main` method to run the system.
 *
 * EXPLANATION:
 * This solution implements a basic E-commerce system demonstrating the required Java concepts.
 * 
 * **Core Structure:**
 * 
 * *   **`Item` Class:** Represents a product with basic details (ID, name, price, stock). Uses private fields and public getters/setters for encapsulation.
 * *   **`OrderItem` Class:** A helper class to represent an item and its quantity *within the context of a specific order*. This avoids modifying the main `Item` object directly when just listing order contents.
 * *   **`Order` Class:** Represents a customer order with an ID, customer name, and a `List` of `OrderItem`s. Uses a static counter for unique order IDs.
 * *   **`ECommerceSystem` Class:** The main class orchestrating the system. It holds the inventory (`List<Item>`) and the pending orders (`Queue<Order>`). It contains methods for all the system's functionalities and the main `runSystem` loop.
 * 
 * **Required Components Usage:**
 * 
 * 1.  **`java.util.Queue`:** The `pendingOrders` field is declared as `Queue<Order>` and instantiated as a `LinkedList`. `LinkedList` is a common implementation for `Queue`. Orders are added using `offer()` in `createOrder()` and processed (removed) using `poll()` in `processNextOrder()`. `peek()` is used to inspect the next order without removing it during the stock check phase of `processNextOrder()`.
 * 2.  **`java.util.ArrayList`:**
 *     *   The `inventory` field is declared as `List<Item>` and instantiated as `ArrayList`. `ArrayList` is suitable for storing the inventory where random access by index or iteration is common.
 *     *   The `items` field within the `Order` class is declared as `List<OrderItem>` and instantiated as `ArrayList`. This stores the specific items and quantities requested in *that particular order*.
 * 3.  **`java.util.List` Interface:** Both `inventory` and `Order.items` are declared using the `List` interface, promoting good practice by programming to the interface rather than the concrete implementation where possible.
 * 4.  **`java.util.Scanner`:** An instance is created in `ECommerceSystem` to read user input from `System.in` for menu choices and data entry. `scanner.nextLine()` is used after reading numbers to consume the leftover newline character.
 * 5.  **`switch` statement:** The `runSystem()` method uses a `switch` statement based on the user's integer choice to direct the program flow to the appropriate method (`addItem`, `displayInventory`, etc.). A `default` case handles invalid menu numbers.
 * 6.  **`System.err`:** Used exclusively for printing error messages, such as invalid input, item not found, insufficient stock, empty queues, or unexpected exceptions caught by `try-catch` blocks. This visually distinguishes errors from normal output.
 * 7.  **`System.out`:** Used for displaying the menu, prompts, inventory list, pending order list, and successful action messages (e.g., item added, order created, order processed successfully).
 * 8.  **`try-catch` blocks:**
 *     *   Input validation: `try-catch (InputMismatchException)` is used when reading integer or double inputs from `Scanner` to catch non-numeric input.
 *     *   Business logic errors: Checks for conditions like duplicate item IDs, item not found, insufficient stock, and empty queues are performed, and error messages are printed using `System.err`.
 *     *   Class-wide handling: The main `while` loop in `runSystem()` is wrapped in a `try-catch (Exception e)` block to catch any unexpected errors that might occur during the execution of menu options, preventing the program from crashing and providing a general error message via `System.err`. Specific methods like `addItem` and `createOrder` also have their own `try-catch` blocks for input errors and method-specific issues.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** All data fields in `Item`, `OrderItem`, and `Order` are `private`, accessed only through public getters (and a necessary setter for `Item` stock).
 * *   **Meaningful Names:** Variables (`inventory`, `pendingOrders`, `customerName`, `orderToProcess`), methods (`addItem`, `processNextOrder`, `displayPendingOrders`), and classes clearly indicate their purpose.
 * *   **Comments and Documentation:** Basic Javadoc-style comments explain the purpose of classes and methods. Inline comments clarify specific logic points.
 * *   **Input Validation:** Checks are performed for positive price/stock/quantity, unique item IDs, and numeric input format.
 * *   **Error Handling:** `try-catch` blocks and conditional checks (`if`, `else`) are used to gracefully handle invalid operations and input errors, reporting them clearly using `System.err`.
 * *   **Clean Code Structure:** The code is divided into logical classes and methods, making it more organized and readable.
 * 
 * **Challenging Aspects:**
 * 
 * *   Integrating multiple collections (`List` and `Queue`) with distinct purposes.
 * *   Implementing the order processing logic which requires iterating through order items, finding corresponding inventory items, performing stock checks *before* modifying stock, and handling the all-or-nothing nature of the stock validation for an order.
 * *   Handling different types of errors (input vs. business logic) and using the appropriate output stream (`System.err` vs. `System.out`).
 * *   Managing `Scanner` input carefully, especially consuming the newline character after reading numbers.
 * 
 * This solution provides a solid foundation demonstrating the required Java concepts in a practical, albeit simplified, E-commerce scenario.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Represents a product item in the inventory
class Item {
    private int id;
    private String name;
    private double price;
    private int stock;

    public Item(int id, String name, double price, int stock) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getStock() {
        return stock;
    }

    // Setter for stock (needed when processing orders)
    public void setStock(int stock) {
        this.stock = stock;
    }

    @Override
    public String toString() {
        return "Item [ID=" + id + ", Name=" + name + ", Price=" + String.format("%.2f", price) + ", Stock=" + stock + "]";
    }
}

// Represents an item and its quantity within an order
class OrderItem {
    private int itemId;
    private int quantity;

    public OrderItem(int itemId, int quantity) {
        this.itemId = itemId;
        this.quantity = quantity;
    }

    // Getters
    public int getItemId() {
        return itemId;
    }

    public int getQuantity() {
        return quantity;
    }

    @Override
    public String toString() {
        return "  - Item ID: " + itemId + ", Quantity: " + quantity;
    }
}

// Represents a customer order
class Order {
    private static int nextOrderId = 1; // Static counter for unique order IDs
    private int orderId;
    private String customerName;
    private List<OrderItem> items; // List of items in this specific order

    public Order(String customerName) {
        this.orderId = nextOrderId++;
        this.customerName = customerName;
        this.items = new ArrayList<>(); // Use ArrayList for the list of items in the order
    }

    // Getters
    public int getOrderId() {
        return orderId;
    }

    public String getCustomerName() {
        return customerName;
    }

    public List<OrderItem> getItems() {
        return items;
    }

    // Method to add an item to the order
    public void addItem(int itemId, int quantity) {
        this.items.add(new OrderItem(itemId, quantity));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order [ID=").append(orderId)
          .append(", Customer='").append(customerName).append("', Items:\n");
        for (OrderItem item : items) {
            sb.append(item).append("\n");
        }
        sb.append("]");
        return sb.toString();
    }
}

// Main system class managing inventory and orders
public class ECommerceSystem {
    private List<Item> inventory; // List interface with ArrayList implementation
    private Queue<Order> pendingOrders; // Queue interface with LinkedList implementation
    private Scanner scanner;

    public ECommerceSystem() {
        inventory = new ArrayList<>(); // Use ArrayList for inventory
        pendingOrders = new LinkedList<>(); // Use LinkedList for the Queue
        scanner = new Scanner(System.in);
    }

    // --- Inventory Management ---

    /**
     * Adds a new item to the inventory.
     * Handles input validation and checks for duplicate IDs.
     */
    public void addItem() {
        System.out.println("\n--- Add New Item ---");
        try {
            System.out.print("Enter Item ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Check for duplicate ID
            if (findItemById(id) != null) {
                System.err.println("Error: Item with ID " + id + " already exists.");
                return;
            }

            System.out.print("Enter Item Name: ");
            String name = scanner.nextLine();

            System.out.print("Enter Item Price: ");
            double price = scanner.nextDouble();
            scanner.nextLine(); // Consume newline
            if (price < 0) {
                 System.err.println("Error: Price cannot be negative.");
                 return;
            }


            System.out.print("Enter Initial Stock: ");
            int stock = scanner.nextInt();
            scanner.nextLine(); // Consume newline
             if (stock < 0) {
                 System.err.println("Error: Stock cannot be negative.");
                 return;
            }


            Item newItem = new Item(id, name, price, stock);
            inventory.add(newItem);
            System.out.println("Item added successfully: " + newItem);

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter numeric values for ID, Price, and Stock.");
            scanner.nextLine(); // Clear the invalid input
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while adding item: " + e.getMessage());
             e.printStackTrace(); // For debugging
        }
    }

    /**
     * Displays the current inventory list.
     */
    public void displayInventory() {
        System.out.println("\n--- Current Inventory ---");
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            for (Item item : inventory) {
                System.out.println(item);
            }
        }
    }

    // Helper method to find an item by ID
    private Item findItemById(int id) {
        for (Item item : inventory) {
            if (item.getId() == id) {
                return item;
            }
        }
        return null; // Item not found
    }

    // --- Order Management ---

    /**
     * Creates a new order based on user input and adds it to the pending queue.
     * Allows adding multiple items to a single order.
     */
    public void createOrder() {
        System.out.println("\n--- Create New Order ---");
        try {
            System.out.print("Enter Customer Name: ");
            String customerName = scanner.nextLine();

            Order newOrder = new Order(customerName);
            boolean addingItems = true;

            while (addingItems) {
                System.out.print("Enter Item ID for order (or 0 to finish): ");
                int itemId = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                if (itemId == 0) {
                    addingItems = false;
                    break;
                }

                Item item = findItemById(itemId);
                if (item == null) {
                    System.err.println("Error: Item with ID " + itemId + " not found in inventory.");
                    continue; // Allow user to enter another item ID
                }

                System.out.print("Enter Quantity for Item " + itemId + ": ");
                int quantity = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                if (quantity <= 0) {
                    System.err.println("Error: Quantity must be positive.");
                    continue; // Allow user to enter another item ID/quantity
                }

                // Note: Stock check is done during processing, not creation
                newOrder.addItem(itemId, quantity);
                System.out.println("Added " + quantity + " of Item ID " + itemId + " to the order.");

                System.out.print("Add another item to this order? (yes/no): ");
                String addMore = scanner.nextLine().trim().toLowerCase();
                if (!addMore.equals("yes")) {
                    addingItems = false;
                }
            }

            if (!newOrder.getItems().isEmpty()) {
                pendingOrders.offer(newOrder); // Add the order to the end of the queue
                System.out.println("Order " + newOrder.getOrderId() + " created and added to pending queue.");
            } else {
                System.err.println("Order cancelled: No items were added.");
            }

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter numeric values for Item ID and Quantity.");
            scanner.nextLine(); // Clear the invalid input
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while creating order: " + e.getMessage());
             e.printStackTrace(); // For debugging
        }
    }

    /**
     * Processes the next order from the pending queue (FIFO).
     * Validates stock availability before processing.
     */
    public void processNextOrder() {
        System.out.println("\n--- Processing Next Order ---");
        if (pendingOrders.isEmpty()) {
            System.err.println("No pending orders to process.");
            return;
        }

        // Peek first to check stock availability without removing yet
        Order orderToProcess = pendingOrders.peek();
        System.out.println("Attempting to process Order ID: " + orderToProcess.getOrderId() + " for Customer: " + orderToProcess.getCustomerName());

        boolean stockAvailable = true;
        // First pass: Check stock for all items
        for (OrderItem orderItem : orderToProcess.getItems()) {
            Item inventoryItem = findItemById(orderItem.getItemId());
            if (inventoryItem == null) {
                System.err.println("Error processing order " + orderToProcess.getOrderId() + ": Item ID " + orderItem.getItemId() + " not found in inventory.");
                stockAvailable = false;
                // Don't break, check other items for comprehensive error reporting
            } else if (inventoryItem.getStock() < orderItem.getQuantity()) {
                System.err.println("Error processing order " + orderToProcess.getOrderId() + ": Insufficient stock for Item '" + inventoryItem.getName() + "' (ID: " + orderItem.getItemId() + "). Requested: " + orderItem.getQuantity() + ", Available: " + inventoryItem.getStock());
                stockAvailable = false;
                // Don't break, check other items
            }
        }

        if (stockAvailable) {
            // Second pass: Decrement stock as all items are available
            Order processedOrder = pendingOrders.poll(); // Remove from queue
            for (OrderItem orderItem : processedOrder.getItems()) {
                Item inventoryItem = findItemById(orderItem.getItemId());
                // We already checked for null and stock availability, so these should be safe
                inventoryItem.setStock(inventoryItem.getStock() - orderItem.getQuantity());
            }
            System.out.println("Order " + processedOrder.getOrderId() + " for " + processedOrder.getCustomerName() + " processed successfully. Inventory updated.");
        } else {
            // If stock is not available for ANY item, the whole order fails
            // The order remains at the head of the queue in this simplified model,
            // or we could poll it and discard/log it. Let's poll and report failure.
            Order failedOrder = pendingOrders.poll(); // Remove from queue as it cannot be fulfilled
            System.err.println("Order " + failedOrder.getOrderId() + " for " + failedOrder.getCustomerName() + " failed due to insufficient stock or invalid items. It has been removed from the queue.");
            // Note: Stock was NOT decremented in the first pass if stockAvailable was false.
        }
    }

    /**
     * Displays all pending orders currently in the queue.
     */
    public void displayPendingOrders() {
        System.out.println("\n--- Pending Orders Queue ---");
        if (pendingOrders.isEmpty()) {
            System.out.println("No pending orders.");
        } else {
            // Iterate through the queue without removing elements
            int orderIndex = 1;
            for (Order order : pendingOrders) {
                System.out.println("Pending Order " + orderIndex++ + ":");
                System.out.println(order);
            }
        }
    }

    /**
     * Displays the main menu.
     */
    private void displayMenu() {
        System.out.println("\nE-commerce System Menu:");
        System.out.println("1. Add New Item to Inventory");
        System.out.println("2. View Inventory");
        System.out.println("3. Create New Order");
        System.out.println("4. Process Next Pending Order");
        System.out.println("5. View Pending Orders");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main system loop, handling user interaction.
     */
    public void runSystem() {
        boolean running = true;
        while (running) {
            try {
                displayMenu();
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline left-over

                // Use a switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addItem();
                        break;
                    case 2:
                        displayInventory();
                        break;
                    case 3:
                        createOrder();
                        break;
                    case 4:
                        processNextOrder();
                        break;
                    case 5:
                        displayPendingOrders();
                        break;
                    case 6:
                        System.out.println("Exiting E-commerce System. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for the menu choice.");
                scanner.nextLine(); // Clear the invalid input from the scanner
            } catch (Exception e) {
                 // Catch any other unexpected exceptions in the main loop
                 System.err.println("An unexpected system error occurred: " + e.getMessage());
                 e.printStackTrace(); // Print stack trace for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    // Main method to start the application
    public static void main(String[] args) {
        ECommerceSystem system = new ECommerceSystem();
        system.runSystem();
    }
}
