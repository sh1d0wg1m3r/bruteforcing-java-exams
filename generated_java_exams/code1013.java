/*
 * Exam Question #1013
 * Generated on: 2025-05-12 17:12:37
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Job Application Processing System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line system for managing job applications. The system should allow users to add new applications, process the next application in line for review, and view applications that have already been processed.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Application Representation:** Create a class `JobApplication` with private fields for `applicantName` (String) and `positionAppliedFor` (String). Include a field for `status` (String, e.g., "Pending", "Accepted", "Rejected"), initially set to "Pending". Provide a constructor and public getter methods for these fields.
 * 2.  **System Management:** Create a class `ApplicationProcessor` that manages the job applications.
 *     *   It must use a `java.util.Queue<JobApplication>` to store applications waiting for review.
 *     *   It must use a `java.util.List<JobApplication>` (specifically, an `ArrayList`) to store applications that have been processed (either accepted or rejected). Declare the field using the `List` interface type.
 *     *   Include methods:
 *         *   `addApplication(String applicantName, String position)`: Creates a new `JobApplication` object and adds it to the waiting queue.
 *         *   `processNextApplication(Scanner scanner)`:
 *             *   Retrieves (dequeues) the next application from the waiting queue.
 *             *   If the queue is empty, print an error message to `System.err`.
 *             *   If an application is retrieved, prompt the user via `System.out` to enter 'A' for Accept or 'R' for Reject using the provided `Scanner`.
 *             *   Use a loop to validate user input, printing an error message to `System.err` for invalid input until 'A' or 'R' (case-insensitive) is entered.
 *             *   Update the `status` of the processed application based on user input.
 *             *   Add the processed application to the list of processed applications.
 *             *   Print a confirmation message to `System.out`.
 *         *   `viewProcessedApplications()`:
 *             *   Prints a header "--- Processed Applications ---" to `System.out`.
 *             *   Iterates through the list of processed applications and prints details (`applicantName`, `positionAppliedFor`, `status`) for each to `System.out`.
 *             *   If the list is empty, print a message indicating that to `System.out`.
 *         *   `getPendingApplicationCount()`: Returns the number of applications currently in the waiting queue.
 * 3.  **User Interface (Main Method):**
 *     *   Implement the `main` method in a separate class (e.g., `JobApplicationSystem`).
 *     *   Use a `java.util.Scanner` to read user input from the console.
 *     *   Present a menu to the user via `System.out` with options:
 *         1.  Add New Application
 *         2.  Process Next Application
 *         3.  View Processed Applications
 *         4.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement a loop that continues until the user chooses to exit.
 *     *   **Error Handling:**
 *         *   Use `System.err.println()` for all error messages (e.g., invalid menu choice, invalid processing input, processing empty queue).
 *         *   Implement **class-wide exception handling** using a `try-catch` block around the main menu loop to catch potential unexpected errors (like `InputMismatchException` if the user enters non-numeric input for the menu choice) and print a generic error message to `System.err` before exiting or continuing.
 *     *   Use `System.out.println()` for all normal output (menu, prompts, confirmations, application details).
 * 4.  **Best Practices:**
 *     *   Use proper encapsulation (`private` fields, `public` methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (e.g., Javadoc for classes/methods, inline comments for complex logic).
 *     *   Validate user input where necessary (menu choice, processing decision).
 * 
 * **Expected Output Examples:**
 * 
 * ```
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: 1
 * Enter applicant name: Alice
 * Enter position: Software Engineer
 * Application for Alice (Software Engineer) added to the queue.
 * Pending applications: 1
 * 
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: 2
 * Processing application for Alice (Software Engineer)...
 * Enter 'A' to Accept or 'R' to Reject: X
 * Invalid input. Please enter 'A' or 'R': A
 * Application for Alice (Software Engineer) marked as Accepted and moved to processed list.
 * Pending applications: 0
 * 
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: 2
 * Error: No applications are currently waiting for review.
 * Pending applications: 0
 * 
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: 3
 * --- Processed Applications ---
 * Applicant: Alice, Position: Software Engineer, Status: Accepted
 * --- End Processed Applications ---
 * Pending applications: 0
 * 
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: 5
 * Error: Invalid menu choice. Please enter a number between 1 and 4.
 * Pending applications: 0
 * 
 * --- Job Application System Menu ---
 * 1. Add New Application
 * 2. Process Next Application
 * 3. View Processed Applications
 * 4. Exit
 * Enter your choice: exit // Assuming user enters non-numeric
 * Error: Invalid input. Please enter a number.
 * Pending applications: 0 // Or whatever the count was before the error
 * ```
 * 
 * **Grading:**
 * 
 * This task will be graded on correctness, adherence to all requirements (including the use of specified components), code structure, error handling robustness, and overall code quality (readability, comments, naming).
 *
 * EXPLANATION:
 * This solution implements a simple Job Application Processing System adhering to all specified requirements.
 * 
 * 1.  **`JobApplication` Class:** This class serves as a simple data structure (POJO) representing a single job application. It encapsulates the applicant's name, the position applied for, and the current status using `private` fields. Public getter methods provide access to this data, and a setter is included specifically for updating the status during processing. The `toString()` method is overridden for easy printing of application details.
 * 
 * 2.  **`ApplicationProcessor` Class:** This is the core logic class.
 *     *   It uses a `Queue<JobApplication>` named `pendingApplications` (implemented with `LinkedList`) to store applications in a First-In, First-Out (FIFO) manner, simulating a waiting line for review.
 *     *   It uses a `List<JobApplication>` named `processedApplications` (implemented with `ArrayList`) to store applications after they have been reviewed, allowing easy iteration and viewing of the processed items. The use of `List` as the declared type for the `ArrayList` demonstrates programming to an interface.
 *     *   `addApplication()`: Creates a new `JobApplication` object and adds it to the `pendingApplications` queue using `offer()`.
 *     *   `processNextApplication()`: Uses `poll()` to retrieve and remove the head of the `pendingApplications` queue. It checks if the result is `null` to handle the empty queue scenario, printing an error to `System.err`. If an application is found, it prompts the user for input using the passed `Scanner`, validates the input in a `while` loop, updates the application's status using the setter, and adds the processed application to the `processedApplications` list. Error messages for invalid input within the processing logic are sent to `System.err`.
 *     *   `viewProcessedApplications()`: Iterates through the `processedApplications` list using a for-each loop and prints each application's details using its `toString()` method. It checks if the list is empty and prints an appropriate message. All output is sent to `System.out`.
 *     *   `getPendingApplicationCount()`: Provides access to the size of the pending queue, useful for displaying status to the user.
 * 
 * 3.  **`JobApplicationSystem` Class (Main):**
 *     *   The `main` method drives the application.
 *     *   A `Scanner` is initialized to read input from `System.in`.
 *     *   An `ApplicationProcessor` instance is created.
 *     *   A `boolean running` flag controls the main `while` loop, which continues until the user chooses to exit.
 *     *   The **class-wide `try-catch` block** wraps the entire `while` loop. This `try-catch` is intended to catch broader exceptions that might occur during the program's execution, particularly `InputMismatchException` if the user enters non-numeric data when a number is expected for the menu choice. A specific `catch (InputMismatchException e)` is included first to handle this common case gracefully by printing an error to `System.err` and consuming the invalid input using `scanner.next()` before continuing the loop. A general `catch (Exception e)` is included as a fallback for any other unexpected runtime errors, printing the error message and stack trace to `System.err`.
 *     *   Inside the loop, `displayMenu()` prints options to `System.out`.
 *     *   `scanner.nextInt()` reads the user's choice. A `scanner.nextLine()` is immediately called after `nextInt()` (within a `finally` block) to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls when reading names or positions.
 *     *   A `switch` statement handles the different menu options, calling the appropriate methods of the `ApplicationProcessor`.
 *     *   The `default` case of the `switch` handles invalid menu numbers, printing an error to `System.err`.
 *     *   After each operation (except exit), the number of pending applications is printed to `System.out` for user feedback.
 *     *   A `finally` block ensures the `Scanner` resource is closed when the program finishes (either by exiting normally or due to an uncaught exception).
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is used in `JobApplication` and `ApplicationProcessor`.
 *     *   Variable and method names (`applicantName`, `processNextApplication`, `pendingApplications`) are descriptive.
 *     *   Basic Javadoc comments are provided for classes and methods.
 *     *   Input validation is performed for the processing decision ('A'/'R') and handled for the menu choice (using `try-catch` and `switch default`).
 *     *   Error messages are directed to `System.err`, while normal output goes to `System.out`.
 * 
 * This solution effectively demonstrates the required Java components in a practical, structured, and error-aware manner suitable for an advanced programming exam.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a job application with applicant details and status.
 */
class JobApplication {
    private String applicantName;
    private String positionAppliedFor;
    private String status; // e.g., "Pending", "Accepted", "Rejected"

    /**
     * Constructs a new JobApplication.
     *
     * @param applicantName The name of the applicant.
     * @param positionAppliedFor The position the applicant applied for.
     */
    public JobApplication(String applicantName, String positionAppliedFor) {
        this.applicantName = applicantName;
        this.positionAppliedFor = positionAppliedFor;
        this.status = "Pending"; // Initial status
    }

    // --- Getters ---
    public String getApplicantName() {
        return applicantName;
    }

    public String getPositionAppliedFor() {
        return positionAppliedFor;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for status (used during processing) ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the application.
     */
    @Override
    public String toString() {
        return "Applicant: " + applicantName + ", Position: " + positionAppliedFor + ", Status: " + status;
    }
}

/**
 * Manages the queue of pending job applications and a list of processed applications.
 */
class ApplicationProcessor {
    // Queue for applications waiting to be reviewed
    private Queue<JobApplication> pendingApplications;
    // List for applications that have been reviewed
    private List<JobApplication> processedApplications; // Declared as List, implemented as ArrayList

    /**
     * Constructs a new ApplicationProcessor.
     */
    public ApplicationProcessor() {
        // Use LinkedList as a Queue implementation
        this.pendingApplications = new LinkedList<>();
        // Use ArrayList as a List implementation
        this.processedApplications = new ArrayList<>();
    }

    /**
     * Adds a new application to the pending queue.
     *
     * @param applicantName The name of the applicant.
     * @param position The position applied for.
     */
    public void addApplication(String applicantName, String position) {
        JobApplication newApplication = new JobApplication(applicantName, position);
        pendingApplications.offer(newApplication); // offer() is preferred for capacity-constrained queues, but works fine here
        System.out.println("Application for " + applicantName + " (" + position + ") added to the queue.");
    }

    /**
     * Processes the next application in the pending queue.
     * Prompts user for decision (Accept/Reject) and moves to processed list.
     *
     * @param scanner Scanner object for user input.
     */
    public void processNextApplication(Scanner scanner) {
        JobApplication nextApplication = pendingApplications.poll(); // Retrieves and removes the head of the queue

        if (nextApplication == null) {
            System.err.println("Error: No applications are currently waiting for review.");
            return;
        }

        System.out.println("Processing application for " + nextApplication.getApplicantName() + " (" + nextApplication.getPositionAppliedFor() + ")...");

        String decision = "";
        boolean validInput = false;
        while (!validInput) {
            System.out.print("Enter 'A' to Accept or 'R' to Reject: ");
            decision = scanner.nextLine().trim().toUpperCase(); // Read line, trim whitespace, convert to uppercase

            if (decision.equals("A")) {
                nextApplication.setStatus("Accepted");
                validInput = true;
            } else if (decision.equals("R")) {
                nextApplication.setStatus("Rejected");
                validInput = true;
            } else {
                System.err.println("Invalid input. Please enter 'A' or 'R':");
            }
        }

        processedApplications.add(nextApplication);
        System.out.println("Application for " + nextApplication.getApplicantName() + " (" + nextApplication.getPositionAppliedFor() + ") marked as " + nextApplication.getStatus() + " and moved to processed list.");
    }

    /**
     * Displays all applications that have been processed.
     */
    public void viewProcessedApplications() {
        System.out.println("--- Processed Applications ---");
        if (processedApplications.isEmpty()) {
            System.out.println("No applications have been processed yet.");
        } else {
            for (JobApplication app : processedApplications) {
                System.out.println(app); // Uses the toString() method of JobApplication
            }
        }
        System.out.println("--- End Processed Applications ---");
    }

    /**
     * Gets the current number of applications in the pending queue.
     *
     * @return The count of pending applications.
     */
    public int getPendingApplicationCount() {
        return pendingApplications.size();
    }
}

/**
 * Main class to run the Job Application Processing System.
 * Handles user interaction and the main program loop.
 */
public class JobApplicationSystem {

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Job Application System Menu ---");
        System.out.println("1. Add New Application");
        System.out.println("2. Process Next Application");
        System.out.println("3. View Processed Applications");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ApplicationProcessor processor = new ApplicationProcessor();
        boolean running = true;

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                displayMenu();

                int choice = -1;
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Go back to the start of the loop
                } finally {
                     // Consume the newline character left by nextInt()
                     // This is crucial if we mix nextInt() and nextLine()
                     scanner.nextLine();
                }


                // Use switch for menu navigation
                switch (choice) {
                    case 1:
                        System.out.print("Enter applicant name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter position: ");
                        String position = scanner.nextLine();
                        processor.addApplication(name, position);
                        break;
                    case 2:
                        processor.processNextApplication(scanner);
                        break;
                    case 3:
                        processor.viewProcessedApplications();
                        break;
                    case 4:
                        System.out.println("Exiting Job Application System. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 4.");
                        break;
                }

                // Display pending count after each operation (optional, but good feedback)
                if (running) {
                     System.out.println("Pending applications: " + processor.getPendingApplicationCount());
                }

            } // End while loop
        } catch (Exception e) {
            // Catch any unexpected runtime errors during the main execution flow
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed when the program exits
            scanner.close();
            System.out.println("Scanner closed."); // Optional confirmation
        }
    }
}
