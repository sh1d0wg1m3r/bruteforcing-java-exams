/*
 * Exam Question #667
 * Generated on: 2025-05-12 16:22:40
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System. The system needs to manage patient records, doctor records, and handle appointment requests. Appointment requests are placed into a waiting queue and processed one by one.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must fulfill the following technical requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store pending appointment requests.
 *     *   Use a `java.util.ArrayList` to store patient records.
 *     *   Use a `java.util.ArrayList` to store doctor records.
 *     *   Use the `java.util.List` interface type when declaring lists where appropriate (e.g., `List<Patient> patients = new ArrayList<>();`).
 * 2.  **Input:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 * 3.  **Control Flow:**
 *     *   Implement a main menu loop that allows the user to select various operations.
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 4.  **Output:**
 *     *   Use `System.out.println()` for displaying the menu, prompts, and successful operation messages/results.
 *     *   Use `System.err.println()` for displaying error messages (e.g., invalid input, record not found, appointment conflict).
 * 5.  **Error Handling:**
 *     *   Implement input validation (e.g., ensure IDs are positive integers, names/times are not empty).
 *     *   Use `try-catch` blocks to handle potential exceptions, particularly around input operations (e.g., `InputMismatchException`). Include a general `try-catch` around the main application loop to demonstrate class-wide handling.
 * 6.  **Object-Oriented Design:**
 *     *   Create separate classes for `Patient`, `Doctor`, `Appointment`, and `AppointmentRequest`.
 *     *   The main logic should reside in a `HospitalSystem` class (or similar) that holds the data structures and methods for operations.
 *     *   Apply proper encapsulation (private fields, public methods/getters where needed).
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain complex parts of the code.
 *     *   Ensure the code is clean and well-structured.
 * 
 * **Functionality:**
 * 
 * Your system should support the following operations via the main menu:
 * 
 * 1.  **Add New Patient:** Prompt for patient ID, name, and age. Add the patient to the list. Validate input (ID > 0, name not empty, age > 0).
 * 2.  **Add New Doctor:** Prompt for doctor ID, name, and specialty. Add the doctor to the list. Validate input (ID > 0, name not empty, specialty not empty). Doctors should have a list of their confirmed appointments.
 * 3.  **Request Appointment:** Prompt for patient ID, requested doctor ID, and preferred time slot (a simple string like "10:00 AM on 2023-10-27"). Create an `AppointmentRequest` object and add it to the queue. Validate input (IDs > 0, time slot not empty). Do NOT check doctor availability at this stage; just queue the request.
 * 4.  **Process Next Appointment Request:** Take the next request from the queue. Find the patient and doctor by their IDs. If either is not found, print an error to `System.err` and discard the request. If found, check if the doctor already has an appointment scheduled for the *exact* requested time slot. If available, create an `Appointment` object, add it to the doctor's list of appointments, and print a success message to `System.out`. If the doctor is busy at that time, print an error to `System.err` and discard the request. Handle the case where the queue is empty.
 * 5.  **View All Patients:** Display details of all registered patients.
 * 6.  **View All Doctors & Appointments:** Display details of all registered doctors and their scheduled appointments.
 * 7.  **View Pending Requests:** Display details of all appointment requests currently in the queue.
 * 8.  **Exit:** Terminate the program.
 * 
 * **Expected Output:**
 * 
 * The program should present a clear menu, prompt the user for necessary input for each operation, display results or status messages to `System.out`, and error messages to `System.err`.
 * 
 * ```
 * --- Hospital Appointment System Menu ---
 * 1. Add New Patient
 * 2. Add New Doctor
 * 3. Request Appointment
 * 4. Process Next Appointment Request
 * 5. View All Patients
 * 6. View All Doctors & Appointments
 * 7. View Pending Requests
 * 8. Exit
 * Enter your choice:
 * ```
 * 
 * Followed by appropriate prompts and output based on the selected operation.
 * 
 * **Constraints:**
 * 
 * *   Use only the specified Java components.
 * *   Adhere to the class structure and functionality described.
 * *   Implement robust error handling and input validation.
 * 
 * This task requires you to integrate various Java concepts and data structures to build a functional, albeit simplified, system. Good luck!
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment Management System, demonstrating the use of the required Java components and concepts.
 * 
 * **Class Structure:**
 * 
 * *   `Patient`, `Doctor`, `Appointment`, and `AppointmentRequest` classes are simple Plain Old Java Objects (POJOs) that encapsulate the data for each entity. They have private fields and public getter methods, adhering to encapsulation principles. The `Doctor` class specifically includes a `List<Appointment>` to manage its scheduled appointments.
 * *   `HospitalSystem` is the main class that orchestrates the system's operations. It holds the primary data structures (`patients`, `doctors`, `appointmentQueue`) and contains methods corresponding to the menu options.
 * 
 * **Data Structures Usage:**
 * 
 * *   `List<Patient> patients = new ArrayList<>();`: An `ArrayList` is used to store patient records. `ArrayList` is suitable here because we primarily need to add new patients and iterate through them. The `List` interface is used for the variable declaration, promoting flexibility.
 * *   `List<Doctor> doctors = new ArrayList<>();`: Similar to patients, an `ArrayList` stores doctor records. The `Doctor` class itself contains an `ArrayList` (`List<Appointment> appointments`) to manage its own appointments.
 * *   `Queue<AppointmentRequest> appointmentQueue = new LinkedList<>();`: A `Queue` is used to manage appointment requests in a First-In, First-Out (FIFO) manner. `LinkedList` is a common and efficient implementation for the `Queue` interface. Requests are added using `offer()` and processed using `poll()`.
 * 
 * **Control Flow and Input:**
 * 
 * *   The `main` method creates a `HospitalSystem` instance and calls its `run()` method.
 * *   The `run()` method contains a `while(true)` loop that continuously displays the menu and waits for user input.
 * *   `Scanner` is used to read integer choices and string inputs from the console.
 * *   A `switch` statement within the loop directs execution to the appropriate method based on the user's menu choice.
 * 
 * **Error Handling and Input Validation:**
 * 
 * *   `System.err.println()` is used exclusively for printing error messages, distinguishing them from normal output.
 * *   Input validation is performed within the methods that read user input (`addNewPatient`, `addNewDoctor`, `requestAppointment`). Checks include ensuring IDs and ages are positive, and names/specialties/time slots are not empty.
 * *   `try-catch (InputMismatchException e)` blocks are used around `scanner.nextInt()` calls to gracefully handle cases where the user enters non-integer input when a number is expected. The invalid input line is consumed (`scanner.nextLine()`) within the catch block to prevent an infinite loop.
 * *   A general `try-catch (Exception e)` block wraps the main `while` loop in the `run()` method. This serves as a "class-wide" exception handler, catching any unexpected exceptions that might propagate up and preventing the program from crashing abruptly, instead printing an error message and stack trace to `System.err`.
 * *   Specific error checks are performed when processing appointment requests (e.g., patient or doctor not found, doctor already busy), with errors reported to `System.err`.
 * 
 * **Functionality Implementation:**
 * 
 * *   Methods like `addNewPatient`, `addNewDoctor`, `requestAppointment`, `processNextAppointmentRequest`, `viewAllPatients`, `viewAllDoctorsAndAppointments`, and `viewPendingRequests` encapsulate the logic for each menu option.
 * *   `findPatientById` and `findDoctorById` are helper methods to search the lists.
 * *   `processNextAppointmentRequest` demonstrates the core logic involving the queue: polling a request, validating entities, checking doctor availability (`isBusy` method in `Doctor`), and adding the confirmed appointment to the doctor's list.
 * 
 * **Best Practices:**
 * 
 * *   Private fields and public methods/getters ensure data encapsulation.
 * *   Method and variable names are descriptive (e.g., `appointmentQueue`, `processNextAppointmentRequest`, `preferredTimeSlot`).
 * *   Comments are included to explain the purpose of classes, methods, and specific code blocks.
 * *   The code is structured logically with separate classes for data and a main system class for operations.
 * *   The `Scanner` is closed in a `finally` block to release system resources.
 * 
 * This solution effectively integrates the required Java components and demonstrates key object-oriented programming principles, input/output handling, and robust error management within a practical scenario.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// --- Data Classes ---

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int id;
    private String name;
    private int age;

    public Patient(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    // Getters
    public int getId() { return id; }
    public String getName() { return name; }
    public int getAge() { return age; }

    @Override
    public String toString() {
        return "Patient [ID: " + id + ", Name: " + name + ", Age: " + age + "]";
    }
}

/**
 * Represents a doctor in the hospital system.
 */
class Doctor {
    private int id;
    private String name;
    private String specialty;
    private List<Appointment> appointments; // List of confirmed appointments

    public Doctor(int id, String name, String specialty) {
        this.id = id;
        this.name = name;
        this.specialty = specialty;
        this.appointments = new ArrayList<>(); // Initialize the list
    }

    // Getters
    public int getId() { return id; }
    public String getName() { return name; }
    public String getSpecialty() { return specialty; }
    public List<Appointment> getAppointments() { return appointments; }

    /**
     * Adds a confirmed appointment to the doctor's schedule.
     * @param appointment The appointment to add.
     */
    public void addAppointment(Appointment appointment) {
        this.appointments.add(appointment);
    }

    /**
     * Checks if the doctor is busy at the given time slot.
     * @param timeSlot The time slot to check.
     * @return true if the doctor has an appointment at this time slot, false otherwise.
     */
    public boolean isBusy(String timeSlot) {
        for (Appointment app : appointments) {
            if (app.getTimeSlot().equals(timeSlot)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String toString() {
        return "Doctor [ID: " + id + ", Name: " + name + ", Specialty: " + specialty + "]";
    }
}

/**
 * Represents a confirmed appointment between a patient and a doctor at a specific time.
 */
class Appointment {
    private int patientId;
    private int doctorId;
    private String timeSlot; // e.g., "10:00 AM on 2023-10-27"

    public Appointment(int patientId, int doctorId, String timeSlot) {
        this.patientId = patientId;
        this.doctorId = doctorId;
        this.timeSlot = timeSlot;
    }

    // Getters
    public int getPatientId() { return patientId; }
    public int getDoctorId() { return doctorId; }
    public String getTimeSlot() { return timeSlot; }

    @Override
    public String toString() {
        return "  - Appointment [Patient ID: " + patientId + ", Time: " + timeSlot + "]";
    }
}

/**
 * Represents a pending request for an appointment, stored in the queue.
 */
class AppointmentRequest {
    private int patientId;
    private int requestedDoctorId;
    private String preferredTimeSlot;

    public AppointmentRequest(int patientId, int requestedDoctorId, String preferredTimeSlot) {
        this.patientId = patientId;
        this.requestedDoctorId = requestedDoctorId;
        this.preferredTimeSlot = preferredTimeSlot;
    }

    // Getters
    public int getPatientId() { return patientId; }
    public int getRequestedDoctorId() { return requestedDoctorId; }
    public String getPreferredTimeSlot() { return preferredTimeSlot; }

    @Override
    public String toString() {
        return "Request [Patient ID: " + patientId + ", Doctor ID: " + requestedDoctorId + ", Time: " + preferredTimeSlot + "]";
    }
}

// --- Main System Class ---

/**
 * Manages the hospital's patients, doctors, and appointment requests.
 */
public class HospitalSystem {

    // Using List interface type for flexibility, implemented by ArrayList
    private List<Patient> patients;
    private List<Doctor> doctors;
    // Using Queue interface type, implemented by LinkedList (common choice for queues)
    private Queue<AppointmentRequest> appointmentQueue;
    private Scanner scanner;

    /**
     * Constructor initializes the data structures and scanner.
     */
    public HospitalSystem() {
        this.patients = new ArrayList<>();
        this.doctors = new ArrayList<>();
        this.appointmentQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.scanner = new Scanner(System.in);
    }

    /**
     * Finds a patient by their ID.
     * @param id The patient ID to search for.
     * @return The Patient object if found, null otherwise.
     */
    private Patient findPatientById(int id) {
        for (Patient p : patients) {
            if (p.getId() == id) {
                return p;
            }
        }
        return null;
    }

    /**
     * Finds a doctor by their ID.
     * @param id The doctor ID to search for.
     * @return The Doctor object if found, null otherwise.
     */
    private Doctor findDoctorById(int id) {
        for (Doctor d : doctors) {
            if (d.getId() == id) {
                return d;
            }
        }
        return null;
    }

    /**
     * Handles adding a new patient to the system.
     */
    public void addNewPatient() {
        System.out.println("\n--- Add New Patient ---");
        int id = -1;
        String name = "";
        int age = -1;

        try {
            System.out.print("Enter Patient ID (positive integer): ");
            id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Input validation
            if (id <= 0) {
                System.err.println("Error: Patient ID must be a positive integer.");
                return;
            }
            if (findPatientById(id) != null) {
                 System.err.println("Error: Patient with ID " + id + " already exists.");
                 return;
            }

            System.out.print("Enter Patient Name: ");
            name = scanner.nextLine().trim();

            // Input validation
            if (name.isEmpty()) {
                System.err.println("Error: Patient name cannot be empty.");
                return;
            }

            System.out.print("Enter Patient Age (positive integer): ");
            age = scanner.nextInt();
            scanner.nextLine(); // Consume newline

             // Input validation
            if (age <= 0) {
                System.err.println("Error: Patient age must be a positive integer.");
                return;
            }

            Patient newPatient = new Patient(id, name, age);
            patients.add(newPatient);
            System.out.println("Patient added successfully: " + newPatient);

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a valid number for ID or age.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
            System.err.println("An unexpected error occurred while adding patient: " + e.getMessage());
            // In a real system, you might log the full stack trace
        }
    }

     /**
     * Handles adding a new doctor to the system.
     */
    public void addNewDoctor() {
        System.out.println("\n--- Add New Doctor ---");
        int id = -1;
        String name = "";
        String specialty = "";

        try {
            System.out.print("Enter Doctor ID (positive integer): ");
            id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Input validation
            if (id <= 0) {
                System.err.println("Error: Doctor ID must be a positive integer.");
                return;
            }
            if (findDoctorById(id) != null) {
                 System.err.println("Error: Doctor with ID " + id + " already exists.");
                 return;
            }

            System.out.print("Enter Doctor Name: ");
            name = scanner.nextLine().trim();

             // Input validation
            if (name.isEmpty()) {
                System.err.println("Error: Doctor name cannot be empty.");
                return;
            }

            System.out.print("Enter Doctor Specialty: ");
            specialty = scanner.nextLine().trim();

             // Input validation
            if (specialty.isEmpty()) {
                System.err.println("Error: Doctor specialty cannot be empty.");
                return;
            }

            Doctor newDoctor = new Doctor(id, name, specialty);
            doctors.add(newDoctor);
            System.out.println("Doctor added successfully: " + newDoctor);

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a valid number for ID.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
            System.err.println("An unexpected error occurred while adding doctor: " + e.getMessage());
        }
    }

    /**
     * Adds a new appointment request to the queue.
     */
    public void requestAppointment() {
        System.out.println("\n--- Request Appointment ---");
        int patientId = -1;
        int doctorId = -1;
        String timeSlot = "";

        try {
            System.out.print("Enter Patient ID: ");
            patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter Requested Doctor ID: ");
            doctorId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter Preferred Time Slot (e.g., '10:00 AM on 2023-10-27'): ");
            timeSlot = scanner.nextLine().trim();

            // Input validation
            if (patientId <= 0 || doctorId <= 0) {
                 System.err.println("Error: Patient and Doctor IDs must be positive integers.");
                 return;
            }
            if (timeSlot.isEmpty()) {
                 System.err.println("Error: Time slot cannot be empty.");
                 return;
            }

            // Note: We don't validate if patient/doctor exist or if time is available here.
            // That happens when processing the queue.

            AppointmentRequest request = new AppointmentRequest(patientId, doctorId, timeSlot);
            appointmentQueue.offer(request); // Add to the end of the queue
            System.out.println("Appointment request added to queue: " + request);

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter valid numbers for IDs.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while requesting appointment: " + e.getMessage());
        }
    }

    /**
     * Processes the next appointment request from the queue.
     */
    public void processNextAppointmentRequest() {
        System.out.println("\n--- Processing Next Appointment Request ---");

        try {
            AppointmentRequest request = appointmentQueue.poll(); // Get and remove the head of the queue

            if (request == null) {
                System.out.println("No pending appointment requests in the queue.");
                return;
            }

            System.out.println("Processing request: " + request);

            Patient patient = findPatientById(request.getPatientId());
            Doctor doctor = findDoctorById(request.getRequestedDoctorId());

            if (patient == null) {
                System.err.println("Error: Patient with ID " + request.getPatientId() + " not found. Request discarded.");
                return;
            }

            if (doctor == null) {
                System.err.println("Error: Doctor with ID " + request.getRequestedDoctorId() + " not found. Request discarded.");
                return;
            }

            // Check doctor's availability for the requested time slot
            if (doctor.isBusy(request.getPreferredTimeSlot())) {
                System.err.println("Error: Doctor " + doctor.getName() + " is already busy at " + request.getPreferredTimeSlot() + ". Request discarded.");
                return;
            }

            // If patient and doctor found and doctor is available, create appointment
            Appointment newAppointment = new Appointment(
                request.getPatientId(),
                request.getRequestedDoctorId(),
                request.getPreferredTimeSlot()
            );

            doctor.addAppointment(newAppointment);
            System.out.println("Appointment confirmed for Patient " + patient.getName() +
                               " with Doctor " + doctor.getName() +
                               " at " + newAppointment.getTimeSlot());

        } catch (Exception e) {
             System.err.println("An unexpected error occurred while processing request: " + e.getMessage());
             // In a real system, you might log the full stack trace
        }
    }

    /**
     * Displays details of all registered patients.
     */
    public void viewAllPatients() {
        System.out.println("\n--- All Patients ---");
        if (patients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient p : patients) {
                System.out.println(p);
            }
        }
    }

    /**
     * Displays details of all registered doctors and their appointments.
     */
    public void viewAllDoctorsAndAppointments() {
        System.out.println("\n--- All Doctors & Appointments ---");
        if (doctors.isEmpty()) {
            System.out.println("No doctors registered yet.");
        } else {
            for (Doctor d : doctors) {
                System.out.println(d);
                if (d.getAppointments().isEmpty()) {
                    System.out.println("  (No appointments scheduled)");
                } else {
                    for (Appointment app : d.getAppointments()) {
                        System.out.println(app);
                    }
                }
            }
        }
    }

    /**
     * Displays details of all pending appointment requests in the queue.
     */
    public void viewPendingRequests() {
        System.out.println("\n--- Pending Appointment Requests ---");
        if (appointmentQueue.isEmpty()) {
            System.out.println("No pending requests in the queue.");
        } else {
            // Iterate through the queue without removing elements
            for (AppointmentRequest request : appointmentQueue) {
                System.out.println(request);
            }
        }
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System Menu ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Add New Doctor");
        System.out.println("3. Request Appointment");
        System.out.println("4. Process Next Appointment Request");
        System.out.println("5. View All Patients");
        System.out.println("6. View All Doctors & Appointments");
        System.out.println("7. View Pending Requests");
        System.out.println("8. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        int choice;
        // Class-wide exception handling wrapping the main loop
        try {
            while (true) {
                displayMenu();

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    switch (choice) {
                        case 1:
                            addNewPatient();
                            break;
                        case 2:
                            addNewDoctor();
                            break;
                        case 3:
                            requestAppointment();
                            break;
                        case 4:
                            processNextAppointmentRequest();
                            break;
                        case 5:
                            viewAllPatients();
                            break;
                        case 6:
                            viewAllDoctorsAndAppointments();
                            break;
                        case 7:
                            viewPendingRequests();
                            break;
                        case 8:
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            return; // Exit the run method and thus the program
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 8.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number for your choice.");
                    scanner.nextLine(); // Consume the invalid input line
                }
            }
        } catch (Exception e) {
            // General catch for unexpected errors during the main loop execution
            System.err.println("\nAn unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to standard error
        } finally {
            // Ensure scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
