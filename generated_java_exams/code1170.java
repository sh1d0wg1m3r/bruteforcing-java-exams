/*
 * Exam Question #1170
 * Generated on: 2025-05-12 17:34:34
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam: Package Delivery Routing Simulator
 * 
 * **Problem Description:**
 * 
 * Design and implement a Java program that simulates a basic package delivery routing system. The system manages packages that are waiting to be processed and tracks packages that have already been processed. Packages are processed in a First-In, First-Out (FIFO) manner. The program should interact with the user via the console, allowing them to add packages, process the next package in the queue, view the current processing queue, view the history of processed packages, and exit the application.
 * 
 * This task requires demonstrating proficiency in core Java data structures, input/output handling, control flow, exception handling, and object-oriented programming principles.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a `Package` class with private fields: `packageId` (String), `destinationAddress` (String), and `weightKg` (double). Include a constructor and public getter methods for these fields. Implement a `toString()` method for easy printing of package details.
 * 2.  **Delivery System Logic:** Create a `DeliveryQueueSimulator` class (or similar) that contains the main simulation logic.
 *     *   Use a `java.util.Queue<Package>` to store packages awaiting processing.
 *     *   Use a `java.util.List<Package>` (specifically instantiated as `java.util.ArrayList<Package>`) to store packages that have been processed.
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console (`System.in`).
 *     *   Present a menu of options to the user:
 *         1.  Add New Package
 *         2.  Process Next Package
 *         3.  View Current Queue
 *         4.  View Processed History
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **Functionality:**
 *     *   **Add New Package:** Prompt the user for package ID, destination address, and weight. Validate the input:
 *         *   Package ID and destination address must not be empty strings.
 *         *   Weight must be a positive number (> 0).
 *         *   If input is invalid, display an error message using `System.err` and do not add the package.
 *         *   If input is valid, create a `Package` object and add it to the processing queue. Display a success message using `System.out`.
 *     *   **Process Next Package:**
 *         *   Attempt to retrieve and remove the next package from the front of the queue.
 *         *   If the queue is empty, display an error message using `System.err`.
 *         *   If a package is successfully retrieved, add it to the processed history list and display its details using `System.out`.
 *     *   **View Current Queue:** Display the details of all packages currently in the processing queue. If the queue is empty, display a message indicating that using `System.out`. The order of display should reflect the processing order (FIFO).
 *     *   **View Processed History:** Display the details of all packages in the processed history list. If the history is empty, display a message indicating that using `System.out`. The display order is not strictly mandated but showing the order of processing is helpful.
 *     *   **Exit:** Terminate the program gracefully.
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using a `try-catch` block around the main simulation loop to catch unexpected runtime errors and display a generic error message along with the exception details using `System.err`.
 *     *   Handle specific input errors (like non-numeric weight) gracefully during the "Add Package" operation.
 * 6.  **Output:**
 *     *   Use `System.out` for menu display, prompts, success messages, and displaying package lists/details.
 *     *   Use `System.err` for all error messages (input validation failures, empty queue operations, unexpected exceptions).
 * 7.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure and formatting.
 *     *   Manage resources (e.g., close the `Scanner`).
 * 
 * **Expected Output Structure (Example Interaction):**
 * 
 * ```
 * --- Delivery Queue Simulator ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Current Queue
 * 4. View Processed History
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG001
 * Enter Destination Address: 123 Main St
 * Enter Weight (kg): 5.5
 * Package PKG001 added to the queue.
 * 
 * --- Delivery Queue Simulator ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Current Queue
 * 4. View Processed History
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG002
 * Enter Destination Address: 456 Oak Ave
 * Enter Weight (kg): 10.0
 * Package PKG002 added to the queue.
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 3
 * --- Current Processing Queue ---
 * Package ID: PKG001, Destination: 123 Main St, Weight: 5.5 kg
 * Package ID: PKG002, Destination: 456 Oak Ave, Weight: 10.0 kg
 * ---------------------------------
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 2
 * Processing package: Package ID: PKG001, Destination: 123 Main St, Weight: 5.5 kg
 * Package PKG001 processed and added to history.
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 3
 * --- Current Processing Queue ---
 * Package ID: PKG002, Destination: 456 Oak Ave, Weight: 10.0 kg
 * ---------------------------------
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 4
 * --- Processed History ---
 * Package ID: PKG001, Destination: 123 Main St, Weight: 5.5 kg
 * -------------------------
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 1
 * Enter Package ID:
 * Error: Package ID cannot be empty.
 * Error: Invalid input. Please try again.
 * 
 * --- Delivery Queue Simulator ---
 * ...
 * Enter your choice: 5
 * Exiting simulator.
 * ```
 *
 * EXPLANATION:
 * The provided solution implements a package delivery routing simulator, fulfilling all the requirements of the exam question.
 * 
 * 1.  **`Package` Class:**
 *     *   This class serves as a simple Plain Old Java Object (POJO) to represent a package.
 *     *   It has private fields (`packageId`, `destinationAddress`, `weightKg`) demonstrating **encapsulation**.
 *     *   Public getter methods (`getPackageId`, `getDestinationAddress`, `getWeightKg`) provide controlled access to the private data.
 *     *   A constructor initializes the package properties.
 *     *   The `toString()` method provides a convenient, formatted string representation of a package, used for displaying package details.
 * 
 * 2.  **`DeliveryQueueSimulator` Class:**
 *     *   This is the main class containing the simulation logic.
 *     *   It uses a `java.util.Queue<Package>` named `processingQueue` to hold packages waiting to be processed. `LinkedList` is chosen as a common implementation of the `Queue` interface, providing FIFO behavior.
 *     *   It uses a `java.util.List<Package>` named `processedHistory`, specifically instantiated as `java.util.ArrayList<Package>`, to store packages after they have been processed. This demonstrates the use of both the `List` interface and the `ArrayList` concrete class.
 *     *   A `java.util.Scanner` is used to read user input from the console (`System.in`).
 * 
 * 3.  **User Interface and Control Flow:**
 *     *   The `displayMenu()` method prints the available options to `System.out`.
 *     *   The `run()` method contains the main simulation loop (`while (choice != 5)`).
 *     *   Inside the loop, it reads the user's choice using the `Scanner`.
 *     *   A `switch` statement is used to direct the program flow based on the user's integer input, calling the appropriate private methods (`addNewPackage`, `processNextPackage`, etc.).
 *     *   The `default` case in the `switch` handles invalid numeric inputs within the expected range.
 * 
 * 4.  **Functionality Implementation:**
 *     *   **`addNewPackage()`:**
 *         *   Prompts the user for package details using `System.out`.
 *         *   Reads input strings using `scanner.nextLine()`. `trim()` is used to remove leading/trailing whitespace.
 *         *   Reads the double weight using `scanner.nextDouble()`. A `try-catch` block specifically for `InputMismatchException` is used to handle cases where the user enters non-numeric input for weight.
 *         *   Crucially, `scanner.nextLine()` is called after reading the double (within a `finally` block) to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls.
 *         *   **Input Validation:** `if` statements check if the ID or address are empty (`isEmpty()`) or if the weight is not positive (`<= 0`).
 *         *   If validation fails, an error message is printed to `System.err`, and the method returns early using `return;`.
 *         *   If validation passes, a `Package` object is created and added to the `processingQueue` using `offer()`, which is the standard way to add elements to a queue.
 *         *   Success messages are printed to `System.out`.
 *     *   **`processNextPackage()`:**
 *         *   Retrieves and removes the next package from the queue using `processingQueue.poll()`. `poll()` is safe as it returns `null` if the queue is empty, rather than throwing an exception like `remove()`.
 *         *   An `if` statement checks if `packageToProcess` is `null`. If so, an error message is printed to `System.err`.
 *         *   If a package is retrieved, its details are printed to `System.out`, it's added to the `processedHistory` list using `add()`, and a success message is printed to `System.out`.
 *     *   **`viewCurrentQueue()`:**
 *         *   Checks if the `processingQueue` is empty.
 *         *   If not empty, it iterates through the queue using an enhanced `for` loop (`for (Package pkg : processingQueue)`). This iterates over the elements without removing them, preserving the queue's state. Package details are printed using their `toString()` method via `System.out`.
 *     *   **`viewProcessedHistory()`:**
 *         *   Checks if the `processedHistory` list is empty.
 *         *   If not empty, it iterates through the list using an enhanced `for` loop and prints each processed package's details using `System.out`.
 * 
 * 5.  **Error Handling:**
 *     *   A `try-catch(InputMismatchException e)` block is used specifically when reading the integer menu choice and the double weight. This catches cases where the user enters non-numeric input. The invalid input is consumed (`scanner.nextLine()`) within the `catch` block to prevent an infinite loop caused by the scanner repeatedly trying to parse the same bad input. Error messages are printed to `System.err`.
 *     *   A larger `try-catch(Exception e)` block wraps the entire `while` loop in the `run()` method. This serves as a **class-wide exception handler** to catch any other unexpected runtime exceptions that might occur during the simulation (e.g., NullPointerException, ArrayIndexOutOfBoundsException, etc., although less likely with this specific logic). It prints a generic error message and the exception's stack trace to `System.err`.
 *     *   Specific validation checks within `addNewPackage()` also print errors to `System.err`.
 * 
 * 6.  **Output Streams:**
 *     *   `System.out` is used for all standard messages, prompts, menu display, and successful operation outputs (adding, processing, viewing lists).
 *     *   `System.err` is strictly used for error conditions, including input validation failures, attempts to process from an empty queue, and unexpected runtime exceptions.
 * 
 * 7.  **Best Practices:**
 *     *   **Encapsulation:** Demonstrated in the `Package` class.
 *     *   **Meaningful Names:** Variables (`processingQueue`, `processedHistory`, `packageId`, `weightKg`), methods (`addNewPackage`, `processNextPackage`, `displayMenu`, `run`), and classes (`Package`, `DeliveryQueueSimulator`) have clear, descriptive names.
 *     *   **Comments/Documentation:** Javadoc comments are included for classes and methods, explaining their purpose, parameters, and return values. Inline comments explain specific logic points (like scanner newline consumption or error handling).
 *     *   **Input Validation:** Explicit checks are performed for empty strings and non-positive weight.
 *     *   **Error Handling:** Both specific input errors and general runtime exceptions are handled using `try-catch` and reported via `System.err`.
 *     *   **Clean Structure:** The code is organized into logical methods within the `DeliveryQueueSimulator` class.
 *     *   **Resource Management:** The `Scanner` is closed in a `finally` block within the `run()` method. This ensures the scanner resource is released whether the program exits normally (choice 5) or due to an unexpected exception caught by the outer `try-catch`. A check `if (scanner != null)` is added for robustness, though in this structure, it will always be non-null if the constructor succeeded.
 * 
 * This solution effectively utilizes the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical, menu-driven application that demonstrates input validation, error handling, and object-oriented design principles.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException; // For handling non-numeric input

/**
 * Represents a package to be delivered.
 */
class Package {
    private String packageId;
    private String destinationAddress;
    private double weightKg;

    /**
     * Constructs a new Package object.
     * @param packageId The unique identifier for the package.
     * @param destinationAddress The delivery address.
     * @param weightKg The weight of the package in kilograms.
     */
    public Package(String packageId, String destinationAddress, double weightKg) {
        this.packageId = packageId;
        this.destinationAddress = destinationAddress;
        this.weightKg = weightKg;
    }

    /**
     * Gets the package ID.
     * @return The package ID.
     */
    public String getPackageId() {
        return packageId;
    }

    /**
     * Gets the destination address.
     * @return The destination address.
     */
    public String getDestinationAddress() {
        return destinationAddress;
    }

    /**
     * Gets the weight of the package.
     * @return The weight in kilograms.
     */
    public double getWeightKg() {
        return weightKg;
    }

    /**
     * Returns a string representation of the Package object.
     * @return A formatted string containing package details.
     */
    @Override
    public String toString() {
        return String.format("Package ID: %s, Destination: %s, Weight: %.2f kg",
                             packageId, destinationAddress, weightKg);
    }
}

/**
 * Simulates a package delivery queue and processing system.
 */
public class DeliveryQueueSimulator {

    private Queue<Package> processingQueue;
    private List<Package> processedHistory;
    private Scanner scanner;

    /**
     * Constructs a DeliveryQueueSimulator.
     * Initializes the queue, history list, and scanner.
     */
    public DeliveryQueueSimulator() {
        // Using LinkedList as a common implementation of Queue
        this.processingQueue = new LinkedList<>();
        // Using ArrayList as required for the history list
        this.processedHistory = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Delivery Queue Simulator ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Current Queue");
        System.out.println("4. View Processed History");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new package to the processing queue based on user input.
     * Handles input validation.
     */
    private void addNewPackage() {
        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine().trim();

        System.out.print("Enter Destination Address: ");
        String address = scanner.nextLine().trim();

        double weight = -1; // Initialize with an invalid value
        System.out.print("Enter Weight (kg): ");
        try {
            weight = scanner.nextDouble();
        } catch (InputMismatchException e) {
            // Consume the invalid input to prevent infinite loop
            scanner.nextLine();
            System.err.println("Error: Invalid input for weight. Please enter a number.");
            // Do not proceed with adding package
            return;
        } finally {
             // Consume the rest of the line after reading double
             // This is important whether InputMismatchException occurs or not
             scanner.nextLine();
        }


        // --- Input Validation ---
        if (id.isEmpty()) {
            System.err.println("Error: Package ID cannot be empty.");
            return; // Stop adding process
        }
        if (address.isEmpty()) {
            System.err.println("Error: Destination Address cannot be empty.");
            return; // Stop adding process
        }
        if (weight <= 0) {
            System.err.println("Error: Weight must be a positive number.");
            return; // Stop adding process
        }
        // --- End Validation ---

        Package newPackage = new Package(id, address, weight);
        if (processingQueue.offer(newPackage)) { // offer() is preferred for queues
            System.out.println("Package " + id + " added to the queue.");
        } else {
            // This case is unlikely with LinkedList unless memory is full,
            // but good practice to check return value of offer().
            System.err.println("Error: Failed to add package to the queue.");
        }
    }

    /**
     * Processes the next package in the queue (removes it and adds to history).
     */
    private void processNextPackage() {
        Package packageToProcess = processingQueue.poll(); // retrieve and remove head

        if (packageToProcess == null) {
            System.err.println("Error: No packages in the queue to process.");
        } else {
            System.out.println("Processing package: " + packageToProcess);
            processedHistory.add(packageToProcess); // Add to the history list
            System.out.println("Package " + packageToProcess.getPackageId() + " processed and added to history.");
        }
    }

    /**
     * Displays the packages currently in the processing queue.
     */
    private void viewCurrentQueue() {
        System.out.println("--- Current Processing Queue ---");
        if (processingQueue.isEmpty()) {
            System.out.println("The processing queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Package pkg : processingQueue) {
                System.out.println(pkg);
            }
        }
        System.out.println("---------------------------------");
    }

    /**
     * Displays the history of processed packages.
     */
    private void viewProcessedHistory() {
        System.out.println("--- Processed History ---");
        if (processedHistory.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            // Iterate through the list
            for (Package pkg : processedHistory) {
                System.out.println(pkg);
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Runs the main simulation loop.
     */
    public void run() {
        int choice = -1;
        // Class-wide try-catch for unexpected errors during the main loop
        try {
            while (choice != 5) {
                displayMenu();
                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    // Consume the invalid input to prevent infinite loop
                    scanner.nextLine();
                    choice = -1; // Reset choice to stay in the loop
                    continue; // Skip the switch statement for this iteration
                }

                switch (choice) {
                    case 1:
                        addNewPackage();
                        break;
                    case 2:
                        processNextPackage();
                        break;
                    case 3:
                        viewCurrentQueue();
                        break;
                    case 4:
                        viewProcessedHistory();
                        break;
                    case 5:
                        System.out.println("Exiting simulator.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions
            System.err.println("An unexpected error occurred during simulation:");
            e.printStackTrace(System.err); // Print stack trace to standard error
        } finally {
            // Ensure scanner is closed regardless of how the loop exits or errors occur
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the simulator.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliveryQueueSimulator simulator = new DeliveryQueueSimulator();
        simulator.run();
    }
}
