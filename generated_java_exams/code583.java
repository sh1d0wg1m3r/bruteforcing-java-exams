/*
 * Exam Question #583
 * Generated on: 2025-05-12 16:10:27
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Task Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Task Management System for a small team. The system needs to handle two types of tasks: "Urgent" and "Standard". Urgent tasks must be processed in the order they are received (First-In, First-Out), while Standard tasks can be completed in any order by specifying their description. The system should allow users to add tasks, view all pending tasks, process the next urgent task, complete a specific standard task, and view completed tasks.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage "Urgent" tasks.
 *     *   Use a `java.util.ArrayList` to manage "Standard" tasks.
 *     *   Use another `java.util.ArrayList` to store "Completed" tasks.
 *     *   Utilize the `java.util.List` interface polymorphically in at least one method signature (e.g., a method that can display any list of tasks).
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get user input for menu choices and task details.
 *     *   Present a clear menu of options to the user.
 * 
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options.
 * 
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, task lists, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue empty, task not found).
 * 
 * 5.  **Error Handling:**
 *     *   Implement robust input validation (e.g., checking task type, ensuring standard task exists).
 *     *   Handle potential runtime errors using `try-catch` blocks. Implement a strategy for "class-wide" exception handling that covers the main operational loop.
 * 
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Task` class with private fields (description, type) and public methods (constructor, getters, `toString`).
 *     *   Create a `TaskManager` class that encapsulates the data structures (`Queue`, `ArrayList`s) and the logic for managing tasks. It should have public methods for the operations (add, view, process urgent, complete standard, view completed).
 *     *   The main class (`ExamTaskSystem`) should contain the `main` method, the `Scanner`, the `TaskManager` instance, and the main application loop with the `switch` statement and top-level exception handling.
 * 
 * 7.  **Best Practices:**
 *     *   Follow proper encapsulation principles.
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure and formatting.
 * 
 * **Operations to Implement:**
 * 
 * 1.  **Add Task:** Prompt for task description and type ("Urgent" or "Standard"). Add to the appropriate list/queue. Validate the task type input.
 * 2.  **View All Pending Tasks:** Display tasks currently in the Urgent queue and the Standard list, clearly separated.
 * 3.  **Process Next Urgent Task:** Remove the task at the front of the Urgent queue and move it to the Completed list. If the queue is empty, display an error.
 * 4.  **Complete Standard Task:** Prompt for the description of the Standard task to complete. Find the task in the Standard list, remove it, and move it to the Completed list. If the task is not found, display an error.
 * 5.  **View Completed Tasks:** Display all tasks in the Completed list.
 * 6.  **Exit:** Terminate the application.
 * 
 * **Expected Output:**
 * 
 * The system should display a menu and respond to user input. Examples of expected output include:
 * 
 * *   Menu display.
 * *   Confirmation messages upon successful task addition or completion.
 * *   Lists of tasks when viewing pending or completed tasks.
 * *   Error messages using `System.err` for invalid input (e.g., non-numeric choice, invalid task type, attempting to process urgent task when none exist, attempting to complete a standard task that doesn't exist).
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a Task Management System demonstrating the required Java concepts and best practices.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **`Queue` (`java.util.Queue`)**: A `LinkedList` is used to implement the `Queue` interface for managing `Urgent` tasks. The `poll()` method is used to retrieve and remove the head of the queue (FIFO processing) when processing urgent tasks.
 * 2.  **`ArrayList` (`java.util.ArrayList`)**: Used for storing `Standard` tasks and `Completed` tasks. `ArrayList` provides dynamic resizing and allows access/removal by index or object reference, which is suitable for managing a list where specific items might be selected for completion (Standard tasks) or simply accumulated (Completed tasks).
 * 3.  **`List` interface (`java.util.List`)**: The `displayTaskList` helper method in `TaskManager` accepts a `List<Task>` parameter. This demonstrates polymorphism, as this method can be called with either an `ArrayList<Task>` (for standard and completed tasks) or a `List<Task>` created from the `urgentTasks` queue (`new ArrayList<>(urgentTasks)`). This shows how to write methods that operate on interfaces rather than concrete implementations.
 * 4.  **`Scanner` (`java.util.Scanner`)**: Used in the `main` method of `ExamTaskSystem` to read user input from the console (menu choices, task descriptions, task types).
 * 5.  **`switch` statement**: Used in the `main` method to control the program flow based on the user's numeric menu choice, directing execution to the appropriate task management operation.
 * 6.  **`System.err`**: Used throughout the `TaskManager` and `main` class to output error messages, such as invalid task types, attempting operations on empty lists/queues, or invalid user input. This clearly distinguishes error output from normal program output.
 * 7.  **`System.out`**: Used for displaying the menu, task lists, success messages, and general program information.
 * 8.  **`try-catch` blocks (Class-wide Exception Handling)**: A `try-catch` block wraps the main `while` loop in the `main` method. This provides a form of "class-wide" handling by catching potential exceptions that occur during the execution of the core application logic. A specific `catch (InputMismatchException e)` is included to handle cases where the user enters non-numeric input when a number is expected, preventing the program from crashing and allowing it to recover. A general `catch (Exception e)` is included as a fallback for any other unexpected runtime exceptions. A `finally` block ensures the `Scanner` is closed regardless of whether an exception occurred.
 * 9.  **Object-Oriented Design (Encapsulation, Classes)**:
 *     *   The `Task` class encapsulates task data (description, type) with private fields and provides public getter methods.
 *     *   The `TaskManager` class encapsulates the data structures (`Queue`, `ArrayList`s) and the business logic for managing tasks, exposing public methods for operations while keeping internal data and helper methods (`displayTaskList`) private.
 *     *   The `ExamTaskSystem` class acts as the application entry point, managing the user interface and coordinating calls to the `TaskManager`.
 * 10. **Input Validation and Error Handling**: The `addTask` method validates the task type string. The `processNextUrgentTask` and `completeStandardTask` methods check for empty queues/lists or non-existent tasks before attempting operations and report errors using `System.err`. The `main` method handles invalid menu input.
 * 11. **Best Practices**: Meaningful variable/method names (`urgentTasks`, `completeStandardTask`), comments (including basic Javadoc), and clear separation of concerns between classes contribute to code readability and maintainability.
 * 
 * The solution effectively integrates the required components into a practical scenario, demonstrating advanced Java programming concepts like data structure selection based on access patterns (Queue vs. List), polymorphism (`List` interface), structured error handling, and object-oriented design principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description and type.
 */
class Task {
    private String description;
    private String type; // "Urgent" or "Standard"

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     * @param type The type of the task ("Urgent" or "Standard").
     */
    public Task(String description, String type) {
        this.description = description;
        this.type = type;
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the type of the task.
     * @return The task type ("Urgent" or "Standard").
     */
    public String getType() {
        return type;
    }

    /**
     * Returns a string representation of the task.
     * @return A formatted string including task type and description.
     */
    @Override
    public String toString() {
        return "[" + type + "] " + description;
    }
}

/**
 * Manages the collection of tasks, separating them by type and status (pending/completed).
 */
class TaskManager {
    private Queue<Task> urgentTasks = new LinkedList<>();
    private ArrayList<Task> standardTasks = new ArrayList<>();
    private ArrayList<Task> completedTasks = new ArrayList<>();

    /**
     * Adds a new task to the appropriate list/queue based on its type.
     * Validates the task type.
     * @param description The task description.
     * @param type The task type ("Urgent" or "Standard").
     * @return true if the task was added successfully, false otherwise.
     */
    public boolean addTask(String description, String type) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Task description cannot be empty.");
            return false;
        }
        String lowerCaseType = type.trim().toLowerCase();
        if ("urgent".equals(lowerCaseType)) {
            urgentTasks.add(new Task(description.trim(), "Urgent"));
            System.out.println("Urgent task added.");
            return true;
        } else if ("standard".equals(lowerCaseType)) {
            standardTasks.add(new Task(description.trim(), "Standard"));
            System.out.println("Standard task added.");
            return true;
        } else {
            System.err.println("Invalid task type. Please enter 'Urgent' or 'Standard'.");
            return false;
        }
    }

    /**
     * Displays all pending tasks (Urgent and Standard).
     */
    public void viewAllTasks() {
        System.out.println("\n--- Pending Tasks ---");
        // Use List interface for displaying urgent tasks (converted from Queue)
        displayTaskList(new ArrayList<>(urgentTasks), "Urgent Tasks");
        // Use List interface for displaying standard tasks (ArrayList is a List)
        displayTaskList(standardTasks, "Standard Tasks");
        System.out.println("---------------------\n");
    }

    /**
     * Helper method to display tasks from any List implementation.
     * Demonstrates use of the List interface.
     * @param tasks The list of tasks to display.
     * @param title The title for the list being displayed.
     */
    private void displayTaskList(List<Task> tasks, String title) {
        System.out.println(title + ":");
        if (tasks.isEmpty()) {
            System.out.println("  None.");
        } else {
            for (int i = 0; i < tasks.size(); i++) {
                // For standard tasks, show index for potential completion reference (optional but helpful)
                 if (title.equals("Standard Tasks")) {
                      System.out.println("  " + (i + 1) + ". " + tasks.get(i));
                 } else {
                     System.out.println("  - " + tasks.get(i));
                 }
            }
        }
    }


    /**
     * Processes the next urgent task from the queue.
     * Moves the task to the completed list.
     */
    public void processNextUrgentTask() {
        Task nextUrgent = urgentTasks.poll(); // poll returns null if queue is empty
        if (nextUrgent != null) {
            completedTasks.add(nextUrgent);
            System.out.println("Processed urgent task: " + nextUrgent.getDescription());
        } else {
            System.err.println("No urgent tasks to process.");
        }
    }

    /**
     * Completes a specific standard task by description.
     * Removes the task from the standard list and moves it to the completed list.
     * @param description The description of the standard task to complete.
     * @return true if the task was found and completed, false otherwise.
     */
    public boolean completeStandardTask(String description) {
        if (description == null || description.trim().isEmpty()) {
             System.err.println("Task description cannot be empty.");
             return false;
        }
        String searchDescription = description.trim();
        Task taskToComplete = null;
        // Find the task by description
        for (Task task : standardTasks) {
            if (task.getDescription().equalsIgnoreCase(searchDescription)) {
                taskToComplete = task;
                break; // Found the task
            }
        }

        if (taskToComplete != null) {
            standardTasks.remove(taskToComplete); // Remove from standard list
            completedTasks.add(taskToComplete);    // Add to completed list
            System.out.println("Completed standard task: " + taskToComplete.getDescription());
            return true;
        } else {
            System.err.println("Standard task not found with description: " + searchDescription);
            return false;
        }
    }

    /**
     * Displays all completed tasks.
     */
    public void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        displayTaskList(completedTasks, "Completed Tasks"); // ArrayList is a List
        System.out.println("-----------------------\n");
    }
}

/**
 * Main class for the Task Management System application.
 * Handles user input, menu display, and orchestrates TaskManager operations.
 * Includes class-wide exception handling.
 */
public class ExamTaskSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskManager taskManager = new TaskManager();
        boolean running = true;

        // Class-wide exception handling around the main application loop
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default invalid choice

                // Specific catch for non-integer input
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop and show menu again
                }

                // Use switch for flow control based on user choice
                switch (choice) {
                    case 1: // Add Task
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter task type (Urgent/Standard): ");
                        String type = scanner.nextLine();
                        taskManager.addTask(description, type);
                        break;
                    case 2: // View All Pending Tasks
                        taskManager.viewAllTasks();
                        break;
                    case 3: // Process Next Urgent Task
                        taskManager.processNextUrgentTask();
                        break;
                    case 4: // Complete Standard Task
                        System.out.print("Enter description of standard task to complete: ");
                        String standardTaskDesc = scanner.nextLine();
                        taskManager.completeStandardTask(standardTaskDesc);
                        break;
                    case 5: // View Completed Tasks
                        taskManager.viewCompletedTasks();
                        break;
                    case 0: // Exit
                        running = false;
                        System.out.println("Exiting Task Management System. Goodbye!");
                        break;
                    default: // Invalid Choice
                        System.err.println("Invalid choice. Please enter a number from the menu.");
                        break;
                }
            }
        } catch (Exception e) {
            // Generic catch for any other unexpected runtime exceptions
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            // Optional: e.printStackTrace(); for debugging
        } finally {
            // Ensure scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add Task");
        System.out.println("2. View All Pending Tasks");
        System.out.println("3. Process Next Urgent Task");
        System.out.println("4. Complete Standard Task");
        System.out.println("5. View Completed Tasks");
        System.out.println("0. Exit");
        System.out.println("----------------------------");
    }
}
