/*
 * Exam Question #680
 * Generated on: 2025-05-12 16:24:44
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Subject:** Advanced Java Programming
 * **Task Title:** Print Job Management System
 * 
 * **Problem Description:**
 * 
 * Design and implement a command-line application in Java that simulates a simple print job management system. The system should manage a queue of print jobs waiting to be processed and maintain a history of completed jobs. Users should be able to interact with the system via a text-based menu.
 * 
 * **Requirements:**
 * 
 * 1.  **Print Job Representation:** Create a class `PrintJob` to represent a print job. Each `PrintJob` should have:
 *     *   A unique integer ID (automatically assigned).
 *     *   A `String` representing the file name.
 *     *   An integer representing the number of pages.
 *     *   Appropriate private fields, a constructor, and public getter methods.
 * 
 * 2.  **Print Manager:** Create a class `PrintManager` that orchestrates the system. This class should contain:
 *     *   A `java.util.Queue<PrintJob>` to hold jobs waiting to be printed.
 *     *   A `java.util.List<PrintJob>` (implemented using `java.util.ArrayList`) to store completed print jobs.
 *     *   Methods for the following operations:
 *         *   `addJob(String fileName, int pages)`: Creates a new `PrintJob`, validates the input (`pages` must be > 0), and adds it to the waiting queue. If input is invalid, print an error message to `System.err`.
 *         *   `processNextJob()`: Removes the job at the front of the queue, adds it to the completed jobs list, and prints a success message to `System.out`. If the queue is empty, print an error message to `System.err`.
 *         *   `viewQueue()`: Prints the details of all jobs currently in the waiting queue to `System.out`.
 *         *   `viewCompletedJobs()`: Prints the details of all completed jobs to `System.out`.
 *         *   `runSystem()`: Contains the main application loop. It should display a menu, read user input, and call the appropriate methods based on the user's choice.
 * 
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Display a clear menu of options: Add Job, Process Next Job, View Queue, View Completed, Exit.
 *     *   Use a `switch` statement in the `runSystem()` method to handle the different menu options.
 * 
 * 4.  **Error Handling:**
 *     *   Use `System.err` for all error messages (e.g., invalid input, queue empty).
 *     *   Use `System.out` for all normal output (menu, success messages, job details).
 *     *   Implement class-wide exception handling using a `try-catch` block within the `runSystem()` method to catch potential unexpected errors during the main loop execution and print a generic error message to `System.err`.
 *     *   Perform input validation for the number of pages when adding a job.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Provide appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure proper encapsulation (`private` fields, `public` methods).
 *     *   Structure the code cleanly with separate classes for `PrintJob` and `PrintManager`.
 * 
 * **Expected Output:**
 * 
 * The program should run continuously until the user chooses to exit. It should display the menu, prompt for input, and provide feedback or output based on the chosen action. Error messages should go to standard error, and normal output to standard output.
 * 
 * Example interaction:
 * 
 * ```
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name: document.txt
 * Enter number of pages: 15
 * Job added: Job ID 1, File: document.txt, Pages: 15
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * ... (menu repeats) ...
 * Enter your choice: 3
 * Waiting Queue:
 * Job ID 1, File: document.txt, Pages: 15
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Processing job: Job ID 1, File: document.txt, Pages: 15. Moved to completed.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * ... (menu repeats) ...
 * Enter your choice: 4
 * Completed Jobs:
 * Job ID 1, File: document.txt, Pages: 15
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Error: No jobs in the waiting queue to process. (This message goes to System.err)
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * ... (menu repeats) ...
 * Enter your choice: 5
 * Exiting Print Job Management System.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * The provided solution implements a simple Print Job Management System as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single print job with `jobId`, `fileName`, and `pages`.
 *     *   `jobId` is automatically assigned using a `static` counter (`nextJobId`), ensuring uniqueness for each new job created during the program's execution.
 *     *   Fields are `private` for encapsulation.
 *     *   Public getter methods (`getJobId`, `getFileName`, `getPages`) provide controlled access to the data.
 *     *   `toString()` method is overridden for easy printing of job details.
 * 
 * 2.  **`PrintManager` Class:**
 *     *   This class contains the core logic and data structures.
 *     *   `pendingJobsQueue`: Declared as `java.util.Queue<PrintJob>` and initialized with `java.util.LinkedList`. `Queue` is used here because print jobs are processed in a First-In, First-Out (FIFO) manner, which is the primary behavior of a print queue. `LinkedList` is a common implementation of the `Queue` interface.
 *     *   `completedJobsList`: Declared as `java.util.List<PrintJob>` and initialized with `java.util.ArrayList`. `List` is used as the interface type for abstraction, while `ArrayList` provides a dynamic array implementation suitable for storing a history of completed jobs where order is maintained and random access (though not strictly needed here) is efficient.
 *     *   `scanner`: An instance of `java.util.Scanner` is used to read user input from `System.in`.
 *     *   **`addJob(String fileName, int pages)`:** Takes job details, creates a `PrintJob` object, and adds it to the `pendingJobsQueue` using `queue.add()`. Includes input validation to ensure `pages` is positive, printing an error to `System.err` if invalid.
 *     *   **`processNextJob()`:** Uses `queue.poll()` to retrieve and remove the head of the `pendingJobsQueue`. If `poll()` returns `null` (meaning the queue is empty), it prints an error to `System.err`. Otherwise, it adds the processed job to the `completedJobsList`.
 *     *   **`viewQueue()`:** Iterates through the `pendingJobsQueue` using an enhanced for loop. This allows viewing the elements without removing them, preserving the queue's state. Prints details to `System.out`.
 *     *   **`viewCompletedJobs()`:** Iterates through the `completedJobsList` using an enhanced for loop and prints details to `System.out`.
 *     *   **`runSystem()`:** This method contains the main application loop (`while(running)`).
 *         *   It repeatedly calls `displayMenu()`.
 *         *   It reads the user's integer choice using `scanner.nextInt()`. Basic input validation for non-integer input is included using `hasNextInt()` and consuming invalid input.
 *         *   A `switch` statement is used to direct the flow based on the user's `choice`. Each case calls the appropriate `PrintManager` method (`addJob`, `processNextJob`, `viewQueue`, `viewCompletedJobs`) or sets `running` to `false` to exit.
 *         *   Input for adding a job (`fileName`, `pages`) is read within the appropriate case. A `try-catch` block is used specifically around reading the integer `pages` to handle `InputMismatchException` if the user enters non-numeric input, printing an error to `System.err`.
 *         *   A `try-catch` block wraps the *entire* `while` loop in `runSystem()`. This provides a class-wide exception handling mechanism, catching any unexpected runtime exceptions that might occur within the main operational flow and printing a generic error message to `System.err` before potentially terminating. A `finally` block ensures the `Scanner` is closed.
 *     *   **`main(String[] args)`:** The entry point of the application. It creates an instance of `PrintManager` and calls its `runSystem()` method to start the system.
 * 
 * 3.  **User Interface and Flow Control:**
 *     *   `Scanner` is used for all console input.
 *     *   A `while` loop keeps the application running until the exit condition is met.
 *     *   A `switch` statement effectively handles the multi-way branching based on the user's menu selection.
 * 
 * 4.  **Error Handling:**
 *     *   `System.err` is consistently used for error messages (invalid pages, empty queue, invalid menu choice, input errors, unexpected system errors).
 *     *   `System.out` is used for all normal output (menu, prompts, success messages, job listings).
 *     *   Input validation for pages (`pages <= 0`) is explicit.
 *     *   Specific `try-catch` for `InputMismatchException` when reading integers prevents crashes on non-numeric input.
 *     *   The outer `try-catch` in `runSystem()` serves as a general safety net for unhandled exceptions during execution.
 * 
 * 5.  **Best Practices:**
 *     *   Meaningful names like `pendingJobsQueue`, `completedJobsList`, `addJob`, `processNextJob`, `fileName`, `pages` are used.
 *     *   Basic Javadoc comments are included for classes and methods.
 *     *   Fields are `private`, accessed via `public` methods.
 *     *   The code is structured logically into two classes (`PrintJob` and `PrintManager`) with clear responsibilities.
 * 
 * This solution effectively integrates the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical scenario, demonstrating input handling, data structure manipulation, flow control, and error management, making it a suitable challenging exam task.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Represents a single print job with a unique ID, file name, and number of pages.
 */
class PrintJob {
    private static int nextJobId = 1; // Static counter for unique job IDs
    private int jobId;
    private String fileName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     * Assigns a unique job ID automatically.
     *
     * @param fileName The name of the file to print.
     * @param pages    The number of pages in the file.
     */
    public PrintJob(String fileName, int pages) {
        this.jobId = nextJobId++; // Assign current ID and increment for the next job
        this.fileName = fileName;
        this.pages = pages;
    }

    // --- Getters ---

    /**
     * Gets the unique ID of the print job.
     *
     * @return The job ID.
     */
    public int getJobId() {
        return jobId;
    }

    /**
     * Gets the file name of the print job.
     *
     * @return The file name.
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * Gets the number of pages in the print job.
     *
     * @return The number of pages.
     */
    public int getPages() {
        return pages;
    }

    @Override
    public String toString() {
        return String.format("Job ID %d, File: %s, Pages: %d", jobId, fileName, pages);
    }
}

/**
 * Manages the print job queue and completed jobs history.
 * Provides methods for adding, processing, viewing jobs, and running the system interface.
 */
public class PrintManager { // Renamed from Main to PrintManager as it holds the core logic
    private Queue<PrintJob> pendingJobsQueue;
    private List<PrintJob> completedJobsList; // Using List interface, implemented by ArrayList
    private Scanner scanner;

    /**
     * Constructs a new PrintManager, initializing the queue and lists.
     */
    public PrintManager() {
        // LinkedList is a common implementation for Queue
        this.pendingJobsQueue = new LinkedList<>();
        // ArrayList is a common implementation for List for dynamic arrays
        this.completedJobsList = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new print job to the waiting queue.
     * Validates that the number of pages is positive.
     *
     * @param fileName The name of the file.
     * @param pages    The number of pages.
     */
    public void addJob(String fileName, int pages) {
        if (pages <= 0) {
            System.err.println("Error: Number of pages must be positive.");
            return;
        }
        PrintJob newJob = new PrintJob(fileName, pages);
        pendingJobsQueue.add(newJob); // Add to the end of the queue
        System.out.println("Job added: " + newJob);
    }

    /**
     * Processes the next job in the waiting queue.
     * Removes it from the queue and adds it to the completed list.
     * Handles the case where the queue is empty.
     */
    public void processNextJob() {
        PrintJob jobToProcess = pendingJobsQueue.poll(); // Get and remove the head of the queue

        if (jobToProcess == null) {
            System.err.println("Error: No jobs in the waiting queue to process.");
        } else {
            completedJobsList.add(jobToProcess); // Add to the completed list
            System.out.println("Processing job: " + jobToProcess + ". Moved to completed.");
        }
    }

    /**
     * Prints the details of all jobs currently in the waiting queue.
     */
    public void viewQueue() {
        System.out.println("--- Waiting Queue ---");
        if (pendingJobsQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate without removing elements
            for (PrintJob job : pendingJobsQueue) {
                System.out.println(job);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Prints the details of all completed jobs.
     */
    public void viewCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobsList.isEmpty()) {
            System.out.println("No jobs have been completed yet.");
        } else {
            for (PrintJob job : completedJobsList) {
                System.out.println(job);
            }
        }
        System.out.println("----------------------");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Print Job Management System ---");
        System.out.println("1. Add New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and menu navigation.
     * Includes class-wide exception handling.
     */
    public void runSystem() {
        boolean running = true;
        // Class-wide exception handling for the main operational loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    // Read choice, handling potential non-integer input
                    if (scanner.hasNextInt()) {
                         choice = scanner.nextInt();
                    } else {
                         System.err.println("Error: Invalid input. Please enter a number.");
                         scanner.next(); // Consume the invalid input
                         continue; // Skip to the next loop iteration
                    }
                } catch (Exception e) {
                    // Catch any other scanner issues, though nextInt() usually throws InputMismatchException
                    System.err.println("An error occurred reading input: " + e.getMessage());
                    scanner.next(); // Attempt to consume problematic input
                    continue;
                } finally {
                     // Consume the newline character left by nextInt()
                     scanner.nextLine();
                }


                // Use a switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter file name: ");
                        String fileName = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        int pages = -1;
                        try {
                            pages = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            addJob(fileName, pages);
                        } catch (java.util.InputMismatchException e) {
                            System.err.println("Error: Invalid input for pages. Please enter an integer.");
                            scanner.nextLine(); // Consume the invalid input
                        }
                        break;
                    case 2:
                        processNextJob();
                        break;
                    case 3:
                        viewQueue();
                        break;
                    case 4:
                        viewCompletedJobs();
                        break;
                    case 5:
                        System.out.println("Exiting Print Job Management System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception mainEx) {
            // Catch any unhandled exceptions during the system's runtime
            System.err.println("An unexpected system error occurred: " + mainEx.getMessage());
            mainEx.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed when the system exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Print Management System.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PrintManager manager = new PrintManager();
        manager.runSystem();
    }
}
