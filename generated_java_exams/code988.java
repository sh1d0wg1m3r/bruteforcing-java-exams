/*
 * Exam Question #988
 * Generated on: 2025-05-12 17:09:28
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Print Job Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Print Job Management System for a large office. The system should manage print jobs submitted by users, hold them in a waiting queue, and allow processing these jobs using a pool of available printers.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store incoming print jobs that are waiting to be processed (First-In, First-Out).
 *     *   Use an `ArrayList` assigned to a `List` variable to store the names of the printers available in the system.
 * 
 * 2.  **Classes:**
 *     *   Create a `PrintJob` class to represent a single print job. It should have properties like a unique job ID, the user who submitted the job, the number of pages, and a status (e.g., Waiting, Processing, Completed).
 *     *   Create a `PrintManager` class to handle the overall system logic. This class should contain the `Queue` of jobs and the `List` of printer names.
 * 
 * 3.  **Functionality (via a command-line menu):**
 *     *   **Submit New Job:** Prompt the user for their name and the number of pages. Create a `PrintJob` object and add it to the waiting queue. Assign a unique ID to each job (starting from 1).
 *     *   **Process Next Job:** Take the next job from the front of the queue. Simulate processing by displaying the job details and assigning it to one of the available printers (for simplicity, you can just pick the first printer name from your list for the output message; you don't need to track printer busy status for this problem). Remove the job from the queue.
 *     *   **View Waiting Queue:** Display all jobs currently in the waiting queue, showing their ID, user, and pages.
 *     *   **View Available Printers:** Display the names of all printers configured in the system.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a menu-driven interface using a `switch` statement to handle user choices.
 *     *   Display menu options and program output using `System.out`.
 *     *   Display error messages (e.g., invalid input, attempting to process a job when the queue is empty) using `System.err`.
 * 
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors (e.g., non-integer input when expecting pages, issues with queue operations if not handled explicitly). The main application loop should be wrapped in a `try-catch`.
 *     *   Validate user input where necessary (e.g., number of pages should be positive).
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu. Based on user selection, it should perform the requested action, printing confirmations, queue status, printer lists, or error messages as appropriate.
 * 
 * Example Interaction:
 * 
 * ```
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 1
 * Enter your name: Alice
 * Enter number of pages: 15
 * Job 1 submitted by Alice (15 pages).
 * 
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 1
 * Enter your name: Bob
 * Enter number of pages: 100
 * Job 2 submitted by Bob (100 pages).
 * 
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * Job ID: 1, User: Alice, Pages: 15
 * Job ID: 2, User: Bob, Pages: 100
 * 
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 2
 * Processing Job ID: 1, User: Alice, Pages: 15 on Printer: LaserWriter 5000
 * Job 1 completed.
 * 
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * Job ID: 2, User: Bob, Pages: 100
 * 
 * --- Print Job Management Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Waiting Queue
 * 4. View Available Printers
 * 5. Exit
 * Enter your choice: 5
 * Exiting Print Job Management System.
 * ```
 * 
 * Handle cases like entering non-numeric input for pages, or trying to process a job when the queue is empty.
 * 
 * ```
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 2
 * No jobs in the waiting queue.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 1
 * Enter your name: Charlie
 * Enter number of pages: abc
 * System.err: Invalid input. Please enter a valid number of pages.
 * Job submission failed.
 * ```
 * 
 * This task requires you to integrate several core Java concepts and data structures to build a functional, robust, and well-structured application.
 *
 * EXPLANATION:
 * This solution implements the Print Job Management System as described, utilizing all the required Java components and adhering to best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single print job with `id`, `user`, `pages`, and `status`.
 *     *   Uses a nested `enum JobStatus` for clarity and type safety.
 *     *   Includes a constructor with basic input validation (positive ID/pages, non-empty user).
 *     *   Provides public getter methods for accessing private fields (encapsulation).
 *     *   Includes a `setStatus` setter, as the manager will change the status.
 *     *   Overrides `toString()` for easy printing of job details.
 * 
 * 2.  **`PrintManager` Class:**
 *     *   Contains the core data structures:
 *         *   `jobQueue`: Declared as `Queue<PrintJob>` and initialized with `new LinkedList<>()`. `LinkedList` implements the `Queue` interface, providing FIFO behavior suitable for a job queue.
 *         *   `availablePrinters`: Declared as `List<String>` and initialized with `new ArrayList<>()`. This meets the requirement of using an `ArrayList` assigned to a `List` variable. It stores the names of printers.
 *     *   `nextJobId`: A counter to generate unique IDs for new jobs.
 *     *   **`submitJob(String user, int pages)`:**
 *         *   Creates a new `PrintJob` object. The `PrintJob` constructor handles input validation and throws `IllegalArgumentException` if validation fails.
 *         *   Adds the new job to the end of the `jobQueue` using `offer()`.
 *         *   Increments `nextJobId`.
 *         *   Uses a `try-catch` block internally to catch `IllegalArgumentException` from the `PrintJob` constructor and print an error message using `System.err`.
 *     *   **`processNextJob()`:**
 *         *   Checks if the `jobQueue` is empty. If so, prints a message.
 *         *   If not empty, retrieves and removes the job at the front using `jobQueue.poll()`.
 *         *   Simulates printer assignment by picking the first name from the `availablePrinters` list (if available).
 *         *   Updates the job's status (optional but good practice).
 *         *   Prints processing and completion messages using `System.out`.
 *     *   **`viewJobQueue()`:**
 *         *   Checks if the queue is empty.
 *         *   Iterates through the `jobQueue` using a for-each loop to display each job's details without removing them.
 *         *   Prints output using `System.out`.
 *     *   **`viewAvailablePrinters()`:**
 *         *   Checks if the list is empty.
 *         *   Iterates through the `availablePrinters` list using a standard for loop to display each printer name.
 *         *   Prints output using `System.out`.
 * 
 * 3.  **`PrintSystem` Class (Main Class):**
 *     *   Contains the `main` method, which serves as the application entry point and user interface handler.
 *     *   Creates instances of `PrintManager` and `Scanner`.
 *     *   Implements the main application loop (`while(running)`).
 *     *   **Class-wide Exception Handling:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This provides a top-level handler for any unexpected exceptions that might propagate up, preventing the program from crashing abruptly. It prints a generic error message and the stack trace to `System.err`. A `finally` block ensures the `Scanner` is closed.
 *     *   **User Input and `switch`:** Inside the `try` block, it calls `printMenu()`, reads user input using `scanner.nextLine()`, attempts to parse it to an integer, and uses a `switch` statement to direct the program flow based on the user's choice.
 *     *   **Input Validation (Partial):** It specifically catches `NumberFormatException` when reading the number of pages for job submission, printing an error to `System.err`. Invalid menu choices are handled by the `default` case of the `switch`, also printing to `System.err`.
 *     *   Delegates actual system operations (submit, process, view) to the `PrintManager` instance.
 *     *   `System.out` is used for menus, prompts, and successful operation outputs.
 *     *   `System.err` is used for invalid input messages and general error reporting.
 * 
 * This solution effectively demonstrates the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical, object-oriented structure, adhering to best practices like encapsulation, clear naming, and basic error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a print job in the system.
 */
class PrintJob {
    private int id;
    private String user;
    private int pages;
    private JobStatus status;

    /**
     * Enum representing the status of a print job.
     */
    public enum JobStatus {
        WAITING, PROCESSING, COMPLETED
    }

    /**
     * Constructs a new PrintJob.
     *
     * @param id    The unique ID of the job.
     * @param user  The user who submitted the job.
     * @param pages The number of pages in the job.
     */
    public PrintJob(int id, String user, int pages) {
        if (id <= 0) {
            throw new IllegalArgumentException("Job ID must be positive.");
        }
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        if (user == null || user.trim().isEmpty()) {
            throw new IllegalArgumentException("User name cannot be empty.");
        }
        this.id = id;
        this.user = user;
        this.pages = pages;
        this.status = JobStatus.WAITING; // New jobs start as WAITING
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getUser() {
        return user;
    }

    public int getPages() {
        return pages;
    }

    public JobStatus getStatus() {
        return status;
    }

    // --- Setters (if needed, status might be changed by manager) ---
    public void setStatus(JobStatus status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the PrintJob.
     *
     * @return A formatted string describing the job.
     */
    @Override
    public String toString() {
        return "Job ID: " + id + ", User: " + user + ", Pages: " + pages + ", Status: " + status;
    }
}

/**
 * Manages the print job queue and available printers.
 */
class PrintManager {
    // Required: Queue to store waiting jobs (FIFO)
    private Queue<PrintJob> jobQueue;

    // Required: List (backed by ArrayList) to store printer names
    private List<String> availablePrinters; // Using List interface, implemented by ArrayList

    private int nextJobId;

    /**
     * Constructs a new PrintManager and initializes the queue and printers.
     */
    public PrintManager() {
        // Initialize the queue using LinkedList (which implements Queue)
        this.jobQueue = new LinkedList<>();

        // Initialize the list of printers using ArrayList
        this.availablePrinters = new ArrayList<>();
        // Add some default printers
        availablePrinters.add("LaserWriter 5000");
        availablePrinters.add("ColorJet Pro M281fdw");
        availablePrinters.add("OfficePrinter XYZ");

        this.nextJobId = 1; // Start job IDs from 1
    }

    /**
     * Submits a new print job to the waiting queue.
     *
     * @param user  The user submitting the job.
     * @param pages The number of pages in the job.
     */
    public void submitJob(String user, int pages) {
        try {
            // Input validation handled by PrintJob constructor
            PrintJob newJob = new PrintJob(nextJobId, user, pages);
            jobQueue.offer(newJob); // Add job to the end of the queue
            System.out.println("Job " + nextJobId + " submitted by " + user + " (" + pages + " pages).");
            nextJobId++; // Increment for the next job
        } catch (IllegalArgumentException e) {
            // Catch validation errors from PrintJob constructor
            System.err.println("Job submission failed: " + e.getMessage());
        } catch (Exception e) {
             // Catch any other unexpected errors during submission
             System.err.println("An unexpected error occurred during job submission: " + e.getMessage());
             // e.printStackTrace(System.err); // Optional: for debugging
        }
    }

    /**
     * Processes the next job from the waiting queue.
     */
    public void processNextJob() {
        if (jobQueue.isEmpty()) {
            System.out.println("No jobs in the waiting queue.");
            return;
        }

        // Get and remove the job at the front of the queue (FIFO)
        PrintJob jobToProcess = jobQueue.poll();

        // Simulate assigning to a printer (for output purposes only)
        String printerName = "Unknown Printer";
        if (!availablePrinters.isEmpty()) {
            // Get the first printer name from the list
            printerName = availablePrinters.get(0);
            // In a real system, you'd manage printer availability here
        }

        // Simulate processing
        jobToProcess.setStatus(PrintJob.JobStatus.PROCESSING); // Optional status update
        System.out.println("Processing " + jobToProcess + " on Printer: " + printerName);

        // Simulate completion
        jobToProcess.setStatus(PrintJob.JobStatus.COMPLETED); // Optional status update
        System.out.println("Job " + jobToProcess.getId() + " completed.");

        // Note: The job is already removed from the queue by poll()
    }

    /**
     * Displays all jobs currently in the waiting queue.
     */
    public void viewJobQueue() {
        if (jobQueue.isEmpty()) {
            System.out.println("Waiting Queue is empty.");
            return;
        }

        System.out.println("--- Waiting Queue ---");
        // Iterate through the queue without removing elements
        // Using toArray() is one way to iterate without modifying the queue
        // Or simply printing the queue object itself often works for basic display
        // For a more structured output, iterating is better:
        int index = 1;
        for (PrintJob job : jobQueue) {
             System.out.println(index + ". " + job);
             index++;
        }
        System.out.println("---------------------");
    }

    /**
     * Displays the names of all available printers.
     */
    public void viewAvailablePrinters() {
        if (availablePrinters.isEmpty()) {
            System.out.println("No printers configured in the system.");
            return;
        }

        System.out.println("--- Available Printers ---");
        // Iterate through the list of printer names
        for (int i = 0; i < availablePrinters.size(); i++) {
            System.out.println((i + 1) + ". " + availablePrinters.get(i));
        }
        System.out.println("------------------------");
    }
}

/**
 * Main class to run the Print Job Management System.
 * Handles user interaction and menu display.
 */
public class PrintSystem {

    public static void main(String[] args) {
        PrintManager manager = new PrintManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("--- Welcome to Print Job Management System ---");

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                printMenu();

                // Read user choice as a line to prevent InputMismatchException
                String choiceStr = scanner.nextLine();
                int choice = -1; // Default invalid choice

                try {
                    choice = Integer.parseInt(choiceStr);
                } catch (NumberFormatException e) {
                    // Handled below in the switch default case
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1: // Submit New Job
                        System.out.print("Enter your name: ");
                        String user = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        try {
                            int pages = Integer.parseInt(scanner.nextLine());
                            manager.submitJob(user, pages);
                        } catch (NumberFormatException e) {
                            System.err.println("Invalid input. Please enter a valid number of pages.");
                        }
                        break;

                    case 2: // Process Next Job
                        manager.processNextJob();
                        break;

                    case 3: // View Waiting Queue
                        manager.viewJobQueue();
                        break;

                    case 4: // View Available Printers
                        manager.viewAvailablePrinters();
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Print Job Management System.");
                        running = false;
                        break;

                    default: // Invalid choice
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unhandled exceptions during the program execution
            System.err.println("An unexpected critical error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed even if an exception occurs
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Print Job Management Menu ---");
        System.out.println("1. Submit New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Available Printers");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }
}
