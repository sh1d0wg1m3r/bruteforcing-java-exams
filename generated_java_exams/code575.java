/*
 * Exam Question #575
 * Generated on: 2025-05-12 16:09:39
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Logistics Hub Package Routing Simulator
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified simulator for a logistics hub's package routing system. The system needs to manage incoming packages, process them for routing, and allow querying processed packages based on their destination zone.
 * 
 * The simulator should handle the following operations based on user input:
 * 
 * 1.  **Add Incoming Package:** Add a new package to a queue of packages waiting to be processed. Each package has a unique ID (String), a destination zone (integer, e.g., 1, 2, 3...), and a weight (double).
 * 2.  **Process Next Package:** Take the package at the front of the incoming queue, mark it as processed, and move it to a list of processed packages.
 * 3.  **List Processed Packages by Zone:** Display all packages in the processed list that are designated for a specific destination zone provided by the user.
 * 4.  **List All Incoming Packages:** Display all packages currently waiting in the incoming queue.
 * 5.  **Exit:** Terminate the simulator.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must adhere to the following technical requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to manage incoming packages.
 *     *   Use `java.util.ArrayList` as the concrete implementation for the list of processed packages.
 *     *   Declare the processed packages collection using the `java.util.List` interface type.
 * 2.  **Input:** Use `java.util.Scanner` to read user commands and package details from the console.
 * 3.  **Control Flow:** Use a `switch` statement to handle the different user commands.
 * 4.  **Output:**
 *     *   Use `System.out.println()` for displaying the menu, successful operation messages, and package lists.
 *     *   Use `System.err.println()` for displaying error messages (e.g., invalid input, trying to process from an empty queue, trying to list from an empty processed list).
 * 5.  **Error Handling:** Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues like invalid user input format (e.g., non-numeric input when expecting numbers) or attempting operations on empty collections.
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Package` class with private fields (`packageId`, `destinationZone`, `weightKg`, `isProcessed`) and public getter methods. Include a method to mark the package as processed.
 *     *   Create a `RoutingSimulator` class that encapsulates the queue and list, and contains methods for each operation (add, process, list).
 *     *   Implement proper encapsulation (private fields, public methods).
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Perform input validation (e.g., check if zone is positive, weight is non-negative).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu of options to the user. Based on the user's choice, it should perform the requested operation, display results to `System.out`, or display error messages to `System.err`.
 * 
 * Example Interaction (illustrative, not exhaustive):
 * 
 * ```
 * Logistics Hub Simulator Menu:
 * 1. Add Incoming Package
 * 2. Process Next Package
 * 3. List Processed Packages by Zone
 * 4. List All Incoming Packages
 * 5. Exit
 * Enter choice: 1
 * Enter Package ID: PKG001
 * Enter Destination Zone (integer): 3
 * Enter Weight (kg, double): 5.75
 * Package PKG001 added to incoming queue.
 * 
 * Logistics Hub Simulator Menu:
 * ...
 * Enter choice: 2
 * Processing next package...
 * Package PKG001 processed and moved to processed list.
 * 
 * Logistics Hub Simulator Menu:
 * ...
 * Enter choice: 3
 * Enter Zone to list processed packages for: 3
 * Processed Packages for Zone 3:
 * [PKG001, Zone 3, 5.75 kg, Processed: true]
 * 
 * Logistics Hub Simulator Menu:
 * ...
 * Enter choice: 2
 * Error: No packages in the incoming queue to process. (Output to System.err)
 * 
 * Logistics Hub Simulator Menu:
 * ...
 * Enter choice: abc
 * Error: Invalid input. Please enter a number between 1 and 5. (Output to System.err)
 * 
 * Logistics Hub Simulator Menu:
 * ...
 * Enter choice: 5
 * Exiting simulator.
 * ```
 * 
 * Your solution should provide the complete Java code for the `Package` and `RoutingSimulator` classes within a single file (or logically structured for compilation).
 * 
 * **Assessment Criteria:**
 * 
 * *   Correct implementation of all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Proper object-oriented design (classes, encapsulation).
 * *   Effective use of data structures for the problem.
 * *   Robust error handling and input validation.
 * *   Clean code structure, meaningful names, and documentation.
 * *   Adherence to all problem requirements.
 * 
 * ```java
 * // Your solution code goes here
 * ```
 *
 * EXPLANATION:
 * This solution implements a `RoutingSimulator` class that manages packages using a `Queue` for incoming items and a `List` (specifically an `ArrayList`) for processed items.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **`Package` Class:** Represents the entity being managed. It uses private fields (`packageId`, `destinationZone`, `weightKg`, `isProcessed`) enforcing **encapsulation**. Public getters provide controlled access to the data. The `setProcessed()` method is the only way to change the `isProcessed` state from outside the class, demonstrating controlled modification. Input validation is performed in the constructor using `IllegalArgumentException`.
 * 2.  **`RoutingSimulator` Class:**
 *     *   **`Queue<Package> incomingPackages`:** Declared as a `Queue` interface type and initialized with `LinkedList`. This demonstrates programming to the interface and the typical use of `LinkedList` as a `Queue` implementation. The `offer()` method is used for adding (safe add) and `poll()` for removing (returns null if empty), which are standard `Queue` operations.
 *     *   **`List<Package> processedPackages`:** Declared as a `List` interface type and initialized with `ArrayList`. This shows programming to the interface and using `ArrayList` for dynamic list storage and retrieval. `add()` is used to add processed packages. Iteration is used to list packages.
 *     *   **`Scanner scanner`:** Used in the `runSimulation` method to read user input from `System.in`. `scanner.nextLine()` is used consistently after reading numbers to consume the newline character, preventing potential issues in subsequent `nextLine()` calls.
 *     *   **`switch (choice)`:** The main control flow structure in `runSimulation` to dispatch actions based on the user's menu selection.
 *     *   **`System.out.println()`:** Used for displaying the menu, prompts, successful operation messages, and listing package details.
 *     *   **`System.err.println()`:** Used specifically for printing error messages, making them distinct from normal output. This is used for invalid menu choices, `NumberFormatException` during input parsing, `IllegalArgumentException` from the `Package` constructor, and messages indicating operations on empty collections.
 *     *   **`try-catch` blocks:**
 *         *   A main `try-catch` block surrounds the core logic within the `runSimulation` loop. This provides "class-wide" handling for potential exceptions that might occur during input reading (`NumberFormatException`) or during method calls (`IllegalArgumentException` thrown by `Package` constructor, although `addPackage` catches this internally and prints an error, the outer catch is a safety net for other potential runtime issues). This demonstrates robust error handling.
 *         *   Specific checks (e.g., `if (incomingPackages.isEmpty())`) are used before attempting operations like `poll()` to provide more specific error messages than just letting a `NullPointerException` occur.
 * 3.  **Input Validation and Error Handling:**
 *     *   Input for package creation is validated in the `Package` constructor.
 *     *   `NumberFormatException` is caught when parsing user input for choice, zone, and weight.
 *     *   Checks for empty `incomingPackages` queue before processing (`poll()`).
 *     *   Checks for empty `processedPackages` list before listing.
 *     *   Validation for positive zone numbers when listing.
 * 4.  **Code Structure and Best Practices:**
 *     *   The code is organized into two classes (`Package` and `RoutingSimulator`) with clear responsibilities.
 *     *   Methods are well-named (e.g., `addPackage`, `processNextPackage`, `listProcessedPackagesByZone`).
 *     *   Basic Javadoc comments are provided for classes and methods.
 *     *   The `main` method is clean, simply creating a `RoutingSimulator` instance and calling its `runSimulation` method.
 *     *   The `Scanner` is closed when the simulation loop exits.
 * 
 * This solution effectively combines various core and advanced Java concepts, data structures, and error handling techniques within a practical simulation scenario, fulfilling all the requirements of the exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a package in the logistics hub simulator.
 */
class Package {
    private String packageId;
    private int destinationZone;
    private double weightKg;
    private boolean isProcessed;

    /**
     * Constructs a new Package.
     *
     * @param packageId The unique identifier for the package.
     * @param destinationZone The destination zone number.
     * @param weightKg The weight of the package in kilograms.
     */
    public Package(String packageId, int destinationZone, double weightKg) {
        if (packageId == null || packageId.trim().isEmpty()) {
            throw new IllegalArgumentException("Package ID cannot be null or empty.");
        }
        if (destinationZone <= 0) {
            throw new IllegalArgumentException("Destination zone must be a positive integer.");
        }
        if (weightKg < 0) {
            throw new IllegalArgumentException("Weight cannot be negative.");
        }

        this.packageId = packageId.trim();
        this.destinationZone = destinationZone;
        this.weightKg = weightKg;
        this.isProcessed = false; // Packages are initially not processed
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public int getDestinationZone() {
        return destinationZone;
    }

    public double getWeightKg() {
        return weightKg;
    }

    public boolean isProcessed() {
        return isProcessed;
    }

    /**
     * Marks the package as processed.
     */
    public void setProcessed() {
        this.isProcessed = true;
    }

    @Override
    public String toString() {
        return "[" + packageId + ", Zone " + destinationZone + ", " + weightKg + " kg, Processed: " + isProcessed + "]";
    }
}

/**
 * Simulates the package routing operations in a logistics hub.
 */
public class RoutingSimulator {

    // Queue to hold packages waiting to be processed (FIFO)
    private Queue<Package> incomingPackages;

    // List to hold packages that have been processed
    private List<Package> processedPackages;

    /**
     * Constructs a new RoutingSimulator, initializing the data structures.
     */
    public RoutingSimulator() {
        this.incomingPackages = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.processedPackages = new ArrayList<>();
    }

    /**
     * Adds a new package to the incoming queue.
     *
     * @param packageId The package ID.
     * @param destinationZone The destination zone.
     * @param weightKg The package weight.
     * @return true if the package was added successfully, false otherwise (due to invalid input).
     */
    public boolean addPackage(String packageId, int destinationZone, double weightKg) {
        try {
            Package newPackage = new Package(packageId, destinationZone, weightKg);
            incomingPackages.offer(newPackage); // offer is preferred over add for queues
            System.out.println("Package " + packageId + " added to incoming queue.");
            return true;
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding package: " + e.getMessage());
            return false;
        }
    }

    /**
     * Processes the next package from the incoming queue.
     * Removes the package from the queue, marks it as processed, and adds it to the processed list.
     * Handles the case where the incoming queue is empty.
     */
    public void processNextPackage() {
        System.out.println("Processing next package...");
        Package packageToProcess = incomingPackages.poll(); // poll retrieves and removes the head

        if (packageToProcess == null) {
            System.err.println("Error: No packages in the incoming queue to process.");
        } else {
            packageToProcess.setProcessed();
            processedPackages.add(packageToProcess);
            System.out.println("Package " + packageToProcess.getPackageId() + " processed and moved to processed list.");
        }
    }

    /**
     * Lists all packages in the processed list for a specific destination zone.
     *
     * @param zone The destination zone to filter by.
     */
    public void listProcessedPackagesByZone(int zone) {
        if (processedPackages.isEmpty()) {
            System.out.println("No packages have been processed yet.");
            return;
        }

        System.out.println("Processed Packages for Zone " + zone + ":");
        boolean found = false;
        for (Package pkg : processedPackages) {
            if (pkg.getDestinationZone() == zone) {
                System.out.println(pkg);
                found = true;
            }
        }

        if (!found) {
            System.out.println("No processed packages found for Zone " + zone + ".");
        }
    }

    /**
     * Lists all packages currently waiting in the incoming queue.
     */
    public void listAllIncomingPackages() {
        if (incomingPackages.isEmpty()) {
            System.out.println("No packages currently in the incoming queue.");
            return;
        }

        System.out.println("Packages in Incoming Queue:");
        // Iterating through the queue without removing elements
        for (Package pkg : incomingPackages) {
            System.out.println(pkg);
        }
    }

    /**
     * Runs the main simulation loop, handling user interaction.
     */
    public void runSimulation() {
        Scanner scanner = new Scanner(System.in);
        int choice = -1;

        while (choice != 5) {
            printMenu();

            try {
                System.out.print("Enter choice: ");
                choice = Integer.parseInt(scanner.nextLine()); // Read line to avoid newline issues

                switch (choice) {
                    case 1: // Add Incoming Package
                        System.out.print("Enter Package ID: ");
                        String id = scanner.nextLine();
                        System.out.print("Enter Destination Zone (integer): ");
                        int zone = Integer.parseInt(scanner.nextLine());
                        System.out.print("Enter Weight (kg, double): ");
                        double weight = Double.parseDouble(scanner.nextLine());
                        addPackage(id, zone, weight);
                        break;

                    case 2: // Process Next Package
                        processNextPackage();
                        break;

                    case 3: // List Processed Packages by Zone
                        System.out.print("Enter Zone to list processed packages for: ");
                        int listZone = Integer.parseInt(scanner.nextLine());
                         if (listZone <= 0) {
                             System.err.println("Error: Zone number must be positive.");
                         } else {
                            listProcessedPackagesByZone(listZone);
                         }
                        break;

                    case 4: // List All Incoming Packages
                        listAllIncomingPackages();
                        break;

                    case 5: // Exit
                        System.out.println("Exiting simulator.");
                        break;

                    default:
                        System.err.println("Invalid input. Please enter a number between 1 and 5.");
                }
            } catch (NumberFormatException e) {
                System.err.println("Error: Invalid input format. Please enter the correct data type (e.g., number).");
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
            System.out.println(); // Add a newline for better readability between operations
        }

        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("Logistics Hub Simulator Menu:");
        System.out.println("1. Add Incoming Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. List Processed Packages by Zone");
        System.out.println("4. List All Incoming Packages");
        System.out.println("5. Exit");
    }

    /**
     * Main method to start the simulator.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RoutingSimulator simulator = new RoutingSimulator();
        simulator.runSimulation();
    }
}
