/*
 * Exam Question #46
 * Generated on: 2025-05-11 22:04:32
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Print Job Management System**
 * 
 * **Scenario:**
 * You are tasked with building a simple command-line application to manage print jobs for a small office. The system should allow users to add new print jobs to a queue, process the next job in the queue, view the current queue, and view a list of completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store print jobs waiting to be processed. The queue should hold `PrintJob` objects.
 *     *   Use an `ArrayList` to store print jobs that have been completed. The completed jobs list should be declared using the `List` interface type.
 * 
 * 2.  **PrintJob Class:**
 *     *   Create a class named `PrintJob` with private fields for `documentName` (String) and `pages` (int).
 *     *   Include a constructor that takes the document name and number of pages.
 *     *   Implement input validation within the `PrintJob` constructor: `documentName` cannot be null or empty, and `pages` must be a positive integer (> 0). Throw an `IllegalArgumentException` with a descriptive message if validation fails.
 *     *   Provide public getter methods for both fields.
 *     *   Override the `toString()` method to provide a user-friendly string representation of a print job (e.g., "'MyDocument.pdf' (15 pages)").
 * 
 * 3.  **PrintManager Class:**
 *     *   Create a class named `PrintManager` that encapsulates the `printQueue` (Queue) and `completedJobs` (List).
 *     *   Provide public methods:
 *         *   `addJob(String documentName, int pages)`: Creates a new `PrintJob` object and adds it to the `printQueue`. Handle potential `IllegalArgumentException` from the `PrintJob` constructor and report the error using `System.err`.
 *         *   `processNextJob()`: Removes the next job from the `printQueue` and adds it to the `completedJobs` list. If the queue is empty, report an error using `System.err`. Otherwise, report the processed job using `System.out`.
 *         *   `viewQueue()`: Displays the current jobs in the `printQueue` without removing them. If the queue is empty, indicate that. Use `System.out`.
 *         *   `viewCompletedJobs()`: Displays the jobs in the `completedJobs` list. If the list is empty, indicate that. Use `System.out`.
 * 
 * 4.  **Main Application Logic:**
 *     *   Include a `main` method (preferably within the `PrintManager` class or a separate application class) that serves as the entry point.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a command loop that presents a menu to the user with options:
 *         1.  Add Job
 *         2.  Process Next Job
 *         3.  View Queue
 *         4.  View Completed Jobs
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's choice.
 *     *   Prompt the user for necessary details (like document name and pages) when adding a job. Validate user input for pages (must be an integer). Report invalid input using `System.err`.
 *     *   All normal application output (menu, successful operations, list contents) should go to `System.out`.
 *     *   All error messages (invalid input, validation errors, empty queue) should go to `System.err`.
 * 
 * 5.  **Exception Handling:**
 *     *   Implement class-wide exception handling using a `try-catch` block around the main command loop in the `main` method to catch any unexpected runtime errors and report them using `System.err`.
 *     *   Handle specific exceptions where appropriate (e.g., `IllegalArgumentException` from `PrintJob`, `NumberFormatException` when parsing input).
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure the `Scanner` resource is closed properly.
 * 
 * **Expected Output:**
 * The application should interact with the user via the console, displaying a menu, prompting for input, and showing results or errors based on the user's commands. Error messages *must* be printed to `System.err`, clearly distinguishable from normal output printed to `System.out`.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * Print Job Manager Menu:
 * 1. Add Job
 * 2. Process Next Job
 * 3. View Queue
 * 4. View Completed Jobs
 * 5. Exit
 * Enter choice: 1
 * Enter document name: Report.pdf
 * Enter number of pages: 10
 * System.out: Added job: 'Report.pdf' (10 pages)
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 3
 * --- Current Print Queue ---
 * 1. 'Report.pdf' (10 pages)
 * ---------------------------
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 2
 * System.out: Processed job: 'Report.pdf' (10 pages)
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 3
 * --- Current Print Queue ---
 * Queue is empty.
 * ---------------------------
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 2
 * System.err: Print queue is empty. No jobs to process.
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: add // Invalid input
 * System.err: Invalid input. Please enter a number (1-5).
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 1
 * Enter document name: DocumentA
 * Enter number of pages: 0 // Invalid pages
 * System.err: Error adding job: Number of pages must be positive.
 * 
 * Print Job Manager Menu:
 * ...
 * Enter choice: 5
 * System.out: Exiting Print Job Manager.
 * System.out: Scanner closed.
 * ```
 * 
 * Implement the complete Java code for this Print Job Management System.
 *
 * EXPLANATION:
 * The provided solution implements a simple Print Job Management System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:** This class is a simple Plain Old Java Object (POJO) representing a print job. It enforces data integrity through its constructor, validating that the document name is not empty and the page count is positive by throwing an `IllegalArgumentException`. It provides standard getter methods and overrides `toString()` for easy display. This adheres to encapsulation principles.
 * 
 * 2.  **`PrintManager` Class:** This class manages the core logic and data structures.
 *     *   It uses a `java.util.Queue<PrintJob>` (`printQueue`), specifically implemented using `java.util.LinkedList`, to store jobs waiting to be printed. The `Queue` interface is ideal for representing a waiting line where elements are processed in the order they are added (FIFO - First-In, First-Out).
 *     *   It uses a `java.util.List<PrintJob>` (`completedJobs`), implemented using `java.util.ArrayList`, to archive jobs after they are processed. The `List` interface provides ordered storage and easy iteration over completed items.
 *     *   Methods like `addJob`, `processNextJob`, `viewQueue`, and `viewCompletedJobs` encapsulate the operations on these data structures. `addJob` handles the potential `IllegalArgumentException` from the `PrintJob` constructor. `processNextJob` uses `queue.poll()` which safely returns `null` if the queue is empty, avoiding exceptions like `NoSuchElementException` that `queue.remove()` would throw.
 * 
 * 3.  **Main Application Logic (`main` method):**
 *     *   The `main` method drives the application using a loop that continues until the user chooses to exit.
 *     *   `java.util.Scanner` is used to read user input line by line (`scanner.nextLine()`) to prevent common issues with mixed `nextInt()` and `nextLine()` calls. Input validation for the menu choice and the number of pages is performed by attempting to parse the string input into an integer and catching `NumberFormatException`.
 *     *   A `switch` statement is used to direct the program flow based on the user's validated integer choice, calling the appropriate methods in the `PrintManager` instance.
 *     *   All user-facing information, menus, and successful operation messages are printed to `System.out`.
 *     *   All error conditions, including invalid input formats, validation errors from `PrintJob`, and attempting to process an empty queue, are reported to `System.err`. This clearly separates normal application flow from error reporting.
 * 
 * 4.  **Exception Handling:**
 *     *   A broad `try-catch(Exception e)` block wraps the main `while` loop in the `main` method. This serves as the "class-wide" exception handling, catching any unexpected runtime exceptions that might occur during the execution of the command loop and preventing the program from crashing abruptly. It reports such errors to `System.err`.
 *     *   More specific `try-catch` blocks are used to handle expected error types:
 *         *   `NumberFormatException` is caught when parsing user input for the menu choice and the number of pages.
 *         *   `IllegalArgumentException` thrown by the `PrintJob` constructor is caught within the `addJob` method.
 *     *   The `processNextJob` method handles the empty queue case using `poll()` and a `null` check, avoiding an exception.
 * 
 * 5.  **Resource Management:** The `Scanner` object is initialized within the `try` block and closed in a `finally` block. This ensures that the system resource associated with the scanner is released properly, even if an unexpected exception occurs within the `try` block.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating proper object-oriented design, input validation, and robust error handling.
 */

package com.exam.printmanager;

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single print job with a document name and number of pages.
 */
class PrintJob {
    private String documentName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     *
     * @param documentName The name of the document. Must not be null or empty.
     * @param pages The number of pages. Must be positive.
     * @throws IllegalArgumentException if documentName is invalid or pages is not positive.
     */
    public PrintJob(String documentName, int pages) {
        if (documentName == null || documentName.trim().isEmpty()) {
            throw new IllegalArgumentException("Document name cannot be empty.");
        }
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        this.documentName = documentName.trim();
        this.pages = pages;
    }

    /**
     * Gets the document name.
     * @return The document name.
     */
    public String getDocumentName() {
        return documentName;
    }

    /**
     * Gets the number of pages.
     * @return The number of pages.
     */
    public int getPages() {
        return pages;
    }

    /**
     * Returns a string representation of the print job.
     * @return A formatted string describing the job.
     */
    @Override
    public String toString() {
        return "'" + documentName + "' (" + pages + " pages)";
    }
}

/**
 * Manages a queue of print jobs and an archive of completed jobs.
 */
public class PrintManager {

    private Queue<PrintJob> printQueue;
    private List<PrintJob> completedJobs;

    /**
     * Constructs a new PrintManager with empty queue and completed lists.
     */
    public PrintManager() {
        printQueue = new LinkedList<>(); // LinkedList implements Queue
        completedJobs = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new print job to the queue.
     * Handles validation errors from PrintJob constructor.
     *
     * @param documentName The name of the document.
     * @param pages The number of pages.
     */
    public void addJob(String documentName, int pages) {
        try {
            PrintJob newJob = new PrintJob(documentName, pages);
            if (printQueue.offer(newJob)) { // offer is a safe way to add to queue
                System.out.println("System.out: Added job: " + newJob);
            } else {
                 // This case is unlikely with LinkedList but good practice with Queue interface
                 System.err.println("System.err: Failed to add job to the queue.");
            }
        } catch (IllegalArgumentException e) {
            // Catch validation errors from PrintJob constructor
            System.err.println("System.err: Error adding job: " + e.getMessage());
        } catch (Exception e) {
             // Catch any other unexpected errors during job creation/adding
             System.err.println("System.err: An unexpected error occurred while adding job: " + e.getMessage());
        }
    }

    /**
     * Processes the next job in the queue by removing it and adding it to the completed list.
     * Reports an error if the queue is empty.
     */
    public void processNextJob() {
        PrintJob jobToProcess = printQueue.poll(); // poll retrieves and removes, returns null if empty
        if (jobToProcess != null) {
            completedJobs.add(jobToProcess);
            System.out.println("System.out: Processed job: " + jobToProcess);
        } else {
            System.err.println("System.err: Print queue is empty. No jobs to process.");
        }
    }

    /**
     * Displays the current jobs in the print queue without removing them.
     */
    public void viewQueue() {
        System.out.println("--- Current Print Queue ---");
        if (printQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            int i = 1;
            // Iterating over a Queue doesn't remove elements
            for (PrintJob job : printQueue) {
                System.out.println(i++ + ". " + job);
            }
        }
        System.out.println("---------------------------");
    }

    /**
     * Displays the completed print jobs archive.
     */
    public void viewCompletedJobs() {
        System.out.println("--- Completed Jobs Archive ---");
        if (completedJobs.isEmpty()) {
            System.out.println("Archive is empty.");
        } else {
            int i = 1;
            for (PrintJob job : completedJobs) {
                System.out.println(i++ + ". " + job);
            }
        }
        System.out.println("------------------------------");
    }

    /**
     * Main method to run the Print Job Management application.
     * Handles user interaction and command processing.
     * Includes class-wide exception handling for the main loop.
     */
    public static void main(String[] args) {
        Scanner scanner = null; // Declare scanner outside try for finally block
        PrintManager manager = new PrintManager();
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            scanner = new Scanner(System.in); // Initialize scanner inside try

            while (running) {
                System.out.println("\nPrint Job Manager Menu:");
                System.out.println("1. Add Job");
                System.out.println("2. Process Next Job");
                System.out.println("3. View Queue");
                System.out.println("4. View Completed Jobs");
                System.out.println("5. Exit");
                System.out.print("Enter choice: ");

                String choiceStr = scanner.nextLine(); // Read the whole line

                int choice;
                try {
                    choice = Integer.parseInt(choiceStr); // Attempt to parse choice
                } catch (NumberFormatException e) {
                    // Handle non-integer input for choice
                    System.err.println("System.err: Invalid input. Please enter a number (1-5).");
                    continue; // Skip to the next iteration of the while loop
                }

                // Use switch statement for flow control based on valid integer choice
                switch (choice) {
                    case 1: // Add Job
                        System.out.print("Enter document name: ");
                        String name = scanner.nextLine(); // Read document name

                        System.out.print("Enter number of pages: ");
                        String pagesStr = scanner.nextLine(); // Read pages as a string first
                        int pages = -1; // Default invalid value

                        try {
                            pages = Integer.parseInt(pagesStr); // Attempt to parse pages
                            manager.addJob(name, pages); // Call addJob, which handles PrintJob validation
                        } catch (NumberFormatException e) {
                             // Handle non-integer input for pages
                             System.err.println("System.err: Invalid input for pages. Please enter a whole number.");
                        }
                        // addJob method handles validation (pages > 0 and name not empty) internally
                        break;

                    case 2: // Process Next Job
                        manager.processNextJob();
                        break;

                    case 3: // View Queue
                        manager.viewQueue();
                        break;

                    case 4: // View Completed Jobs
                        manager.viewCompletedJobs();
                        break;

                    case 5: // Exit
                        System.out.println("System.out: Exiting Print Job Manager.");
                        running = false; // Set flag to exit loop
                        break;

                    default: // Invalid choice (integer outside 1-5)
                        System.err.println("System.err: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // This catch block handles any unexpected exceptions that bubble up
            // from the main processing loop (e.g., NullPointerException if not careful,
            // although the current code tries to prevent this).
            System.err.println("System.err: An unexpected system error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for detailed debugging stack trace
        } finally {
            // Ensure the scanner resource is closed regardless of how the try block exits
            if (scanner != null) {
                 scanner.close();
                 System.out.println("System.out: Scanner closed.");
            }
        }
    }
}
