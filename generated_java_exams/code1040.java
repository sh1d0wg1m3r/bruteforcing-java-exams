/*
 * Exam Question #1040
 * Generated on: 2025-05-12 17:16:29
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Airport Baggage Handling System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified system for managing baggage at an airport check-in counter. Bags arrive and are placed in a queue to be processed. The processing involves checking the bag's weight against a maximum allowed weight. Bags within the limit are marked as processed, while overweight bags are rejected. The system should allow adding bags, processing the next bag in the queue, and viewing the status of bags in the queue, processed list, and rejected list.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following:
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to represent the queue of bags waiting to be processed.
 *     *   Use `java.util.ArrayList` to store the bags that have been successfully processed.
 *     *   Use `java.util.List` as the interface type when declaring variables that hold collections of processed and rejected bags (e.g., `List<Bag> processedBags = new ArrayList<>();`).
 *     *   Use another `java.util.ArrayList` (declared as `List`) to store bags that were rejected due to being overweight.
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Add Bag, Process Next Bag, View Waiting Queue, View Processed Bags, View Rejected Bags, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 3.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, and successful operation results (e.g., "Bag added to queue", "Bag processed successfully", list contents).
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue is empty, system errors).
 * 
 * 4.  **Error Handling:**
 *     *   Implement robust input validation (e.g., ensure weight is a positive number, handle non-numeric input).
 *     *   Use `try-catch` blocks for exception handling. A main `try-catch` block should wrap the core application loop to catch unexpected errors. Specific `try-catch` blocks should be used where appropriate, such as around `Scanner` operations that might throw `InputMismatchException`.
 *     *   Handle cases like trying to process a bag when the queue is empty.
 * 
 * 5.  **Object-Oriented Design:**
 *     *   Create a `Bag` class with appropriate private fields (e.g., `id`, `weight`) and public methods (getters, maybe a `toString`).
 *     *   Create a `BaggageHandler` class that encapsulates the bag collections (queue, processed list, rejected list) and the logic for adding, processing, and viewing bags. This class should have private fields for the collections and public methods for operations.
 *     *   The main application logic should reside in a separate class (e.g., `AirportBaggageSystem`) containing the `main` method, which interacts with the `BaggageHandler` and handles user input/output.
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Maintain clean code structure and formatting.
 *     *   Define a constant for the maximum allowed bag weight.
 * 
 * **Functionality Details:**
 * 
 * *   **Add Bag:** Prompt the user for a bag ID (string) and weight (double). Validate the weight (must be > 0). Create a `Bag` object and add it to the waiting queue.
 * *   **Process Next Bag:** Dequeue the bag at the front of the waiting queue. If the queue is empty, print an error. If a bag is retrieved, check its weight against the maximum allowed weight (e.g., 23.0 kg). If weight <= max, add it to the processed bags list. If weight > max, add it to the rejected bags list. Print the outcome (processed or rejected) for the bag.
 * *   **View Waiting Queue:** Print the contents of the waiting queue.
 * *   **View Processed Bags:** Print the contents of the processed bags list.
 * *   **View Rejected Bags:** Print the contents of the rejected bags list.
 * *   **Exit:** Terminate the program.
 * 
 * **Expected Output:**
 * 
 * The output should be interactive, displaying the menu, prompts for input, and informative messages about the system's state and operations. Error messages should be clearly distinguishable using `System.err`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Baggage Handling Menu ---
 * 1. Add Bag
 * 2. Process Next Bag
 * 3. View Waiting Queue
 * 4. View Processed Bags
 * 5. View Rejected Bags
 * 0. Exit
 * Enter your choice: 1
 * Enter Bag ID: BAG001
 * Enter Bag Weight (kg): 15.5
 * Bag BAG001 (15.5 kg) added to the waiting queue.
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 1
 * Enter Bag ID: BAG002
 * Enter Bag Weight (kg): 25.0
 * Bag BAG002 (25.0 kg) added to the waiting queue.
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 2
 * Processing bag from queue...
 * Bag BAG001 (15.5 kg) processed successfully.
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 2
 * Processing bag from queue...
 * Bag BAG002 (25.0 kg) rejected (overweight: 25.0 kg > 23.0 kg).
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 3
 * Waiting Queue:
 * [BAG003 (10.0 kg)] (Assuming BAG003 was added)
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 4
 * Processed Bags:
 * [BAG001 (15.5 kg)]
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 5
 * Rejected Bags:
 * [BAG002 (25.0 kg)]
 * 
 * --- Baggage Handling Menu ---
 * ...
 * Enter your choice: 0
 * Exiting Baggage Handling System.
 * ```
 * 
 * Consider potential errors like entering text when a number is expected, or trying to process when the queue is empty.
 * 
 * **Submission:**
 * 
 * Provide the complete Java source code for all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a basic Airport Baggage Handling System demonstrating the required Java concepts.
 * 
 * 1.  **`Bag` Class:** A simple Plain Old Java Object (POJO) representing a bag with a `private` `id` (String) and `weight` (double). It includes a constructor, public getters, and an overridden `toString()` method for easy printing. This adheres to encapsulation principles.
 * 
 * 2.  **`BaggageHandler` Class:** This class encapsulates the core logic and data structures.
 *     *   It uses a `private static final double MAX_WEIGHT_KG` for the weight limit, promoting maintainability.
 *     *   `private Queue<Bag> waitingQueue = new LinkedList<>();`: A `Queue` (implemented by `LinkedList`) is used to store bags in a First-In, First-Out (FIFO) manner, simulating a processing queue.
 *     *   `private List<Bag> processedBags = new ArrayList<>();`: An `ArrayList` is used to store bags that pass the weight check. It is declared using the `List` interface type, demonstrating polymorphism and good practice.
 *     *   `private List<Bag> rejectedBags = new ArrayList<>();`: Another `ArrayList` (declared as `List`) stores bags that exceed the weight limit.
 *     *   `addBagToQueue(Bag bag)`: Adds a bag to the `waitingQueue` using `offer()`.
 *     *   `processNextBag()`: This method demonstrates queue processing. It uses `poll()` to retrieve and remove the next bag. It checks if the queue is empty before processing. Based on the bag's weight compared to `MAX_WEIGHT_KG`, it adds the bag to either `processedBags` or `rejectedBags`. Output messages are printed using `System.out` for success and `System.err` for the rejection case.
 *     *   `viewWaitingQueue()`, `viewProcessedBags()`, `viewRejectedBags()`: These methods iterate through the respective collections and print their contents, using `System.out`. They also check if the lists are empty.
 * 
 * 3.  **`AirportBaggageSystem` Class:** This is the main class containing the `main` method.
 *     *   It initializes a `Scanner` for user input and a `BaggageHandler` instance.
 *     *   The core logic runs in a `while(running)` loop.
 *     *   `printMenu()`: Displays the options to the user using `System.out`.
 *     *   **Input Handling and `switch`:** A `try-catch` block is used specifically around `scanner.nextInt()` to gracefully handle `InputMismatchException` if the user enters non-numeric input for the menu choice. The invalid input is consumed (`scanner.nextLine()`) to prevent an infinite loop. A `switch` statement then directs the program flow based on the valid integer choice. Invalid choices fall into the `default` case, printing an error via `System.err`.
 *     *   **`addBagOption()`:** This separate helper method handles the "Add Bag" logic. It prompts for ID and weight, performing validation. A `while` loop and nested `try-catch` are used to ensure a valid positive double is entered for weight, handling `InputMismatchException` specifically for the weight input. `System.err` is used for validation error messages.
 *     *   **Class-wide Exception Handling:** The main `while` loop is wrapped in a large `try-catch(Exception e)` block. This demonstrates a general catch for any unexpected runtime exceptions that might occur within the main program flow, printing the error details to `System.err` and shutting down gracefully.
 *     *   **Resource Management:** A `finally` block is used to ensure the `Scanner` resource is closed when the program exits, regardless of whether an exception occurred or the user chose to exit normally.
 * 
 * **Demonstration of Required Components:**
 * 
 * *   `Queue`: Used in `BaggageHandler` for `waitingQueue` (`LinkedList` implementation).
 * *   `ArrayList`: Used in `BaggageHandler` for `processedBags` and `rejectedBags`.
 * *   `List`: Used as the interface type for declaring `processedBags` and `rejectedBags`.
 * *   `Scanner`: Used in `AirportBaggageSystem` (`main` and `addBagOption`) for reading user input.
 * *   `switch`: Used in `AirportBaggageSystem.main` for handling menu options.
 * *   `System.err`: Used for printing error messages (input validation, queue empty, processing rejection, unexpected errors).
 * *   `System.out`: Used for printing menu, prompts, successful actions, and list contents.
 * *   `try-catch`: Used in `AirportBaggageSystem.main` for catching `InputMismatchException` and general `Exception`, and in `addBagOption` for weight input validation.
 * 
 * This solution effectively combines various fundamental and intermediate Java concepts to solve a practical problem, demonstrating proper structure, error handling, and data structure usage.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single piece of baggage.
 */
class Bag {
    private String id;
    private double weight; // weight in kilograms

    /**
     * Constructs a new Bag object.
     * @param id The unique identifier for the bag.
     * @param weight The weight of the bag in kilograms.
     */
    public Bag(String id, double weight) {
        this.id = id;
        this.weight = weight;
    }

    // --- Getters ---
    public String getId() {
        return id;
    }

    public double getWeight() {
        return weight;
    }

    /**
     * Provides a string representation of the Bag.
     * @return A string in the format "ID (weight kg)".
     */
    @Override
    public String toString() {
        return id + " (" + String.format("%.1f", weight) + " kg)";
    }
}

/**
 * Manages the flow and status of bags through the system.
 */
class BaggageHandler {
    // Maximum allowed weight for a bag in kilograms
    private static final double MAX_WEIGHT_KG = 23.0;

    // Queue for bags waiting to be processed (FIFO)
    private Queue<Bag> waitingQueue;

    // List for bags successfully processed
    private List<Bag> processedBags; // Declared as List, implemented as ArrayList

    // List for bags rejected (e.g., overweight)
    private List<Bag> rejectedBags; // Declared as List, implemented as ArrayList

    /**
     * Constructs a new BaggageHandler.
     * Initializes the collections.
     */
    public BaggageHandler() {
        // LinkedList is a common implementation for Queue
        this.waitingQueue = new LinkedList<>();
        this.processedBags = new ArrayList<>();
        this.rejectedBags = new ArrayList<>();
    }

    /**
     * Adds a bag to the waiting queue.
     * @param bag The Bag object to add.
     */
    public void addBagToQueue(Bag bag) {
        if (bag != null) {
            waitingQueue.offer(bag); // offer is preferred over add for capacity-constrained queues, though LinkedList is not
            System.out.println("Bag " + bag.toString() + " added to the waiting queue.");
        }
    }

    /**
     * Processes the next bag in the waiting queue.
     * Checks weight and moves the bag to the appropriate list (processed or rejected).
     */
    public void processNextBag() {
        System.out.println("Processing bag from queue...");
        Bag bagToProcess = waitingQueue.poll(); // Retrieves and removes the head of the queue

        if (bagToProcess == null) {
            System.err.println("Error: The waiting queue is empty. No bag to process.");
            return;
        }

        System.out.print("Checking bag " + bagToProcess.getId() + " (weight: " + String.format("%.1f", bagToProcess.getWeight()) + " kg)... ");

        if (bagToProcess.getWeight() <= MAX_WEIGHT_KG) {
            processedBags.add(bagToProcess);
            System.out.println("processed successfully.");
        } else {
            rejectedBags.add(bagToProcess);
            System.err.println("rejected (overweight: " + String.format("%.1f", bagToProcess.getWeight()) + " kg > " + MAX_WEIGHT_KG + " kg).");
        }
    }

    /**
     * Displays the bags currently in the waiting queue.
     */
    public void viewWaitingQueue() {
        System.out.println("\n--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate without removing elements
            waitingQueue.forEach(System.out::println);
        }
        System.out.println("---------------------\n");
    }

    /**
     * Displays the bags that have been successfully processed.
     */
    public void viewProcessedBags() {
        System.out.println("\n--- Processed Bags ---");
        if (processedBags.isEmpty()) {
            System.out.println("No bags have been processed yet.");
        } else {
            processedBags.forEach(System.out::println);
        }
        System.out.println("----------------------\n");
    }

    /**
     * Displays the bags that were rejected.
     */
    public void viewRejectedBags() {
        System.out.println("\n--- Rejected Bags ---");
        if (rejectedBags.isEmpty()) {
            System.out.println("No bags have been rejected yet.");
        } else {
            rejectedBags.forEach(System.out::println);
        }
        System.out.println("---------------------\n");
    }
}

/**
 * Main class to run the Airport Baggage Handling System.
 * Handles user interaction and menu.
 */
public class AirportBaggageSystem {

    private static Scanner scanner = new Scanner(System.in);
    private static BaggageHandler handler = new BaggageHandler();

    public static void main(String[] args) {
        System.out.println("Welcome to the Airport Baggage Handling System!");
        boolean running = true;

        // Main application loop wrapped in a try-catch for general exceptions
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Try-catch specifically for reading integer input
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } catch (Exception e) {
                    // Catch any other potential issues during input reading
                    System.err.println("An error occurred while reading input: " + e.getMessage());
                    scanner.nextLine(); // Attempt to consume input
                    continue; // Skip the rest of the loop iteration
                }

                // Switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addBagOption();
                        break;
                    case 2:
                        handler.processNextBag();
                        break;
                    case 3:
                        handler.viewWaitingQueue();
                        break;
                    case 4:
                        handler.viewProcessedBags();
                        break;
                    case 5:
                        handler.viewRejectedBags();
                        break;
                    case 0:
                        running = false;
                        System.out.println("Exiting Baggage Handling System.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 0 and 5.");
                }
            }
        } catch (Exception e) {
            // General catch block for any unexpected errors in the main loop
            System.err.println("\nAn unexpected system error occurred:");
            e.printStackTrace(System.err); // Print stack trace to standard error
            System.err.println("System is shutting down.");
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Baggage Handling Menu ---");
        System.out.println("1. Add Bag");
        System.out.println("2. Process Next Bag");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Processed Bags");
        System.out.println("5. View Rejected Bags");
        System.out.println("0. Exit");
        System.out.println("-----------------------------\n");
    }

    /**
     * Handles the logic for adding a new bag based on user input.
     * Includes input validation.
     */
    private static void addBagOption() {
        String bagId = "";
        double bagWeight = -1.0;
        boolean validInput = false;

        // Get Bag ID
        System.out.print("Enter Bag ID: ");
        bagId = scanner.nextLine().trim();
        if (bagId.isEmpty()) {
            System.err.println("Bag ID cannot be empty.");
            return; // Exit add bag process if ID is empty
        }

        // Get and Validate Bag Weight
        while (!validInput) {
            System.out.print("Enter Bag Weight (kg): ");
            try {
                bagWeight = scanner.nextDouble();
                scanner.nextLine(); // Consume the newline

                if (bagWeight <= 0) {
                    System.err.println("Weight must be a positive number.");
                } else {
                    validInput = true; // Input is valid
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a numeric value for weight.");
                scanner.nextLine(); // Consume the invalid input
            } catch (Exception e) {
                 System.err.println("An error occurred while reading weight: " + e.getMessage());
                 scanner.nextLine(); // Attempt to consume input
                 return; // Exit add bag process on unexpected error
            }
        }

        // Create and add the bag if input was valid
        if (validInput) {
            Bag newBag = new Bag(bagId, bagWeight);
            handler.addBagToQueue(newBag);
        }
    }
}
