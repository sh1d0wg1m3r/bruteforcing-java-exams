/*
 * Exam Question #163
 * Generated on: 2025-05-11 22:24:08
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Help Desk Ticket Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified IT Help Desk system. The system needs to manage incoming support tickets and assign them to available agents.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this help desk system. The program should provide a command-line interface for interacting with the system.
 * 
 * 1.  **Core Components:**
 *     *   Use `java.util.Queue` to store incoming support tickets that are waiting to be assigned.
 *     *   Use `java.util.ArrayList` to store the list of help desk agents.
 *     *   Use the `java.util.List` interface when declaring variables that hold the list of agents.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Use a `switch` statement to control the flow based on the user's menu selection.
 *     *   Use `System.err` to print error messages (e.g., invalid input, no tickets in queue, no agents available).
 *     *   Use `System.out` to print normal output (e.g., menu, confirmations, list details).
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around the main user input loop, to handle unexpected input types.
 * 
 * 2.  **Functionality:**
 *     *   **Add New Ticket:** Prompt the user for a ticket description and add a new ticket to the incoming queue. Assign a unique ID to each ticket.
 *     *   **Add New Agent:** Prompt the user for the agent's name and add a new agent to the system. Assign a unique ID to each agent. Agents are initially available.
 *     *   **Assign Next Ticket:** Take the next ticket from the incoming queue and assign it to the *first available* agent found in the list of agents. If the queue is empty or no agents are available, print an appropriate error message. Mark the assigned agent as busy.
 *     *   **View Incoming Queue:** Display all tickets currently waiting in the queue.
 *     *   **View All Tickets:** Display all tickets that have been created, including those in the queue and those that have been assigned. Show their status (New, Assigned) and the assigned agent if applicable.
 *     *   **View Agents:** Display all agents, their availability status, and their assigned ticket (if any - simplify by just showing status, not the specific ticket they are working on for this exam).
 *     *   **Exit:** Terminate the program.
 * 
 * 3.  **Object-Oriented Design:**
 *     *   Create separate classes for `HelpDeskTicket` and `HelpDeskAgent` with appropriate private fields (e.g., ID, description, status, name, availability).
 *     *   Provide public getter methods for accessing relevant information.
 *     *   Include a `toString()` method in each class for easy printing of object details.
 *     *   The main class managing the system should have private fields for the queue and the list of agents, and public methods for performing the actions listed in the functionality section.
 * 
 * 4.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments to explain complex parts of the code.
 *     *   Include basic input validation (e.g., checking if input for menu choice is an integer).
 *     *   Ensure proper encapsulation.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's input, it should perform the requested action and print the results or error messages to the console (`System.out` or `System.err`). Example interactions might look like:
 * 
 * ```
 * --- Help Desk Menu ---
 * 1. Add New Ticket
 * 2. Add New Agent
 * 3. Assign Next Ticket
 * 4. View Incoming Queue
 * 5. View All Tickets
 * 6. View Agents
 * 7. Exit
 * Enter your choice: 1
 * Enter ticket description: My printer is not working.
 * Ticket #1 added to the queue.
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 2
 * Enter agent name: Alice
 * Agent #1 (Alice) added.
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 3
 * Assigned Ticket #1 to Agent #1 (Alice).
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 4
 * --- Incoming Queue ---
 * (Queue is empty)
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 5
 * --- All Tickets ---
 * Ticket #1 [ASSIGNED] - My printer is not working. (Assigned to Agent #1)
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 6
 * --- Agents ---
 * Agent #1 (Alice) - Status: Busy
 * Agent #2 (Bob) - Status: Available
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 99
 * Error: Invalid input. Please enter a number between 1 and 7.
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 3
 * Error: No tickets in queue to assign.
 * 
 * --- Help Desk Menu ---
 * ...
 * Enter your choice: 7
 * Exiting Help Desk System.
 * ```
 * 
 * **Grading:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct implementation of all required functionality.
 * *   Proper usage of all specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to object-oriented design principles and best practices (encapsulation, naming, comments).
 * *   Correct input validation and error handling.
 * *   Code readability and structure.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * The provided solution implements a simplified Help Desk Ticket Management System in Java, fulfilling all the requirements of the exam task.
 * 
 * **Key Concepts Demonstrated:**
 * 
 * 1.  **`java.util.Queue`:** The `incomingTickets` field is declared as a `Queue<HelpDeskTicket>` and initialized with a `LinkedList` implementation. Tickets are added to the queue using `offer()` when a new ticket is created (`addNewTicket`), and removed from the front using `poll()` when a ticket is assigned (`assignNextTicket`). This correctly simulates a waiting line where tickets are processed in the order they arrive (FIFO - First-In, First-Out).
 * 2.  **`java.util.ArrayList` and `java.util.List`:** The `agents` field is declared using the `List<HelpDeskAgent>` interface and initialized with an `ArrayList` implementation. This demonstrates programming to the interface. Agents are added to this list using `add()` (`addNewAgent`), and the list is iterated over to find available agents (`assignNextTicket`) or display all agents (`viewAgents`). The `allTickets` list also uses `ArrayList` and `List` to keep track of every ticket ever created, allowing for the "View All Tickets" functionality separate from the queue.
 * 3.  **`java.util.Scanner`:** A `Scanner` object is used to read user input from `System.in` for menu choices, ticket descriptions, and agent names.
 * 4.  **`switch` statement:** The `switch` statement in the `run()` method is used to direct the program flow based on the integer choice entered by the user from the menu. Each `case` corresponds to a specific action (add ticket, add agent, assign, view, exit).
 * 5.  **`System.err`:** Error messages, such as invalid menu input, no tickets in the queue, or no agents available, are printed to `System.err`. This is good practice for separating error output from standard output.
 * 6.  **`System.out`:** Normal program output, including the menu, confirmations of actions, and lists of tickets/agents, is printed to `System.out`.
 * 7.  **Class-wide Exception Handling (`try-catch`)**: The main user interaction loop within the `run()` method is wrapped in a `try-catch` block. Specifically, it catches `InputMismatchException` which occurs if the user enters non-integer input when an integer is expected by `scanner.nextInt()`. This prevents the program from crashing due to malformed input and allows it to print an error message and continue. A general `Exception` catch is also included as a fallback for any other unexpected runtime errors.
 * 8.  **Object-Oriented Design & Encapsulation:**
 *     *   The system is broken down into three classes: `HelpDeskSystem`, `HelpDeskTicket`, and `HelpDeskAgent`.
 *     *   Each class has private fields (`id`, `description`, `status`, `name`, `isAvailable`, `assignedAgent`).
 *     *   Public getter methods are provided to access the necessary information from outside the class.
 *     *   `toString()` methods are implemented for convenient printing of object details.
 *     *   The `HelpDeskSystem` class encapsulates the data structures (`Queue`, `List`s) and the core logic for managing tickets and agents.
 * 9.  **Meaningful Names:** Variables (`incomingTickets`, `availableAgent`, `ticketToAssign`), methods (`addNewTicket`, `assignNextTicket`, `viewIncomingQueue`), and classes are given descriptive names that clearly indicate their purpose.
 * 10. **Comments and Documentation:** Javadoc-style comments explain the purpose of methods, and inline comments are used where necessary to clarify specific logic steps.
 * 11. **Input Validation:** Basic validation is performed for menu input (using `try-catch` for type) and for ticket/agent names (checking for empty strings). Checks are also performed before attempting to assign a ticket (checking if queue is empty or if agents are available).
 * 12. **Clean Code Structure:** The code is organized into separate classes and methods, each with a single responsibility, making the code easier to read, understand, and maintain. The main `run()` method orchestrates the interaction flow but delegates specific tasks to other methods.
 * 
 * This solution effectively demonstrates the required Java concepts in a cohesive, practical application, simulating a real-world scenario while adhering to good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a support ticket
class HelpDeskTicket {
    private static int nextId = 1;
    private int id;
    private String description;
    private String status; // e.g., "New", "Assigned"
    private HelpDeskAgent assignedAgent;

    public HelpDeskTicket(String description) {
        this.id = nextId++;
        this.description = description;
        this.status = "New";
        this.assignedAgent = null;
    }

    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public HelpDeskAgent getAssignedAgent() {
        return assignedAgent;
    }

    public void setAssignedAgent(HelpDeskAgent assignedAgent) {
        this.assignedAgent = assignedAgent;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Ticket #").append(id)
          .append(" [").append(status).append("] - ")
          .append(description);
        if (assignedAgent != null) {
            sb.append(" (Assigned to Agent #").append(assignedAgent.getId()).append(")");
        }
        return sb.toString();
    }
}

// Represents a help desk agent
class HelpDeskAgent {
    private static int nextId = 1;
    private int id;
    private String name;
    private boolean isAvailable;

    public HelpDeskAgent(String name) {
        this.id = nextId++;
        this.name = name;
        this.isAvailable = true; // Agents are available when created
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return "Agent #" + id + " (" + name + ") - Status: " + (isAvailable ? "Available" : "Busy");
    }
}

// Manages the help desk system
public class HelpDeskSystem {

    // Queue for tickets waiting to be assigned
    private Queue<HelpDeskTicket> incomingTickets;

    // List of all agents
    private List<HelpDeskAgent> agents;

    // List of all tickets created in the system (for viewing all tickets)
    private List<HelpDeskTicket> allTickets;

    private Scanner scanner;

    public HelpDeskSystem() {
        // Use LinkedList as a Queue implementation
        this.incomingTickets = new LinkedList<>();
        // Use ArrayList as a List implementation for agents
        this.agents = new ArrayList<>();
        // Use ArrayList as a List implementation for all tickets
        this.allTickets = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Help Desk Menu ---");
        System.out.println("1. Add New Ticket");
        System.out.println("2. Add New Agent");
        System.out.println("3. Assign Next Ticket");
        System.out.println("4. View Incoming Queue");
        System.out.println("5. View All Tickets");
        System.out.println("6. View Agents");
        System.out.println("7. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new ticket to the system.
     */
    public void addNewTicket() {
        System.out.print("Enter ticket description: ");
        String description = scanner.nextLine();
        if (description == null || description.trim().isEmpty()) {
             System.err.println("Error: Ticket description cannot be empty.");
             return;
        }
        HelpDeskTicket newTicket = new HelpDeskTicket(description);
        incomingTickets.offer(newTicket); // Add to the queue
        allTickets.add(newTicket); // Add to the list of all tickets
        System.out.println("Ticket #" + newTicket.getId() + " added to the queue.");
    }

    /**
     * Adds a new agent to the system.
     */
    public void addNewAgent() {
        System.out.print("Enter agent name: ");
        String name = scanner.nextLine();
         if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Agent name cannot be empty.");
             return;
        }
        HelpDeskAgent newAgent = new HelpDeskAgent(name);
        agents.add(newAgent); // Add to the list of agents
        System.out.println("Agent #" + newAgent.getId() + " (" + newAgent.getName() + ") added.");
    }

    /**
     * Assigns the next available ticket to the first available agent.
     */
    public void assignNextTicket() {
        // Check if there are tickets in the queue
        if (incomingTickets.isEmpty()) {
            System.err.println("Error: No tickets in queue to assign.");
            return;
        }

        // Find the first available agent
        HelpDeskAgent availableAgent = null;
        for (HelpDeskAgent agent : agents) {
            if (agent.isAvailable()) {
                availableAgent = agent;
                break; // Found an available agent, stop searching
            }
        }

        // Check if an available agent was found
        if (availableAgent == null) {
            System.err.println("Error: No agents available to assign tickets.");
            return;
        }

        // Dequeue the next ticket
        HelpDeskTicket ticketToAssign = incomingTickets.poll();

        // Assign the ticket to the agent
        ticketToAssign.setStatus("Assigned");
        ticketToAssign.setAssignedAgent(availableAgent);
        availableAgent.setAvailable(false); // Mark agent as busy

        System.out.println("Assigned Ticket #" + ticketToAssign.getId() + " to " + availableAgent.getName() + " (Agent #" + availableAgent.getId() + ").");
    }

    /**
     * Displays all tickets currently waiting in the incoming queue.
     */
    public void viewIncomingQueue() {
        System.out.println("\n--- Incoming Queue ---");
        if (incomingTickets.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            for (HelpDeskTicket ticket : incomingTickets) {
                System.out.println(ticket);
            }
        }
    }

    /**
     * Displays all tickets that have been created in the system.
     */
    public void viewAllTickets() {
        System.out.println("\n--- All Tickets ---");
        if (allTickets.isEmpty()) {
            System.out.println("(No tickets created yet)");
        } else {
            // Iterate through the list of all tickets
            for (HelpDeskTicket ticket : allTickets) {
                System.out.println(ticket);
            }
        }
    }

    /**
     * Displays details of all agents in the system.
     */
    public void viewAgents() {
        System.out.println("\n--- Agents ---");
        if (agents.isEmpty()) {
            System.out.println("(No agents in the system)");
        } else {
            // Iterate through the list of agents
            for (HelpDeskAgent agent : agents) {
                System.out.println(agent);
            }
        }
    }

    /**
     * Runs the main help desk system loop, handling user input.
     */
    public void run() {
        int choice = -1;

        // Main loop for user interaction
        while (choice != 7) {
            displayMenu();

            try {
                // Read user choice, handling non-integer input
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use a switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addNewTicket();
                        break;
                    case 2:
                        addNewAgent();
                        break;
                    case 3:
                        assignNextTicket();
                        break;
                    case 4:
                        viewIncomingQueue();
                        break;
                    case 5:
                        viewAllTickets();
                        break;
                    case 6:
                        viewAgents();
                        break;
                    case 7:
                        System.out.println("Exiting Help Desk System.");
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Error: Invalid input. Please enter a number between 1 and 7.");
                }
            } catch (InputMismatchException e) {
                // Handle cases where the user enters non-integer input
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to continue the loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the Help Desk System.
     */
    public static void main(String[] args) {
        HelpDeskSystem system = new HelpDeskSystem();
        system.run();
    }
}
