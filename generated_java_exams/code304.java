/*
 * Exam Question #304
 * Generated on: 2025-05-11 22:52:19
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## QuickServe Order Management System - Advanced Implementation
 * 
 * **Objective:** Design and implement a simplified order management system for a restaurant called "QuickServe". This system should allow users (simulating staff) to manage customer orders.
 * 
 * **Scenario:** The system needs to handle a predefined menu, accept new orders, process orders one by one, and keep a history of completed orders. Pending orders should be processed in the order they were received.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.ArrayList` to store the restaurant's menu items.
 *     *   Use a `java.util.Queue` to hold pending customer orders, ensuring they are processed in FIFO (First-In, First-Out) order.
 *     *   Use a `java.util.List` (specifically, an `ArrayList`) to store a history of completed orders.
 *     *   Within an `Order` object, use a `java.util.List` (specifically, an `ArrayList`) to store the items ordered by the customer.
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Present a menu of options to the user (e.g., Display Menu, Create New Order, Process Next Order, View Pending Orders, View Completed History, Exit).
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 
 * 3.  **System Logic:**
 *     *   Initialize the system with a few predefined menu items. Each `MenuItem` should have an ID, name, and price.
 *     *   **Create New Order:**
 *         *   Prompt the user to enter the IDs and quantities of the items they want to add to the order.
 *         *   Allow adding multiple items to a single order.
 *         *   Validate that the entered item ID exists in the menu and the quantity is positive. Use `System.err` for validation errors.
 *         *   Create an `Order` object containing the selected items and their quantities.
 *         *   Add the newly created `Order` to the `Queue` of pending orders.
 *     *   **Process Next Order:**
 *         *   Remove the next order from the `Queue` of pending orders.
 *         *   If the queue is empty, print an error message to `System.err`.
 *         *   If an order is processed successfully, move it to the `List` of completed orders.
 *     *   **View Pending Orders:** Display the number of orders currently in the pending queue and perhaps a brief summary of the first order.
 *     *   **View Completed History:** Display details of all orders in the completed history list.
 * 
 * 4.  **Error Handling:**
 *     *   Implement robust input validation using `try-catch` blocks, especially when reading numeric input (`int`, `double`) from the `Scanner` to handle `InputMismatchException` or `NumberFormatException`. Print error messages to `System.err`.
 *     *   Use a class-wide `try-catch` block (e.g., around the main application loop) to catch unexpected exceptions and provide a generic error message to `System.err`.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful class, variable, and method names.
 *     *   Apply proper encapsulation (private fields, public getters/setters or constructor initialization).
 *     *   Include basic comments explaining complex parts or logic.
 *     *   Ensure clean code structure with separate classes for different entities (`MenuItem`, `Order`, `OrderManager`).
 * 
 * **Expected Output:**
 * 
 * *   The system should present a clear menu.
 * *   Successful operations (adding order, processing order) should print confirmation messages to `System.out`.
 * *   Errors (invalid input, empty queue operations) should print messages to `System.err`.
 * *   Viewing pending or completed orders should display relevant information to `System.out`.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- QuickServe Order System ---
 * 1. Display Menu
 * 2. Create New Order
 * 3. Process Next Order
 * 4. View Pending Orders
 * 5. View Completed History
 * 6. Exit
 * Enter your choice: 1
 * --- Menu ---
 * ID: 1, Name: Burger, Price: $5.99
 * ID: 2, Name: Fries, Price: $2.49
 * ID: 3, Name: Drink, Price: $1.99
 * 
 * --- QuickServe Order System ---
 * ...
 * Enter your choice: 2
 * Creating New Order. Enter item ID and quantity (enter 0 for ID to finish):
 * Item ID: 1
 * Quantity: 2
 * Added 2 x Burger to order.
 * Item ID: 3
 * Quantity: 1
 * Added 1 x Drink to order.
 * Item ID: 0
 * Order created successfully! Order ID: 1
 * Order added to pending queue.
 * 
 * --- QuickServe Order System ---
 * ...
 * Enter your choice: 3
 * Processing next order...
 * Order ID 1 processed successfully!
 * Order moved to completed history.
 * 
 * --- QuickServe Order System ---
 * ...
 * Enter your choice: 4
 * Pending Orders: 0
 * 
 * --- QuickServe Order System ---
 * ...
 * Enter your choice: 5
 * --- Completed Orders ---
 * Order ID: 1
 *   - 2 x Burger ($5.99 each)
 *   - 1 x Drink ($1.99 each)
 * Total: $13.97
 * -----------------------
 * 
 * --- QuickServe Order System ---
 * ...
 * Enter your choice: 6
 * Exiting QuickServe System. Goodbye!
 * ```
 * 
 * **Deliverable:** Provide the complete Java code for the QuickServe Order Management System.
 *
 * EXPLANATION:
 * This solution implements the QuickServe Order Management System, demonstrating the required Java concepts in a practical scenario.
 * 
 * 1.  **Class Structure:** The code is organized into several classes:
 *     *   `MenuItem`: A simple Plain Old Java Object (POJO) representing a menu item with `id`, `name`, and `price`. Encapsulation is used with private fields and public getters.
 *     *   `OrderItem`: Represents a specific item and its quantity within an order. It holds a reference to a `MenuItem` and the `quantity`. Includes a method to calculate the subtotal for the item line.
 *     *   `Order`: Represents a customer's order. It has a unique `orderId` (managed by a static counter), a `List` (`ArrayList`) of `OrderItem`s, and calculates its `total` price.
 *     *   `OrderManager`: This class acts as the central controller for the order system. It holds the core data structures:
 *         *   `menu`: An `ArrayList<MenuItem>` storing the restaurant's menu.
 *         *   `pendingOrders`: A `Queue<Order>` (implemented using `LinkedList`) to manage orders waiting to be processed in FIFO order.
 *         *   `completedOrders`: An `ArrayList<Order>` acting as a history of processed orders.
 *         It contains methods for displaying the menu, finding items, adding orders, processing orders, and viewing lists.
 *     *   `QuickServeSystem`: The main class containing the `main` method. It initializes the `OrderManager` and handles the main application loop, user input via `Scanner`, and the `switch` statement for menu navigation. Helper methods (`printMenu`, `createNewOrder`) are used to keep the `main` method clean.
 * 
 * 2.  **Required Component Usage:**
 *     *   `Queue`: `pendingOrders` is declared as `Queue<Order>` and instantiated as `LinkedList<>`. `offer()` is used to add orders, and `poll()` is used to retrieve and remove the next order for processing, adhering to FIFO. `peek()` is used to view the next order without removing it.
 *     *   `ArrayList`: Used for the `menu` (`ArrayList<MenuItem>`) and `completedOrders` (`ArrayList<Order>`). Within the `Order` class, `items` is declared as `List<OrderItem>` and instantiated as `new ArrayList<>(...)`. This demonstrates using the `List` interface while using `ArrayList` as the concrete implementation.
 *     *   `List interface`: Used for declaring `menu`, `completedOrders` in `OrderManager`, and `items` in `Order`. This promotes good practice by programming to the interface.
 *     *   `Scanner`: Used in the `main` method and the `createNewOrder` helper method to read user input from the console.
 *     *   `Switch statement`: Used in the `main` loop to direct the program flow based on the user's menu choice.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid menu choices, invalid input during order creation, item not found, non-positive quantity, and attempting to process orders when the queue is empty.
 *     *   `System.out`: Used for printing normal output, including the menu, confirmation messages for adding/processing orders, order details, and viewing pending/completed lists.
 *     *   `Class-wide exception handling with try-catch blocks`:
 *         *   A large `try-catch(Exception e)` block surrounds the main `while(running)` loop in the `main` method. This serves as a general catch-all for any unexpected runtime errors that might occur, printing a generic error message to `System.err`.
 *         *   Specific `try-catch(InputMismatchException e)` blocks are used when reading integer input (`scanner.nextInt()`) for the main menu choice, item ID, and quantity during order creation. This handles cases where the user enters non-numeric input, prints an error to `System.err`, consumes the invalid input using `scanner.next()` to prevent an infinite loop, and allows the program to continue.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `MenuItem`, `OrderItem`, and `Order` are `private`, with public constructors and getter methods provided.
 *     *   **Meaningful Names:** Class names (`MenuItem`, `OrderManager`, `QuickServeSystem`), variable names (`pendingOrders`, `completedOrders`, `currentOrderItems`), and method names (`displayMenu`, `processNextOrder`, `createNewOrder`) are descriptive.
 *     *   **Comments:** Basic comments explain the purpose of classes and key sections of code.
 *     *   **Input Validation:** Checks are performed for non-positive quantities and non-existent menu item IDs during order creation, with errors reported via `System.err`. Numeric input parsing errors are handled with `try-catch`.
 *     *   **Error Handling:** Specific error messages are provided for different error conditions (`System.err`). The `try-catch` blocks ensure the program doesn't crash on invalid input.
 *     *   **Clean Code Structure:** The logic is divided among classes, and the `main` method is kept relatively clean by delegating tasks to the `OrderManager` and helper methods.
 * 
 * This solution effectively integrates the required Java components to build a functional, albeit simple, order management system, demonstrating understanding of data structures, control flow, object-oriented principles, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents an item on the restaurant menu
class MenuItem {
    private int id;
    private String name;
    private double price;

    public MenuItem(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Price: $" + String.format("%.2f", price);
    }
}

// Represents an item within a specific order
class OrderItem {
    private MenuItem menuItem;
    private int quantity;

    public OrderItem(MenuItem menuItem, int quantity) {
        this.menuItem = menuItem;
        this.quantity = quantity;
    }

    // Getters
    public MenuItem getMenuItem() {
        return menuItem;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getSubtotal() {
        return menuItem.getPrice() * quantity;
    }

    @Override
    public String toString() {
        return "  - " + quantity + " x " + menuItem.getName() + " ($" + String.format("%.2f", menuItem.getPrice()) + " each)";
    }
}

// Represents a customer order
class Order {
    private static int nextOrderId = 1; // Static counter for unique order IDs
    private int orderId;
    private List<OrderItem> items; // Use List (ArrayList) for items in the order
    private double total;

    public Order(List<OrderItem> items) {
        this.orderId = nextOrderId++;
        this.items = new ArrayList<>(items); // Use ArrayList concrete type here
        calculateTotal();
    }

    private void calculateTotal() {
        this.total = 0;
        for (OrderItem item : items) {
            this.total += item.getSubtotal();
        }
    }

    // Getters
    public int getOrderId() {
        return orderId;
    }

    public List<OrderItem> getItems() {
        return items;
    }

    public double getTotal() {
        return total;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order ID: ").append(orderId).append("\n");
        for (OrderItem item : items) {
            sb.append(item).append("\n");
        }
        sb.append("Total: $").append(String.format("%.2f", total));
        return sb.toString();
    }
}

// Manages the menu, pending orders, and completed orders
class OrderManager {
    private List<MenuItem> menu; // Use List (ArrayList) for the menu
    private Queue<Order> pendingOrders; // Use Queue (LinkedList) for pending orders
    private List<Order> completedOrders; // Use List (ArrayList) for completed orders

    public OrderManager() {
        // Initialize data structures
        this.menu = new ArrayList<>(); // ArrayList for menu
        this.pendingOrders = new LinkedList<>(); // LinkedList implementing Queue
        this.completedOrders = new ArrayList<>(); // ArrayList for completed history

        // Populate initial menu
        menu.add(new MenuItem(1, "Burger", 5.99));
        menu.add(new MenuItem(2, "Fries", 2.49));
        menu.add(new MenuItem(3, "Drink", 1.99));
        menu.add(new MenuItem(4, "Pizza Slice", 3.50));
    }

    // Method to display the menu
    public void displayMenu() {
        System.out.println("--- Menu ---");
        if (menu.isEmpty()) {
            System.out.println("Menu is empty.");
        } else {
            for (MenuItem item : menu) {
                System.out.println(item);
            }
        }
        System.out.println("------------");
    }

    // Method to find a menu item by ID
    public MenuItem findMenuItemById(int id) {
        for (MenuItem item : menu) {
            if (item.getId() == id) {
                return item;
            }
        }
        return null; // Item not found
    }

    // Method to add a new order to the pending queue
    public void addOrder(Order order) {
        pendingOrders.offer(order); // offer is generally preferred over add for queues
        System.out.println("Order ID " + order.getOrderId() + " added to pending queue.");
    }

    // Method to process the next order from the queue
    public void processNextOrder() {
        if (pendingOrders.isEmpty()) {
            System.err.println("No pending orders to process.");
            return;
        }

        Order processedOrder = pendingOrders.poll(); // poll retrieves and removes the head
        if (processedOrder != null) {
            completedOrders.add(processedOrder); // Add to completed history
            System.out.println("Processing next order...");
            System.out.println("Order ID " + processedOrder.getOrderId() + " processed successfully!");
            System.out.println("Order moved to completed history.");
        }
    }

    // Method to view pending orders summary
    public void viewPendingOrders() {
        System.out.println("--- Pending Orders ---");
        System.out.println("Total pending orders: " + pendingOrders.size());
        if (!pendingOrders.isEmpty()) {
            // Peek at the first order without removing it
            Order nextOrder = pendingOrders.peek();
            System.out.println("Next order to be processed: Order ID " + nextOrder.getOrderId());
        }
        System.out.println("----------------------");
    }

    // Method to view completed orders history
    public void viewCompletedHistory() {
        System.out.println("--- Completed Orders History ---");
        if (completedOrders.isEmpty()) {
            System.out.println("No orders have been completed yet.");
        } else {
            for (Order order : completedOrders) {
                System.out.println(order);
                System.out.println("-----------------------");
            }
        }
        System.out.println("------------------------------");
    }
}

// Main class to run the QuickServe system
public class QuickServeSystem {

    public static void main(String[] args) {
        OrderManager orderManager = new OrderManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide try-catch block for general error handling
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Try-catch for reading menu choice
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement for flow control
                switch (choice) {
                    case 1:
                        orderManager.displayMenu();
                        break;
                    case 2:
                        createNewOrder(scanner, orderManager);
                        break;
                    case 3:
                        orderManager.processNextOrder();
                        break;
                    case 4:
                        orderManager.viewPendingOrders();
                        break;
                    case 5:
                        orderManager.viewCompletedHistory();
                        break;
                    case 6:
                        running = false;
                        System.out.println("Exiting QuickServe System. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
                System.out.println(); // Add a newline for better formatting
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Close the scanner when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    // Helper method to print the main menu
    private static void printMenu() {
        System.out.println("--- QuickServe Order System ---");
        System.out.println("1. Display Menu");
        System.out.println("2. Create New Order");
        System.out.println("3. Process Next Order");
        System.out.println("4. View Pending Orders");
        System.out.println("5. View Completed History");
        System.out.println("6. Exit");
        System.out.println("-------------------------------");
    }

    // Helper method to handle the creation of a new order
    private static void createNewOrder(Scanner scanner, OrderManager orderManager) {
        System.out.println("Creating New Order. Enter item ID and quantity (enter 0 for ID to finish):");
        List<OrderItem> currentOrderItems = new ArrayList<>(); // List to build the current order

        while (true) {
            int itemId = -1;
            int quantity = -1;

            // Try-catch for reading item ID
            try {
                System.out.print("Item ID: ");
                itemId = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.err.println("Invalid input for Item ID. Please enter a number.");
                scanner.next(); // Consume invalid input
                continue;
            }

            if (itemId == 0) {
                break; // Finish adding items
            }

            MenuItem selectedItem = orderManager.findMenuItemById(itemId);

            if (selectedItem == null) {
                System.err.println("Error: Item with ID " + itemId + " not found on the menu.");
                continue; // Ask for next item ID
            }

            // Try-catch for reading quantity
            try {
                System.out.print("Quantity: ");
                quantity = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.err.println("Invalid input for Quantity. Please enter a number.");
                scanner.next(); // Consume invalid input
                continue;
            }

            if (quantity <= 0) {
                System.err.println("Error: Quantity must be positive.");
                continue; // Ask for next item ID
            }

            currentOrderItems.add(new OrderItem(selectedItem, quantity));
            System.out.println("Added " + quantity + " x " + selectedItem.getName() + " to order.");
        }

        if (currentOrderItems.isEmpty()) {
            System.out.println("No items added to the order. Order creation cancelled.");
        } else {
            Order newOrder = new Order(currentOrderItems);
            orderManager.addOrder(newOrder);
            System.out.println("Order created successfully! " + newOrder); // Print order details
        }
    }
}
