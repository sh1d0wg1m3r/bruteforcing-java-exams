/*
 * Exam Question #623
 * Generated on: 2025-05-12 16:16:07
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Job Management System
 * 
 * **Objective:** Design and implement a simple command-line application to manage a queue of print jobs. The system should allow users to add new print jobs, process the next job in the queue, view pending jobs, and view completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Functionality:**
 *     *   Maintain a list of print jobs waiting to be processed (a queue).
 *     *   Maintain a list of print jobs that have been processed (a list).
 *     *   Allow users to add a new print job by specifying a file name. Each job should have a unique ID.
 *     *   Allow processing the next job in the queue. The processed job should be moved from the pending queue to the completed list.
 *     *   Allow viewing all pending jobs.
 *     *   Allow viewing all completed jobs.
 *     *   Provide a menu-driven interface for user interaction.
 * 
 * 2.  **Required Java Components:**
 *     *   `java.util.Queue`: Must be used for the pending print jobs.
 *     *   `java.util.ArrayList`: Must be used as the concrete implementation for the completed jobs list.
 *     *   `java.util.List`: Must be used as the interface type when declaring the completed jobs collection.
 *     *   `java.util.Scanner`: Must be used to read user input from the console.
 *     *   `switch` statement: Must be used to handle the user's menu selection.
 *     *   `System.err`: Must be used exclusively for printing error messages (e.g., invalid input, queue empty).
 *     *   `System.out`: Must be used for all normal output (menu, prompts, job details, confirmations).
 *     *   Class-wide exception handling with `try-catch` blocks: Implement `try-catch` blocks to handle potential runtime errors, especially related to user input. A general `try-catch` in the main execution flow is required.
 * 
 * 3.  **Design and Best Practices:**
 *     *   Create a separate class `PrintJob` to represent a single print job (with fields like `jobId`, `fileName`, `status`).
 *     *   Create a class `PrintJobManager` to encapsulate the logic for managing the queues and lists. This class should contain the `Queue` and `List` instances as private fields.
 *     *   Use meaningful variable and method names.
 *     *   Implement proper encapsulation in the `PrintJob` and `PrintJobManager` classes (private fields, public methods/getters where necessary).
 *     *   Include basic input validation (e.g., check if the queue is empty before processing, check if filename is provided).
 *     *   Add appropriate comments to explain complex parts of the code.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt the user for input, and perform actions based on the input. Output should clearly distinguish between normal messages (`System.out`) and errors (`System.err`).
 * 
 * Example interaction flow:
 * 
 * ```
 * --- Print Job Management Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name: document1.txt
 * Job 1 (document1.txt) added to queue.
 * 
 * --- Print Job Management Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name: report.pdf
 * Job 2 (report.pdf) added to queue.
 * 
 * --- Print Job Management Menu ---
 * 1. Add New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job ID: 1, File: document1.txt, Status: Pending
 * Job ID: 2, File: report.pdf, Status: Pending
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 2
 * Processing job 1 (document1.txt)... Completed.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job ID: 2, File: report.pdf, Status: Pending
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 4
 * --- Completed Jobs ---
 * Job ID: 1, File: document1.txt, Status: Completed
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: process
 * Invalid input. Please enter a number.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 5
 * Print Job Manager exiting.
 * ```
 * 
 * **Assessment:** Your solution will be assessed on correctness, adherence to all requirements (including the use of specified components and best practices), code structure, and error handling.
 *
 * EXPLANATION:
 * The provided solution implements a simple Print Job Management System using the required Java components and adhering to best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single print job with `jobId`, `fileName`, and `status`.
 *     *   Uses private fields and public getters for encapsulation.
 *     *   Includes a `setStatus` method to change the job's status (from "Pending" to "Completed").
 *     *   Overrides `toString()` for convenient printing of job details.
 * 
 * 2.  **`PrintJobManager` Class:**
 *     *   Acts as the central manager for print jobs.
 *     *   Contains two private fields: `pendingJobs` (declared as `Queue<PrintJob>`, implemented using `LinkedList`) and `completedJobs` (declared as `List<PrintJob>`, implemented using `ArrayList`). This demonstrates using interfaces as type declarations.
 *     *   `nextJobId` is a private counter to assign unique IDs to new jobs.
 *     *   **`addJob(String fileName)`:** Creates a new `PrintJob`, assigns it the next available ID, adds it to the `pendingJobs` queue using `offer()`, increments the ID counter, and prints a confirmation to `System.out`. It includes basic input validation for the file name, printing an error to `System.err` if invalid.
 *     *   **`processNextJob()`:** Checks if the `pendingJobs` queue is empty. If not, it retrieves and removes the head of the queue using `poll()`, updates the job's status to "Completed", adds the job to the `completedJobs` list using `add()`, and prints status messages to `System.out`. If the queue is empty, it prints a message to `System.out`.
 *     *   **`displayPendingJobs()`:** Iterates through the `pendingJobs` queue without removing elements and prints the details of each job to `System.out`. It handles the case where the queue is empty.
 *     *   **`displayCompletedJobs()`:** Iterates through the `completedJobs` list and prints the details of each job to `System.out`. It handles the case where the list is empty.
 * 
 * 3.  **`PrintJobApp` Class (Main Application):**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   Initializes a `Scanner` for user input and a `PrintJobManager`.
 *     *   Uses a `boolean running` flag to control the main application loop.
 *     *   **Class-wide `try-catch`:** A broad `try-catch(Exception e)` block wraps the main `while` loop. This fulfills the requirement for class-wide exception handling, catching any unexpected runtime errors that might occur during the application's execution and printing them to `System.err` along with a stack trace.
 *     *   Inside the `while` loop:
 *         *   The menu is printed using `System.out`.
 *         *   User input for the menu choice is read using `scanner.nextInt()`.
 *         *   **Input Validation and `try-catch`:** A specific `try-catch(InputMismatchException e)` block is used around `scanner.nextInt()` to handle cases where the user enters non-integer input. An error message is printed to `System.err`, the invalid input is consumed using `scanner.nextLine()` to prevent an infinite loop, and the `continue` statement restarts the loop iteration, showing the menu again.
 *         *   `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls.
 *         *   **`switch` statement:** The user's valid integer choice is handled by a `switch` statement, directing the flow to the appropriate `PrintJobManager` method or setting the `running` flag to `false` for exiting.
 *         *   The `default` case in the `switch` handles integer inputs that are outside the valid menu range, printing an error message to `System.err`.
 *     *   **`finally` block:** Ensures the `Scanner` resource is closed when the application loop terminates (either normally or due to an exception), preventing resource leaks. A final message is printed to `System.out`.
 * 
 * This solution effectively demonstrates the use of `Queue`, `List`, `ArrayList`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` in a practical, encapsulated, and well-structured manner, including basic input validation and error handling as required.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single print job
class PrintJob {
    private int jobId;
    private String fileName;
    private String status; // e.g., "Pending", "Completed"

    public PrintJob(int jobId, String fileName) {
        this.jobId = jobId;
        this.fileName = fileName;
        this.status = "Pending"; // New jobs are always pending
    }

    // Getters
    public int getJobId() {
        return jobId;
    }

    public String getFileName() {
        return fileName;
    }

    public String getStatus() {
        return status;
    }

    // Setter for status
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return String.format("Job ID: %d, File: %s, Status: %s", jobId, fileName, status);
    }
}

// Manages the print job queue and completed jobs list
class PrintJobManager {
    private Queue<PrintJob> pendingJobs;
    private List<PrintJob> completedJobs; // Using List interface, implemented by ArrayList
    private int nextJobId;

    public PrintJobManager() {
        // Use LinkedList as a concrete implementation for Queue
        this.pendingJobs = new LinkedList<>();
        // Use ArrayList as the concrete implementation for List
        this.completedJobs = new ArrayList<>();
        this.nextJobId = 1; // Start job IDs from 1
    }

    /**
     * Adds a new print job to the pending queue.
     * @param fileName The name of the file to print.
     */
    public void addJob(String fileName) {
        if (fileName == null || fileName.trim().isEmpty()) {
            System.err.println("Error: File name cannot be empty.");
            return;
        }
        PrintJob newJob = new PrintJob(nextJobId++, fileName.trim());
        pendingJobs.offer(newJob); // offer() is preferred for queues, returns false if failed (unlikely for LinkedList)
        System.out.println("Job " + newJob.getJobId() + " (" + newJob.getFileName() + ") added to queue.");
    }

    /**
     * Processes the next job in the pending queue, if available.
     * Moves the job to the completed list.
     */
    public void processNextJob() {
        if (pendingJobs.isEmpty()) {
            System.out.println("No pending jobs to process.");
            return;
        }

        // poll() retrieves and removes the head of the queue
        PrintJob jobToProcess = pendingJobs.poll();
        System.out.println("Processing job " + jobToProcess.getJobId() + " (" + jobToProcess.getFileName() + ")...");

        // Update status and move to completed list
        jobToProcess.setStatus("Completed");
        completedJobs.add(jobToProcess);
        System.out.println("Completed.");
    }

    /**
     * Displays all jobs currently in the pending queue.
     */
    public void displayPendingJobs() {
        System.out.println("--- Pending Jobs ---");
        if (pendingJobs.isEmpty()) {
            System.out.println("No pending jobs.");
        } else {
            // Iterate through the queue without removing elements
            for (PrintJob job : pendingJobs) {
                System.out.println(job);
            }
        }
    }

    /**
     * Displays all jobs that have been moved to the completed list.
     */
    public void displayCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobs.isEmpty()) {
            System.out.println("No completed jobs.");
        } else {
            // Iterate through the list
            for (PrintJob job : completedJobs) {
                System.out.println(job);
            }
        }
    }
}

public class PrintJobApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintJobManager manager = new PrintJobManager();
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                int choice = -1; // Default invalid choice

                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration and show menu again
                }

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter file name: ");
                        String fileName = scanner.nextLine();
                        manager.addJob(fileName);
                        break;
                    case 2:
                        manager.processNextJob();
                        break;
                    case 3:
                        manager.displayPendingJobs();
                        break;
                    case 4:
                        manager.displayCompletedJobs();
                        break;
                    case 5:
                        running = false; // Exit the loop
                        System.out.println("Exiting Print Job Manager.");
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that might occur during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging purposes
        } finally {
            // Ensure the scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("Application finished.");
        }
    }

    // Helper method to print the menu
    private static void printMenu() {
        System.out.println("--- Print Job Management Menu ---");
        System.out.println("1. Add New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Exit");
    }
}
