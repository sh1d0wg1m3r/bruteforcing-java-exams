/*
 * Exam Question #387
 * Generated on: 2025-05-11 23:03:35
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Task Management System Simulation**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line Task Management System. This system should allow users to add new tasks to a queue, process the next task in the queue, view the list of tasks currently waiting in the queue, and view a history of tasks that have been completed.
 * 
 * The system operates as follows:
 * 1.  Tasks are added to a waiting queue.
 * 2.  Processing a task removes it from the waiting queue and moves it to a completed tasks list.
 * 3.  Users can interact with the system via a menu of options.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * **Technical Requirements:**
 * 
 * 1.  Use `java.util.Queue` to store tasks awaiting processing.
 * 2.  Use `java.util.ArrayList` to store completed tasks.
 * 3.  Use the `java.util.List` interface when declaring the variable for completed tasks (programming to the interface).
 * 4.  Use `java.util.Scanner` to read user input from the console.
 * 5.  Use a `switch` statement to handle the different user menu choices.
 * 6.  Use `System.err` to output error messages (e.g., invalid input, attempting to process from an empty queue).
 * 7.  Use `System.out` to output normal messages (menu, prompts, task details, status).
 * 8.  Implement class-wide exception handling using `try-catch` blocks to manage potential runtime errors gracefully. This should ideally wrap the main application loop or core processing logic. Handle specific exceptions like `InputMismatchException` during input reading.
 * 
 * **System Functionality Requirements:**
 * 
 * 1.  **Add Task:** Prompt the user for a task description. Create a new `Task` object and add it to the waiting queue. Task descriptions cannot be empty.
 * 2.  **Process Next Task:** Remove the task at the front of the waiting queue and add it to the completed tasks list. If the queue is empty, display an error message.
 * 3.  **View Pending Tasks:** Display all tasks currently in the waiting queue, in order. If the queue is empty, display a message indicating that.
 * 4.  **View Completed Tasks:** Display all tasks in the completed tasks history. If the history is empty, display a message indicating that.
 * 5.  **Exit:** Terminate the program.
 * 
 * **Code Structure and Best Practices:**
 * 
 * *   Create a `Task` class to represent a single task (fields: unique ID, description). Include a meaningful `toString()` method.
 * *   Create a `TaskManager` class to manage the queue and list of tasks. This class should contain the methods for adding, processing, viewing pending, and viewing completed tasks.
 * *   Use private fields and public methods for proper encapsulation in both classes.
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and Javadoc documentation where necessary.
 * *   Implement input validation (e.g., checking for empty task description, handling non-integer menu input).
 * *   Ensure clean code structure and formatting.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user, accept input, and display relevant output or error messages based on the user's choice. The output for viewing tasks should clearly list the task ID and description.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write report
 * Task added: Task #1: Write report
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Prepare presentation
 * Task added: Task #2: Prepare presentation
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task #1: Write report
 * Task #2: Prepare presentation
 * ---------------------
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processing task: Task #1: Write report
 * Task completed.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task #2: Prepare presentation
 * ---------------------
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * Task #1: Write report
 * ---------------------
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processing task: Task #2: Prepare presentation
 * Task completed.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Error: No tasks in the queue to process.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the Task Management System simulation using the required Java components and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents a single task with an `id` and `description`.
 *     *   Uses a `static` variable `nextId` to ensure each new task gets a unique, auto-incrementing ID.
 *     *   Provides public getter methods (`getId`, `getDescription`) for accessing private fields, demonstrating encapsulation.
 *     *   Overrides the `toString()` method for easy and consistent printing of task details.
 * 
 * 2.  **`TaskManager` Class:**
 *     *   Manages the core logic using two collections:
 *         *   `pendingTasksQueue`: Declared as `Queue<Task>` and instantiated with `LinkedList<Task>`. This demonstrates programming to the interface (`Queue`) while using a concrete implementation (`LinkedList`) suitable for queue operations (FIFO - First-In, First-Out). `offer()` is used for adding (non-throwing) and `poll()` for retrieving and removing (returns null if empty), which are standard Queue operations.
 *         *   `completedTasksList`: Declared as `List<Task>` and instantiated with `ArrayList<Task>`. This also demonstrates programming to the interface (`List`) using a concrete implementation (`ArrayList`) suitable for storing a history of items where order is maintained and access by index is efficient (though not strictly required by this problem, it's a common List usage). `add()` is used to append completed tasks.
 *     *   Includes methods (`addTask`, `processNextTask`, `viewPendingTasks`, `viewCompletedTasks`) that encapsulate the operations on these collections.
 *     *   `addTask`: Validates that the description is not null or empty before creating and adding the task.
 *     *   `processNextTask`: Uses `poll()` to safely retrieve and remove from the queue. It checks if `poll()` returned `null` to detect an empty queue and prints an error using `System.err`. If a task is retrieved, it's added to the `completedTasksList`.
 *     *   `viewPendingTasks` and `viewCompletedTasks`: Iterate through the respective collections to display their contents. `viewPendingTasks` iterates over the `Queue` using a for-each loop, which uses the queue's iterator without removing elements.
 * 
 * 3.  **`TaskManagementSystem` (Main Class):**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   Creates instances of `TaskManager` and `Scanner`.
 *     *   Uses a `while` loop (`boolean running`) to keep the application running until the user chooses to exit.
 *     *   **`Scanner` for Input:** Reads user choices and task descriptions. `scanner.nextInt()` is used for the menu choice, and `scanner.nextLine()` is used for the task description (and crucially, after `nextInt()` to consume the leftover newline character).
 *     *   **`printMenu()`:** A separate helper method for displaying the menu, improving code organization.
 *     *   **`Switch` Statement:** Controls the flow based on the user's integer input, directing execution to the appropriate `TaskManager` method or the exit logic.
 *     *   **`System.out` and `System.err`:** Used appropriately for normal output (menu, prompts, task details, success messages) and error messages (invalid input, empty queue conditions).
 *     *   **Exception Handling (`try-catch`):**
 *         *   A broad `try-catch(Exception e)` block wraps the main `while` loop. This provides class-wide handling for any unexpected runtime errors that might occur anywhere within the loop, preventing the program from crashing abruptly. It prints a generic error message and the stack trace to `System.err`.
 *         *   A specific `try-catch(InputMismatchException e)` block is nested within the loop around `scanner.nextInt()`. This handles the specific case where the user enters non-integer input for the menu choice. It prints an informative error message to `System.err` and uses `scanner.nextLine()` to consume the invalid input, preventing an infinite loop caused by the scanner failing on the same input repeatedly. `continue` is used to restart the loop iteration, prompting for input again.
 *     *   **`finally` Block:** Ensures that the `Scanner` resource is closed when the application exits, regardless of whether an exception occurred or the loop finished normally.
 * 
 * This solution effectively integrates the required Java components, demonstrates fundamental object-oriented principles (encapsulation), uses appropriate data structures for the problem domain (Queue for waiting, List for history), implements basic input validation and robust exception handling, and follows best practices for code readability and structure.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with an ID and description.
 */
class Task {
    private static int nextId = 1; // Static counter for unique task IDs
    private int id;
    private String description;

    /**
     * Constructs a new Task with a unique ID and description.
     * @param description The description of the task.
     */
    public Task(String description) {
        this.id = nextId++; // Assign unique ID and increment counter
        this.description = description;
    }

    /**
     * Gets the task ID.
     * @return The task ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the task description.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Returns a string representation of the task.
     * @return Formatted string like "Task #ID: Description".
     */
    @Override
    public String toString() {
        return "Task #" + id + ": " + description;
    }
}

/**
 * Manages the queue of pending tasks and a list of completed tasks.
 */
class TaskManager {
    private Queue<Task> pendingTasksQueue;
    private List<Task> completedTasksList; // Using List interface for ArrayList implementation

    /**
     * Constructs a new TaskManager.
     */
    public TaskManager() {
        this.pendingTasksQueue = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasksList = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new task to the pending queue.
     * @param description The description of the task to add.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }
        Task newTask = new Task(description.trim());
        pendingTasksQueue.offer(newTask); // offer() is preferred over add() for queues
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task in the pending queue.
     * Removes the task from the queue and adds it to the completed list.
     * Handles the case where the queue is empty.
     */
    public void processNextTask() {
        Task taskToProcess = pendingTasksQueue.poll(); // poll() retrieves and removes, returns null if empty
        if (taskToProcess != null) {
            System.out.println("Processing task: " + taskToProcess);
            completedTasksList.add(taskToProcess);
            System.out.println("Task completed.");
        } else {
            System.err.println("Error: No tasks in the queue to process.");
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    public void viewPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasksQueue.isEmpty()) {
            System.out.println("No tasks pending.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : pendingTasksQueue) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Displays all tasks in the completed tasks history.
     */
    public void viewCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasksList.isEmpty()) {
            System.out.println("No tasks completed yet.");
        } else {
            for (Task task : completedTasksList) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------");
    }
}

/**
 * Main class to run the Task Management System application.
 * Contains the main loop and user interaction logic.
 */
public class TaskManagementSystem {

    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default invalid choice

                // Specific exception handling for Scanner input
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        manager.addTask(description);
                        break;
                    case 2:
                        manager.processNextTask();
                        break;
                    case 3:
                        manager.viewPendingTasks();
                        break;
                    case 4:
                        manager.viewCompletedTasks();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a blank line for better readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that might occur
            System.err.println("An unexpected error occurred:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Task Management System ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
