/*
 * Exam Question #1024
 * Generated on: 2025-05-12 17:14:16
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Appointment System in Java. The system should manage patients waiting to be seen and doctors who are available to see them.
 * 
 * **Requirements:**
 * 
 * 1.  Implement a system that allows users to perform the following actions via a command-line menu:
 *     *   Add a new patient to the waiting queue.
 *     *   Mark a doctor as available.
 *     *   Assign the next patient in the queue to an available doctor.
 *     *   Display the current waiting queue.
 *     *   Display the list of all doctors.
 *     *   Display the list of currently available doctors.
 *     *   Exit the application.
 * 
 * 2.  The system must utilize the following Java components:
 *     *   `java.util.Queue` to manage the waiting list of patients.
 *     *   `java.util.ArrayList` to store the list of currently available doctors.
 *     *   `java.util.List` interface when appropriate (e.g., for a list of all doctors).
 *     *   `java.util.Scanner` to read user input from the console.
 *     *   A `switch` statement to handle the user's menu choice.
 *     *   `System.err` to print error messages (e.g., invalid input, queue is empty, no doctors available).
 *     *   `System.out` to print normal output (menu, prompts, success messages, list contents).
 *     *   Class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, particularly related to input processing.
 * 
 * 3.  Follow Java best practices:
 *     *   Use proper encapsulation (private fields, public methods) for classes like `Patient`, `Doctor`, and the main management class.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Implement input validation (e.g., check for empty patient names, non-numeric input for choices or IDs).
 *     *   Implement proper error handling using `if` checks for business logic errors (like attempting to assign a patient when none are waiting or no doctors are available) and `try-catch` for technical errors (like parsing input).
 *     *   Structure the code cleanly with separate classes for data (Patient, Doctor) and logic (HospitalManager).
 * 
 * **Classes to Create:**
 * 
 * *   `Patient`: Should have fields for patient ID (auto-generated) and name.
 * *   `Doctor`: Should have fields for doctor ID, name, and specialty.
 * *   `HospitalManager`: Should contain the `Queue` for waiting patients, a `List` for all doctors, and an `ArrayList` for available doctors. This class should implement the core logic (adding patients, assigning patients, managing doctor availability, displaying lists).
 * *   `HospitalSystem`: The main class with the `main` method to handle the user interface, menu loop, input reading, and interaction with the `HospitalManager`.
 * 
 * **Initial State:**
 * 
 * *   The system should start with a few pre-defined doctors. Initially, all pre-defined doctors should be marked as available.
 * *   The waiting queue should start empty.
 * 
 * **Expected Output:**
 * 
 * The program should run continuously, presenting a menu to the user. Based on the user's valid input, it should perform the requested action, print relevant success messages or error messages using `System.out` or `System.err` respectively, and then display the menu again until the user chooses to exit.
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * --- Hospital Appointment System ---
 * Choose an option:
 * 1. Add Patient to Queue
 * 2. Mark Doctor Available
 * 3. Assign Patient to Doctor
 * 4. Display Waiting Queue
 * 5. Display Available Doctors
 * 6. Display All Doctors
 * 0. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient added to queue: Patient [ID=1, Name=Alice]
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: 3
 * --- Assignment Successful ---
 * Patient: Alice (ID 1)
 * Assigned to: Dr. Smith (ID 101, Specialty: Cardiology)
 * -----------------------------
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: 5
 * --- Available Doctors ---
 * No doctors currently available.
 * -----------------------
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: 3
 * Error: No doctors are currently available. Cannot assign patient.
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: 9
 * Invalid choice. Please enter a number between 0 and 6.
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: invalid
 * Invalid input: 'invalid'. Please enter a number.
 * 
 * Choose an option:
 * ... (menu) ...
 * Enter your choice: 0
 * Exiting Hospital Appointment System. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Submission:** Provide the complete Java source code.
 *
 * EXPLANATION:
 * This solution implements a basic Hospital Appointment System, fulfilling all the requirements of the exam task.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` and `Doctor` classes are simple Plain Old Java Objects (POJOs) representing the core entities. They have private fields (`id`, `name`, `specialty`) and public getter methods, demonstrating encapsulation. `Patient` includes a static counter for simple ID generation. `Doctor` overrides `equals` and `hashCode` based on the doctor's ID, which is crucial for correctly using methods like `contains` and `remove` when dealing with `Doctor` objects in `ArrayList`s.
 *     *   `HospitalManager` is the central class containing the system's state (`waitingQueue`, `allDoctors`, `availableDoctors`) and business logic. It keeps its data structures private.
 *     *   `HospitalSystem` contains the `main` method, handling the user interface loop, menu display, input reading using `Scanner`, and coordinating calls to the `HospitalManager`.
 * 
 * 2.  **Data Structures (`Queue`, `List`, `ArrayList`):**
 *     *   `waitingQueue` is declared as `Queue<Patient>` and instantiated as a `LinkedList<Patient>`. `LinkedList` implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior suitable for a waiting list. Methods like `offer()` (add) and `poll()` (retrieve and remove head) are used.
 *     *   `allDoctors` is declared using the `List<Doctor>` interface and instantiated as an `ArrayList<Doctor>`. Using the interface allows flexibility if the underlying implementation needed to change later. It stores all registered doctors.
 *     *   `availableDoctors` is declared specifically as `ArrayList<Doctor>`. This concrete type is used to demonstrate the requirement, though declaring it as `List` would also be acceptable practice. It stores doctors who are currently free to see patients. `ArrayList` provides dynamic resizing and efficient element access/removal by index or object reference.
 * 
 * 3.  **User Input (`Scanner`) and Flow Control (`switch`):**
 *     *   A `Scanner` object reads input from `System.in`. A `try-with-resources` block ensures the scanner is closed properly.
 *     *   A `while` loop keeps the system running until the user chooses to exit.
 *     *   A `switch` statement inside the loop processes the user's integer choice, directing the program flow to the appropriate action.
 * 
 * 4.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for displaying the menu, prompts, successful operations (patient added, assignment made), and the contents of the lists/queue.
 *     *   `System.err.println()` is used exclusively for printing error messages, making them visually distinct (often in red in many console environments) and directing them to the standard error stream. This is used for invalid input, attempting operations on empty queues/lists, or trying to mark a non-existent or already available doctor.
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A main `try-catch(Exception e)` block wraps the core `while` loop in the `main` method. This provides class-wide handling for any unexpected exceptions that might occur during the program's execution, preventing the program from crashing abruptly.
 *     *   More specific input validation is done using `scanner.hasNextInt()` and `scanner.nextLine()` *before* attempting to read an integer. If `hasNextInt()` returns false, it means the input is not an integer, and an error message is printed to `System.err`, the invalid input is consumed, and the loop continues, prompting the user again. This is a robust way to handle non-numeric input without relying solely on catching `InputMismatchException` (though a `try-catch` for `NumberFormatException` or a broader `Exception` is also shown around the doctor ID input as an alternative/additional layer).
 *     *   Business logic errors (like trying to assign a patient when the queue is empty or no doctors are available) are handled using `if` statements within the `HospitalManager` methods, printing informative error messages to `System.err` and returning `false`.
 * 
 * 6.  **Best Practices:**
 *     *   Encapsulation is applied in all three classes.
 *     *   Variable names like `waitingQueue`, `availableDoctors`, `addPatient`, `assignPatientToDoctor` are descriptive.
 *     *   Javadoc comments explain the purpose of classes and methods.
 *     *   Input validation checks for empty names and non-numeric input.
 *     *   Error handling distinguishes between input errors and business logic errors, using `System.err` effectively.
 *     *   The code is organized into logical classes, promoting modularity and readability.
 * 
 * This solution effectively demonstrates the required Java concepts and follows best practices in a practical, albeit simplified, application scenario.
 */

import java.util.*;

// Represents a patient waiting for an appointment
class Patient {
    private static int nextId = 1; // Auto-generate patient IDs
    private int id;
    private String name;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.id = nextId++;
        this.name = name;
    }

    /**
     * Gets the patient's unique ID.
     * @return The patient ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient [ID=" + id + ", Name=" + name + "]";
    }
}

// Represents a doctor in the hospital
class Doctor {
    private int id; // Simple ID for identification
    private String name;
    private String specialty;

    /**
     * Constructs a new Doctor.
     * @param id The unique ID of the doctor.
     * @param name The name of the doctor.
     * @param specialty The doctor's medical specialty.
     */
    public Doctor(int id, String name, String specialty) {
        this.id = id;
        this.name = name;
        this.specialty = specialty;
    }

    /**
     * Gets the doctor's unique ID.
     * @return The doctor ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the doctor's name.
     * @return The doctor name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the doctor's specialty.
     * @return The doctor specialty.
     */
    public String getSpecialty() {
        return specialty;
    }

    @Override
    public String toString() {
        return "Doctor [ID=" + id + ", Name=" + name + ", Specialty=" + specialty + "]";
    }

    // Override equals and hashCode based on ID for proper list operations
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Doctor doctor = (Doctor) o;
        return id == doctor.id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}

// Manages the hospital's waiting queue and doctor availability
class HospitalManager {
    private Queue<Patient> waitingQueue;
    private List<Doctor> allDoctors; // Using List interface
    private ArrayList<Doctor> availableDoctors; // Using ArrayList concrete class

    /**
     * Constructs a new HospitalManager, initializing data structures and doctors.
     */
    public HospitalManager() {
        waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        allDoctors = new ArrayList<>();
        availableDoctors = new ArrayList<>();

        // Add some initial doctors
        allDoctors.add(new Doctor(101, "Dr. Smith", "Cardiology"));
        allDoctors.add(new Doctor(102, "Dr. Jones", "Pediatrics"));
        allDoctors.add(new Doctor(103, "Dr. Adams", "Neurology"));
        allDoctors.add(new Doctor(104, "Dr. Baker", "Orthopedics"));


        // Initially, all doctors are available
        availableDoctors.addAll(allDoctors);
    }

    /**
     * Adds a new patient to the waiting queue.
     * Performs basic validation on the patient name.
     * @param name The name of the patient.
     * @return true if patient was added successfully, false otherwise.
     */
    public boolean addPatient(String name) {
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return false;
        }
        Patient patient = new Patient(name.trim());
        waitingQueue.offer(patient); // Use offer for adding to queue
        System.out.println("Patient added to queue: " + patient);
        return true;
    }

    /**
     * Marks a doctor as available for seeing patients.
     * Finds the doctor by ID and adds them to the available list if not already there.
     * @param doctorId The ID of the doctor to mark available.
     * @return true if doctor was successfully marked available, false otherwise.
     */
    public boolean markDoctorAvailable(int doctorId) {
        // Find the doctor by ID in the list of all doctors
        Doctor doctorToMark = null;
        for (Doctor doc : allDoctors) {
            if (doc.getId() == doctorId) {
                doctorToMark = doc;
                break;
            }
        }

        if (doctorToMark == null) {
            System.err.println("Error: Doctor with ID " + doctorId + " not found in the hospital system.");
            return false;
        }

        // Check if the doctor is already in the available list
        if (availableDoctors.contains(doctorToMark)) {
            System.err.println("Error: Doctor " + doctorToMark.getName() + " (ID " + doctorId + ") is already marked as available.");
            return false;
        }

        availableDoctors.add(doctorToMark);
        System.out.println("Doctor " + doctorToMark.getName() + " (ID " + doctorId + ") is now marked as available.");
        return true;
    }

    /**
     * Assigns the next waiting patient to the first available doctor.
     * Removes the patient from the queue and the doctor from the available list.
     * Handles cases where the queue or available doctors list is empty.
     * @return true if an assignment was successfully made, false otherwise.
     */
    public boolean assignPatientToDoctor() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty. Cannot assign a patient.");
            return false;
        }

        if (availableDoctors.isEmpty()) {
            System.err.println("Error: No doctors are currently available. Cannot assign a patient.");
            return false;
        }

        // Get the next patient from the queue (removes the head element)
        Patient nextPatient = waitingQueue.poll();

        // Get the first available doctor (removes from the available list)
        Doctor assignedDoctor = availableDoctors.remove(0); // Using index 0 for simplicity

        System.out.println("--- Assignment Successful ---");
        System.out.println("Patient: " + nextPatient.getName() + " (ID " + nextPatient.getId() + ")");
        System.out.println("Assigned to: " + assignedDoctor.getName() + " (ID " + assignedDoctor.getId() + ", Specialty: " + assignedDoctor.getSpecialty() + ")");
        System.out.println("-----------------------------");

        return true;
    }

    /**
     * Displays the list of patients currently waiting in the queue.
     */
    public void displayWaitingQueue() {
        System.out.println("\n--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate over the queue without removing elements
            int position = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(position++ + ". " + patient);
            }
        }
        System.out.println("---------------------");
    }

     /**
     * Displays the list of all doctors registered in the hospital system.
     */
    public void displayAllDoctors() {
        System.out.println("\n--- All Doctors ---");
         if (allDoctors.isEmpty()) {
            System.out.println("No doctors listed in the system.");
        } else {
            for (Doctor doctor : allDoctors) {
                System.out.println(doctor);
            }
        }
        System.out.println("-------------------");
    }


    /**
     * Displays the list of doctors who are currently marked as available.
     */
    public void displayAvailableDoctors() {
        System.out.println("\n--- Available Doctors ---");
        if (availableDoctors.isEmpty()) {
            System.out.println("No doctors currently available.");
        } else {
            for (Doctor doctor : availableDoctors) {
                System.out.println(doctor);
            }
        }
        System.out.println("-----------------------");
    }
}

// Main class to run the Hospital Appointment System application
public class HospitalSystem {

    public static void main(String[] args) {
        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            HospitalManager manager = new HospitalManager();

            System.out.println("--- Hospital Appointment System ---");

            boolean running = true;
            while (running) {
                printMenu();
                int choice = -1; // Default invalid choice

                // Class-wide exception handling for reading the main menu choice
                try {
                    System.out.print("Enter your choice: ");
                    // Check if the next input is an integer
                    if (scanner.hasNextInt()) {
                         choice = scanner.nextInt();
                    } else {
                        // Consume the invalid input line and print error
                        String invalidInput = scanner.next(); // Use next() to read the token
                        System.err.println("Invalid input: '" + invalidInput + "'. Please enter a number for the menu choice.");
                        scanner.nextLine(); // Consume the rest of the line
                        continue; // Skip to the next iteration of the while loop
                    }
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();

                    // Process the valid integer choice using switch
                    switch (choice) {
                        case 1: // Add Patient
                            System.out.print("Enter patient name: ");
                            String patientName = scanner.nextLine();
                            manager.addPatient(patientName); // Method handles validation internally
                            break;

                        case 2: // Mark Doctor Available
                            manager.displayAllDoctors(); // Show doctors so user can choose ID
                            System.out.print("Enter ID of doctor to mark available: ");
                            // Handle potential NumberFormatException for doctor ID input specifically
                            try {
                                 if (scanner.hasNextInt()) {
                                    int doctorId = scanner.nextInt();
                                    scanner.nextLine(); // Consume newline
                                    manager.markDoctorAvailable(doctorId);
                                 } else {
                                     String invalidIdInput = scanner.next(); // Read invalid token
                                     System.err.println("Invalid input: '" + invalidIdInput + "'. Please enter a number for Doctor ID.");
                                     scanner.nextLine(); // Consume rest of line
                                 }
                            } catch (Exception e) {
                                 // Catch any other unexpected error during ID input
                                 System.err.println("An error occurred while processing Doctor ID input: " + e.getMessage());
                                 // Ensure scanner line is consumed if an exception occurred unexpectedly before nextLine()
                                 if (scanner.hasNextLine()) {
                                     scanner.nextLine();
                                 }
                            }
                            break;

                        case 3: // Assign Patient to Doctor
                            manager.assignPatientToDoctor(); // Method handles empty queue/doctors internally
                            break;

                        case 4: // Display Waiting Queue
                            manager.displayWaitingQueue();
                            break;

                        case 5: // Display Available Doctors
                            manager.displayAvailableDoctors();
                            break;

                         case 6: // Display All Doctors
                            manager.displayAllDoctors();
                            break;

                        case 0: // Exit
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            running = false;
                            break;

                        default:
                            System.err.println("Invalid choice. Please enter a number between 0 and 6.");
                    }
                } catch (Exception e) {
                    // Generic catch for any *other* unexpected errors during the loop iteration
                    // This handles exceptions not caught by specific input validation checks
                    System.err.println("An unexpected error occurred during operation: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for detailed debugging stack trace
                }
                System.out.println(); // Add a blank line for readability between operations
            }

        } // Scanner is automatically closed here by try-with-resources
          catch (Exception e) {
             // This outer catch handles exceptions that might occur during Scanner initialization or closing
             System.err.println("A critical error occurred outside the main loop: " + e.getMessage());
             // e.printStackTrace();
          }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Choose an option:");
        System.out.println("1. Add Patient to Queue");
        System.out.println("2. Mark Doctor Available");
        System.out.println("3. Assign Patient to Doctor");
        System.out.println("4. Display Waiting Queue");
        System.out.println("5. Display Available Doctors");
        System.out.println("6. Display All Doctors");
        System.out.println("0. Exit");
    }
}
