/*
 * Exam Question #1095
 * Generated on: 2025-05-12 17:23:51
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Delivery Hub Package Processing Simulation**
 * 
 * **Objective:** Design and implement a Java program that simulates a simplified package processing system at a delivery hub. The system manages packages arriving for processing and tracks packages that have been successfully processed.
 * 
 * **Scenario:**
 * Packages arrive at a delivery hub and are placed in a queue to await processing. A processing station takes the next package from the queue, updates its status, and moves it to a list of processed packages. The system should allow users to interact via a simple menu.
 * 
 * **Requirements:**
 * 
 * 1.  **`Package` Class:**
 *     *   Create a class named `Package` with the following private fields:
 *         *   `id` (int): Unique package identifier.
 *         *   `destination` (String): The destination address or code.
 *         *   `status` (String): Current status (e.g., "Pending", "Processing", "Processed").
 *     *   Include a constructor to initialize `id`, `destination`, and set the initial status to "Pending".
 *     *   Provide public getter methods for all fields.
 *     *   Provide a public setter method for `status`.
 *     *   Override the `toString()` method to provide a readable representation of the package.
 * 
 * 2.  **`DeliveryHub` Class:**
 *     *   Create a class named `DeliveryHub` to manage the packages.
 *     *   It must contain:
 *         *   A private `Queue<Package>` to hold packages waiting for processing. Use a suitable implementation like `java.util.LinkedList`.
 *         *   A private `List<Package>` to hold packages that have been processed. Use `java.util.ArrayList` but declare it as `List`.
 *     *   Implement the following public methods:
 *         *   `addPackage(int id, String destination)`: Creates a new `Package` object and adds it to the incoming queue. Should validate that `id` is positive.
 *         *   `processNextPackage()`: Removes the next package from the incoming queue, updates its status to "Processed", and adds it to the processed list. Return the processed package or `null` if the queue was empty.
 *         *   `getProcessedPackages()`: Returns the `List` of processed packages.
 *         *   `getQueueSize()`: Returns the number of packages currently in the incoming queue.
 * 
 * 3.  **`DeliverySimulator` Class (Main Class):**
 *     *   Create a class named `DeliverySimulator` with the `main` method.
 *     *   Instantiate a `DeliveryHub` object.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a menu-driven interface with the following options:
 *         *   1. Add New Package
 *         *   2. Process Next Package
 *         *   3. List Processed Packages
 *         *   4. Show Incoming Queue Size
 *         *   5. Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 *     *   Display appropriate messages using `System.out` for menu, successful operations, and package details.
 *     *   Use `System.err` to display error messages (e.g., invalid menu choice, invalid package ID, attempting to process when the queue is empty).
 *     *   Implement class-wide exception handling using a `try-catch` block that wraps the main simulation loop or critical operations within the `DeliverySimulator` class. This block should catch general exceptions and print an error message to `System.err`.
 *     *   Ensure input validation for menu choices and package details (like ID). Handle potential input mismatches.
 *     *   Close the `Scanner` resource properly.
 * 
 * **Technical Constraints:**
 * 
 * *   You MUST use `java.util.Queue`.
 * *   You MUST use `java.util.ArrayList`.
 * *   You MUST use `java.util.List` (as the type for the processed packages collection).
 * *   You MUST use `java.util.Scanner` for input.
 * *   You MUST use a `switch` statement.
 * *   You MUST use `System.err` for error messages.
 * *   You MUST use `System.out` for normal output.
 * *   You MUST implement class-wide exception handling with `try-catch`.
 * 
 * **Best Practices:**
 * 
 * *   Implement proper encapsulation (private fields, public methods).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments (especially Javadoc for classes/methods).
 * *   Perform input validation where necessary.
 * *   Handle errors gracefully using `System.err`.
 * *   Maintain a clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should repeatedly display the menu, prompt for input, and perform the requested action.
 * - Adding a package should confirm success or report an error (invalid ID).
 * - Processing should report which package was processed or indicate the queue is empty.
 * - Listing processed packages should display details of all processed packages or indicate none are processed.
 * - Showing queue size should display the current count.
 * - Invalid input or errors should be reported on `System.err`.
 * 
 * **Grading:** Your solution will be evaluated based on correctness, adherence to all requirements and constraints, code quality, and proper error handling.
 *
 * EXPLANATION:
 * This solution simulates a package delivery hub, demonstrating the required Java concepts in a practical context.
 * 
 * 1.  **`Package` Class:**
 *     *   Represents a single package with encapsulated data (`id`, `destination`, `status`) using private fields.
 *     *   Provides public getters to access this data and a setter for the `status`, adhering to encapsulation principles.
 *     *   The constructor includes basic input validation for the `id`, throwing an `IllegalArgumentException` if it's not positive.
 *     *   The `toString()` method provides a clear representation for printing package details.
 * 
 * 2.  **`DeliveryHub` Class:**
 *     *   Manages two collections: a `Queue` (`incomingPackages`) and a `List` (`processedPackages`).
 *     *   `incomingPackages` is declared as `Queue<Package>` and instantiated as a `LinkedList`. This correctly uses the `Queue` interface for FIFO (First-In, First-Out) behavior, where packages are processed in the order they arrive. `offer()` is used for adding to the queue, and `poll()` is used for removing from the head.
 *     *   `processedPackages` is declared as `List<Package>` and instantiated as an `ArrayList`. This demonstrates programming to the `List` interface while using the concrete `ArrayList` implementation for storing processed items.
 *     *   `addPackage` validates the ID (via the `Package` constructor) and adds the package to the queue.
 *     *   `processNextPackage` retrieves and removes the head of the queue (`poll()`). If the queue is empty, `poll()` returns `null`, which is handled by printing an error to `System.err`. If a package is retrieved, its status is updated, and it's added to the `processedPackages` list.
 *     *   `getProcessedPackages` and `getQueueSize` provide access to the state of the hub's collections.
 * 
 * 3.  **`DeliverySimulator` Class:**
 *     *   Contains the `main` method which creates an instance of the simulator and runs it.
 *     *   The `runSimulation` method contains the core logic:
 *         *   It uses `java.util.Scanner` to get input from `System.in`. A `try-with-resources` block is implicitly handled by closing the scanner in the `finally` block, ensuring the resource is released.
 *         *   The main loop displays a menu and reads the user's choice.
 *         *   A `switch` statement is used to direct execution based on the user's choice, fulfilling that requirement.
 *         *   `System.out` is used for displaying the menu, prompts, and successful action messages.
 *         *   `System.err` is explicitly used for displaying error messages, such as invalid menu choices, invalid package IDs, or attempts to process an empty queue.
 *         *   **Class-wide exception handling:** The entire `runSimulation` method's logic is wrapped in a `try-catch(Exception e)` block. This demonstrates handling potential exceptions that might occur anywhere within the simulation loop (though specific input validation catches handle most common issues). The `catch` block prints a general error message and the stack trace to `System.err`. The `finally` block ensures the `Scanner` is closed.
 *         *   Input validation for the menu choice is done using a nested `try-catch(InputMismatchException)` block to prevent crashes if the user enters non-integer input, and `scanner.nextLine()` is used to consume the invalid input.
 *         *   The `addPackageAction` method further demonstrates input reading and handles potential `InputMismatchException` for the ID input and `IllegalArgumentException` thrown by the `Package` constructor.
 * 
 * This structure effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a functional simulation, showcasing proper object-oriented design, encapsulation, input validation, and error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package in the delivery simulation.
 */
class Package {
    private int id;
    private String destination;
    private String status;

    /**
     * Constructs a new Package.
     *
     * @param id The unique package identifier.
     * @param destination The package's destination.
     */
    public Package(int id, String destination) {
        if (id <= 0) {
            throw new IllegalArgumentException("Package ID must be positive.");
        }
        this.id = id;
        this.destination = destination;
        this.status = "Pending"; // Initial status
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getDestination() {
        return destination;
    }

    public String getStatus() {
        return status;
    }

    // Setter for status
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the Package.
     *
     * @return A formatted string describing the package.
     */
    @Override
    public String toString() {
        return "Package [ID=" + id + ", Destination=" + destination + ", Status=" + status + "]";
    }
}

/**
 * Manages the incoming and processed packages at the delivery hub.
 */
class DeliveryHub {
    // Queue for packages waiting to be processed (FIFO)
    private Queue<Package> incomingPackages;
    // List for packages that have been processed
    private List<Package> processedPackages;

    /**
     * Constructs a new DeliveryHub.
     */
    public DeliveryHub() {
        this.incomingPackages = new LinkedList<>(); // LinkedList implements Queue
        this.processedPackages = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new package to the incoming queue.
     *
     * @param id The unique package identifier.
     * @param destination The package's destination.
     * @throws IllegalArgumentException if the ID is not positive.
     */
    public void addPackage(int id, String destination) {
        // Package constructor already validates ID
        Package newPackage = new Package(id, destination);
        incomingPackages.offer(newPackage); // offer is preferred over add for queues
        System.out.println("Package " + id + " added to the incoming queue.");
    }

    /**
     * Processes the next package from the incoming queue.
     * Removes it from the queue, updates its status, and adds it to the processed list.
     *
     * @return The processed package, or null if the queue was empty.
     */
    public Package processNextPackage() {
        Package packageToProcess = incomingPackages.poll(); // poll retrieves and removes the head
        if (packageToProcess != null) {
            packageToProcess.setStatus("Processed");
            processedPackages.add(packageToProcess);
            System.out.println("Package " + packageToProcess.getId() + " processed.");
            return packageToProcess;
        } else {
            System.err.println("No packages in the incoming queue to process.");
            return null;
        }
    }

    /**
     * Gets the list of packages that have been processed.
     *
     * @return The list of processed packages.
     */
    public List<Package> getProcessedPackages() {
        return processedPackages;
    }

    /**
     * Gets the current number of packages in the incoming queue.
     *
     * @return The size of the incoming queue.
     */
    public int getQueueSize() {
        return incomingPackages.size();
    }
}

/**
 * Main class to run the Delivery Hub Simulation.
 * Provides a menu-driven interface for user interaction.
 */
public class DeliverySimulator {

    private DeliveryHub hub;
    private Scanner scanner;

    /**
     * Constructs a DeliverySimulator.
     */
    public DeliverySimulator() {
        this.hub = new DeliveryHub();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Delivery Hub Menu ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. List Processed Packages");
        System.out.println("4. Show Incoming Queue Size");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main simulation loop.
     * Includes class-wide exception handling.
     */
    public void runSimulation() {
        // Class-wide exception handling wrapping the main simulation logic
        try {
            int choice;
            do {
                displayMenu();
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            addPackageAction();
                            break;
                        case 2:
                            hub.processNextPackage();
                            break;
                        case 3:
                            listProcessedPackagesAction();
                            break;
                        case 4:
                            showQueueSizeAction();
                            break;
                        case 5:
                            System.out.println("Exiting simulation. Goodbye!");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = 0; // Reset choice to continue loop
                } catch (IllegalArgumentException e) {
                     System.err.println("Error adding package: " + e.getMessage());
                     // No need to consume line here as it's typically thrown after reading input
                     choice = 0; // Reset choice to continue loop
                }

            } while (choice != 5);

        } catch (Exception e) {
            // General catch block for any unexpected exceptions during simulation
            System.err.println("\nAn unexpected error occurred during simulation:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed regardless of exceptions
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Handles the 'Add New Package' menu option.
     */
    private void addPackageAction() {
        System.out.print("Enter Package ID (positive integer): ");
        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            System.out.print("Enter Destination: ");
            String destination = scanner.nextLine();
            hub.addPackage(id, destination);
        } catch (InputMismatchException e) {
            System.err.println("Invalid input for Package ID. Please enter an integer.");
            scanner.nextLine(); // Consume invalid input
        } catch (IllegalArgumentException e) {
            // This catch handles the exception thrown by the Package constructor
            System.err.println("Error: " + e.getMessage());
        }
    }

    /**
     * Handles the 'List Processed Packages' menu option.
     */
    private void listProcessedPackagesAction() {
        List<Package> processed = hub.getProcessedPackages();
        if (processed.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            System.out.println("\n--- Processed Packages ---");
            for (Package p : processed) {
                System.out.println(p);
            }
            System.out.println("--------------------------");
        }
    }

    /**
     * Handles the 'Show Incoming Queue Size' menu option.
     */
    private void showQueueSizeAction() {
        System.out.println("Incoming Queue Size: " + hub.getQueueSize());
    }

    /**
     * Main method to start the simulation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliverySimulator simulator = new DeliverySimulator();
        simulator.runSimulation();
    }
}
