/*
 * Exam Question #815
 * Generated on: 2025-05-12 16:45:21
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Package Sorting Hub Simulation
 * 
 * **Objective:** Implement a Java program that simulates a simple package sorting hub. Packages arrive, are placed in an incoming queue, processed one by one, and then routed to specific outgoing chutes based on their type. This task requires you to demonstrate proficiency in using core Java collections, control flow, input/output, and exception handling.
 * 
 * **Scenario:**
 * 
 * You are building a simulation for a small package sorting facility. Packages arrive and are placed onto an incoming conveyor belt, which functions as a queue. A worker (simulated by user commands) takes the next package from the belt, identifies its type (Standard, Express, International), and places it into the corresponding outgoing chute. Each chute is a holding area represented by a list of packages.
 * 
 * **Task:**
 * 
 * Implement a Java program that allows a user to interact with the sorting hub through commands.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a `Package` class to represent a package. It should have at least:
 *     *   A unique integer `id`.
 *     *   A `PackageType` (use an `enum` for Standard, Express, International).
 *     *   Appropriate constructor, getters, and a `toString()` method for easy display.
 *     *   Ensure proper encapsulation (private fields).
 * 
 * 2.  **Sorting Hub Class:** Create a `SortingHub` class that manages the sorting process. It should contain:
 *     *   A `Queue<Package>` to represent the incoming conveyor belt (packages waiting to be sorted).
 *     *   `List<Package>` variables (specifically using `ArrayList` implementations) to represent the outgoing chutes for each package type (Standard, Express, International). Use the `List` interface type for variable declarations.
 *     *   A constructor to initialize these collections.
 *     *   Public methods for the following operations:
 *         *   `addPackage(int id, PackageType type)`: Adds a new package to the incoming queue. Validate the `id` (must be positive) and `type` (must be a valid `PackageType`).
 *         *   `processNextPackage()`: Takes the next package from the incoming queue, determines its type, and adds it to the correct outgoing chute list. This method should return `true` if a package was processed, and `false` if the incoming queue was empty.
 *         *   `viewChute(PackageType type)`: Displays the contents of the specified outgoing chute.
 *         *   `viewAllChutes()`: Displays the contents of all outgoing chutes.
 * 
 * 3.  **User Interface:** Implement the `main` method (or a separate class containing `main`) that interacts with the user via the console.
 *     *   Use `java.util.Scanner` to read user commands.
 *     *   Support the following commands (case-insensitive for the command itself, but type arguments should match enum names):
 *         *   `add <id> <type>`: Adds a package. Example: `add 101 STANDARD`
 *         *   `process`: Processes the next package from the incoming queue.
 *         *   `view <type>`: Views a specific chute. Example: `view EXPRESS`
 *         *   `view all`: Views all chutes.
 *         *   `exit`: Terminates the program.
 *     *   Use a `switch` statement to handle different commands.
 *     *   Implement input validation for commands and arguments (e.g., ensuring ID is a number, type is a valid enum).
 * 
 * 4.  **Error Handling:**
 *     *   Use `System.err` to print error messages (e.g., invalid command, invalid package type, invalid ID, processing from an empty queue).
 *     *   Use `System.out` for normal output (e.g., confirmation messages, displaying chute contents).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks. Wrap the main command processing loop or a significant part of the program execution in a `try` block to catch potential runtime errors (like `NumberFormatException` during input parsing, or unexpected issues) and handle them gracefully, printing an error message to `System.err`.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation in the `Package` and `SortingHub` classes.
 *     *   Follow standard Java coding conventions.
 * 
 * **Example Interaction (User Input in Bold):**
 * 
 * ```
 * Welcome to the Package Sorting Hub!
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **add 101 STANDARD**
 * Package 101 (STANDARD) added to incoming queue.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **add 102 EXPRESS**
 * Package 102 (EXPRESS) added to incoming queue.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **add 103 INTERNATIONAL**
 * Package 103 (INTERNATIONAL) added to incoming queue.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **process**
 * Processing package 101 (STANDARD). Moved to Standard Chute.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **process**
 * Processing package 102 (EXPRESS). Moved to Express Chute.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **view STANDARD**
 * --- Standard Chute ---
 * Package ID: 101, Type: STANDARD
 * ----------------------
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **view express**
 * --- Express Chute ---
 * Package ID: 102, Type: EXPRESS
 * ---------------------
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **process**
 * Processing package 103 (INTERNATIONAL). Moved to International Chute.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **process**
 * Incoming queue is empty. No package to process.
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **view all**
 * --- Standard Chute ---
 * Package ID: 101, Type: STANDARD
 * ----------------------
 * --- Express Chute ---
 * Package ID: 102, Type: EXPRESS
 * ---------------------
 * --- International Chute ---
 * Package ID: 103, Type: INTERNATIONAL
 * ---------------------------
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **add abc STANDARD**
 * Error: Invalid command or arguments. Usage: add <id> <type> (id must be positive integer, type must be STANDARD, EXPRESS, or INTERNATIONAL)
 * Enter command (add <id> <type>, process, view <type|all>, exit):
 * **exit**
 * Exiting Sorting Hub simulation.
 * ```
 * 
 * **Evaluation:** Your solution will be evaluated based on correctness, adherence to all requirements (especially the use of specified components), code quality, error handling, and input validation.
 *
 * EXPLANATION:
 * This solution simulates a package sorting hub, demonstrating the required Java concepts in a practical scenario.
 * 
 * 1.  **Package Representation:** The `Package` class encapsulates the `id` and `type` of a package. It uses an `enum` (`PackageType`) for type safety, preventing invalid package types. The constructor validates the ID, and the `toString()` method provides a convenient representation.
 * 
 * 2.  **Sorting Hub Class:** The `SortingHub` class manages the core logic.
 *     *   It uses a `Queue<Package>` (`LinkedList` implementation) for the incoming packages, correctly simulating a first-in, first-out (FIFO) flow. The `offer()` method adds packages, and `poll()` retrieves and removes the next package, returning `null` if the queue is empty.
 *     *   It uses `List<Package>` variables (`ArrayList` implementations) for the outgoing chutes. Declaring them as `List` demonstrates the use of the interface, promoting flexibility. `ArrayList` is suitable here as access and adding elements are common operations.
 *     *   Methods like `addPackage`, `processNextPackage`, `viewChute`, and `viewAllChutes` encapsulate the operations performed by the sorting hub.
 * 
 * 3.  **User Interface (`main` method):**
 *     *   The `main` method in `SortingHubSimulation` handles user interaction.
 *     *   `Scanner` is used to read input lines. `try-with-resources` ensures the `Scanner` is closed automatically.
 *     *   Input lines are split to extract the command and arguments.
 *     *   A `switch` statement is used to dispatch control based on the entered command (`add`, `process`, `view`, `exit`). This effectively demonstrates flow control based on user input.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   **Input Validation:** The code checks the number of arguments for each command. For the `add` command, it attempts to parse the ID as an integer (`Integer.parseInt`) and the type as a `PackageType` enum value (`PackageType.valueOf`). The `Package` constructor itself validates that the ID is positive. The `view` command validates its argument against "all" or valid enum names.
 *     *   **Error Messages (`System.err`):** Invalid commands, incorrect argument counts, invalid IDs (non-numeric or non-positive), and invalid package/view types result in error messages printed to `System.err`. An error is also printed to `System.err` if `process` is called on an empty queue.
 *     *   **Normal Output (`System.out`):** Confirmation messages (package added, processed), chute contents, and the welcome/exit messages are printed to `System.out`.
 *     *   **Class-wide Exception Handling (`try-catch`):** As requested, a `try-catch(Exception e)` block wraps the main `while` loop in the `main` method. This provides a broad safety net to catch any unexpected exceptions that might occur during the command processing, preventing the program from crashing abruptly. Specific exceptions like `NumberFormatException` and `IllegalArgumentException` (caught within the `add` command block) are handled more granularly where they are expected, providing more specific error messages before potentially being caught by the broader `Exception` catch if not fully handled.
 * 
 * 5.  **Best Practices:**
 *     *   Variable and method names are descriptive (`incomingQueue`, `processNextPackage`, `viewChute`).
 *     *   Encapsulation is used in the `Package` and `SortingHub` classes (private fields, public methods).
 *     *   Comments explain the purpose of methods and important code sections.
 *     *   The code structure separates concerns into classes and methods, making it more organized and readable.
 * 
 * This solution effectively utilizes all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a realistic simulation, demonstrating a good understanding of core and intermediate Java programming concepts, including collections, enums, exception handling, and user interaction.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Although NumberFormatException is more likely

// Enum for package types
enum PackageType {
    STANDARD,
    EXPRESS,
    INTERNATIONAL
}

// Represents a package
class Package {
    private final int id;
    private final PackageType type;

    public Package(int id, PackageType type) {
        if (id <= 0) {
            throw new IllegalArgumentException("Package ID must be positive.");
        }
        this.id = id;
        this.type = type;
    }

    public int getId() {
        return id;
    }

    public PackageType getType() {
        return type;
    }

    @Override
    public String toString() {
        return "Package ID: " + id + ", Type: " + type;
    }
}

// Simulates the package sorting hub
class SortingHub {
    private final Queue<Package> incomingQueue;
    private final List<Package> standardChute;
    private final List<Package> expressChute;
    private final List<Package> internationalChute;

    public SortingHub() {
        // Use LinkedList as a common Queue implementation
        this.incomingQueue = new LinkedList<>();
        // Use ArrayList as a common List implementation for chutes
        this.standardChute = new ArrayList<>();
        this.expressChute = new ArrayList<>();
        this.internationalChute = new ArrayList<>();
    }

    /**
     * Adds a package to the incoming queue.
     *
     * @param id   The package ID (must be positive).
     * @param type The package type.
     * @throws IllegalArgumentException if the ID is not positive.
     */
    public void addPackage(int id, PackageType type) {
        // Package constructor already validates ID
        Package newPackage = new Package(id, type);
        incomingQueue.offer(newPackage); // offer is preferred over add for queues
        System.out.println("Package " + id + " (" + type + ") added to incoming queue.");
    }

    /**
     * Processes the next package from the incoming queue, sorting it to the correct chute.
     *
     * @return true if a package was processed, false if the incoming queue was empty.
     */
    public boolean processNextPackage() {
        Package packageToProcess = incomingQueue.poll(); // poll returns null if queue is empty

        if (packageToProcess == null) {
            System.err.println("Incoming queue is empty. No package to process.");
            return false;
        }

        System.out.println("Processing package " + packageToProcess.getId() + " (" + packageToProcess.getType() + ").");

        switch (packageToProcess.getType()) {
            case STANDARD:
                standardChute.add(packageToProcess);
                System.out.println("Moved to Standard Chute.");
                break;
            case EXPRESS:
                expressChute.add(packageToProcess);
                System.out.println("Moved to Express Chute.");
                break;
            case INTERNATIONAL:
                internationalChute.add(packageToProcess);
                System.out.println("Moved to International Chute.");
                break;
            default:
                // This case should ideally not be reached if PackageType enum is used correctly
                System.err.println("Error: Unknown package type encountered for package ID " + packageToProcess.getId());
                // Optionally, add to a 'rejected' list or re-queue
                break;
        }
        return true;
    }

    /**
     * Displays the contents of a specific chute.
     *
     * @param type The type of chute to view.
     */
    public void viewChute(PackageType type) {
        List<Package> chuteToView;
        String chuteName;

        switch (type) {
            case STANDARD:
                chuteToView = standardChute;
                chuteName = "Standard";
                break;
            case EXPRESS:
                chuteToView = expressChute;
                chuteName = "Express";
                break;
            case INTERNATIONAL:
                chuteToView = internationalChute;
                chuteName = "International";
                break;
            default:
                // Should not happen with valid PackageType input
                System.err.println("Error: Invalid chute type specified.");
                return;
        }

        System.out.println("--- " + chuteName + " Chute ---");
        if (chuteToView.isEmpty()) {
            System.out.println("Chute is empty.");
        } else {
            for (Package pkg : chuteToView) {
                System.out.println(pkg);
            }
        }
        System.out.println("----------------------");
    }

    /**
     * Displays the contents of all chutes.
     */
    public void viewAllChutes() {
        System.out.println("\n--- All Chutes ---");
        viewChute(PackageType.STANDARD);
        viewChute(PackageType.EXPRESS);
        viewChute(PackageType.INTERNATIONAL);
        System.out.println("------------------");
    }
}

public class SortingHubSimulation {

    public static void main(String[] args) {
        SortingHub hub = new SortingHub();
        boolean running = true;

        System.out.println("Welcome to the Package Sorting Hub!");
        System.out.println("Enter command (add <id> <type>, process, view <type|all>, exit):");

        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            // Class-wide exception handling wrapping the main loop
            try {
                while (running) {
                    System.out.print("> ");
                    String inputLine = scanner.nextLine().trim();
                    String[] parts = inputLine.split("\\s+"); // Split by one or more spaces
                    String command = parts[0].toLowerCase();

                    switch (command) {
                        case "add":
                            if (parts.length == 3) {
                                try {
                                    int id = Integer.parseInt(parts[1]);
                                    PackageType type = PackageType.valueOf(parts[2].toUpperCase()); // Converts string to enum
                                    hub.addPackage(id, type);
                                } catch (NumberFormatException e) {
                                    System.err.println("Error: Invalid package ID. Must be an integer.");
                                } catch (IllegalArgumentException e) {
                                    // Catches invalid ID (<= 0) from Package constructor or invalid enum type
                                    if (e.getMessage() != null && e.getMessage().contains("No enum constant")) {
                                         System.err.println("Error: Invalid package type. Use STANDARD, EXPRESS, or INTERNATIONAL.");
                                    } else {
                                         System.err.println("Error adding package: " + e.getMessage());
                                    }
                                }
                            } else {
                                System.err.println("Error: Invalid command format. Usage: add <id> <type>");
                            }
                            break;

                        case "process":
                            if (parts.length == 1) {
                                hub.processNextPackage();
                            } else {
                                System.err.println("Error: Invalid command format. Usage: process");
                            }
                            break;

                        case "view":
                            if (parts.length == 2) {
                                String viewArg = parts[1].toLowerCase();
                                if (viewArg.equals("all")) {
                                    hub.viewAllChutes();
                                } else {
                                    try {
                                        PackageType type = PackageType.valueOf(viewArg.toUpperCase());
                                        hub.viewChute(type);
                                    } catch (IllegalArgumentException e) {
                                        System.err.println("Error: Invalid view type. Use STANDARD, EXPRESS, INTERNATIONAL, or ALL.");
                                    }
                                }
                            } else {
                                System.err.println("Error: Invalid command format. Usage: view <type|all>");
                            }
                            break;

                        case "exit":
                            if (parts.length == 1) {
                                running = false;
                                System.out.println("Exiting Sorting Hub simulation.");
                            } else {
                                System.err.println("Error: Invalid command format. Usage: exit");
                            }
                            break;

                        default:
                            System.err.println("Error: Unknown command. Use add, process, view, or exit.");
                            break;
                    }
                }
            } catch (Exception e) {
                // Catch any unexpected runtime exceptions during the command loop
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging unexpected errors
            }
        } // Scanner is automatically closed here by try-with-resources
    }
}
