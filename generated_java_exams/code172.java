/*
 * Exam Question #172
 * Generated on: 2025-05-11 22:25:42
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Objective:** Design and implement a simplified hospital appointment management system that allows users to add patients and doctors, schedule appointments, view schedules, and manage a waiting list for patients who couldn't get their desired slot.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Functionality:**
 *     *   Add new patients with a unique ID and name.
 *     *   Add new doctors with a unique ID, name, and specialty.
 *     *   Schedule appointments for a patient with a specific doctor at a given time slot.
 *     *   If a doctor is already booked at the requested time slot, the patient should be added to a waiting list.
 *     *   View a list of all registered patients.
 *     *   View a list of all registered doctors.
 *     *   View the schedule (list of appointments) for a specific doctor.
 *     *   View the current waiting list.
 *     *   Provide a menu-driven interface for user interaction.
 *     *   Allow the user to exit the system.
 * 
 * 2.  **Required Java Components:** Your solution *must* utilize all of the following:
 *     *   `java.util.Queue` (specifically `LinkedList` or `ArrayDeque` implementing the `Queue` interface) for the waiting list.
 *     *   `java.util.ArrayList` for storing patients, doctors, and appointments.
 *     *   `java.util.List` interface type declaration when storing `ArrayList` instances (e.g., `List<Patient> patients = new ArrayList<>();`).
 *     *   `java.util.Scanner` for reading user input from the console.
 *     *   `switch` statement for handling menu options.
 *     *   `System.err` for outputting error messages (e.g., invalid input, patient/doctor not found, scheduling conflict resulting in waiting list addition).
 *     *   `System.out` for outputting normal information (menu, prompts, success messages, lists).
 *     *   Class-wide exception handling using `try-catch` blocks to gracefully handle unexpected issues during execution (e.g., non-integer input where an integer is expected in the menu).
 * 
 * 3.  **Design and Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Employ meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Implement input validation where necessary (e.g., checking if a patient or doctor ID exists).
 *     *   Ensure proper error handling, distinguishing between user errors (`System.err`) and system errors (`try-catch`).
 *     *   Structure the code into appropriate classes (`Patient`, `Doctor`, `Appointment`, and a main system class like `HospitalSystem`).
 * 
 * **Input Format:**
 * The program should present a menu of options. User input will follow prompts for specific details (IDs, names, specialties, time slots).
 * 
 * **Output Format:**
 * *   Menu and prompts: Use `System.out`.
 * *   Lists of patients, doctors, appointments, waiting list: Use `System.out`.
 * *   Success messages: Use `System.out`.
 * *   Error messages (e.g., "Patient not found!", "Doctor is busy, added to waiting list."): Use `System.err`.
 * *   General system errors (caught by `try-catch`): Print a generic error message to `System.err`.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient
 * 2. Add Doctor
 * 3. Schedule Appointment
 * 4. View All Patients
 * 5. View All Doctors
 * 6. View Doctor Schedule
 * 7. View Waiting List
 * 8. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient added with ID: 1
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Enter specialty: Cardiology
 * Doctor added with ID: 101
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter patient ID: 1
 * Enter doctor ID: 101
 * Enter desired time slot (e.g., '10:00 AM'): 10:00 AM
 * Appointment scheduled for Patient 1 with Doctor 101 at 10:00 AM.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter patient ID: 1
 * Enter doctor ID: 101
 * Enter desired time slot (e.g., '10:00 AM'): 10:00 AM
 * Doctor 101 is already booked at 10:00 AM. Patient 1 added to waiting list. // This goes to System.err
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 7
 * --- Waiting List ---
 * Patient ID: 1, Name: Alice
 * --------------------
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 8
 * Exiting system.
 * ```
 * 
 * Your solution should provide the complete Java code for this system.
 * 
 * **Evaluation Criteria:**
 * *   Correct implementation of all required functionalities.
 * *   Proper usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Clean code structure.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The system is organized into four classes: `Patient`, `Doctor`, `Appointment` (simple data holders with getters and `toString`), and `HospitalSystem` (the main class managing the logic and data structures). This promotes encapsulation.
 * 
 * 2.  **Data Structures:**
 *     *   `List<Patient> patients = new ArrayList<>();`: An `ArrayList` is used to store `Patient` objects, declared using the `List` interface type. This allows dynamic resizing and easy iteration.
 *     *   `List<Doctor> doctors = new ArrayList<>();`: Similar to patients, stores `Doctor` objects in an `ArrayList` via the `List` interface.
 *     *   `List<Appointment> appointments = new ArrayList<>();`: Stores all scheduled `Appointment` objects in an `ArrayList` via the `List` interface.
 *     *   `Queue<Patient> waitingList = new LinkedList<>();`: A `LinkedList` is used, implementing the `Queue` interface, to manage patients who couldn't schedule an appointment immediately. The `offer()` method is used to add to the queue, and iteration is used to view it (`peek()` or `poll()` could be used if patients were processed from the queue).
 * 
 * 3.  **User Input (`Scanner`):** A `Scanner` object reads input from `System.in`. Care is taken to handle the newline character left by `scanner.nextInt()` by calling `scanner.nextLine()` immediately after, preventing issues when subsequently reading strings.
 * 
 * 4.  **Flow Control (`switch`):** The `run()` method contains the main application loop. A `switch` statement is used to dispatch the user's menu choice to the corresponding method (`addPatient`, `addDoctor`, etc.).
 * 
 * 5.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` and `System.out.print()` are used for displaying the menu, prompts, success messages, and lists of patients, doctors, appointments, and the waiting list.
 *     *   `System.err.println()` is specifically used for error messages resulting from user actions or data issues (e.g., patient/doctor not found, scheduling conflict).
 * 
 * 6.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch` block wraps the main `while` loop in the `run()` method. This provides a class-wide mechanism to catch any unexpected runtime exceptions that might occur within the system's operations, printing a generic error message and stack trace to `System.err`.
 *     *   A specific `try-catch (InputMismatchException e)` is used within the loop when reading the menu choice (`scanner.nextInt()`). This handles cases where the user enters non-integer input for the menu, preventing the program from crashing and prompting the user to try again.
 * 
 * 7.  **Business Logic & Validation:**
 *     *   Methods like `findPatientById`, `findDoctorById`, `isDoctorAvailable`, and `isPatientAvailable` encapsulate specific pieces of logic.
 *     *   Input validation includes checking if provided patient or doctor IDs exist before attempting to schedule an appointment or view a schedule. If not found, an error message is printed to `System.err`.
 *     *   The `scheduleAppointment` method checks for conflicts (doctor or patient already booked at the time slot). If a conflict exists, the patient is added to the `waitingList` using `queue.offer()`, and an appropriate message is printed to `System.err`. If no conflict, the appointment is added to the `appointments` list and a success message is printed to `System.out`.
 * 
 * 8.  **Best Practices:**
 *     *   Fields in `Patient`, `Doctor`, `Appointment`, and `HospitalSystem` are `private`. Access is provided via public methods (getters).
 *     *   Variable names (`patients`, `doctors`, `waitingList`, `timeSlot`, `nextPatientId`, etc.) and method names (`addPatient`, `scheduleAppointment`, `viewDoctorSchedule`, etc.) are descriptive.
 *     *   Javadoc comments are included for classes and public methods, explaining their purpose. Inline comments clarify specific logic points.
 *     *   The `List` interface is used for declarations where the specific implementation (`ArrayList`) is not strictly necessary, promoting flexibility.
 *     *   The `Scanner` is closed in a `finally` block to release system resources.
 * 
 * This solution effectively integrates all required components into a functional, albeit simplified, application that simulates a real-world scenario while demonstrating core Java programming skills and best practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int id;
    private String name;

    /**
     * Constructs a new Patient.
     * @param id The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int id, String name) {
        this.id = id;
        this.name = name;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the patient.
     * @return Patient details as a string.
     */
    @Override
    public String toString() {
        return "Patient ID: " + id + ", Name: " + name;
    }
}

/**
 * Represents a doctor in the hospital system.
 */
class Doctor {
    private int id;
    private String name;
    private String specialty;

    /**
     * Constructs a new Doctor.
     * @param id The unique ID of the doctor.
     * @param name The name of the doctor.
     * @param specialty The specialty of the doctor.
     */
    public Doctor(int id, String name, String specialty) {
        this.id = id;
        this.name = name;
        this.specialty = specialty;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getSpecialty() {
        return specialty;
    }

    /**
     * Returns a string representation of the doctor.
     * @return Doctor details as a string.
     */
    @Override
    public String toString() {
        return "Doctor ID: " + id + ", Name: " + name + ", Specialty: " + specialty;
    }
}

/**
 * Represents an appointment in the hospital system.
 */
class Appointment {
    private int id;
    private int patientId;
    private int doctorId;
    private String timeSlot;

    /**
     * Constructs a new Appointment.
     * @param id The unique ID of the appointment.
     * @param patientId The ID of the patient.
     * @param doctorId The ID of the doctor.
     * @param timeSlot The time slot for the appointment (e.g., "10:00 AM").
     */
    public Appointment(int id, int patientId, int doctorId, String timeSlot) {
        this.id = id;
        this.patientId = patientId;
        this.doctorId = doctorId;
        this.timeSlot = timeSlot;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public int getPatientId() {
        return patientId;
    }

    public int getDoctorId() {
        return doctorId;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    /**
     * Returns a string representation of the appointment.
     * @return Appointment details as a string.
     */
    @Override
    public String toString() {
        return "Appointment ID: " + id + ", Patient ID: " + patientId + ", Doctor ID: " + doctorId + ", Time: " + timeSlot;
    }
}

/**
 * The main class managing the hospital system operations.
 */
public class HospitalSystem {
    // Using List interface for flexibility, instantiated with ArrayList
    private List<Patient> patients;
    private List<Doctor> doctors;
    private List<Appointment> appointments;
    // Using Queue interface, instantiated with LinkedList
    private Queue<Patient> waitingList;

    private int nextPatientId = 1;
    private int nextDoctorId = 101; // Starting doctor IDs from 101
    private int nextAppointmentId = 1001; // Starting appointment IDs from 1001

    private Scanner scanner;

    /**
     * Constructs a new HospitalSystem.
     * Initializes the data structures and scanner.
     */
    public HospitalSystem() {
        this.patients = new ArrayList<>();
        this.doctors = new ArrayList<>();
        this.appointments = new ArrayList<>();
        this.waitingList = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
    }

    /**
     * Finds a patient by their ID.
     * @param id The ID of the patient to find.
     * @return The Patient object if found, null otherwise.
     */
    private Patient findPatientById(int id) {
        for (Patient patient : patients) {
            if (patient.getId() == id) {
                return patient;
            }
        }
        return null;
    }

    /**
     * Finds a doctor by their ID.
     * @param id The ID of the doctor to find.
     * @return The Doctor object if found, null otherwise.
     */
    private Doctor findDoctorById(int id) {
        for (Doctor doctor : doctors) {
            if (doctor.getId() == id) {
                return doctor;
            }
        }
        return null;
    }

    /**
     * Checks if a doctor is available at a specific time slot.
     * @param doctorId The ID of the doctor.
     * @param timeSlot The time slot to check.
     * @return true if the doctor is available, false otherwise.
     */
    private boolean isDoctorAvailable(int doctorId, String timeSlot) {
        for (Appointment app : appointments) {
            if (app.getDoctorId() == doctorId && app.getTimeSlot().equalsIgnoreCase(timeSlot)) {
                return false; // Doctor is booked
            }
        }
        return true; // Doctor is available
    }

     /**
     * Checks if a patient already has an appointment at a specific time slot.
     * @param patientId The ID of the patient.
     * @param timeSlot The time slot to check.
     * @return true if the patient is free, false otherwise.
     */
    private boolean isPatientAvailable(int patientId, String timeSlot) {
         for (Appointment app : appointments) {
            if (app.getPatientId() == patientId && app.getTimeSlot().equalsIgnoreCase(timeSlot)) {
                return false; // Patient is booked
            }
        }
        return true; // Patient is available
    }


    /**
     * Adds a new patient to the system.
     */
    public void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        Patient newPatient = new Patient(nextPatientId++, name);
        patients.add(newPatient);
        System.out.println("Patient added with ID: " + newPatient.getId());
    }

    /**
     * Adds a new doctor to the system.
     */
    public void addDoctor() {
        System.out.print("Enter doctor name: ");
        String name = scanner.nextLine();
        System.out.print("Enter specialty: ");
        String specialty = scanner.nextLine();
        Doctor newDoctor = new Doctor(nextDoctorId++, name, specialty);
        doctors.add(newDoctor);
        System.out.println("Doctor added with ID: " + newDoctor.getId());
    }

    /**
     * Schedules a new appointment. If the doctor is busy, adds the patient to the waiting list.
     */
    public void scheduleAppointment() {
        System.out.print("Enter patient ID: ");
        int patientId = scanner.nextInt();
        // Consume the newline left-over
        scanner.nextLine();

        System.out.print("Enter doctor ID: ");
        int doctorId = scanner.nextInt();
        // Consume the newline left-over
        scanner.nextLine();

        System.out.print("Enter desired time slot (e.g., '10:00 AM'): ");
        String timeSlot = scanner.nextLine();

        Patient patient = findPatientById(patientId);
        Doctor doctor = findDoctorById(doctorId);

        if (patient == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found.");
            return;
        }
        if (doctor == null) {
            System.err.println("Error: Doctor with ID " + doctorId + " not found.");
            return;
        }

        // Check if doctor is available AND patient is available at that time
        if (isDoctorAvailable(doctorId, timeSlot) && isPatientAvailable(patientId, timeSlot)) {
            Appointment newAppointment = new Appointment(nextAppointmentId++, patientId, doctorId, timeSlot);
            appointments.add(newAppointment);
            System.out.println("Appointment scheduled for Patient " + patientId +
                               " with Doctor " + doctorId + " at " + timeSlot +
                               ". (Appointment ID: " + newAppointment.getId() + ")");
        } else {
            // If doctor is busy OR patient is busy, add patient to waiting list
             System.err.println("Scheduling conflict: Doctor " + doctorId + " or Patient " + patientId +
                                " is already booked at " + timeSlot + ". Patient " + patientId +
                                " added to waiting list.");
            waitingList.offer(patient); // Add patient to the end of the queue
        }
    }

    /**
     * Views all registered patients.
     */
    public void viewPatients() {
        System.out.println("\n--- All Patients ---");
        if (patients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient patient : patients) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Views all registered doctors.
     */
    public void viewDoctors() {
        System.out.println("\n--- All Doctors ---");
        if (doctors.isEmpty()) {
            System.out.println("No doctors registered yet.");
        } else {
            for (Doctor doctor : doctors) {
                System.out.println(doctor);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Views the schedule for a specific doctor.
     */
    public void viewDoctorSchedule() {
        System.out.print("Enter doctor ID to view schedule: ");
        int doctorId = scanner.nextInt();
        // Consume the newline left-over
        scanner.nextLine();

        Doctor doctor = findDoctorById(doctorId);
        if (doctor == null) {
            System.err.println("Error: Doctor with ID " + doctorId + " not found.");
            return;
        }

        System.out.println("\n--- Schedule for Doctor " + doctor.getName() + " (ID: " + doctorId + ") ---");
        boolean foundAppointments = false;
        for (Appointment app : appointments) {
            if (app.getDoctorId() == doctorId) {
                // Find patient name for display
                Patient patient = findPatientById(app.getPatientId());
                String patientName = (patient != null) ? patient.getName() : "Unknown Patient";
                System.out.println("  Time: " + app.getTimeSlot() + ", Patient: " + patientName + " (ID: " + app.getPatientId() + ")");
                foundAppointments = true;
            }
        }

        if (!foundAppointments) {
            System.out.println("  No appointments scheduled for this doctor.");
        }
        System.out.println("-------------------------------------------------");
    }

    /**
     * Views the current waiting list.
     */
    public void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays the main menu.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient");
        System.out.println("2. Add Doctor");
        System.out.println("3. Schedule Appointment");
        System.out.println("4. View All Patients");
        System.out.println("5. View All Doctors");
        System.out.println("6. View Doctor Schedule");
        System.out.println("7. View Waiting List");
        System.out.println("8. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        boolean running = true;
        // Class-wide try-catch for general exceptions in the main loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip to the next loop iteration
                }

                // Using switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        addDoctor();
                        break;
                    case 3:
                        scheduleAppointment();
                        break;
                    case 4:
                        viewPatients();
                        break;
                    case 5:
                        viewDoctors();
                        break;
                    case 6:
                        viewDoctorSchedule();
                        break;
                    case 7:
                        viewWaitingList();
                        break;
                    case 8:
                        running = false;
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 8.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to standard error
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * The main method to start the Hospital System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
