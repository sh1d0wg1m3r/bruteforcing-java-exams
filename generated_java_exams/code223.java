/*
 * Exam Question #223
 * Generated on: 2025-05-11 22:34:45
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Shop Job Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified command-line application to manage print jobs for a small print shop. The system should handle receiving new print job requests, processing them in the order they were received, and keeping track of available paper types and completed jobs.
 * 
 * **Requirements:**
 * 
 * Implement a Java application that fulfills the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store print jobs that are waiting to be processed (pending jobs).
 *     *   Use a `java.util.ArrayList` to store print jobs that have been completed.
 *     *   Use the `java.util.List` interface to declare variables that reference instances of `ArrayList` where appropriate (e.g., for the completed jobs list and a list of available paper types).
 * 
 * 2.  **Classes:**
 *     *   Create a `PrintJob` class to represent a single print job. It should include attributes for a unique job ID, description, required paper type, quantity, and status (e.g., "PENDING", "COMPLETED"). Ensure proper encapsulation.
 *     *   Create a `PrintShopManager` class to manage the print shop operations. This class should contain the `Queue` of pending jobs, the `List` of completed jobs, and a `List` of predefined available paper types. Implement methods for adding jobs, processing the next job, and retrieving lists of pending/completed jobs and available paper types.
 * 
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Print Job
 *         2.  Process Next Job
 *         3.  List Available Paper Types
 *         4.  List Pending Jobs
 *         5.  List Completed Jobs
 *         0.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 4.  **Input/Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and lists of jobs/paper types.
 *     *   Use `System.err` for displaying *all* error messages (e.g., invalid menu choice, invalid job details, attempting to process when no jobs are pending, input type mismatches).
 * 
 * 5.  **Error Handling and Validation:**
 *     *   Implement input validation for adding new jobs (e.g., ensure description is not empty, paper type is valid from the available list, quantity is positive). If validation fails, use `System.err` to inform the user and do not add the job.
 *     *   Implement logic to handle the case where the user tries to process a job when the pending queue is empty. Use `System.err` to inform the user.
 *     *   Implement robust exception handling using `try-catch` blocks. Structure your main application loop to catch potential `InputMismatchException` when reading numerical input and a general `Exception` to handle any other unexpected errors, printing informative messages to `System.err`. This should be handled in the main execution flow (e.g., within the main loop of your application class).
 * 
 * 6.  **Best Practices:**
 *     *   Follow principles of encapsulation (private fields, public getters/setters/methods).
 *     *   Use meaningful names for classes, variables, and methods.
 *     *   Include basic comments where necessary to explain complex logic.
 *     *   Ensure clean code structure.
 * 
 * **Example Interaction Flow (partial):**
 * 
 * ```
 * Welcome to the Print Shop Management System!
 * --- Print Shop Menu ---
 * 1. Add New Print Job
 * ...
 * 0. Exit
 * -----------------------
 * Enter your choice: 1
 * 
 * --- Add New Print Job ---
 * Enter job description: My Report
 * Available paper types: [A4 Standard, Letter Glossy, Legal Cardstock]
 * Enter paper type: A4 Standard
 * Enter quantity: 50
 * Job successfully added to the queue.
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Pending Jobs ---
 * Job ID: 1, Description: My Report, Paper: A4 Standard, Quantity: 50, Status: PENDING
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 1
 * 
 * --- Add New Print Job ---
 * Enter job description: Another Doc
 * Available paper types: [A4 Standard, Letter Glossy, Legal Cardstock]
 * Enter paper type: Invalid Type
 * Enter quantity: 10
 * Error: Invalid paper type 'Invalid Type'. Available types: [A4 Standard, Letter Glossy, Legal Cardstock]
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 2
 * 
 * --- Processing Next Job ---
 * Processed: Job ID: 1, Description: My Report, Paper: A4 Standard, Quantity: 50, Status: COMPLETED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Pending Jobs ---
 * No jobs pending.
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 5
 * 
 * --- Completed Jobs ---
 * Job ID: 1, Description: My Report, Paper: A4 Standard, Quantity: 50, Status: COMPLETED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 9
 * Error: Invalid menu choice. Please enter a number between 0 and 5.
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number for the menu choice or quantity.
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 0
 * Exiting Print Shop Management System. Goodbye!
 * ```
 * 
 * Your solution should provide the complete, runnable Java code for this system, demonstrating the correct usage of all specified components and adhering to the requirements.
 * 
 * **Note:** You can implement this using a single file with multiple classes or separate files. For an exam, a single file might be easier to manage.
 *
 * EXPLANATION:
 * This solution implements a simplified Print Shop Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `PrintJob`: A simple class encapsulating the data for a single print job. It uses a static `AtomicInteger` for generating unique IDs, ensuring thread-safety although not strictly necessary in this single-threaded console app, it's a good practice for ID generation. It has private fields and public getters, plus a setter for the status, adhering to encapsulation. The `toString()` method provides a convenient way to display job details.
 *     *   `PrintShopManager`: This class holds the core logic and data structures.
 *         *   `pendingJobs`: Declared as `Queue<PrintJob>` and initialized with `new LinkedList<>()`. `LinkedList` implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior suitable for a job queue. Methods like `offer()` (to add) and `poll()` (to retrieve and remove) are used.
 *         *   `completedJobs`: Declared as `List<PrintJob>` and initialized with `new ArrayList<>()`. `ArrayList` is a common implementation of the `List` interface, suitable for storing completed jobs where order might be relevant (order of completion) and random access (`get(index)`) is possible (though not used in this specific list display).
 *         *   `availablePaperTypes`: Declared as `List<String>` and initialized with `new ArrayList<>()`. Again, `ArrayList` is used to store a dynamic list of paper types.
 *         *   Methods like `addJob`, `processNextJob`, `getPendingJobs`, `getCompletedJobs`, and `getAvailablePaperTypes` manage the state and operations. `get` methods return new `ArrayList` instances containing copies of the data structure contents to prevent external modification of the manager's internal state, which is a good defensive programming practice.
 *     *   `PrintShopApp`: The main application class containing the `main` method. This class handles user interaction, menu display, reading input using `Scanner`, orchestrating calls to the `PrintShopManager`, and implementing the central error handling.
 * 
 * 2.  **Required Component Usage:**
 *     *   `java.util.Queue`: Used for `pendingJobs` (implemented by `LinkedList`).
 *     *   `java.util.ArrayList`: Used for `completedJobs` and `availablePaperTypes` (and returned by getter methods).
 *     *   `java.util.List`: Used as the type for `completedJobs` and `availablePaperTypes` variables, demonstrating programming to the interface.
 *     *   `java.util.Scanner`: Used in `PrintShopApp.main` to read user input from `System.in`.
 *     *   `switch` statement: Used in `PrintShopApp.main` to control flow based on the user's menu choice.
 *     *   `System.err`: Used exclusively for printing error messages throughout the `PrintShopApp.main` method.
 *     *   `System.out`: Used for printing the menu, prompts, success messages, and lists of items.
 *     *   Class-wide exception handling with `try-catch`: A large `try-catch` block wraps the main `while` loop in `PrintShopApp.main`. This allows catching exceptions that might occur during input reading (`InputMismatchException`) or general unexpected runtime issues (`Exception`) from any operation triggered within the loop.
 * 
 * 3.  **Input Validation and Error Handling:**
 *     *   Input validation for adding jobs (description, paper type, quantity) is performed. The `PrintShopManager.addJob` method returns a boolean indicating success or failure. The `PrintShopApp.main` method checks this return value and prints specific error messages to `System.err` if validation fails.
 *     *   Attempting to process a job from an empty queue is handled in `PrintShopManager.processNextJob` by using `pendingJobs.poll()`, which returns `null` if the queue is empty. `PrintShopApp.main` checks for this `null` return value and prints an error message to `System.err`.
 *     *   A `try-catch(InputMismatchException e)` block specifically handles cases where the user enters non-integer input when a number is expected (like menu choice or quantity). It prints an error to `System.err` and consumes the invalid input using `scanner.next()` to prevent an infinite loop.
 *     *   A general `catch(Exception e)` block is included as a fallback to catch any other unexpected runtime errors that might occur, printing a generic error message to `System.err`.
 * 
 * 4.  **Best Practices:**
 *     *   Fields in `PrintJob` and `PrintShopManager` are `private`. Access is controlled via public methods.
 *     *   Variable and method names are descriptive (e.g., `pendingJobs`, `processNextJob`, `isPaperTypeAvailable`).
 *     *   Basic comments explain the purpose of classes and key methods.
 *     *   The code is structured logically into separate classes with clear responsibilities.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, object-oriented principles, user interaction, input validation, and robust error handling.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger; // For thread-safe ID generation

// Represents a single print job
class PrintJob {
    private static final AtomicInteger idCounter = new AtomicInteger(1);

    private int id;
    private String description;
    private String paperType;
    private int quantity;
    private String status; // e.g., "PENDING", "COMPLETED"

    public PrintJob(String description, String paperType, int quantity) {
        this.id = idCounter.getAndIncrement();
        this.description = description;
        this.paperType = paperType;
        this.quantity = quantity;
        this.status = "PENDING";
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getPaperType() {
        return paperType;
    }

    public int getQuantity() {
        return quantity;
    }

    public String getStatus() {
        return status;
    }

    // Setter for status
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return String.format("Job ID: %d, Description: %s, Paper: %s, Quantity: %d, Status: %s",
                             id, description, paperType, quantity, status);
    }
}

// Manages print shop operations, including queues and lists of jobs/paper
class PrintShopManager {
    private Queue<PrintJob> pendingJobs;
    private List<PrintJob> completedJobs; // Using List interface, implemented by ArrayList
    private List<String> availablePaperTypes; // Using List interface, implemented by ArrayList

    public PrintShopManager() {
        // LinkedList implements the Queue interface and is suitable for a queue
        this.pendingJobs = new LinkedList<>();
        // ArrayList implements the List interface
        this.completedJobs = new ArrayList<>();
        this.availablePaperTypes = new ArrayList<>();
        // Initialize available paper types
        availablePaperTypes.add("A4 Standard");
        availablePaperTypes.add("Letter Glossy");
        availablePaperTypes.add("Legal Cardstock");
    }

    // Returns a copy of available paper types to prevent external modification
    public List<String> getAvailablePaperTypes() {
        return new ArrayList<>(availablePaperTypes);
    }

    // Helper method to check if a paper type is available
    public boolean isPaperTypeAvailable(String paperType) {
        // Case-insensitive check for user friendliness
        for (String availableType : availablePaperTypes) {
            if (availableType.equalsIgnoreCase(paperType)) {
                return true;
            }
        }
        return false;
    }

    // Adds a new job to the pending queue after validation
    // Returns true if added successfully, false otherwise
    public boolean addJob(String description, String paperType, int quantity) {
        // Basic validation - more detailed checks and error messages are handled by the caller (PrintShopApp)
        if (description == null || description.trim().isEmpty()) {
            return false; // Description validation failure
        }
        if (!isPaperTypeAvailable(paperType)) {
            return false; // Paper type validation failure
        }
        if (quantity <= 0) {
            return false; // Quantity validation failure
        }

        // Find the correct case of the paper type from the available list
        String validatedPaperType = null;
         for (String availableType : availablePaperTypes) {
            if (availableType.equalsIgnoreCase(paperType)) {
                validatedPaperType = availableType;
                break;
            }
        }
        // This check should technically pass due to isPaperTypeAvailable, but added for robustness
        if (validatedPaperType == null) return false;


        PrintJob newJob = new PrintJob(description.trim(), validatedPaperType, quantity);
        pendingJobs.offer(newJob); // offer is the standard Queue method to add, returns boolean
        return true;
    }

    // Processes the next job in the pending queue
    // Returns the processed job if successful, null if queue is empty
    public PrintJob processNextJob() {
        PrintJob jobToProcess = pendingJobs.poll(); // Retrieves and removes the head of the queue
        if (jobToProcess != null) {
            // Simulate processing by changing status
            jobToProcess.setStatus("COMPLETED");
            completedJobs.add(jobToProcess); // Add to the completed list
            return jobToProcess;
        }
        return null; // Indicate no job was processed
    }

    // Returns a copy of the pending jobs list
    public List<PrintJob> getPendingJobs() {
        // Create a new ArrayList from the elements in the queue for listing
        return new ArrayList<>(pendingJobs);
    }

    // Returns a copy of the completed jobs list
    public List<PrintJob> getCompletedJobs() {
        return new ArrayList<>(completedJobs);
    }
}

// Main application class for the Print Shop Management System
public class PrintShopApp {

    public static void main(String[] args) {
        PrintShopManager manager = new PrintShopManager();
        Scanner scanner = new Scanner(System.in);
        int choice = -1;

        System.out.println("Welcome to the Print Shop Management System!");

        // Main application loop with class-wide exception handling
        while (choice != 0) {
            printMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                switch (choice) {
                    case 1: // Add New Job
                        System.out.println("\n--- Add New Print Job ---");
                        System.out.print("Enter job description: ");
                        String description = scanner.nextLine();

                        System.out.println("Available paper types: " + manager.getAvailablePaperTypes());
                        System.out.print("Enter paper type: ");
                        String paperType = scanner.nextLine();

                        System.out.print("Enter quantity: ");
                        int quantity = scanner.nextInt();
                        scanner.nextLine(); // Consume newline

                        // Attempt to add job and check manager's return value for validation status
                        if (manager.addJob(description, paperType, quantity)) {
                            System.out.println("Job successfully added to the queue.");
                        } else {
                            // Provide specific error messages based on validation failures
                            if (description == null || description.trim().isEmpty()) {
                                System.err.println("Error: Job description cannot be empty.");
                            } else if (!manager.isPaperTypeAvailable(paperType)) {
                                System.err.println("Error: Invalid paper type '" + paperType + "'. Available types: " + manager.getAvailablePaperTypes());
                            } else if (quantity <= 0) {
                                System.err.println("Error: Quantity must be a positive number.");
                            } else {
                                // Generic error for unexpected addJob failure
                                System.err.println("Error: Failed to add job due to unknown reason.");
                            }
                        }
                        break;

                    case 2: // Process Next Job
                        System.out.println("\n--- Processing Next Job ---");
                        PrintJob processedJob = manager.processNextJob();
                        if (processedJob != null) {
                            System.out.println("Processed: " + processedJob);
                        } else {
                            // Error message for empty queue
                            System.err.println("Error: No pending jobs in the queue to process.");
                        }
                        break;

                    case 3: // List Available Paper Types
                        System.out.println("\n--- Available Paper Types ---");
                        List<String> paperTypes = manager.getAvailablePaperTypes();
                        if (paperTypes.isEmpty()) {
                             System.out.println("No paper types available.");
                        } else {
                            // Using lambda for concise printing (Java 8+)
                            paperTypes.forEach(System.out::println);
                        }
                        break;

                    case 4: // List Pending Jobs
                        System.out.println("\n--- Pending Jobs ---");
                        List<PrintJob> pending = manager.getPendingJobs();
                        if (pending.isEmpty()) {
                            System.out.println("No jobs pending.");
                        } else {
                            pending.forEach(System.out::println);
                        }
                        break;

                    case 5: // List Completed Jobs
                        System.out.println("\n--- Completed Jobs ---");
                        List<PrintJob> completed = manager.getCompletedJobs();
                        if (completed.isEmpty()) {
                            System.out.println("No jobs completed yet.");
                        } else {
                            completed.forEach(System.out::println);
                        }
                        break;

                    case 0: // Exit
                        System.out.println("Exiting Print Shop Management System. Goodbye!");
                        break;

                    default: // Invalid menu choice
                        System.err.println("Error: Invalid menu choice. Please enter a number between 0 and 5.");
                        break;
                }
            } catch (InputMismatchException e) {
                // Handle cases where user enters non-integer input for numbers
                System.err.println("Error: Invalid input. Please enter a number for the menu choice or quantity.");
                scanner.next(); // Consume the invalid input to prevent an infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(System.err); // Uncomment for detailed debugging if needed
            }
            System.out.println(); // Add a blank line for readability between menu interactions
        }

        scanner.close(); // Close the scanner resource
    }

    // Helper method to print the main menu
    private static void printMenu() {
        System.out.println("--- Print Shop Menu ---");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. List Available Paper Types");
        System.out.println("4. List Pending Jobs");
        System.out.println("5. List Completed Jobs");
        System.out.println("0. Exit");
        System.out.println("-----------------------");
    }
}
