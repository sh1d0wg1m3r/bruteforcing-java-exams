/*
 * Exam Question #420
 * Generated on: 2025-05-11 23:08:33
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Restaurant Order Management System
 * 
 * **Problem Description:**
 * 
 * Design and implement a simplified Restaurant Order Management System. The system should allow staff to manage customer orders placed at tables. Orders are processed in a First-In, First-Out (FIFO) manner.
 * 
 * Your task is to create a Java program that simulates this system. It should present a text-based menu to the user (representing the staff) and perform actions based on their input.
 * 
 * **System Requirements:**
 * 
 * 1.  **Menu:** The restaurant has a fixed menu with item names and prices.
 * 2.  **Orders:** Customers place orders consisting of one or more menu items. Each order should have a unique identifier.
 * 3.  **Order Queue:** Incoming orders are added to a waiting queue.
 * 4.  **Order Processing:** Staff process orders from the front of the queue.
 * 5.  **User Interface:** A command-line interface using `Scanner` for user input.
 * 
 * **Specific Implementation Requirements:**
 * 
 * Your solution **must** use the following Java components:
 * 
 * *   `java.util.Queue`: To manage the waiting orders.
 * *   `java.util.ArrayList`: To store the list of menu items.
 * *   `java.util.List`: As the type for holding menu items (`List<MenuItem>`).
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the main menu options.
 * *   `System.err`: To display error messages (e.g., invalid input, trying to process an empty queue).
 * *   `System.out`: To display normal output (menu, order details, queue status, prompts).
 * *   Class-wide exception handling with `try-catch` blocks: Implement robust error handling, especially for user input and potential runtime issues.
 * 
 * **Functionality:**
 * 
 * The system should present the following menu options:
 * 
 * 1.  **View Menu:** Display the list of available menu items with their prices and indices.
 * 2.  **Place Order:**
 *     *   Prompt the user to enter the index of menu items to add to the order, one by one.
 *     *   Allow the user to add multiple items until they indicate they are finished (e.g., by entering a specific value like -1).
 *     *   Validate user input: Ensure the entered index is a valid integer within the range of menu items. Use `System.err` for invalid input and allow the user to try again for that item.
 *     *   Create a new `Order` object containing the selected items and its total price.
 *     *   Add the newly created `Order` to the waiting queue.
 *     *   Generate a simple unique order ID (a counter is sufficient).
 * 3.  **Process Next Order:**
 *     *   Remove the order at the front of the queue.
 *     *   Display the details of the processed order (ID, items, total price).
 *     *   If the queue is empty, display an error message using `System.err`.
 * 4.  **View Order Queue:**
 *     *   Display the IDs of the orders currently in the queue, in order.
 *     *   If the queue is empty, display a message indicating that.
 * 5.  **Exit:** Terminate the program.
 * 
 * **Best Practices:**
 * 
 * *   Use proper encapsulation (private fields, public getters/setters where appropriate).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 * *   Implement robust input validation and error handling as described above.
 * *   Structure your code into appropriate classes (e.g., `MenuItem`, `Order`, `RestaurantOrderManager`).
 * 
 * **Expected Output:**
 * 
 * *   Clear menu prompts.
 * *   Formatted display of the menu.
 * *   Prompts for placing orders.
 * *   Confirmation messages for placed and processed orders.
 * *   Formatted display of the order queue status.
 * *   Error messages using `System.err` for invalid operations or input.
 * *   Normal output using `System.out`.
 * 
 * **Time Estimate:** 45-60 minutes
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * The provided solution implements a simplified Restaurant Order Management System demonstrating the required Java concepts and best practices.
 * 
 * **Class Structure:**
 * 
 * 1.  `MenuItem`: A simple class representing an item on the menu with a `name` and `price`. It follows encapsulation with private fields and public getters.
 * 2.  `Order`: Represents a customer's order. It has a unique `orderId` (generated using a static counter), a `List` of `MenuItem`s (using `ArrayList` for storage), and calculates the `totalAmount`. It provides methods to add items and retrieve order details.
 * 3.  `RestaurantOrderManager`: This is the main class that orchestrates the system.
 *     *   It holds the restaurant's `menuItems` as a `List<MenuItem>` initialized with an `ArrayList`.
 *     *   It manages the waiting orders using a `Queue<Order>`, specifically a `LinkedList` which implements the `Queue` interface.
 *     *   It contains the `Scanner` for user input.
 *     *   The core logic resides in methods like `displayMenu`, `placeOrder`, `processNextOrder`, `viewOrderQueue`, and `run`.
 * 
 * **Required Component Usage:**
 * 
 * *   **`java.util.Queue`**: Used as the type for `orderQueue` (`Queue<Order> orderQueue = new LinkedList<>();`). The `offer()` method is used to add orders to the tail, and `poll()` is used to remove and retrieve the order from the head (processing the next order).
 * *   **`java.util.ArrayList`**: Used to instantiate the `menuItems` list (`menuItems = new ArrayList<>();`) and to store the list of items within an `Order` object (`items = new ArrayList<>();`).
 * *   **`java.util.List`**: Used as the interface type for `menuItems` (`private List<MenuItem> menuItems;`). This promotes good practice by programming to the interface rather than the specific implementation (`ArrayList`).
 * *   **`java.util.Scanner`**: An instance `scanner` is created to read user input from `System.in`. It's used extensively in the `run` and `placeOrder` methods.
 * *   **`switch` statement**: Used in the `run` method to handle the user's menu choice, directing execution to the appropriate method (`displayMenu`, `placeOrder`, etc.).
 * *   **`System.err`**: Used specifically for displaying error messages, such as "Invalid input," "Invalid item number," or "No orders in the queue to process."
 * *   **`System.out`**: Used for all normal output, including displaying the menu, prompts, confirmation messages, and the queue status.
 * *   **Class-wide exception handling with `try-catch` blocks**:
 *     *   A broad `try-catch` block wraps the main `while` loop in the `run()` method. This serves as a catch-all for any unexpected runtime exceptions that might occur during the program's execution cycle within the `RestaurantOrderManager` class's `run` method.
 *     *   More specific input validation is handled within the `placeOrder` and `run` methods using `scanner.hasNextInt()` and conditional checks, with corresponding `System.err` messages. This is a better approach for expected input issues than relying solely on the broad `try-catch`. The combination fulfills the requirement of using `try-catch` (the broad one in `run`) and robust error handling (specific input checks).
 * 
 * **Flow of Execution:**
 * 
 * 1.  The `main` method in the `RestaurantOrderManager` class creates an instance of `RestaurantOrderManager` and calls its `run()` method.
 * 2.  The `run()` method initializes the menu and queue, then enters a `while` loop wrapped in a `try-catch` block.
 * 3.  Inside the loop, it repeatedly displays the main menu, reads the user's integer choice using `Scanner`, and uses a `switch` statement to call the relevant method based on the choice.
 * 4.  Input validation is performed before the `switch` statement to ensure the input is an integer.
 * 5.  The `placeOrder` method handles adding items to a new order, validating item indices, and adding the completed order to the `orderQueue` using `offer()`.
 * 6.  The `processNextOrder` method checks if the queue is empty and uses `poll()` to remove and display the next order or prints an error.
 * 7.  The `viewOrderQueue` method iterates through the queue (without removing elements) to display the order IDs using a simple `for-each` loop.
 * 8.  The loop continues until the user chooses option 5 (Exit).
 * 9.  The `finally` block ensures the `Scanner` is closed when the `try` block is exited (either normally or due to an exception).
 * 
 * **Best Practices Implementation:**
 * 
 * *   **Encapsulation:** `MenuItem` and `Order` classes have private fields with public getters. `RestaurantOrderManager` manages its internal state (`menuItems`, `orderQueue`, `scanner`) privately.
 * *   **Meaningful Names:** Class names (`MenuItem`, `Order`, `RestaurantOrderManager`), variable names (`menuItems`, `orderQueue`, `totalAmount`), and method names (`displayMenu`, `placeOrder`, `processNextOrder`) are descriptive.
 * *   **Comments and Documentation:** Javadoc comments explain the purpose of classes and methods. Inline comments clarify specific logic.
 * *   **Input Validation:** Specific checks (`hasNextInt`, range checks) are performed for user input in `run` and `placeOrder`.
 * *   **Error Handling:** `System.err` is used for error messages. `isEmpty()` checks prevent errors when processing an empty queue. The broad `try-catch` in `run` handles unexpected exceptions.
 * *   **Clean Code Structure:** The code is divided into logical classes and methods, making it organized and readable.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, control flow, object-oriented principles, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single menu item in the restaurant.
 */
class MenuItem {
    private String name;
    private double price;

    /**
     * Constructs a new MenuItem.
     * @param name The name of the menu item.
     * @param price The price of the menu item.
     */
    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    /**
     * Gets the name of the menu item.
     * @return The item name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the price of the menu item.
     * @return The item price.
     */
    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return String.format("%s (%.2f)", name, price);
    }
}

/**
 * Represents a customer order.
 */
class Order {
    private static int orderCounter = 1; // Simple counter for unique IDs
    private int orderId;
    private List<MenuItem> items;
    private double totalAmount;

    /**
     * Constructs a new Order.
     */
    public Order() {
        this.orderId = orderCounter++;
        this.items = new ArrayList<>(); // Using ArrayList to store items in the order
        this.totalAmount = 0.0;
    }

    /**
     * Adds a menu item to the order.
     * @param item The MenuItem to add.
     */
    public void addItem(MenuItem item) {
        items.add(item);
        totalAmount += item.getPrice();
    }

    /**
     * Gets the unique ID of the order.
     * @return The order ID.
     */
    public int getOrderId() {
        return orderId;
    }

    /**
     * Gets the list of items in the order.
     * @return The list of MenuItems.
     */
    public List<MenuItem> getItems() {
        return items;
    }

    /**
     * Gets the total amount of the order.
     * @return The total price.
     */
    public double getTotalAmount() {
        return totalAmount;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order ID: ").append(orderId).append("\n");
        sb.append("Items:\n");
        for (MenuItem item : items) {
            sb.append("  - ").append(item.getName()).append(" (").append(String.format("%.2f", item.getPrice())).append(")\n");
        }
        sb.append("Total: ").append(String.format("%.2f", totalAmount));
        return sb.toString();
    }
}

/**
 * Manages the restaurant's menu and order queue.
 */
public class RestaurantOrderManager {

    private List<MenuItem> menuItems; // Using List interface type
    private Queue<Order> orderQueue; // Using Queue interface type
    private Scanner scanner;

    /**
     * Constructs a new RestaurantOrderManager.
     * Initializes the menu and the order queue.
     */
    public RestaurantOrderManager() {
        // Initialize menu using ArrayList
        menuItems = new ArrayList<>();
        menuItems.add(new MenuItem("Burger", 8.99));
        menuItems.add(new MenuItem("Pizza", 12.50));
        menuItems.add(new MenuItem("Fries", 3.49));
        menuItems.add(new MenuItem("Soda", 1.99));
        menuItems.add(new MenuItem("Salad", 7.25));

        // Initialize order queue using LinkedList (which implements Queue)
        orderQueue = new LinkedList<>();

        scanner = new Scanner(System.in);
    }

    /**
     * Displays the restaurant menu.
     */
    public void displayMenu() {
        System.out.println("\n--- Menu ---");
        for (int i = 0; i < menuItems.size(); i++) {
            System.out.println(i + ". " + menuItems.get(i));
        }
        System.out.println("------------");
    }

    /**
     * Handles the process of placing a new order.
     */
    public void placeOrder() {
        Order newOrder = new Order();
        System.out.println("\n--- Place New Order (ID: " + newOrder.getOrderId() + ") ---");
        System.out.println("Enter item number to add to order, or -1 to finish.");

        while (true) {
            System.out.print("Enter item number: ");
            int itemIndex = -2; // Initialize with a value outside expected range

            // Input validation for integer
            if (scanner.hasNextInt()) {
                itemIndex = scanner.nextInt();
                scanner.nextLine(); // Consume newline
            } else {
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume invalid input
                continue; // Ask again
            }

            if (itemIndex == -1) {
                break; // Finish order
            }

            // Validate item index against menu size
            if (itemIndex >= 0 && itemIndex < menuItems.size()) {
                MenuItem selectedItem = menuItems.get(itemIndex);
                newOrder.addItem(selectedItem);
                System.out.println(selectedItem.getName() + " added to order.");
            } else {
                System.err.println("Invalid item number. Please enter a number from the menu or -1.");
            }
        }

        if (newOrder.getItems().isEmpty()) {
            System.out.println("Order cancelled as no items were added.");
        } else {
            orderQueue.offer(newOrder); // Add order to the queue
            System.out.println("\nOrder ID " + newOrder.getOrderId() + " placed successfully.");
            System.out.println("Total amount: $" + String.format("%.2f", newOrder.getTotalAmount()));
        }
        System.out.println("-------------------------");
    }

    /**
     * Processes the next order from the queue.
     */
    public void processNextOrder() {
        System.out.println("\n--- Process Next Order ---");
        if (orderQueue.isEmpty()) {
            System.err.println("No orders in the queue to process.");
        } else {
            Order processedOrder = orderQueue.poll(); // Remove and get the head of the queue
            System.out.println("Processing " + processedOrder); // Order.toString() provides details
            System.out.println("Order ID " + processedOrder.getOrderId() + " processed.");
        }
        System.out.println("--------------------------");
    }

    /**
     * Displays the current orders in the queue.
     */
    public void viewOrderQueue() {
        System.out.println("\n--- Current Order Queue ---");
        if (orderQueue.isEmpty()) {
            System.out.println("The order queue is empty.");
        } else {
            System.out.println("Orders waiting (ID):");
            // Iterate through the queue without removing elements
            int count = 0;
            for (Order order : orderQueue) {
                System.out.print(order.getOrderId() + (count < orderQueue.size() - 1 ? " -> " : ""));
                count++;
            }
            System.out.println(); // Newline after queue display
        }
        System.out.println("---------------------------");
    }

    /**
     * Displays the main menu options.
     */
    private void displayMainMenu() {
        System.out.println("\n--- Restaurant Management Menu ---");
        System.out.println("1. View Menu");
        System.out.println("2. Place Order");
        System.out.println("3. Process Next Order");
        System.out.println("4. View Order Queue");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                displayMainMenu();
                int choice = -1;

                // Specific handling for menu choice input
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                } else {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume invalid input
                    continue; // Skip the switch and show menu again
                }

                // Switch statement for flow control
                switch (choice) {
                    case 1:
                        displayMenu();
                        break;
                    case 2:
                        placeOrder();
                        break;
                    case 3:
                        processNextOrder();
                        break;
                    case 4:
                        viewOrderQueue();
                        break;
                    case 5:
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Generic catch-all for unexpected runtime errors
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RestaurantOrderManager manager = new RestaurantOrderManager();
        manager.run();
    }
}
