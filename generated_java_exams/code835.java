/*
 * Exam Question #835
 * Generated on: 2025-05-12 16:48:22
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Logistics Hub Package Processing System**
 * 
 * You are tasked with developing a simplified system for a logistics hub to manage incoming packages. The system should allow operators to add new packages to a processing queue, process the next available package, and view the status of packages waiting or already processed.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Package Representation:** Create a `Package` class with private fields for `packageId` (String), `destinationAddress` (String), `weightKg` (double), and `status` (String, e.g., "Pending", "Processing", "Delivered"). Include a constructor and public getter methods for these fields.
 * 2.  **Logistics Hub Management:** Create a `LogisticsHub` class that manages the packages.
 *     *   It must use a `Queue<Package>` to hold packages waiting to be processed.
 *     *   It must use a `List<Package>` (specifically, an `ArrayList<Package>` assigned to a `List` variable) to hold packages that have been processed.
 *     *   Implement the following methods:
 *         *   `addPackage(Package pkg)`: Adds a package to the processing queue.
 *         *   `processNextPackage()`: Removes the next package from the queue, updates its status to "Processed", and adds it to the processed list. This method should handle the case where the queue is empty.
 *         *   `viewPendingPackages()`: Displays details of all packages currently in the processing queue.
 *         *   `viewProcessedPackages()`: Displays details of all packages in the processed list.
 * 3.  **User Interface:** Implement a command-line interface in a main class (e.g., `LogisticsSystem`).
 *     *   Use `Scanner` to read user input.
 *     *   Present a menu of options to the user (e.g., Add Package, Process Package, View Pending, View Processed, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use `System.out` for all normal output (menu, prompts, package details).
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, trying to process when the queue is empty, invalid package data input).
 * 4.  **Error Handling:** Implement robust error handling.
 *     *   Use `try-catch` blocks to handle potential exceptions, particularly for invalid user input (e.g., non-numeric input for weight, invalid menu options). This should be done in a way that covers the main operational logic or input handling.
 *     *   Validate user input where necessary (e.g., weight must be positive).
 * 5.  **Best Practices:**
 *     *   Ensure proper encapsulation in the `Package` and `LogisticsHub` classes.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style for classes and methods).
 *     *   Structure the code logically into separate classes.
 * 
 * **Execution Flow:**
 * The program should start, display the menu, and repeatedly ask for user input until the 'Exit' option is chosen.
 * 
 * **Example Interaction:**
 * 
 * ```
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: P001
 * Enter Destination Address: 123 Main St
 * Enter Weight (kg): 5.5
 * Package P001 added to the queue.
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: P002
 * Enter Destination Address: 456 Oak Ave
 * Enter Weight (kg): 10.2
 * Package P002 added to the queue.
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Packages ---
 * ID: P001, Dest: 123 Main St, Weight: 5.5kg, Status: Pending
 * ID: P002, Dest: 456 Oak Ave, Weight: 10.2kg, Status: Pending
 * ------------------------
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 2
 * Processing package P001...
 * Package P001 processed.
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Packages ---
 * ID: P002, Dest: 456 Oak Ave, Weight: 10.2kg, Status: Pending
 * ------------------------
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 4
 * --- Processed Packages ---
 * ID: P001, Dest: 123 Main St, Weight: 5.5kg, Status: Processed
 * ------------------------
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Logistics Hub System Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Your solution must provide the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simplified Logistics Hub Package Processing System, demonstrating the required Java concepts in a practical scenario.
 * 
 * 1.  **Package Class:** The `Package` class encapsulates the data for a single package (ID, destination, weight, status) using private fields and provides public getter methods. This adheres to the principle of encapsulation. A `setStatus` method is included to update the package's state. The `toString()` method provides a convenient way to display package information.
 * 
 * 2.  **LogisticsHub Class:**
 *     *   It uses a `Queue<Package>` (`pendingPackages`) implemented by `LinkedList` to manage packages waiting for processing. Queues are suitable here because packages are processed in the order they arrive (FIFO - First-In, First-Out).
 *     *   It uses a `List<Package>` (`processedPackages`) implemented by `ArrayList` to store packages once they have been processed. Using the `List` interface for the variable type demonstrates polymorphism. `ArrayList` is a common and efficient choice for a dynamic list where elements might be added or iterated over.
 *     *   `addPackage()`: Adds a package to the end of the `pendingPackages` queue using `offer()`.
 *     *   `processNextPackage()`: Removes the package at the front of the `pendingPackages` queue using `poll()`. `poll()` is used because it safely returns `null` if the queue is empty, avoiding an exception (`remove()` would throw `NoSuchElementException`). If a package is retrieved, its status is updated, and it's added to the `processedPackages` list. An error message is printed to `System.err` if the queue is empty.
 *     *   `viewPendingPackages()` and `viewProcessedPackages()`: Iterate through the respective collections and print the details of each package using the `Package` class's `toString()` method.
 * 
 * 3.  **LogisticsSystem Class (Main):**
 *     *   The `main` method contains the core application loop.
 *     *   A `Scanner` is used to read user input from the console.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   A `switch` statement is used to handle the user's menu selection, directing the flow to the appropriate `LogisticsHub` method or helper function.
 *     *   `System.out` is used for the menu, prompts, and successful output (like package details).
 *     *   `System.err` is used for error messages, such as invalid menu choices, empty queues, or invalid input during package creation.
 * 
 * 4.  **Error Handling (`try-catch`):**
 *     *   A `try-catch` block is wrapped around the main `while` loop in the `main` method. This provides a form of class-wide exception handling, catching any unexpected exceptions that might propagate up from the operational logic. While specific input validation and error handling are done elsewhere, this outer block acts as a safeguard.
 *     *   More specific `try-catch` blocks are used in `getUserChoice()` and `addPackageFlow()` to handle `InputMismatchException` when the user enters non-numeric data where a number is expected (e.g., for the menu choice or package weight).
 *     *   Input validation is performed in `addPackageFlow()` to check for empty strings (ID, address) and non-positive weight, printing errors to `System.err`.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Achieved in `Package` and `LogisticsHub` by making fields private and providing controlled access via public methods.
 *     *   **Naming:** Variable and method names are descriptive (e.g., `pendingPackages`, `processNextPackage`, `destinationAddress`).
 *     *   **Comments/Documentation:** Javadoc-style comments explain the purpose of classes and methods. Inline comments clarify specific code sections.
 *     *   **Structure:** The code is organized into logical classes (`Package`, `LogisticsHub`, `LogisticsSystem`).
 *     *   **Input Handling:** Careful handling of the `Scanner` (consuming newline characters after reading numbers) prevents common input issues.
 * 
 * This solution effectively integrates all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a functional, albeit simple, logistics simulation, demonstrating practical application and error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package in the logistics system.
 */
class Package {
    private String packageId;
    private String destinationAddress;
    private double weightKg;
    private String status; // e.g., "Pending", "Processed"

    /**
     * Constructs a new Package object.
     *
     * @param packageId          The unique identifier for the package.
     * @param destinationAddress The delivery address.
     * @param weightKg           The weight of the package in kilograms.
     */
    public Package(String packageId, String destinationAddress, double weightKg) {
        this.packageId = packageId;
        this.destinationAddress = destinationAddress;
        this.weightKg = weightKg;
        this.status = "Pending"; // Initial status
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public String getDestinationAddress() {
        return destinationAddress;
    }

    public double getWeightKg() {
        return weightKg;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Updates the status of the package.
     *
     * @param status The new status.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return String.format("ID: %s, Dest: %s, Weight: %.2fkg, Status: %s",
                             packageId, destinationAddress, weightKg, status);
    }
}

/**
 * Manages the flow of packages within the logistics hub.
 */
class LogisticsHub {
    // Queue for packages waiting to be processed (FIFO)
    private Queue<Package> pendingPackages;

    // List for packages that have been processed
    private List<Package> processedPackages;

    /**
     * Constructs a new LogisticsHub.
     * Initializes the pending and processed package collections.
     */
    public LogisticsHub() {
        // Using LinkedList as a Queue implementation
        this.pendingPackages = new LinkedList<>();
        // Using ArrayList assigned to List interface variable
        this.processedPackages = new ArrayList<>();
    }

    /**
     * Adds a new package to the queue of pending packages.
     *
     * @param pkg The package to add.
     */
    public void addPackage(Package pkg) {
        if (pkg != null) {
            pendingPackages.offer(pkg); // offer is generally preferred over add for queues
            System.out.println("Package " + pkg.getPackageId() + " added to the queue.");
        } else {
            System.err.println("Error: Cannot add a null package.");
        }
    }

    /**
     * Processes the next package from the pending queue.
     * Removes the package from the queue, updates its status, and moves it to the processed list.
     * Handles the case where the queue is empty.
     */
    public void processNextPackage() {
        Package nextPackage = pendingPackages.poll(); // poll retrieves and removes, returns null if empty

        if (nextPackage != null) {
            System.out.println("Processing package " + nextPackage.getPackageId() + "...");
            nextPackage.setStatus("Processed");
            processedPackages.add(nextPackage);
            System.out.println("Package " + nextPackage.getPackageId() + " processed.");
        } else {
            System.err.println("Error: No packages in the queue to process.");
        }
    }

    /**
     * Displays details of all packages currently in the pending queue.
     */
    public void viewPendingPackages() {
        System.out.println("--- Pending Packages ---");
        if (pendingPackages.isEmpty()) {
            System.out.println("No packages currently pending.");
        } else {
            // Iterate through the queue without removing elements
            for (Package pkg : pendingPackages) {
                System.out.println(pkg);
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Displays details of all packages in the processed list.
     */
    public void viewProcessedPackages() {
        System.out.println("--- Processed Packages ---");
        if (processedPackages.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            // Iterate through the list
            for (Package pkg : processedPackages) {
                System.out.println(pkg);
            }
        }
        System.out.println("------------------------");
    }
}

/**
 * Main class for the Logistics Hub System application.
 * Handles user interaction and orchestrates operations.
 */
public class LogisticsSystem {

    private static LogisticsHub hub = new LogisticsHub();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        boolean running = true;

        // Class-wide exception handling around the main loop
        try {
            while (running) {
                printMenu();
                int choice = getUserChoice();

                // Using switch statement for menu control
                switch (choice) {
                    case 1:
                        addPackageFlow();
                        break;
                    case 2:
                        hub.processNextPackage();
                        break;
                    case 3:
                        hub.viewPendingPackages();
                        break;
                    case 4:
                        hub.viewProcessedPackages();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        running = false;
                        break;
                    default:
                        // Handled by getUserChoice's try-catch, but good to have a fallback
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main execution flow
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed when the program exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\nLogistics Hub System Menu:");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Pending Packages");
        System.out.println("4. View Processed Packages");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Reads and validates the user's menu choice.
     * Handles non-integer input errors.
     *
     * @return The valid menu choice.
     */
    private static int getUserChoice() {
        int choice = -1;
        try {
            choice = scanner.nextInt();
        } catch (InputMismatchException e) {
            // Catch non-integer input
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.next(); // Consume the invalid input to prevent infinite loop
        }
        // No need for further validation here, switch default handles invalid numbers
        return choice;
    }

    /**
     * Guides the user through adding a new package with input validation.
     */
    private static void addPackageFlow() {
        scanner.nextLine(); // Consume the newline left by nextInt()

        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine();
        if (id == null || id.trim().isEmpty()) {
            System.err.println("Error: Package ID cannot be empty.");
            return;
        }

        System.out.print("Enter Destination Address: ");
        String address = scanner.nextLine();
         if (address == null || address.trim().isEmpty()) {
            System.err.println("Error: Destination address cannot be empty.");
            return;
        }

        double weight = -1;
        System.out.print("Enter Weight (kg): ");
        try {
            weight = scanner.nextDouble();
            if (weight <= 0) {
                System.err.println("Error: Weight must be positive.");
                // No return here, let the flow continue to avoid skipping nextLine() consume
            }
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid weight format. Please enter a number.");
            // Consume the invalid input
            scanner.next();
            // No return here, let the flow continue to avoid skipping nextLine() consume
        } finally {
             // Consume the newline character left by nextDouble() or next()
             // This is crucial to prevent issues with the next nextLine() call in the loop
             scanner.nextLine();
        }

        // Only add package if all inputs were valid
        if (weight > 0 && id != null && !id.trim().isEmpty() && address != null && !address.trim().isEmpty()) {
             Package newPackage = new Package(id, address, weight);
             hub.addPackage(newPackage);
        } else {
             System.err.println("Package not added due to input errors.");
        }
    }
}
