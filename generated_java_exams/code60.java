/*
 * Exam Question #60
 * Generated on: 2025-05-11 22:07:03
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Printer Job Management System**
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple command-line application to manage a printer queue. The system should allow users to add print jobs, view the current queue, process (print) the next job in the queue, and view a list of completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **`PrintJob` Class:** Create a class named `PrintJob` to represent a single print job. It must have the following private fields:
 *     *   `fileName` (String)
 *     *   `user` (String)
 *     *   `pages` (int)
 *     Provide a constructor to initialize these fields and public getter methods for each. Include basic validation in the constructor (e.g., pages > 0, file name and user not empty). Override the `toString()` method for easy printing of job details.
 * 
 * 2.  **`PrinterManager` Class:** Create a class named `PrinterManager` that will handle the main logic of the system.
 *     *   It must maintain a collection of pending print jobs using `java.util.Queue<PrintJob>`.
 *     *   It must maintain a collection of completed print jobs using `java.util.List<PrintJob>`, implemented specifically with `java.util.ArrayList<PrintJob>`.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a `run()` method that acts as the main application loop. This method should:
 *         *   Display a menu of options to the user:
 *             1.  Add Print Job
 *             2.  View Print Queue
 *             3.  Print Next Job
 *             4.  List Completed Jobs
 *             5.  Exit
 *         *   Read the user's choice using `Scanner`.
 *         *   Use a `switch` statement to dispatch actions based on the user's choice.
 *         *   Implement methods corresponding to each menu option:
 *             *   `addJob()`: Prompts the user for file name, user, and number of pages. Creates a `PrintJob` object and adds it to the print queue. Include input validation for pages (must be a positive integer).
 *             *   `viewQueue()`: Displays the details of all jobs currently in the print queue without removing them. If the queue is empty, print a message indicating that.
 *             *   `printNextJob()`: Removes the job at the front of the print queue. If the queue is not empty, move the job to the completed jobs list and print a success message. If the queue is empty, print an error message using `System.err`.
 *             *   `listCompletedJobs()`: Displays the details of all jobs in the completed jobs list. If the list is empty, print a message indicating that.
 *             *   `exit`: Terminates the application gracefully.
 *     *   Implement class-wide exception handling in the `run()` method using a `try-catch` block that wraps the main loop logic to catch potential runtime errors. Specifically handle `InputMismatchException` for invalid numeric input and print errors using `System.err`. Handle `IllegalArgumentException` from `PrintJob` constructor. Use `System.out` for all normal output.
 *     *   Ensure proper resource management, such as closing the `Scanner`.
 * 
 * 3.  **Main Method:** Include a `main` method within the `PrinterManager` class (or a separate class) to create an instance of `PrinterManager` and call its `run()` method to start the application.
 * 
 * 4.  **Best Practices:** Adhere to Java best practices:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments (at least for complex parts or class/method purpose).
 *     *   Input validation where necessary.
 *     *   Proper error handling using `try-catch` and appropriate output streams (`System.out`, `System.err`).
 *     *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input, and printing status or results to the console (`System.out`) or error messages (`System.err`). Examples:
 * 
 * *   Adding a job: Prompts, then prints "Job added to queue: [Job Details]".
 * *   Viewing queue: Prints "--- Print Queue ---" followed by numbered list of jobs, or "The print queue is empty.".
 * *   Printing job: Prints "--- Printing Next Job ---" followed by "Successfully printed: [Job Details]", or prints "Error: The print queue is empty. No jobs to print." to `System.err`.
 * *   Listing completed: Prints "--- Completed Jobs ---" followed by numbered list of jobs, or "No jobs have been completed yet.".
 * *   Invalid menu choice: Prints "Invalid choice. Please enter a number between 1 and 5.".
 * *   Invalid numeric input (e.g., for menu or pages): Prints an error message to `System.err` and allows the user to try again.
 * *   Invalid job details (e.g., empty file name, pages <= 0): Prints an error message to `System.err` (propagated from constructor).
 * 
 * Your solution should be a single Java file containing both classes (or separate files in a package, but provide the combined code).
 *
 * EXPLANATION:
 * This solution implements a simple Printer Job Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a data structure for a print job, encapsulating `fileName`, `user`, and `pages` as private fields.
 *     *   Public getter methods provide controlled access to the data.
 *     *   The constructor includes basic validation (`pages > 0`, `fileName`/`user` not empty) throwing `IllegalArgumentException` for invalid data, promoting data integrity.
 *     *   The `toString()` method provides a convenient way to display job information.
 * 
 * 2.  **`PrinterManager` Class:**
 *     *   This is the core class managing the system's state and logic.
 *     *   **`Queue<PrintJob> printQueue`**: Declared as `Queue` and instantiated as `LinkedList`. A `Queue` is used because print jobs are processed in a First-In, First-Out (FIFO) manner. New jobs are added to the end (`add()` or `offer()`), and jobs are removed from the front (`poll()`).
 *     *   **`List<PrintJob> completedJobs`**: Declared as `List` and instantiated as `ArrayList`. A `List` is suitable for storing completed jobs where order might be relevant for viewing, and random access or iteration is needed. `ArrayList` is a common, efficient implementation for general-purpose lists.
 *     *   **`Scanner scanner`**: Used to read input from `System.in`. It's initialized once and reused. Proper closing is handled in `closeScanner()`.
 *     *   **`run()` Method**: Contains the main application loop (`while(running)`). It repeatedly displays the menu, reads user input, and performs actions.
 *     *   **`switch` Statement**: Used effectively within the `run()` method to direct execution flow based on the integer choice read from the user, providing a clear and concise way to handle multiple menu options.
 *     *   **`try-catch` Blocks**:
 *         *   A large `try-catch(Exception e)` block wraps the core logic within the `run()` loop. This provides a class-wide safety net, catching unexpected runtime errors and preventing the program from crashing abruptly.
 *         *   A specific `catch(InputMismatchException e)` is included *before* the general `Exception` catch. This handles cases where the user enters non-integer input when an integer is expected (like the menu choice or pages). It prints an error to `System.err` and consumes the invalid input from the scanner to prevent an infinite loop.
 *         *   `IllegalArgumentException` thrown by the `PrintJob` constructor (due to invalid job details) is allowed to propagate up and is caught by the main `try-catch` block in `run()`, demonstrating how exceptions can be used to signal errors between methods/classes.
 *     *   **`System.out` and `System.err`**: `System.out.println()` is used for all standard output, such as the menu, prompts, success messages, and list contents. `System.err.println()` is specifically used for printing error messages, such as when the queue is empty during printing or when input validation fails. This follows the convention of separating normal output from error reporting.
 *     *   **Methods (`addJob`, `viewQueue`, `printNextJob`, `listCompletedJobs`)**: Each method encapsulates a specific piece of functionality, making the code modular and easier to understand.
 *         *   `addJob` uses `printQueue.add()`. Includes a specific `try-catch` for `InputMismatchException` when reading pages.
 *         *   `viewQueue` iterates through the `printQueue` using an enhanced for loop, demonstrating how to inspect queue elements without removing them. It checks `printQueue.isEmpty()`.
 *         *   `printNextJob` uses `printQueue.poll()` to remove and retrieve the head of the queue. It checks `printQueue.isEmpty()` and uses `System.err` for the error case. It adds the processed job to the `completedJobs` list using `completedJobs.add()`.
 *         *   `listCompletedJobs` iterates through the `completedJobs` `ArrayList`. It checks `completedJobs.isEmpty()`.
 *     *   **Encapsulation and Naming**: Private fields and public methods are used consistently. Variable and method names are chosen to clearly indicate their purpose (e.g., `printQueue`, `printNextJob`, `completedJobs`).
 *     *   **Input Validation**: Validation is performed both at the data object level (`PrintJob` constructor) and at the input processing level (`addJob` and `run` for numeric input).
 * 
 * This solution effectively integrates the required Java components (`Queue`, `List`, `ArrayList`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating proper object-oriented design, data structure usage, user interaction handling, and robust error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Class representing a single print job
class PrintJob {
    private String fileName;
    private String user;
    private int pages;

    /**
     * Constructor for PrintJob.
     * Validates input to ensure file name and user are not empty, and pages is positive.
     * @param fileName The name of the file to print.
     * @param user The user who submitted the job.
     * @param pages The number of pages in the job.
     * @throws IllegalArgumentException if input is invalid.
     */
    public PrintJob(String fileName, String user, int pages) {
        if (fileName == null || fileName.trim().isEmpty()) {
            throw new IllegalArgumentException("File name cannot be empty.");
        }
        if (user == null || user.trim().isEmpty()) {
             throw new IllegalArgumentException("User name cannot be empty.");
        }
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        this.fileName = fileName.trim();
        this.user = user.trim();
        this.pages = pages;
    }

    // Public getter methods for accessing job details
    public String getFileName() {
        return fileName;
    }

    public String getUser() {
        return user;
    }

    public int getPages() {
        return pages;
    }

    // Provides a user-friendly string representation of the job
    @Override
    public String toString() {
        return "Job [File: " + fileName + ", User: " + user + ", Pages: " + pages + "]";
    }
}

// Class managing the printer queue and completed jobs
public class PrinterManager {
    // Queue to hold jobs waiting to be printed (FIFO)
    private Queue<PrintJob> printQueue;
    // List to hold jobs that have been printed
    private List<PrintJob> completedJobs;
    // Scanner for reading user input
    private Scanner scanner;
    // Flag to control the main application loop
    private boolean running;

    /**
     * Constructor initializes the queue, list, and scanner.
     */
    public PrinterManager() {
        // LinkedList is a common implementation for the Queue interface
        this.printQueue = new LinkedList<>();
        // ArrayList is used as the specific implementation for the List interface
        this.completedJobs = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.running = true;
    }

    /**
     * Starts the main application loop, displaying menu and processing user input.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("--- Printer Job Management System ---");
        // Main loop continues as long as 'running' is true
        while (running) {
            try {
                displayMenu();
                System.out.print("Enter choice: ");
                // Read the integer choice
                int choice = scanner.nextInt();
                // Consume the rest of the line (the newline character)
                scanner.nextLine();

                // Use switch statement to handle different menu options
                switch (choice) {
                    case 1:
                        addJob();
                        break;
                    case 2:
                        viewQueue();
                        break;
                    case 3:
                        printNextJob();
                        break;
                    case 4:
                        listCompletedJobs();
                        break;
                    case 5:
                        running = false; // Set running to false to exit the loop
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Handle invalid integer choices
                        System.out.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Catch specific exception for non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                // Consume the invalid input to prevent an infinite loop
                scanner.nextLine();
            } catch (IllegalArgumentException e) {
                 // Catch validation errors from PrintJob constructor or addJob method
                 System.err.println("Input Error: " + e.getMessage());
            }
            catch (Exception e) {
                // Catch any other unexpected exceptions during the loop execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: print stack trace for debugging purposes in an exam
                 e.printStackTrace();
            }
            // Add a blank line for better readability between menu interactions
            System.out.println();
        }
        // Ensure scanner is closed when the application exits
        closeScanner();
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("Menu:");
        System.out.println("1. Add Print Job");
        System.out.println("2. View Print Queue");
        System.out.println("3. Print Next Job");
        System.out.println("4. List Completed Jobs");
        System.out.println("5. Exit");
    }

    /**
     * Prompts user for job details and adds a new job to the print queue.
     * Includes validation for the number of pages input.
     */
    private void addJob() {
        System.out.println("--- Add New Print Job ---");
        System.out.print("Enter file name: ");
        String fileName = scanner.nextLine();

        System.out.print("Enter user name: ");
        String user = scanner.nextLine();

        System.out.print("Enter number of pages: ");
        int pages = 0;
        try {
             // Read pages as an integer
             pages = scanner.nextInt();
             // Consume the rest of the line (the newline character)
             scanner.nextLine();
        } catch (InputMismatchException e) {
            // Handle non-integer input specifically for pages
            System.err.println("Error: Invalid input for pages. Please enter a whole number.");
            // Consume invalid input to prevent infinite loop
            scanner.nextLine();
            return; // Exit the method if pages input is invalid
        }

        try {
            // Create a new PrintJob object; constructor validates pages > 0 and non-empty strings
            PrintJob job = new PrintJob(fileName, user, pages);
            // Add the job to the end of the queue using the add method
            printQueue.add(job);
            System.out.println("Job added to queue: " + job);
        } catch (IllegalArgumentException e) {
            // Let the main try-catch block in run() handle the IllegalArgumentException
            throw e;
        }
    }

    /**
     * Displays all jobs currently in the print queue without removing them.
     */
    private void viewQueue() {
        System.out.println("--- Print Queue ---");
        if (printQueue.isEmpty()) {
            System.out.println("The print queue is empty.");
        } else {
            // Iterate through the queue elements without removing them (using enhanced for loop)
            int i = 1;
            for (PrintJob job : printQueue) {
                System.out.println(i++ + ". " + job);
            }
        }
    }

    /**
     * Removes the next job from the queue and adds it to the completed list.
     * Handles the case where the queue is empty.
     */
    private void printNextJob() {
        System.out.println("--- Printing Next Job ---");
        if (printQueue.isEmpty()) {
            // Print error message to System.err if queue is empty
            System.err.println("Error: The print queue is empty. No jobs to print.");
        } else {
            // Remove and retrieve the head of the queue using the poll method
            PrintJob nextJob = printQueue.poll();
            // Add the completed job to the ArrayList
            completedJobs.add(nextJob);
            System.out.println("Successfully printed: " + nextJob);
        }
    }

    /**
     * Displays all jobs that have been moved to the completed list.
     */
    private void listCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobs.isEmpty()) {
            System.out.println("No jobs have been completed yet.");
        } else {
            // Iterate through the ArrayList of completed jobs
            int i = 1;
            for (PrintJob job : completedJobs) {
                System.out.println(i++ + ". " + job);
            }
        }
    }

    /**
     * Closes the scanner resource.
     */
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
        }
    }

    /**
     * Main method to start the application.
     */
    public static void main(String[] args) {
        PrinterManager manager = new PrinterManager();
        manager.run(); // Start the main application loop
    }
}
