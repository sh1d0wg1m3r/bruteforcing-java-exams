/*
 * Exam Question #1014
 * Generated on: 2025-05-12 17:12:47
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Exam Task: Hospital Clinic Patient Flow Management System**
 * 
 * You are tasked with building a simple command-line application to manage patient flow in a hospital clinic. The system should allow staff to add new patients to a waiting list, call the next patient in line for consultation, and view the current waiting list or a list of patients who have already been processed.
 * 
 * Your solution must demonstrate a strong understanding of core Java data structures, control flow, input/output, and exception handling.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (String), `name` (String), and `reasonForVisit` (String). Include a constructor, public getter methods for all fields, and a meaningful `toString()` method.
 * 2.  **Clinic Management Class:** Create a `ClinicManagementSystem` class that will contain the main logic.
 * 3.  **Data Structures:**
 *     *   Use a `java.util.Queue<Patient>` to manage the waiting list of patients. Patients should be processed in the order they arrive (First-In, First-Out).
 *     *   Use a `java.util.List<Patient>` (specifically an `ArrayList`) to store patients who have been successfully processed (called from the waiting list).
 * 4.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         *   1. Add New Patient
 *         *   2. Call Next Patient
 *         *   3. List Waiting Patients
 *         *   4. List Processed Patients
 *         *   5. Exit
 *     *   Read the user's menu choice.
 *     *   Use a `switch` statement to handle the different menu options.
 *     *   Prompt the user for necessary details when adding a patient (ID, Name, Reason).
 * 5.  **System Output:**
 *     *   Use `System.out` for displaying the menu, prompts, patient lists, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, waiting list is empty).
 * 6.  **Error Handling:**
 *     *   Implement robust exception handling using `try-catch` blocks.
 *     *   Handle potential issues with user input (e.g., non-integer input for menu choice).
 *     *   Handle the case where the user tries to "Call Next Patient" when the waiting list is empty.
 *     *   Implement class-wide or method-specific exception handling where appropriate.
 * 7.  **Best Practices:**
 *     *   Ensure proper encapsulation in the `Patient` class.
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain complex parts of the code.
 *     *   Validate user input where necessary (e.g., basic checks for empty strings for patient details).
 *     *   Structure the code logically with separate methods for different actions.
 * 
 * **Expected Output:**
 * 
 * The program should run in a loop, presenting the menu, accepting input, performing the requested action, and providing feedback. Examples:
 * 
 * *   Adding a patient: Prompt for details, confirm patient added.
 * *   Calling next: Announce which patient is being called, or report the waiting list is empty.
 * *   Listing waiting: Display details of all patients in the queue, or report the list is empty.
 * *   Listing processed: Display details of all patients in the processed list, or report the list is empty.
 * *   Invalid input: Display an error message on `System.err`.
 * *   Exit: Terminate the program gracefully.
 * 
 * Your solution should be contained within a single `.java` file for simplicity in an exam setting.
 * 
 * ```java
 * // Your code goes here
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.out`, `System.err`, `try-catch`.
 * *   Proper implementation of the `Patient` class with encapsulation.
 * *   Correct implementation of clinic operations (add, call, list).
 * *   Effective error handling and input validation.
 * *   Clean code structure, meaningful names, and comments.
 * *   Adherence to all specified requirements.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Clinic Patient Flow Management System, demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:**
 *     *   Represents a patient with `patientId`, `name`, and `reasonForVisit`.
 *     *   Fields are `private` for encapsulation.
 *     *   Public getter methods provide controlled access to the data.
 *     *   The constructor includes basic validation to ensure patient details are not empty, throwing an `IllegalArgumentException` if they are.
 *     *   `toString()` provides a convenient string representation for printing.
 * 
 * 2.  **`ClinicManagementSystem` Class:**
 *     *   This is the main class containing the application logic.
 *     *   **Data Structures:**
 *         *   `waitingList`: Declared as `Queue<Patient>` and initialized with a `LinkedList`. `LinkedList` is a common implementation of `Queue` that supports efficient adding and removing from the ends, suitable for a waiting list.
 *         *   `processedPatients`: Declared as `List<Patient>` and initialized with an `ArrayList`. `ArrayList` is a standard dynamic array implementation of `List`, suitable for storing a collection of processed patients where order might be maintained and random access is possible (though not explicitly used here, it's a common List use case). Using the `List` interface for the variable type is good practice, promoting flexibility.
 *     *   **User Input:**
 *         *   A `Scanner` object is used to read input from `System.in`.
 *     *   **Main Loop (`run` method):**
 *         *   The `run` method contains the main application loop (`while(running)`).
 *         *   It presents a menu, gets user input, and uses a `switch` statement to dispatch to the appropriate method based on the user's choice.
 *     *   **`switch` Statement:**
 *         *   Handles the five menu options, calling dedicated methods (`addPatient`, `callNextPatient`, etc.) for each valid choice.
 *         *   Includes a `default` case to handle invalid integer inputs.
 *     *   **Input/Output:**
 *         *   `System.out.println` and `System.out.print` are used for displaying the menu, prompts, success messages, and patient lists.
 *         *   `System.err.println` is used specifically for displaying error messages, such as invalid menu choices or issues during patient operations.
 *     *   **Error Handling (`try-catch`):**
 *         *   A broad `try-catch` block wraps the main `while` loop in the `run` method. This demonstrates a class-wide approach to catching unexpected exceptions that might occur during the application's execution, preventing the program from crashing abruptly.
 *         *   Specific `try-catch` blocks are used in `getUserChoice` to handle `InputMismatchException` (when the user enters non-integer input) and in `addPatient` to catch `IllegalArgumentException` from the `Patient` constructor's validation.
 *         *   The `getUserChoice` method consumes the invalid input using `scanner.next()` to prevent an infinite loop when non-integer input is provided.
 *         *   The `finally` block in `run` ensures the `Scanner` is closed when the application exits or encounters an unexpected error.
 *     *   **Methods:**
 *         *   `printMenu()`: Displays the available options to the user.
 *         *   `getUserChoice()`: Reads the user's integer input for the menu choice, handling `InputMismatchException`.
 *         *   `addPatient()`: Prompts for patient details, creates a `Patient` object, and uses `waitingList.offer()` to add it to the queue. Includes a `try-catch` for the `Patient` constructor's validation error.
 *         *   `callNextPatient()`: Checks if the `waitingList` is empty. If not, it uses `waitingList.poll()` to remove the patient at the front of the queue, adds them to the `processedPatients` list, and reports which patient was called. Handles the empty queue case gracefully.
 *         *   `listWaitingPatients()`: Iterates through the `waitingList` (using a for-each loop, which doesn't remove elements) and prints the details of each patient. Handles the empty list case.
 *         *   `listProcessedPatients()`: Iterates through the `processedPatients` list and prints the details of each patient. Handles the empty list case.
 * 
 * This solution effectively combines various core Java features (`Queue`, `List`/`ArrayList`, `Scanner`, `switch`, `System.out`/`System.err`, `try-catch`) within a practical scenario, following good programming practices like encapsulation, clear naming, and basic input validation/error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

// 1. Patient Representation
class Patient {
    private String patientId;
    private String name;
    private String reasonForVisit;

    public Patient(String patientId, String name, String reasonForVisit) {
        // Basic input validation
        if (patientId == null || patientId.trim().isEmpty() ||
            name == null || name.trim().isEmpty() ||
            reasonForVisit == null || reasonForVisit.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient details cannot be empty.");
        }
        this.patientId = patientId.trim();
        this.name = name.trim();
        this.reasonForVisit = reasonForVisit.trim();
    }

    // Public getter methods
    public String getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public String getReasonForVisit() {
        return reasonForVisit;
    }

    @Override
    public String toString() {
        return "Patient [ID=" + patientId + ", Name=" + name + ", Reason='" + reasonForVisit + "']";
    }
}

// 2. Clinic Management Class
public class ClinicManagementSystem {

    // Data Structures
    private Queue<Patient> waitingList; // 3. Use Queue for waiting list
    private List<Patient> processedPatients; // 3. Use List (ArrayList) for processed patients
    private Scanner scanner; // 4. Use Scanner for user input

    public ClinicManagementSystem() {
        // Use LinkedList as an implementation of Queue
        this.waitingList = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.processedPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    // Main method to run the system
    public static void main(String[] args) {
        ClinicManagementSystem clinic = new ClinicManagementSystem();
        clinic.run();
    }

    // Main loop for the system
    public void run() {
        boolean running = true;
        // 6. Class-wide exception handling with try-catch
        try {
            while (running) {
                printMenu();
                int choice = getUserChoice();

                // 4. Use switch statement for flow control
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        callNextPatient();
                        break;
                    case 3:
                        listWaitingPatients();
                        break;
                    case 4:
                        listProcessedPatients();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Clinic Management System. Goodbye!");
                        break;
                    default:
                        // 5. Use System.err for error messages
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Prints the main menu
    private void printMenu() {
        // 5. Use System.out for normal output
        System.out.println("\n--- Clinic Management Menu ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Call Next Patient");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Gets user's menu choice with input validation
    private int getUserChoice() {
        try {
            // 4. Use Scanner to read input
            return scanner.nextInt();
        } catch (InputMismatchException e) {
            // Handle non-integer input
            System.err.println("Invalid input. Please enter a number."); // 5. System.err for error
            scanner.next(); // Consume the invalid input to prevent infinite loop
            return -1; // Return an invalid value to trigger default case in switch
        }
    }

    // Adds a new patient to the waiting list
    private void addPatient() {
        // Consume the newline character left by nextInt()
        scanner.nextLine();

        System.out.println("\n--- Add New Patient ---");
        System.out.print("Enter Patient ID: ");
        String id = scanner.nextLine();
        System.out.print("Enter Patient Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Reason for Visit: ");
        String reason = scanner.nextLine();

        try {
            Patient newPatient = new Patient(id, name, reason);
            waitingList.offer(newPatient); // Add patient to the end of the queue
            System.out.println("Patient added to waiting list: " + newPatient.getName()); // 5. System.out for success
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding patient: " + e.getMessage()); // 5. System.err for validation error
        } catch (NoSuchElementException e) {
             // This catch block is less likely for offer(), but good practice for queue operations
             System.err.println("Error adding patient: Problem with input stream."); // 5. System.err for error
        }
    }

    // Calls the next patient from the waiting list
    private void callNextPatient() {
        System.out.println("\n--- Call Next Patient ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty. No patients to call."); // 5. System.out for info
        } else {
            // Use poll() to remove and retrieve the head of the queue
            Patient nextPatient = waitingList.poll();
            if (nextPatient != null) {
                 processedPatients.add(nextPatient); // Add to processed list
                 System.out.println("Calling next patient: " + nextPatient.getName() + " (ID: " + nextPatient.getPatientId() + ")"); // 5. System.out for action
            } else {
                // This case should theoretically not happen if isEmpty() is false, but good defensive programming
                 System.err.println("Error: Could not retrieve patient from waiting list."); // 5. System.err for error
            }
        }
    }

    // Lists all patients currently in the waiting list
    private void listWaitingPatients() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty."); // 5. System.out for info
        } else {
            // Iterate through the queue without removing elements
            int count = 1;
            for (Patient patient : waitingList) {
                System.out.println(count++ + ". " + patient); // 5. System.out for list item
            }
        }
    }

    // Lists all patients who have been processed
    private void listProcessedPatients() {
        System.out.println("\n--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet."); // 5. System.out for info
        } else {
            // Iterate through the list
            int count = 1;
            for (Patient patient : processedPatients) {
                System.out.println(count++ + ". " + patient); // 5. System.out for list item
            }
        }
    }
}
