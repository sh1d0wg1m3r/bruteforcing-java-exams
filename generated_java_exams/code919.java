/*
 * Exam Question #919
 * Generated on: 2025-05-12 16:59:37
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam - Patient Queue Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Patient Queue Management System for a small clinic. The system should manage a list of scheduled patients and a waiting queue for patients who have checked in.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of all patients scheduled for the day. Use a `java.util.List` interface reference backed by a `java.util.ArrayList` implementation.
 *     *   Maintain a queue of patients who have checked in and are waiting to be seen. Use a `java.util.Queue` interface reference backed by an appropriate implementation (e.g., `java.util.LinkedList`).
 * 
 * 2.  **Patient Class:**
 *     *   Create a `Patient` class with private fields: `patientId` (int), `name` (String), and `status` (String, e.g., "SCHEDULED", "CHECKED_IN", "SERVED").
 *     *   Include a constructor to initialize `patientId` and `name`, setting the initial status to "SCHEDULED".
 *     *   Provide public getter methods for `patientId`, `name`, and `status`.
 *     *   Include a public method `setStatus(String status)` to update the patient's status.
 *     *   Override the `toString()` method to provide a useful string representation of the patient (e.g., "ID: [id], Name: [name], Status: [status]").
 * 
 * 3.  **PatientQueueManager Class:**
 *     *   Create a `PatientQueueManager` class to encapsulate the system logic.
 *     *   It should have private fields for the scheduled patients list and the waiting queue.
 *     *   Implement the following public methods:
 *         *   `addScheduledPatient(Patient patient)`: Adds a patient to the scheduled list.
 *         *   `checkInPatient(int patientId)`: Finds a patient by ID in the scheduled list. If found and status is "SCHEDULED", change status to "CHECKED_IN" and add them to the waiting queue. If not found or already checked in, print an appropriate error message to `System.err`.
 *         *   `callNextPatient()`: Removes the patient at the front of the waiting queue. If the queue is not empty, change their status to "SERVED" and return the patient. If the queue is empty, print a message to `System.err` and return `null`.
 *         *   `listScheduledPatients()`: Prints the details of all scheduled patients to `System.out`.
 *         *   `listWaitingQueue()`: Prints the details of patients currently in the waiting queue to `System.out`.
 * 
 * 4.  **User Interaction:**
 *     *   Implement a command-line interface using `java.util.Scanner` in a `main` method (preferably in the `PatientQueueManager` class or a separate main class).
 *     *   Present a menu of options to the user:
 *         1.  Check In Patient
 *         2.  Call Next Patient
 *         3.  List All Scheduled Patients
 *         4.  List Waiting Queue
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's choice.
 *     *   Prompt the user for necessary input (e.g., patient ID for check-in).
 *     *   Handle invalid menu choices using `System.err`.
 * 
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main interaction loop to gracefully handle potential runtime errors, specifically `java.util.InputMismatchException` if the user enters non-integer input when an integer is expected. Print an error message to `System.err` and clear the invalid input from the scanner.
 *     *   Use `System.err` for all error messages (invalid input, patient not found, queue empty, etc.).
 *     *   Use `System.out` for normal output (menu, prompts, success messages, list displays).
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation (`private` fields, `public` methods).
 *     *   Validate user input where applicable (e.g., checking if a patient ID exists).
 * 
 * **Initial Data:**
 * 
 * Populate the `PatientQueueManager` with a few initial `Patient` objects in the scheduled list upon creation.
 * 
 * **Expected Output:**
 * 
 * The system should run interactively, displaying the menu, processing user commands, and providing feedback via `System.out` or `System.err` as specified. Listing options should show the current state of patients and queues.
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * Patient Queue Management System
 * -------------------------------
 * 1. Check In Patient
 * 2. Call Next Patient
 * 3. List All Scheduled Patients
 * 4. List Waiting Queue
 * 5. Exit
 * Enter your choice: 3
 * --- Scheduled Patients ---
 * ID: 101, Name: Alice, Status: SCHEDULED
 * ID: 102, Name: Bob, Status: SCHEDULED
 * ID: 103, Name: Charlie, Status: SCHEDULED
 * --------------------------
 * Enter your choice: 1
 * Enter Patient ID to check in: 101
 * Patient 101 (Alice) checked in.
 * Enter your choice: 4
 * --- Waiting Queue ---
 * ID: 101, Name: Alice, Status: CHECKED_IN
 * ---------------------
 * Enter your choice: 1
 * Enter Patient ID to check in: 999
 * Error: Patient with ID 999 not found.
 * Enter your choice: 1
 * Enter Patient ID to check in: 101
 * Error: Patient 101 (Alice) is already checked in.
 * Enter your choice: 2
 * Calling next patient...
 * Patient 101 (Alice) is now being served.
 * Enter your choice: 4
 * --- Waiting Queue ---
 * (Queue is empty)
 * ---------------------
 * Enter your choice: 2
 * Error: Waiting queue is empty. Cannot call next patient.
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a basic Patient Queue Management System demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:** This class is a simple Plain Old Java Object (POJO) representing a patient. It encapsulates the `patientId`, `name`, and `status` using private fields and provides public getters and a setter for the status. The `toString()` method offers a convenient way to print patient information. This fulfills the requirement for proper encapsulation and meaningful names.
 * 
 * 2.  **`PatientQueueManager` Class:** This is the core class managing the system's state and logic.
 *     *   **Data Structures:** It uses a `List<Patient>` called `scheduledPatients` implemented by `ArrayList` to store all patients initially scheduled. It uses a `Queue<Patient>` called `waitingQueue` implemented by `LinkedList` to manage patients who have checked in, adhering to the FIFO (First-In, First-Out) principle of a queue. These fulfill the `List`, `ArrayList`, and `Queue` requirements.
 *     *   **Constructor:** Initializes the data structures and populates the `scheduledPatients` list with some initial data.
 *     *   **Methods:**
 *         *   `addScheduledPatient`: A simple method to add patients (used initially).
 *         *   `checkInPatient`: Iterates through the `scheduledPatients` list to find the patient by ID. If found and in the correct status ("SCHEDULED"), it updates the status and adds the patient to the `waitingQueue` using `offer()`. Error messages are printed to `System.err` if the patient isn't found or is already checked in. This demonstrates list traversal and queue insertion (`offer`).
 *         *   `callNextPatient`: Uses `waitingQueue.poll()` to remove and retrieve the patient at the front of the queue. If the queue was empty (`poll()` returns `null`), it prints an error to `System.err`. Otherwise, it updates the patient's status to "SERVED". This demonstrates queue removal (`poll`) and handling an empty queue.
 *         *   `listScheduledPatients` and `listWaitingQueue`: Iterate through the respective data structures and print patient details using `System.out` and the `Patient` class's `toString()` method. `listWaitingQueue` iterates without removing elements.
 *     *   **`runSystem` Method:** Contains the main application loop.
 *         *   It uses `Scanner` to read user input from `System.in`.
 *         *   It displays a menu (`displayMenu`).
 *         *   It uses a `while` loop to keep the system running until the user chooses to exit.
 *         *   **Exception Handling (`try-catch`):** A `try-catch(InputMismatchException e)` block is placed around the `scanner.nextInt()` call for reading the main menu choice. This is a key part of the "class-wide" exception handling requirement (handling input errors within the main operational class). If the user enters non-integer input, the `catch` block catches the exception, prints an error to `System.err`, and consumes the invalid input line using `scanner.nextLine()` to prevent an infinite loop. Similar `try-catch` blocks are used specifically for reading the patient ID during check-in.
 *         *   **Flow Control (`switch`):** A `switch` statement is used to process the user's valid integer choice, directing execution to the appropriate method (`checkInPatient`, `callNextPatient`, etc.) or handling the exit case. An invalid choice is handled by the `default` case, printing an error to `System.err`. This fulfills the `switch` requirement.
 *         *   `System.out` is used for the menu, prompts, success messages, and listing patients. `System.err` is used exclusively for error conditions. This satisfies the `System.out` and `System.err` requirements.
 * 
 * 3.  **`main` Method:** A standard `main` method creates an instance of `PatientQueueManager` and calls its `runSystem` method to start the application, fulfilling the entry point requirement.
 * 
 * This solution integrates the required components into a functional system, demonstrating how different data structures and control flow mechanisms can be used together to solve a practical problem while incorporating essential programming practices like encapsulation, error handling, and input validation. The use of `List` and `Queue` interfaces promotes good design, allowing for potential changes in the underlying implementations later if needed.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the system
class Patient {
    private int patientId;
    private String name;
    private String status; // e.g., "SCHEDULED", "CHECKED_IN", "SERVED"

    /**
     * Constructs a new Patient.
     *
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
        this.status = "SCHEDULED"; // Initial status
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for status ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the Patient.
     *
     * @return A formatted string with patient details.
     */
    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name + ", Status: " + status;
    }
}

// Manages the scheduled patients and the waiting queue
public class PatientQueueManager {
    // List of all patients scheduled for the day
    private List<Patient> scheduledPatients;
    // Queue of patients who have checked in and are waiting
    private Queue<Patient> waitingQueue;

    /**
     * Constructs a new PatientQueueManager with initial scheduled patients.
     */
    public PatientQueueManager() {
        // Use ArrayList as implementation for List
        scheduledPatients = new ArrayList<>();
        // Use LinkedList as implementation for Queue
        waitingQueue = new LinkedList<>();

        // Add some initial scheduled patients
        addScheduledPatient(new Patient(101, "Alice Smith"));
        addScheduledPatient(new Patient(102, "Bob Johnson"));
        addScheduledPatient(new Patient(103, "Charlie Brown"));
        addScheduledPatient(new Patient(104, "Diana Prince"));
    }

    /**
     * Adds a patient to the list of scheduled patients.
     *
     * @param patient The patient to add.
     */
    public void addScheduledPatient(Patient patient) {
        scheduledPatients.add(patient);
        System.out.println("Patient " + patient.getName() + " (ID: " + patient.getPatientId() + ") scheduled.");
    }

    /**
     * Finds a patient by ID in the scheduled list and checks them in.
     * If found and status is "SCHEDULED", changes status to "CHECKED_IN" and adds to waiting queue.
     * Prints error if not found or already checked in.
     *
     * @param patientId The ID of the patient to check in.
     */
    public void checkInPatient(int patientId) {
        Patient patientToFind = null;
        for (Patient p : scheduledPatients) {
            if (p.getPatientId() == patientId) {
                patientToFind = p;
                break;
            }
        }

        if (patientToFind == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found in scheduled list.");
        } else {
            if (patientToFind.getStatus().equals("SCHEDULED")) {
                patientToFind.setStatus("CHECKED_IN");
                waitingQueue.offer(patientToFind); // Add to the end of the waiting queue
                System.out.println("Patient " + patientId + " (" + patientToFind.getName() + ") checked in.");
            } else {
                System.err.println("Error: Patient " + patientId + " (" + patientToFind.getName() + ") is already " + patientToFind.getStatus() + ".");
            }
        }
    }

    /**
     * Removes and returns the patient at the front of the waiting queue.
     * If the queue is not empty, changes their status to "SERVED".
     * Prints error if queue is empty.
     *
     * @return The patient being called, or null if the queue is empty.
     */
    public Patient callNextPatient() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty. Cannot call next patient.");
            return null;
        } else {
            Patient nextPatient = waitingQueue.poll(); // Remove from the front of the queue
            nextPatient.setStatus("SERVED");
            System.out.println("Calling next patient...");
            System.out.println("Patient " + nextPatient.getPatientId() + " (" + nextPatient.getName() + ") is now being served.");
            return nextPatient;
        }
    }

    /**
     * Prints details of all scheduled patients to System.out.
     */
    public void listScheduledPatients() {
        System.out.println("\n--- Scheduled Patients ---");
        if (scheduledPatients.isEmpty()) {
            System.out.println("(No patients scheduled)");
        } else {
            for (Patient p : scheduledPatients) {
                System.out.println(p);
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Prints details of patients currently in the waiting queue to System.out.
     */
    public void listWaitingQueue() {
        System.out.println("\n--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate without removing
            for (Patient p : waitingQueue) {
                System.out.println(p);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\nPatient Queue Management System");
        System.out.println("-------------------------------");
        System.out.println("1. Check In Patient");
        System.out.println("2. Call Next Patient");
        System.out.println("3. List All Scheduled Patients");
        System.out.println("4. List Waiting Queue");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main interactive loop for the system.
     */
    public void runSystem() {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            displayMenu();
            int choice = -1; // Default to an invalid choice

            // --- Class-wide exception handling for input ---
            try {
                choice = scanner.nextInt();
                // Consume the rest of the line after reading the integer
                scanner.nextLine();
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input line
                continue; // Skip the rest of the loop iteration
            }

            // --- Switch statement for flow control ---
            switch (choice) {
                case 1: // Check In Patient
                    System.out.print("Enter Patient ID to check in: ");
                    try {
                        int patientId = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        checkInPatient(patientId);
                    } catch (InputMismatchException e) {
                        System.err.println("Error: Invalid Patient ID. Please enter a number.");
                        scanner.nextLine(); // Consume invalid input
                    }
                    break;
                case 2: // Call Next Patient
                    callNextPatient();
                    break;
                case 3: // List All Scheduled Patients
                    listScheduledPatients();
                    break;
                case 4: // List Waiting Queue
                    listWaitingQueue();
                    break;
                case 5: // Exit
                    System.out.println("Exiting system.");
                    running = false;
                    break;
                default: // Invalid choice
                    System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    break;
            }
        }
        scanner.close(); // Close the scanner when done
    }

    // Main method to start the application
    public static void main(String[] args) {
        PatientQueueManager system = new PatientQueueManager();
        system.runSystem();
    }
}
