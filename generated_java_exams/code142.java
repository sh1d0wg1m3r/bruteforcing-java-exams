/*
 * Exam Question #142
 * Generated on: 2025-05-11 22:20:50
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Print Job Management System
 * 
 * **Objective:** Implement a simplified Print Job Management System using core Java collections, control structures, and exception handling. This task requires you to demonstrate proficiency in using `Queue`, `List`, `ArrayList`, `Scanner`, `switch`, `System.out`, `System.err`, and `try-catch` blocks within a well-structured, object-oriented design.
 * 
 * **Scenario:** You need to build a console-based application that simulates managing a queue of print jobs. Users can submit new jobs, process the next job in the queue, view pending jobs, and view a history of processed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Create a class named `PrintJob`.
 *     *   It must have private fields: `userId` (String), `documentName` (String), and `pages` (int).
 *     *   Provide a public constructor to initialize these fields.
 *     *   Include public getter methods for all fields.
 *     *   Override the `toString()` method to provide a user-friendly representation of a print job (e.g., "Job [User: user1, Doc: report.pdf, Pages: 15]").
 * 
 * 2.  **`PrintManager` Class:**
 *     *   Create a class named `PrintManager`.
 *     *   It must have a private field `pendingJobs` of type `Queue<PrintJob>` to hold jobs waiting to be printed. Use a suitable implementation (e.g., `java.util.LinkedList`).
 *     *   It must have a private field `processedJobs` of type `List<PrintJob>` to hold jobs that have been completed. Use `java.util.ArrayList` as the concrete implementation.
 *     *   Provide a public constructor to initialize the `pendingJobs` queue and `processedJobs` list.
 *     *   Implement the following public methods:
 *         *   `addJob(String userId, String documentName, int pages)`: Adds a new `PrintJob` to the `pendingJobs` queue. This method must validate that `pages` is greater than 0. If not, it should print an error message to `System.err` and not add the job. Otherwise, it should add the job and print a success message to `System.out`.
 *         *   `processNextJob()`: Removes the job at the head of the `pendingJobs` queue, simulates processing it (by printing a message to `System.out`), and adds it to the `processedJobs` list. If the `pendingJobs` queue is empty, it must print an error message to `System.err`.
 *         *   `listPendingJobs()`: Prints all jobs currently in the `pendingJobs` queue to `System.out`. Indicate if the queue is empty. Do *not* remove jobs from the queue.
 *         *   `listProcessedJobs()`: Prints all jobs currently in the `processedJobs` list to `System.out`. Indicate if the history is empty.
 *         *   `run()`: This method should contain the main application loop. It should display a menu to the user with options:
 *             1.  Submit New Job
 *             2.  Process Next Job
 *             3.  List Pending Jobs
 *             4.  List Processed Jobs
 *             5.  Exit
 *             It must use a `Scanner` to read user input for the menu choice and job details. It must use a `switch` statement to handle the different menu options. The entire interaction loop within `run()` must be wrapped in a `try-catch` block to handle potential runtime exceptions, particularly input errors from the `Scanner` (like entering text when an integer is expected). Error messages from this `try-catch` should be printed to `System.err`. The `Scanner` should be closed upon exiting the application.
 * 
 * 3.  **Main Application Entry Point:**
 *     *   Create a class with a `main` method.
 *     *   The `main` method should create an instance of `PrintManager` and call its `run()` method to start the application.
 * 
 * 4.  **Required Java Components Usage:**
 *     *   You **must** use `java.util.Queue` for `pendingJobs`.
 *     *   You **must** use `java.util.ArrayList` as the concrete implementation for `processedJobs`.
 *     *   You **must** use `java.util.List` as the declared type for `processedJobs`.
 *     *   You **must** use `java.util.Scanner` for all user input.
 *     *   You **must** use a `switch` statement for the main menu logic.
 *     *   You **must** use `System.err` for all error messages.
 *     *   You **must** use `System.out` for all normal output (prompts, success messages, job listings).
 *     *   You **must** use a class-wide `try-catch` block within the `PrintManager.run()` method to handle input errors or other runtime exceptions during the main loop.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Include basic input validation (`pages > 0`).
 *     *   Provide clear error handling as specified (`System.err`, `try-catch`).
 *     *   Add comments where necessary to explain complex parts.
 *     *   Ensure clean code structure.
 * 
 * **Expected Interaction Example:**
 * 
 * ```
 * --- Print Job Manager Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. List Pending Jobs
 * 4. List Processed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter User ID: alice
 * Enter Document Name: report.pdf
 * Enter Number of Pages: 15
 * Job submitted successfully!
 * 
 * --- Print Job Manager Menu ---
 * 1. Submit New Job
 * ...
 * Enter your choice: 1
 * Enter User ID: bob
 * Enter Document Name: image.jpg
 * Enter Number of Pages: 5
 * Job submitted successfully!
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job [User: alice, Doc: report.pdf, Pages: 15]
 * Job [User: bob, Doc: image.jpg, Pages: 5]
 * --------------------
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 2
 * Processing job: Job [User: alice, Doc: report.pdf, Pages: 15]
 * Job processed and moved to history.
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Job [User: bob, Doc: image.jpg, Pages: 5]
 * --------------------
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 4
 * --- Processed Jobs History ---
 * Job [User: alice, Doc: report.pdf, Pages: 15]
 * ------------------------------
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 2
 * Processing job: Job [User: bob, Doc: image.jpg, Pages: 5]
 * Job processed and moved to history.
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 2
 * Error: The pending job queue is empty.
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: invalid
 * Error: Invalid input. Please enter a number.
 * 
 * --- Print Job Manager Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Print Job Manager.
 * ```
 * 
 * **Evaluation:** Your solution will be evaluated based on correctness, adherence to all requirements (especially the usage of specific Java components), proper implementation of best practices, and robustness in handling input and errors.
 *
 * EXPLANATION:
 * The provided solution implements the `Print Job Management System` as requested, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:** This class serves as a simple Plain Old Java Object (POJO) to encapsulate the data for a single print job. It uses private fields (`userId`, `documentName`, `pages`) and public getter methods, adhering to the principle of encapsulation. The `toString()` method provides a convenient way to represent a job object as a string for printing.
 * 
 * 2.  **`PrintManager` Class:** This is the core class managing the application logic.
 *     *   **`pendingJobs` (`Queue<PrintJob>`)**: A `Queue` is used here because print jobs are processed in the order they are submitted (First-In, First-Out - FIFO). `LinkedList` is a common implementation of the `Queue` interface that works well for this purpose. The `offer()` method is used for adding jobs, which is standard practice for queues.
 *     *   **`processedJobs` (`List<PrintJob>`)**: A `List` is used to store the history of processed jobs. The requirement specified using the `List` interface and the `ArrayList` concrete implementation. `ArrayList` provides dynamic resizing and efficient storage/retrieval for the history.
 *     *   **`addJob()`**: This method takes job details as input. It performs basic input validation by checking if the number of pages is positive. If validation fails, it prints an error to `System.err` and returns. Otherwise, it creates a `PrintJob` object and adds it to the `pendingJobs` queue using `offer()`. Success messages are printed to `System.out`.
 *     *   **`processNextJob()`**: This method simulates processing the next job. It first checks if the `pendingJobs` queue is empty. If so, it prints an error to `System.err`. If not empty, it uses the `poll()` method to remove the job from the head of the queue (the oldest job), prints a processing message to `System.out`, and adds the removed job to the `processedJobs` list using `add()`.
 *     *   **`listPendingJobs()`**: This method iterates through the `pendingJobs` queue to display its contents. It uses a simple enhanced for loop (`for (PrintJob job : pendingJobs)`) which iterates over the elements without removing them, fulfilling the requirement. It prints to `System.out` and indicates if the queue is empty.
 *     *   **`listProcessedJobs()`**: This method iterates through the `processedJobs` list using an enhanced for loop to display the history. It prints to `System.out` and indicates if the list is empty.
 *     *   **`run()`**: This method contains the main application loop and user interaction.
 *         *   It uses a `Scanner` to read input from `System.in`.
 *         *   The main `while` loop continues until the user chooses to exit.
 *         *   A `displayMenu()` helper method prints the options to `System.out`.
 *         *   A `try-catch` block wraps the core loop logic. This fulfills the requirement for "class-wide exception handling" within the main operational method. It's specifically designed to catch `InputMismatchException` if the user enters non-integer input when a number is expected (like the menu choice or pages). When caught, it prints an error to `System.err` and consumes the invalid input using `scanner.next()` or `scanner.nextLine()` to prevent an infinite loop caused by the `Scanner` not advancing past the invalid token. A general `catch (Exception e)` is also included as a fallback for any other unexpected runtime issues.
 *         *   A `switch` statement is used based on the user's integer choice to call the appropriate `PrintManager` methods (`addJob`, `processNextJob`, etc.). This fulfills the requirement for using a `switch` statement.
 *         *   Inside the 'Submit New Job' case (case 1), nested `try-catch` blocks are used to handle potential `InputMismatchException` when reading the number of pages specifically.
 *         *   The `finally` block ensures that the `Scanner` is closed when the `run()` method exits, releasing system resources.
 * 
 * 3.  **`PrintManagerApp` Class:** This is a simple class containing the `main` method, which is the entry point of the application. It creates a `PrintManager` instance and calls its `run()` method to start the interactive loop.
 * 
 * **Component Usage Summary:**
 * 
 * *   `Queue`: Used for `pendingJobs` (FIFO processing).
 * *   `ArrayList`: Used as the concrete implementation for `processedJobs`.
 * *   `List`: Used as the declared type for `processedJobs`.
 * *   `Scanner`: Used in `PrintManager.run()` to read all user input from the console.
 * *   `switch`: Used in `PrintManager.run()` to control the flow based on the user's menu selection.
 * *   `System.err`: Used for printing all error messages (input validation errors, empty queue errors, general runtime exceptions).
 * *   `System.out`: Used for printing prompts, menu, success messages, and job listings.
 * *   `try-catch`: A main `try-catch` block is used in `PrintManager.run()` to handle potential input errors or other runtime exceptions in the interactive loop. Additional nested `try-catch` are used for specific input reading points (like pages).
 * 
 * This solution effectively integrates the required Java components into a practical application, demonstrating understanding of collections, control flow, object-oriented principles, and robust error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException; // Although we handle empty queue explicitly, good to know

/**
 * Represents a single print job with user, document, and page details.
 */
class PrintJob {
    private String userId;
    private String documentName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     * @param userId The ID of the user submitting the job.
     * @param documentName The name of the document to print.
     * @param pages The number of pages in the document.
     */
    public PrintJob(String userId, String documentName, int pages) {
        this.userId = userId;
        this.documentName = documentName;
        this.pages = pages;
    }

    // Public getters
    public String getUserId() {
        return userId;
    }

    public String getDocumentName() {
        return documentName;
    }

    public int getPages() {
        return pages;
    }

    /**
     * Provides a user-friendly string representation of the PrintJob.
     * @return String representation of the job.
     */
    @Override
    public String toString() {
        return "Job [User: " + userId + ", Doc: " + documentName + ", Pages: " + pages + "]";
    }
}

/**
 * Manages the queue of pending print jobs and history of processed jobs.
 * Handles user interaction via a menu.
 */
class PrintManager {
    // Use Queue for pending jobs (FIFO)
    private Queue<PrintJob> pendingJobs;
    // Use List (specifically ArrayList) for processed jobs history
    private List<PrintJob> processedJobs;

    /**
     * Constructs a new PrintManager, initializing the job queues and history.
     */
    public PrintManager() {
        // LinkedList implements Queue
        this.pendingJobs = new LinkedList<>();
        // ArrayList implements List
        this.processedJobs = new ArrayList<>();
    }

    /**
     * Adds a new print job to the pending queue after validation.
     * @param userId The ID of the user.
     * @param documentName The name of the document.
     * @param pages The number of pages.
     */
    public void addJob(String userId, String documentName, int pages) {
        // Input validation: pages must be positive
        if (pages <= 0) {
            System.err.println("Error: Number of pages must be greater than 0.");
            return; // Do not add the job
        }

        PrintJob newJob = new PrintJob(userId, documentName, pages);
        pendingJobs.offer(newJob); // offer() is preferred over add() as it doesn't throw exception on capacity limits (though LinkedList is unbounded)
        System.out.println("Job submitted successfully!");
    }

    /**
     * Processes the next job from the pending queue and moves it to history.
     */
    public void processNextJob() {
        // Check if the queue is empty before attempting to poll
        if (pendingJobs.isEmpty()) {
            System.err.println("Error: The pending job queue is empty.");
            return;
        }

        // Remove the head of the queue
        PrintJob processedJob = pendingJobs.poll(); // poll() returns null if queue is empty, but we checked already

        // Simulate processing
        System.out.println("Processing job: " + processedJob);

        // Add the processed job to the history list
        processedJobs.add(processedJob);
        System.out.println("Job processed and moved to history.");
    }

    /**
     * Lists all jobs currently in the pending queue without removing them.
     */
    public void listPendingJobs() {
        System.out.println("--- Pending Jobs ---");
        if (pendingJobs.isEmpty()) {
            System.out.println("No pending jobs.");
        } else {
            // Iterate through the queue without removing elements
            for (PrintJob job : pendingJobs) {
                System.out.println(job);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Lists all jobs in the processed history list.
     */
    public void listProcessedJobs() {
        System.out.println("--- Processed Jobs History ---");
        if (processedJobs.isEmpty()) {
            System.out.println("No jobs have been processed yet.");
        } else {
            // Iterate through the list
            for (PrintJob job : processedJobs) {
                System.out.println(job);
            }
        }
        System.out.println("------------------------------");
    }

    /**
     * Runs the main interactive menu loop for the Print Manager.
     * Includes class-wide exception handling for input errors.
     */
    public void run() {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide try-catch for the main application loop
        try {
            while (running) {
                displayMenu();
                System.out.print("Enter your choice: ");

                int choice = -1; // Default invalid choice

                // Inner try-catch to handle InputMismatchException specifically for choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the while loop
                }

                // Consume the rest of the line after reading the integer choice
                // This prevents issues when reading strings/lines later
                scanner.nextLine();

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Submit New Job
                        System.out.print("Enter User ID: ");
                        String userId = scanner.nextLine();
                        System.out.print("Enter Document Name: ");
                        String docName = scanner.nextLine();
                        int pages = -1;
                        System.out.print("Enter Number of Pages: ");
                        // Inner try-catch for reading pages
                        try {
                            pages = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            addJob(userId, docName, pages);
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid input for pages. Please enter an integer.");
                            scanner.nextLine(); // Consume the invalid input
                        }
                        break;
                    case 2: // Process Next Job
                        processNextJob();
                        break;
                    case 3: // List Pending Jobs
                        listPendingJobs();
                        break;
                    case 4: // List Processed Jobs
                        listProcessedJobs();
                        break;
                    case 5: // Exit
                        System.out.println("Exiting Print Job Manager.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a blank line for better readability
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Displays the main menu options to the console.
     */
    private void displayMenu() {
        System.out.println("--- Print Job Manager Menu ---");
        System.out.println("1. Submit New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. List Pending Jobs");
        System.out.println("4. List Processed Jobs");
        System.out.println("5. Exit");
    }
}

/**
 * Main class to start the Print Job Management application.
 */
public class PrintManagerApp {
    public static void main(String[] args) {
        PrintManager manager = new PrintManager();
        manager.run(); // Start the application loop
    }
}
