/*
 * Exam Question #773
 * Generated on: 2025-05-12 16:38:40
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Shipment Processing System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified simulation of a shipment processing system for a warehouse. Incoming shipments are placed in a queue to await processing. A worker processes the next shipment from the queue, updates its status, and moves it to a list of completed shipments. The system should be interactive, allowing a user to manage shipments via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Shipment Class:** Create a class named `Shipment` to represent a single shipment. It must have the following **private** fields:
 *     *   `id` (String): A unique identifier for the shipment.
 *     *   `description` (String): A brief description of the shipment's contents.
 *     *   `status` (String): Represents the current state (e.g., "Pending", "Completed").
 *     *   Include a constructor to initialize `id` and `description` (setting initial status to "Pending").
 *     *   Provide **public** getter methods for all fields.
 *     *   Include a **public** method `setStatus(String status)` to update the status.
 *     *   Override the `toString()` method to provide a user-friendly string representation of the shipment.
 * 
 * 2.  **Shipment Processing System Class:** Create a class named `ShipmentProcessingSystem` to manage the shipments.
 *     *   It must have a **private** field `pendingShipments` declared as `java.util.Queue<Shipment>`. Use a suitable implementation (e.g., `java.util.LinkedList`).
 *     *   It must have a **private** field `completedShipments` declared as `java.util.List<Shipment>`. Use `java.util.ArrayList` for its implementation.
 *     *   It must have a **private** field for a `java.util.Scanner` to read user input.
 *     *   Implement a public constructor to initialize the data structures and the Scanner.
 *     *   Implement the following **public** methods:
 *         *   `addShipment(String id, String description)`: Creates a new `Shipment` object with status "Pending" and adds it to the `pendingShipments` queue. This method must validate that `id` and `description` are not null or empty strings. If validation fails, it should throw an `IllegalArgumentException`.
 *         *   `processNextShipment()`: Removes the next shipment from the `pendingShipments` queue, updates its status to "Completed", and adds it to the `completedShipments` list. If the `pendingShipments` queue is empty, it should print an error message to `System.err` and do nothing else.
 *         *   `viewPendingShipments()`: Prints the details (using `toString()`) of all shipments currently in the `pendingShipments` queue. If the queue is empty, print a message indicating so.
 *         *   `viewCompletedShipments()`: Prints the details (using `toString()`) of all shipments currently in the `completedShipments` list. If the list is empty, print a message indicating so.
 *         *   `run()`: This method should contain the main application loop. It must:
 *             *   Repeatedly display a menu of options (e.g., Add Shipment, Process Shipment, View Pending, View Completed, Exit).
 *             *   Use the `Scanner` to read the user's integer choice.
 *             *   Use a `switch` statement to dispatch the user's choice to the appropriate method call (`addShipment`, `processNextShipment`, etc.).
 *             *   Continue looping until the user chooses the Exit option.
 *             *   Implement **class-wide exception handling** using `try-catch` blocks around the core logic within the loop to catch and handle potential errors such as `InputMismatchException` (for non-integer input) or `IllegalArgumentException` (from `addShipment`). Print error messages for these exceptions to `System.err`. Include a general `catch` block for other unexpected exceptions.
 *     *   Include a `main` method to create an instance of `ShipmentProcessingSystem` and call its `run()` method.
 * 
 * 3.  **Input/Output:**
 *     *   Use `System.out` for displaying the menu, prompts, and the lists of shipments.
 *     *   Use `System.err` for printing all error messages.
 * 
 * 4.  **Best Practices:**
 *     *   Apply proper encapsulation by making fields private and providing public accessors/mutators where appropriate.
 *     *   Use meaningful names for classes, methods, and variables.
 *     *   Include comments to explain the purpose of classes, methods, and complex logic sections.
 *     *   Implement input validation as specified (e.g., in `addShipment`).
 *     *   Ensure robust error handling using `try-catch` and `System.err`.
 *     *   Structure your code clearly.
 * 
 * **Expected Interaction:**
 * The system should present a menu, accept user input (an integer choice), perform the requested action, and provide feedback or error messages.
 * 
 * Example flow:
 * ```
 * Shipment Processing System Menu:
 * 1. Add New Shipment
 * 2. Process Next Shipment
 * 3. View Pending Shipments
 * 4. View Completed Shipments
 * 5. Exit
 * Enter your choice: 1
 * Enter Shipment ID: S101
 * Enter Shipment Description: Electronics
 * Shipment added: S101
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Shipments ---
 * 1. Shipment [ID=S101, Description='Electronics', Status=Pending]
 * -------------------------
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 2
 * Shipment processed: S101
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Shipments ---
 * No pending shipments.
 * -------------------------
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 4
 * --- Completed Shipments ---
 * 1. Shipment [ID=S101, Description='Electronics', Status=Completed]
 * ---------------------------
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 2
 * Pending queue is empty. No shipments to process.
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: invalid_input
 * Invalid input. Please enter a number.
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 1
 * Enter Shipment ID:
 * Enter Shipment Description: Gadgets
 * Error adding shipment: Shipment ID cannot be null or empty.
 * 
 * Shipment Processing System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Shipment Processing System. Goodbye!
 * ```
 * 
 * Your solution should provide the complete Java code for the `Shipment` and `ShipmentProcessingSystem` classes, including the `main` method.
 *
 * EXPLANATION:
 * The provided solution implements a simple Shipment Processing System simulation, fulfilling all the requirements of the exam task.
 * 
 * 1.  **Shipment Class:** The `Shipment` class encapsulates the data for a single shipment (`id`, `description`, `status`) with private fields and public getter methods, demonstrating encapsulation. The constructor includes basic validation for `id` and `description`, throwing an `IllegalArgumentException` if they are null or empty. The `setStatus` method allows updating the status, and `toString` provides a convenient representation.
 * 
 * 2.  **ShipmentProcessingSystem Class:** This class manages the collection of shipments.
 *     *   It uses `java.util.Queue<Shipment>` (`pendingShipments`) implemented by `java.util.LinkedList` to store shipments awaiting processing, ensuring First-In, First-Out (FIFO) order.
 *     *   It uses `java.util.List<Shipment>` (`completedShipments`) implemented by `java.util.ArrayList` to store shipments after processing, allowing for easy storage and retrieval of completed items.
 *     *   A `java.util.Scanner` is used to read user input from the console.
 *     *   The `addShipment` method creates a new `Shipment` and adds it to the queue using `offer()`. It relies on the `Shipment` constructor for input validation.
 *     *   The `processNextShipment` method uses `poll()` to retrieve and remove the head of the `pendingShipments` queue. It checks if the queue is empty first and prints an error to `System.err` if it is, demonstrating graceful handling of an empty queue condition. If a shipment is retrieved, its status is updated, and it's added to the `completedShipments` list.
 *     *   `viewPendingShipments` and `viewCompletedShipments` iterate through their respective collections (`Queue` and `List`) and print the details of each shipment using the `toString()` method.
 *     *   The `run` method contains the main application loop. It repeatedly displays a menu and reads the user's integer choice using the `Scanner`. A `switch` statement is used to execute the corresponding action based on the choice, demonstrating flow control.
 * 
 * 3.  **Input/Output and Error Handling:**
 *     *   `System.out` is used for all standard output, including the menu, prompts, confirmation messages, and lists of shipments.
 *     *   `System.err` is specifically used for all error messages, such as invalid input, validation failures, or the empty queue condition during processing.
 *     *   **Class-wide exception handling** is implemented by wrapping the core logic inside the `while` loop in the `run` method within a `try-catch` block.
 *         *   `InputMismatchException` is caught specifically to handle cases where the user enters non-integer input for the menu choice. The invalid input is consumed from the scanner to prevent an infinite loop.
 *         *   `IllegalArgumentException` is caught to handle validation errors originating from the `addShipment` method (which in turn relies on the `Shipment` constructor's validation).
 *         *   A general `catch (Exception e)` block is included as a fallback to catch any other unexpected runtime errors that might occur, printing the error message and stack trace to `System.err`. This demonstrates robust error handling.
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is maintained with private fields and public access methods.
 *     *   Variable and method names are descriptive (`pendingShipments`, `processNextShipment`, `displayMenu`, etc.).
 *     *   Comments are included to explain the purpose of classes, methods, and key logic.
 *     *   Input validation is performed in the `addShipment` method.
 *     *   Error handling is implemented using specific and general catch blocks, directing output to `System.err`.
 *     *   The code is structured logically into two classes with clear responsibilities.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating an understanding of data structures, control flow, and essential error handling techniques in Java.
 */

// Shipment.java
import java.util.Objects;

/**
 * Represents a single shipment with ID, description, and processing status.
 */
public class Shipment {
    private String id;
    private String description;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new Shipment.
     *
     * @param id The unique identifier for the shipment.
     * @param description The description of the shipment contents.
     * @throws IllegalArgumentException if id or description are null or empty.
     */
    public Shipment(String id, String description) {
        // Basic validation upon creation
        if (id == null || id.trim().isEmpty()) {
            throw new IllegalArgumentException("Shipment ID cannot be null or empty.");
        }
        if (description == null || description.trim().isEmpty()) {
             throw new IllegalArgumentException("Shipment description cannot be null or empty.");
        }
        this.id = id.trim();
        this.description = description.trim();
        this.status = "Pending"; // Initial status
    }

    // --- Public Getter Methods ---

    public String getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // --- Public Setter Method for Status ---

    /**
     * Sets the status of the shipment.
     * @param status The new status string.
     */
    public void setStatus(String status) {
        // In a real system, validation of status string might be added here
        this.status = status;
    }

    // --- Override toString() for easy printing ---

    @Override
    public String toString() {
        return "Shipment [ID=" + id + ", Description='" + description + "', Status=" + status + "]";
    }

    // --- Optional: Override equals() and hashCode() based on ID ---
    // Good practice for uniqueness checks, though not strictly required by prompt
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Shipment shipment = (Shipment) o;
        return Objects.equals(id, shipment.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
```

```java
// ShipmentProcessingSystem.java
import java.util.ArrayList;
import java.util.LinkedList; // A common implementation of Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for scanner input errors

/**
 * Manages the flow of shipments through a pending queue and a completed list.
 * Provides a command-line interface for interaction.
 */
public class ShipmentProcessingSystem {
    // Use Queue interface, implemented by LinkedList for FIFO behavior
    private Queue<Shipment> pendingShipments;
    // Use List interface, implemented by ArrayList for dynamic array behavior
    private List<Shipment> completedShipments;
    private Scanner scanner;

    /**
     * Constructs a new ShipmentProcessingSystem, initializing data structures and scanner.
     */
    public ShipmentProcessingSystem() {
        this.pendingShipments = new LinkedList<>();
        this.completedShipments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new shipment to the pending queue after validation.
     *
     * @param id The unique identifier for the shipment.
     * @param description The description of the shipment contents.
     * @throws IllegalArgumentException if id or description are null or empty.
     */
    public void addShipment(String id, String description) {
        // Validation is handled by the Shipment constructor, but we catch and re-throw
        // or let it propagate to the caller (run method's try-catch).
        // Creating the shipment directly will trigger validation.
        Shipment newShipment = new Shipment(id, description); // Shipment constructor throws IllegalArgumentException
        pendingShipments.offer(newShipment); // offer() is safer than add() for queues, though LinkedList doesn't have capacity limits.
        System.out.println("Shipment added: " + newShipment.getId());
    }

    /**
     * Processes the next shipment from the pending queue.
     * Removes it from the queue, updates status, and adds to completed list.
     * Prints an error to System.err if the queue is empty.
     */
    public void processNextShipment() {
        // Check if the queue is empty before attempting to poll
        if (pendingShipments.isEmpty()) {
            System.err.println("Pending queue is empty. No shipments to process.");
            return; // Exit the method gracefully
        }

        // Retrieve and remove the head of the queue
        Shipment shipmentToProcess = pendingShipments.poll(); // poll() returns null if queue is empty (already checked)

        // This null check is defensive, though isEmpty check should prevent it
        if (shipmentToProcess != null) {
            shipmentToProcess.setStatus("Completed");
            completedShipments.add(shipmentToProcess);
            System.out.println("Shipment processed: " + shipmentToProcess.getId());
        } else {
            // Should not happen with the isEmpty() check, but good to handle defensively
            System.err.println("Internal error: Failed to retrieve shipment from queue after checking it's not empty.");
        }
    }

    /**
     * Prints details of all shipments currently waiting in the pending queue.
     */
    public void viewPendingShipments() {
        System.out.println("\n--- Pending Shipments ---");
        if (pendingShipments.isEmpty()) {
            System.out.println("No pending shipments.");
        } else {
            // Iterate through the Queue. LinkedList iterator provides elements in insertion order.
            int index = 1;
            for (Shipment shipment : pendingShipments) {
                System.out.println(index++ + ". " + shipment);
            }
        }
        System.out.println("-------------------------\n");
    }

    /**
     * Prints details of all shipments that have been processed and moved to the completed list.
     */
    public void viewCompletedShipments() {
        System.out.println("\n--- Completed Shipments ---");
        if (completedShipments.isEmpty()) {
            System.out.println("No completed shipments.");
        } else {
            // Iterate through the List
            for (int i = 0; i < completedShipments.size(); i++) {
                System.out.println((i + 1) + ". " + completedShipments.get(i));
            }
        }
        System.out.println("---------------------------\n");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("Shipment Processing System Menu:");
        System.out.println("1. Add New Shipment");
        System.out.println("2. Process Next Shipment");
        System.out.println("3. View Pending Shipments");
        System.out.println("4. View Completed Shipments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and dispatching actions.
     * Includes class-wide exception handling for robustness.
     */
    public void run() {
        boolean running = true;

        // Main application loop with class-wide exception handling
        while (running) {
            try {
                displayMenu();
                // Read user choice (expecting an integer)
                int choice = scanner.nextInt();
                // Consume the leftover newline character after reading the integer
                scanner.nextLine();

                // Use switch statement to handle different user choices
                switch (choice) {
                    case 1:
                        // Add Shipment
                        System.out.print("Enter Shipment ID: ");
                        String id = scanner.nextLine();
                        System.out.print("Enter Shipment Description: ");
                        String description = scanner.nextLine();
                        // addShipment method throws IllegalArgumentException on invalid input
                        addShipment(id, description);
                        break;
                    case 2:
                        // Process Next Shipment
                        processNextShipment(); // Handles empty queue internally
                        break;
                    case 3:
                        // View Pending Shipments
                        viewPendingShipments();
                        break;
                    case 4:
                        // View Completed Shipments
                        viewCompletedShipments();
                        break;
                    case 5:
                        // Exit
                        System.out.println("Exiting Shipment Processing System. Goodbye!");
                        running = false; // Set flag to exit the loop
                        break;
                    default:
                        // Handle integer inputs that are not valid options
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Catch exception if user enters non-integer input for the menu choice
                System.err.println("Invalid input. Please enter a number.");
                // Consume the invalid input from the scanner to prevent an infinite loop
                scanner.next();
            } catch (IllegalArgumentException e) {
                 // Catch validation errors thrown by the addShipment method or Shipment constructor
                 System.err.println("Error: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions during the loop iteration
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Print stack trace for debugging unexpected errors
                e.printStackTrace(System.err);
                // Optionally set running to false to exit on critical unexpected errors
                // running = false;
            } finally {
                // Optional: Code that always runs after try/catch, e.g., cleanup. Not strictly needed here.
            }
        }

        // Close the scanner resource when the application exits
        scanner.close();
    }

    /**
     * Main method to start the Shipment Processing System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ShipmentProcessingSystem system = new ShipmentProcessingSystem();
        system.run();
    }
}
