/*
 * Exam Question #765
 * Generated on: 2025-05-12 16:37:40
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Scheduler**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified appointment scheduling system for a single doctor at a hospital clinic. The system should manage a waiting list of patients and schedule them into predefined time slots.
 * 
 * Your program must provide a command-line interface for a receptionist to interact with the system.
 * 
 * **System Requirements:**
 * 
 * 1.  **Patient Management:** Patients arrive and are added to a waiting list.
 * 2.  **Appointment Scheduling:** The receptionist can schedule the *next* patient from the waiting list into the *earliest available* time slot. Once a time slot is filled, it becomes unavailable.
 * 3.  **Viewing:** The receptionist can view the current waiting list and the list of scheduled appointments.
 * 4.  **Predefined Time Slots:** The system will operate with a fixed set of available appointment time slots (e.g., "09:00", "09:30", "10:00", etc.).
 * 
 * **Technical Requirements:**
 * 
 * Your solution must demonstrate advanced Java programming concepts and adhere to best practices. Specifically, you MUST use:
 * 
 * *   `java.util.Queue` for the patient waiting list.
 * *   `java.util.ArrayList` for storing scheduled appointments.
 * *   `java.util.List` interface (use it as a variable type where appropriate, e.g., for the scheduled appointments list or available time slots).
 * *   `java.util.Scanner` for reading user input from the console.
 * *   A `switch` statement to handle the main menu options.
 * *   `System.err` for displaying error messages (e.g., invalid input, waiting list empty, no time slots available).
 * *   `System.out` for displaying normal output (menu, prompts, lists, success messages).
 * *   Class-wide exception handling using `try-catch` blocks to gracefully handle potential issues like invalid input format.
 * 
 * **Implementation Details:**
 * 
 * 1.  Create a `Patient` class (simple data holder for name and condition).
 * 2.  Create an `Appointment` class (links a `Patient` to a time slot).
 * 3.  Create a `HospitalScheduler` class which will contain the `main` method and the scheduling logic.
 * 4.  The `HospitalScheduler` should manage the `Queue` of waiting patients and the `List` of scheduled appointments.
 * 5.  Initialize the system with a predefined set of available time slots.
 * 6.  Implement the following menu options:
 *     *   Add Patient to Waiting List: Prompts for patient name and condition, adds to the queue.
 *     *   Schedule Next Appointment: Takes the patient from the front of the queue and the earliest available time slot, creates an appointment, adds it to the scheduled list, and removes the time slot. Handle cases where the waiting list is empty or no time slots are available.
 *     *   View Waiting List: Displays all patients currently in the waiting list.
 *     *   View Scheduled Appointments: Displays all scheduled appointments.
 *     *   Exit: Terminates the program.
 * 7.  Implement input validation for menu choices and patient details (e.g., ensure name is not empty).
 * 8.  Use appropriate access modifiers (`private`, `public`) for encapsulation.
 * 9.  Include meaningful variable and method names.
 * 10. Add comments to explain complex parts of the code.
 * 
 * **Example Interaction (Partial):**
 * 
 * ```
 * --- Hospital Appointment Scheduler ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Appointment
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient condition: Fever
 * Alice added to waiting list.
 * 
 * --- Hospital Appointment Scheduler ---
 * ...
 * Enter your choice: 1
 * Enter patient name: Bob
 * Enter patient condition: Sprain
 * Bob added to waiting list.
 * 
 * --- Hospital Appointment Scheduler ---
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * 1. Alice (Condition: Fever)
 * 2. Bob (Condition: Sprain)
 * 
 * --- Hospital Appointment Scheduler ---
 * ...
 * Enter your choice: 2
 * Scheduled Bob at 09:00.
 * 
 * --- Hospital Appointment Scheduler ---
 * ...
 * Enter your choice: 4
 * --- Scheduled Appointments ---
 * 1. Bob at 09:00
 * ```
 * 
 * **Expected Output:**
 * 
 * Your program should display the menu, prompts, success messages, and list contents using `System.out`. Error messages (invalid input, full schedule, empty list/queue) should be displayed using `System.err`.
 * 
 * **Assessment Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, and `List`.
 * *   Effective use of `Scanner`, `switch`, `System.out`, `System.err`.
 * *   Proper implementation of `try-catch` for exception handling.
 * *   Correct logic for scheduling (FIFO from queue, using available slots).
 * *   Appropriate data structures and class design (`Patient`, `Appointment`, `HospitalScheduler`).
 * *   Adherence to best practices (encapsulation, naming, comments, validation).
 * *   Graceful handling of edge cases (empty queue, no slots).
 *
 * EXPLANATION:
 * This solution implements a `HospitalScheduler` application that manages a patient waiting list and schedules appointments for a single doctor using predefined time slots. It effectively demonstrates the required Java concepts and follows best practices.
 * 
 * **Class Structure:**
 * 
 * 1.  **`Patient` Class:** A simple Plain Old Java Object (POJO) to hold patient data (`name`, `condition`). It has a constructor and getter methods, ensuring data encapsulation. The `toString()` method provides a convenient string representation for printing.
 * 2.  **`Appointment` Class:** Another POJO linking a `Patient` object to a `timeSlot` string. It also includes a constructor, getters, and a `toString()` method for easy printing.
 * 3.  **`HospitalScheduler` Class:** This is the main operational class.
 *     *   **Fields:**
 *         *   `waitingList`: Declared as `Queue<Patient>`, implemented using `LinkedList`. This correctly models a waiting line where patients are processed in First-In, First-Out (FIFO) order.
 *         *   `scheduledAppointments`: Declared as `List<Appointment>`, implemented using `ArrayList`. This stores appointments after they are scheduled, allowing easy iteration and access by index (though not used in this simple version). Using the `List` interface adheres to the requirement and promotes flexibility if the underlying implementation needed to change.
 *         *   `availableTimeSlots`: Declared as `List<String>`, implemented using `ArrayList`. This list holds the time slots that are yet to be booked. Removing from the beginning of this list ensures the earliest slot is always used first. Using `List` interface again meets the requirement.
 *         *   `scanner`: A `Scanner` object for reading user input.
 *     *   **Constructor:** Initializes the `waitingList`, `scheduledAppointments`, and `availableTimeSlots` collections, and the `Scanner`. It also populates the `availableTimeSlots` with initial values.
 *     *   **`displayMenu()`:** A private helper method to print the menu options to `System.out`.
 *     *   **`addPatientToWaitingList()`:** Reads patient details, performs basic validation (name not empty), creates a `Patient` object, and adds it to the `waitingList` queue using `offer()`. Uses `System.out` for prompts and success messages, and `System.err` for validation errors.
 *     *   **`scheduleNextAppointment()`:** Implements the core scheduling logic.
 *         *   It first checks if the `waitingList` is empty or if there are no `availableTimeSlots`. If either is true, it prints an error message to `System.err` and returns.
 *         *   If both are available, it uses `waitingList.poll()` to get and remove the next patient from the queue.
 *         *   It uses `availableTimeSlots.remove(0)` to get and remove the first available time slot from the list.
 *         *   An `Appointment` object is created and added to the `scheduledAppointments` list using `add()`.
 *         *   A success message is printed to `System.out`.
 *     *   **`viewWaitingList()`:** Iterates through the `waitingList` using an enhanced for loop (which does not remove elements) and prints each patient's details to `System.out`. It checks if the queue is empty.
 *     *   **`viewScheduledAppointments()`:** Iterates through the `scheduledAppointments` list using an enhanced for loop and prints each appointment's details to `System.out`. It checks if the list is empty.
 *     *   **`runScheduler()`:** Contains the main application loop (`do-while`).
 *         *   It repeatedly displays the menu.
 *         *   It uses a `try-catch` block to handle potential `InputMismatchException` if the user enters non-integer input for the menu choice. This block wraps the `scanner.nextInt()` call and the `switch` statement.
 *         *   If `InputMismatchException` occurs, an error is printed to `System.err`, the invalid input is consumed using `scanner.nextLine()`, and the loop continues. A general `Exception` catch is also included as a fallback for other unexpected issues, printing to `System.err`.
 *         *   A `switch` statement is used to direct control flow based on the valid user choice, calling the appropriate methods.
 *         *   The loop continues until the user chooses option 5 ("Exit").
 *         *   The `scanner` is closed when the loop terminates.
 *     *   **`main()`:** The entry point of the application. It creates an instance of `HospitalScheduler` and calls the `runScheduler()` method.
 * 
 * **Usage of Required Components:**
 * 
 * *   `Queue`: Used for `waitingList` (`LinkedList` implementation). `offer()` adds to the tail, `poll()` removes from the head, iteration checks contents without removal.
 * *   `ArrayList`: Used for `scheduledAppointments` and `availableTimeSlots`. `add()` adds elements, `remove(0)` removes the first element from `availableTimeSlots`, iteration accesses elements.
 * *   `List`: Used as the type for `scheduledAppointments` and `availableTimeSlots` fields, demonstrating programming to the interface.
 * *   `Scanner`: Used in `runScheduler` and `addPatientToWaitingList` to read console input.
 * *   `Switch statement`: Used in `runScheduler` to process the main menu choices.
 * *   `System.err`: Used for all error messages (input validation, empty lists/queues, invalid menu choice, exceptions).
 * *   `System.out`: Used for all normal output (menu, prompts, success messages, list contents).
 * *   `try-catch`: A `try-catch(InputMismatchException)` block is used in `runScheduler` for robust input handling of the menu choice. A general `catch(Exception)` is also included.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** Fields in all classes are `private`, accessed via public constructors and getters.
 * *   **Meaningful Names:** Class, variable, and method names clearly describe their purpose (e.g., `waitingList`, `scheduleNextAppointment`, `addPatientToWaitingList`).
 * *   **Comments:** Comments are used to explain the purpose of classes, key fields, constructor, and each menu-driven method.
 * *   **Input Validation:** Basic validation is performed for the patient name in `addPatientToWaitingList` and for the menu choice in `runScheduler`.
 * *   **Error Handling:** Specific error messages are printed to `System.err` for business logic errors (empty queue/slots) and input errors (`InputMismatchException`).
 * *   **Clean Code Structure:** The code is divided into logical classes, methods are relatively short and focused on a single task, and the main application loop is well-structured.
 * 
 * This solution effectively combines multiple core Java concepts and libraries to create a functional and robust command-line application, meeting all the specified requirements for a challenging exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient
class Patient {
    private String name;
    private String condition;

    public Patient(String name, String condition) {
        this.name = name;
        this.condition = condition;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    @Override
    public String toString() {
        return name + " (Condition: " + condition + ")";
    }
}

// Represents a scheduled appointment
class Appointment {
    private Patient patient;
    private String timeSlot;

    public Appointment(Patient patient, String timeSlot) {
        this.patient = patient;
        this.timeSlot = timeSlot;
    }

    public Patient getPatient() {
        return patient;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return patient.getName() + " at " + timeSlot;
    }
}

// Main class to manage scheduling
public class HospitalScheduler {

    // Queue for patients waiting for an appointment (FIFO)
    private Queue<Patient> waitingList;

    // List for appointments that have been scheduled
    private List<Appointment> scheduledAppointments;

    // List of time slots that are currently available
    private List<String> availableTimeSlots;

    private Scanner scanner;

    // Constructor initializes the scheduler
    public HospitalScheduler() {
        waitingList = new LinkedList<>(); // LinkedList implements Queue
        scheduledAppointments = new ArrayList<>(); // ArrayList for scheduled appointments
        availableTimeSlots = new ArrayList<>(); // ArrayList for available slots
        scanner = new Scanner(System.in);

        // Initialize with some predefined time slots
        availableTimeSlots.add("09:00");
        availableTimeSlots.add("09:30");
        availableTimeSlots.add("10:00");
        availableTimeSlots.add("10:30");
        availableTimeSlots.add("11:00");
        availableTimeSlots.add("11:30");
        availableTimeSlots.add("13:00"); // Lunch break implied
        availableTimeSlots.add("13:30");
        availableTimeSlots.add("14:00");
    }

    // Displays the main menu to the user
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment Scheduler ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Appointment");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Adds a new patient to the waiting list
    private void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        // Input validation for name
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Exit the method
        }

        System.out.print("Enter patient condition: ");
        String condition = scanner.nextLine().trim();

        // Input validation for condition (optional, but good practice)
        if (condition.isEmpty()) {
             System.err.println("Warning: Patient condition is empty.");
             // Can choose to proceed or require condition
        }


        Patient patient = new Patient(name, condition);
        waitingList.offer(patient); // Add to the end of the queue
        System.out.println(name + " added to waiting list.");
    }

    // Schedules the next patient from the waiting list into the next available slot
    private void scheduleNextAppointment() {
        // Check if there are patients waiting
        if (waitingList.isEmpty()) {
            System.err.println("Error: No patients in the waiting list.");
            return; // Exit the method
        }

        // Check if there are available time slots
        if (availableTimeSlots.isEmpty()) {
            System.err.println("Error: No available time slots.");
            return; // Exit the method
        }

        // Get the next patient from the front of the queue
        Patient nextPatient = waitingList.poll(); // Removes the head of the queue

        // Get the earliest available time slot
        String nextTimeSlot = availableTimeSlots.remove(0); // Removes the first element from the list

        // Create and schedule the appointment
        Appointment newAppointment = new Appointment(nextPatient, nextTimeSlot);
        scheduledAppointments.add(newAppointment); // Add to the scheduled list

        System.out.println("Scheduled " + nextPatient.getName() + " at " + nextTimeSlot + ".");
    }

    // Displays the current waiting list
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            int index = 1;
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(index++ + ". " + patient);
            }
        }
    }

    // Displays the list of scheduled appointments
    private void viewScheduledAppointments() {
        System.out.println("\n--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            int index = 1;
            // Iterate through the list
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(index++ + ". " + appointment);
            }
        }
    }

    // Runs the main application loop
    public void runScheduler() {
        int choice = 0;
        do {
            displayMenu();
            try {
                // Read user choice
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline left-over

                // Process user choice using a switch statement
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        scheduleNextAppointment();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        System.out.println("Exiting Scheduler. Goodbye!");
                        break;
                    default:
                        // Handle invalid menu numbers
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input gracefully
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = 0; // Reset choice to stay in the loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        } while (choice != 5);

        scanner.close(); // Close the scanner when done
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.runScheduler();
    }
}
