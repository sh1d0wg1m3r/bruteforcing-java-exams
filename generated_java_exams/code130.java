/*
 * Exam Question #130
 * Generated on: 2025-05-11 22:18:49
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Print Job Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Print Job Management System. This system manages print jobs submitted by users. When a job is submitted, it is added to a queue. A "printer" process can then take the next job from the queue and mark it as processed, moving it to a history log. The system should allow users to add new jobs, process the next available job, view the current queue and processed job history, and exit.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Class Structure:** Create a class named `PrintManager` to encapsulate the system's logic and data.
 * 2.  **Data Storage:**
 *     *   Use a `java.util.Queue<String>` to store print jobs that are waiting to be processed. Each job can be represented as a `String` (e.g., "Document A.pdf", "Report.docx").
 *     *   Use a `java.util.List<String>` (specifically implemented by `java.util.ArrayList`) to store the history of print jobs that have been successfully processed.
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu to the user with options:
 *         *   1. Add New Print Job
 *         *   2. Process Next Job
 *         *   3. View Status (Queue and History)
 *         *   4. Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 4.  **Functionality:**
 *     *   **Add New Print Job:** Prompt the user for a job description (String). Add this job to the waiting queue. Validate that the job description is not empty. If empty, print an error message to `System.err` and do not add the job.
 *     *   **Process Next Job:** If the queue is not empty, remove the job at the head of the queue, simulate processing it (e.g., print a message to `System.out` indicating which job is being processed), and add it to the processed jobs history list. If the queue is empty, print an error message to `System.err` stating there are no jobs to process.
 *     *   **View Status:** Print the current status to `System.out`:
 *         *   The list of jobs currently in the waiting queue (in order).
 *         *   The list of jobs that have been processed (in order of completion).
 *     *   **Exit:** Terminate the program.
 * 5.  **Error Handling:**
 *     *   Use `System.err` for all error messages (e.g., invalid menu choice, empty job description, trying to process an empty queue).
 *     *   Use `System.out` for all normal output (menu, prompts, status, successful operations).
 *     *   Implement class-wide exception handling using `try-catch` blocks in the main application loop to gracefully handle potential runtime errors, such as invalid input type for the menu choice.
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation: Make data fields `private` and provide `public` methods for interaction.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for the class and methods, inline comments for complex logic).
 *     *   Ensure input validation where necessary (e.g., non-empty job description).
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting the menu, accepting input, and displaying output or error messages as described above. The output should be clear and informative, distinguishing between normal status/success messages (`System.out`) and errors (`System.err`).
 * 
 * Example Interaction Flow:
 * 
 * ```
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 1
 * Enter job description: DocumentA.pdf
 * Job 'DocumentA.pdf' added to the queue.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 1
 * Enter job description: Report.docx
 * Job 'Report.docx' added to the queue.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 3
 * --- Print System Status ---
 * Waiting Queue: [DocumentA.pdf, Report.docx]
 * Processed History: []
 * ---------------------------
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 2
 * Processing job: DocumentA.pdf
 * Job 'DocumentA.pdf' moved to history.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 3
 * --- Print System Status ---
 * Waiting Queue: [Report.docx]
 * Processed History: [DocumentA.pdf]
 * ---------------------------
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 1 and 4.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 2
 * Processing job: Report.docx
 * Job 'Report.docx' moved to history.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 2
 * Error: No jobs in the queue to process.
 * 
 * Print Job Management System
 * ---------------------------
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Status
 * 4. Exit
 * Enter your choice: 4
 * Exiting Print Job Management System.
 * ```
 * 
 * **Constraints:**
 * 
 * *   The solution must compile and run using standard Java libraries (JDK 8 or higher).
 * *   Adhere strictly to all specified requirements regarding the use of Java components and best practices.
 *
 * EXPLANATION:
 * The solution implements the `PrintManager` class to simulate a print job management system, demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure and Encapsulation:**
 *     *   The system logic is encapsulated within the `PrintManager` class.
 *     *   The data fields (`printQueue`, `processedHistory`, `scanner`) are declared as `private` to restrict direct access from outside the class, promoting data integrity.
 *     *   Public methods (`addPrintJob`, `processNextJob`, `viewStatus`, `run`) provide controlled access to the system's functionality.
 * 
 * 2.  **Data Storage (`Queue`, `List`, `ArrayList`):**
 *     *   `java.util.Queue<String> printQueue`: A `LinkedList` is used to implement the `Queue` interface. This is suitable for a waiting line where elements are added at the rear (`add()`) and removed from the front (`poll()`), which is the core behavior of a queue.
 *     *   `java.util.List<String> processedHistory`: An `ArrayList` is used to implement the `List` interface. This stores the history of completed jobs. An `ArrayList` is appropriate here as we might want to view the history in the order jobs were processed, and random access or iteration is efficient.
 * 
 * 3.  **User Interface (`Scanner`, `switch`, `System.out`, `System.err`):**
 *     *   `java.util.Scanner`: Used to read user input from `System.in` for menu choices and job descriptions.
 *     *   `System.out`: Used for displaying the menu, prompts, success messages (e.g., job added, job processed), and the status view.
 *     *   `System.err`: Used exclusively for printing error messages, making them distinct from normal output. This is used for invalid menu choices, empty job descriptions, and attempting to process an empty queue.
 *     *   `switch` statement: Controls the main application flow by executing different code blocks based on the integer value of the user's menu choice.
 * 
 * 4.  **Functionality Implementation:**
 *     *   `addPrintJob`: Takes a `String`, validates it's not empty using `trim().isEmpty()`, and if valid, adds it to the `printQueue` using `add()`. An error message is printed to `System.err` for invalid input.
 *     *   `processNextJob`: Checks if `printQueue` is empty using `isEmpty()`. If not empty, it removes the head element using `poll()`, prints a message to `System.out`, and adds the removed element to the `processedHistory` list using `add()`. If the queue is empty, an error message is printed to `System.err`.
 *     *   `viewStatus`: Prints headers to `System.out` and then prints the contents of both the `printQueue` and `processedHistory` lists. The default `toString()` implementations of `LinkedList` and `ArrayList` are convenient for displaying their contents in a readable format.
 *     *   `run`: Contains the main application loop (`while(running)`). It repeatedly displays the menu, reads user input, and uses the `switch` statement to call the appropriate methods.
 * 
 * 5.  **Error Handling (`try-catch`):**
 *     *   A `try-catch` block is wrapped around the core input reading and `switch` logic within the `run` method.
 *     *   `InputMismatchException` is specifically caught to handle cases where the user enters non-integer input when an integer menu choice is expected. An error message is printed to `System.err`, and `scanner.nextLine()` is called within the catch block to consume the invalid input and prevent an infinite loop.
 *     *   A general `Exception` is caught as a fallback for any other unexpected runtime errors that might occur within the loop, demonstrating a robust approach to prevent the program from crashing unexpectedly. The error message and stack trace are printed to `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names are used for variables (`printQueue`, `processedHistory`, `jobDescription`, `choice`) and methods (`addPrintJob`, `processNextJob`, `viewStatus`, `displayMenu`, `run`).
 *     *   Javadoc comments are provided for the class and public methods, explaining their purpose, parameters, and return values (though none return values in this case). Inline comments clarify specific logic points.
 *     *   Input validation is performed for the job description.
 *     *   Error handling is implemented using `System.err` and `try-catch`.
 *     *   The code is structured logically with separate methods for distinct functionalities (adding, processing, viewing, displaying menu, running the loop).
 *     *   The `Scanner` resource is closed when the application exits (`scanner.close()`).
 * 
 * This solution effectively integrates all the required Java components into a practical, well-structured program that demonstrates advanced understanding of data structures, user interaction, and error handling in Java.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Manages a queue of print jobs and a history of processed jobs.
 * Demonstrates usage of Queue, List, ArrayList, Scanner, switch,
 * System.out, System.err, and basic exception handling.
 */
public class PrintManager {

    // Private fields for encapsulation
    private Queue<String> printQueue;
    private List<String> processedHistory;
    private Scanner scanner;

    /**
     * Constructs a new PrintManager.
     * Initializes the job queue and processed history list.
     */
    public PrintManager() {
        // Use LinkedList as an implementation of Queue
        this.printQueue = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.processedHistory = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new print job to the queue.
     * Validates that the job description is not empty.
     *
     * @param jobDescription The description of the print job.
     */
    public void addPrintJob(String jobDescription) {
        // Input validation
        if (jobDescription == null || jobDescription.trim().isEmpty()) {
            System.err.println("Error: Job description cannot be empty.");
            return; // Exit the method if input is invalid
        }
        printQueue.add(jobDescription.trim()); // Add job to the end of the queue
        System.out.println("Job '" + jobDescription.trim() + "' added to the queue.");
    }

    /**
     * Processes the next job from the queue.
     * Removes the head of the queue, simulates processing, and adds it to history.
     * Handles the case where the queue is empty.
     */
    public void processNextJob() {
        // Check if the queue is empty
        if (printQueue.isEmpty()) {
            System.err.println("Error: No jobs in the queue to process.");
            return; // Exit the method if queue is empty
        }

        // Remove the job from the head of the queue
        String jobToProcess = printQueue.poll();

        // Simulate processing
        System.out.println("Processing job: " + jobToProcess);

        // Add the processed job to the history list
        processedHistory.add(jobToProcess);
        System.out.println("Job '" + jobToProcess + "' moved to history.");
    }

    /**
     * Displays the current status of the print system,
     * including the waiting queue and processed job history.
     */
    public void viewStatus() {
        System.out.println("\n--- Print System Status ---");

        // Display waiting queue
        System.out.println("Waiting Queue: " + printQueue); // Queue's toString shows elements

        // Display processed history
        System.out.println("Processed History: " + processedHistory); // List's toString shows elements

        System.out.println("---------------------------\n");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("Print Job Management System");
        System.out.println("---------------------------");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Status");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user interaction.
     * Includes class-wide exception handling for the input loop.
     */
    public void run() {
        int choice = 0;
        boolean running = true;

        // Main application loop
        while (running) {
            displayMenu();

            try {
                // Read user input for menu choice
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character after reading integer

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter job description: ");
                        String jobDescription = scanner.nextLine();
                        addPrintJob(jobDescription); // Call method to add job
                        break;
                    case 2:
                        processNextJob(); // Call method to process job
                        break;
                    case 3:
                        viewStatus(); // Call method to view status
                        break;
                    case 4:
                        System.out.println("Exiting Print Job Management System.");
                        running = false; // Set flag to exit loop
                        break;
                    default:
                        // Handle invalid menu choices
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (InputMismatchException e) {
                // Catch specific exception for non-integer input
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }

        // Close the scanner when the application exits
        scanner.close();
    }

    /**
     * Main method to start the Print Job Management System.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PrintManager manager = new PrintManager();
        manager.run(); // Start the application loop
    }
}
