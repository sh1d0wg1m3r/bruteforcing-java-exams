/*
 * Exam Question #676
 * Generated on: 2025-05-12 16:24:09
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Emergency Room Patient Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified console-based system to manage patients arriving at an Emergency Room (ER). The system should simulate the process of patients entering a waiting queue, being called by a doctor, and then being moved to a list of processed patients.
 * 
 * Your solution must demonstrate a strong understanding of fundamental and intermediate Java concepts, specifically by incorporating *all* the following components and adhering to best practices.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Class:**
 *     *   Create a class named `Patient` to represent a patient.
 *     *   It must have the following **private** fields: `id` (int), `name` (String), and `severity` (String). The `severity` should represent the patient's condition (e.g., "Standard", "Urgent", "Critical").
 *     *   Include a public constructor `Patient(int id, String name, String severity)` to initialize these fields.
 *     *   Implement public getter methods (`getId()`, `getName()`, `getSeverity()`) for all fields.
 *     *   Override the `toString()` method to provide a clear string representation of a `Patient` object (e.g., "Patient [ID=..., Name=..., Severity=...]").
 *     *   Implement input validation within the constructor:
 *         *   Throw an `IllegalArgumentException` if the `name` is null or empty (after trimming whitespace).
 *         *   Throw an `IllegalArgumentException` if the `severity` is not one of the expected values ("Standard", "Urgent", "Critical"), ignoring case.
 * 
 * 2.  **EmergencyRoomSystem Class:**
 *     *   Create a main class named `EmergencyRoomSystem` to contain the application logic.
 *     *   This class must manage the following data structures:
 *         *   A `java.util.Queue<Patient>` to hold patients currently waiting to be seen. Use `java.util.LinkedList` as the concrete implementation.
 *         *   A `java.util.List<Patient>` (specifically using `java.util.ArrayList`) to store patients who have been processed (seen by a doctor).
 *     *   Include a private field `nextPatientId` (int) initialized to 1, used to assign unique IDs to new patients.
 *     *   Include a private field `scanner` (java.util.Scanner) initialized to read from `System.in`.
 * 
 * 3.  **Functionality:** Implement the following methods/logic within `EmergencyRoomSystem`:
 *     *   A constructor to initialize the queue, list, `nextPatientId`, and `scanner`.
 *     *   A `run()` method containing the main application loop. This loop should:
 *         *   Continuously display a menu of options to the user.
 *         *   Read the user's choice using the `Scanner`.
 *         *   Use a `switch` statement to direct execution based on the choice.
 *         *   Handle invalid menu choices.
 *     *   `addPatient()`: Prompts the user for patient name and severity. Creates a new `Patient` object using the unique `nextPatientId`, adds it to the waiting queue using `offer()`, and increments `nextPatientId`. This method should rely on the `Patient` constructor for validation and potentially re-throw exceptions for class-wide handling.
 *     *   `viewWaitingQueue()`: Iterates through and prints the details of all patients currently in the waiting queue, showing their position. Do *not* remove patients from the queue in this method.
 *     *   `seeNextPatient()`: Removes the patient at the front of the waiting queue using `poll()`. If a patient is retrieved, print a message indicating which patient is being seen and add them to the processed patients list. If the queue is empty, print an appropriate error message.
 *     *   `viewProcessedPatients()`: Prints the details of all patients in the processed patients list.
 *     *   A `main` method to create an instance of `EmergencyRoomSystem` and call its `run()` method.
 * 
 * 4.  **Required Components Usage:** Ensure your code explicitly uses:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List`
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err` for error messages
 *     *   `System.out` for normal output
 * 
 * 5.  **Exception Handling:**
 *     *   Implement class-wide `try-catch` blocks in the `run()` method to handle exceptions that might occur during user input or patient creation.
 *     *   Catch `java.util.InputMismatchException` specifically for cases where the user enters non-integer input when an integer is expected (like the menu choice). Print an error to `System.err` and consume the invalid input.
 *     *   Catch `java.lang.IllegalArgumentException` which is thrown by the `Patient` constructor. Print an informative error message to `System.err`.
 *     *   Include a general `catch (Exception e)` as a fallback for any other unexpected errors, printing an error message to `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (especially Javadoc-style for methods) and documentation.
 *     *   Implement input validation as specified (menu choice, patient data).
 *     *   Handle errors gracefully using `try-catch` and `System.err`.
 *     *   Structure your code clearly into classes and methods.
 *     *   Ensure the `Scanner` is closed when the application exits.
 *     *   Properly handle the newline character after reading an integer with `Scanner`.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept numeric input for choices, prompt for patient details, and display system status (queue, processed list) or error messages based on user actions. Error messages for invalid input or empty queues must be directed to `System.err`.
 * 
 * Example Interaction (similar to the description provided in thought process):
 * ```
 * --- Emergency Room Triage System ---
 * Select an option:
 * 1. Add New Patient
 * 2. View Waiting Queue
 * 3. See Next Patient (Doctor Call)
 * 4. View Processed Patients
 * 5. Exit
 * Enter your choice: 1
 * --- Add New Patient ---
 * Enter patient name: Alice
 * Enter severity (Standard, Urgent, Critical): Standard
 * Patient added to waiting queue: Patient [ID=1, Name=Alice, Severity=Standard]
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 2
 * --- Waiting Queue ---
 * 1. Patient [ID=1, Name=Alice, Severity=Standard]
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 3
 * --- See Next Patient ---
 * Doctor is now seeing: Patient [ID=1, Name=Alice, Severity=Standard]
 * Patient moved to processed list.
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 3
 * --- See Next Patient ---
 * The waiting queue is empty. No patients to see. // This line goes to System.err
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 4
 * --- Processed Patients ---
 * 1. Patient [ID=1, Name=Alice, Severity=Standard]
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: invalid_input
 * Invalid input. Please enter a number. // This line goes to System.err
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 1
 * --- Add New Patient ---
 * Enter patient name: Bob
 * Enter severity (Standard, Urgent, Critical): Critical
 * Patient added to waiting queue: Patient [ID=2, Name=Bob, Severity=Critical]
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 1
 * --- Add New Patient ---
 * Enter patient name: Charlie
 * Enter severity (Standard, Urgent, Critical): Minor
 * Error adding patient: Invalid severity. Must be Standard, Urgent, or Critical. // This line goes to System.err
 * 
 * Select an option:
 * ... (menu repeats) ...
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 *
 * EXPLANATION:
 * This solution implements a simplified Emergency Room Patient Management System, fulfilling all the specified requirements and demonstrating key Java concepts.
 * 
 * 1.  **Patient Class:** The `Patient` class is a simple Plain Old Java Object (POJO) representing a patient. It enforces encapsulation by keeping fields `private` and providing `public` getters. The constructor includes essential input validation for `name` and `severity`, throwing `IllegalArgumentException` if constraints are violated. The `toString()` method provides a convenient way to print patient details.
 * 
 * 2.  **EmergencyRoomSystem Class:** This is the core class managing the system's state and logic.
 *     *   It uses a `Queue<Patient>` (`waitingQueue`) implemented by `LinkedList`. The `Queue` interface is appropriate here because patients are processed in a First-In, First-Out (FIFO) manner â€“ the patient who has been waiting longest (at the front of the queue) is the next to be seen. `offer()` is used for adding (enqueueing), and `poll()` is used for removing (dequeueing).
 *     *   It uses a `List<Patient>` (`processedPatients`) implemented by `ArrayList`. The `List` interface is suitable for storing processed patients as it represents an ordered collection where elements can be accessed by index, and the primary operations are adding and iterating. `ArrayList` is a common and efficient list implementation for this use case.
 *     *   `nextPatientId` ensures each patient gets a unique identifier.
 *     *   `scanner` is initialized once to read user input from the console.
 * 
 * 3.  **Application Flow (`run` method):**
 *     *   The `run()` method contains the main loop that continues until the user chooses to exit (option 5).
 *     *   Inside the loop, `printMenu()` displays the available actions.
 *     *   A `try-catch` block wraps the input reading and the `switch` statement. This is crucial for handling potential errors during user interaction, demonstrating **class-wide exception handling**.
 *     *   `scanner.nextInt()` reads the integer choice.
 *     *   `scanner.nextLine()` is called immediately after `scanner.nextInt()` to consume the leftover newline character. This prevents issues with subsequent `scanner.nextLine()` calls in methods like `addPatient()`.
 *     *   The `switch` statement directs execution to the appropriate method based on the valid integer choice.
 *     *   The `default` case in the `switch` handles integer inputs that are outside the 1-5 range, printing an error to `System.err`.
 * 
 * 4.  **Exception Handling Details:**
 *     *   `catch (InputMismatchException e)`: This block specifically catches errors when `scanner.nextInt()` fails because the input was not a valid integer. It prints an error message to `System.err` and consumes the invalid input line using `scanner.nextLine()` to clear the scanner's buffer, preventing an infinite error loop.
 *     *   `catch (IllegalArgumentException e)`: This block catches the exceptions thrown by the `Patient` constructor if the user provides invalid patient details (empty name or invalid severity). The exception message from the `Patient` class is printed to `System.err`. This demonstrates how exceptions thrown in one method (`addPatient` calls `Patient` constructor) are caught higher up in the call stack (`run` method).
 *     *   `catch (Exception e)`: This is a general catch block to handle any other unexpected runtime exceptions, ensuring the program doesn't crash abruptly. It prints a generic error message to `System.err`.
 * 
 * 5.  **Method Implementations:**
 *     *   `addPatient()`: Prompts for name and severity, creates a `Patient` object (which performs validation), and adds it to the `waitingQueue` using `offer()`.
 *     *   `viewWaitingQueue()`: Checks if the queue is empty. If not, it iterates through the queue using an enhanced for loop (or an Iterator) to display elements without removing them.
 *     *   `seeNextPatient()`: Uses `waitingQueue.poll()`. `poll()` is preferred over `remove()` because it returns `null` if the queue is empty, allowing for graceful handling of the empty queue condition without throwing an exception (`remove()` would throw `NoSuchElementException`). If a patient is retrieved, they are added to the `processedPatients` list. Error messages for an empty queue are sent to `System.err`.
 *     *   `viewProcessedPatients()`: Iterates through the `processedPatients` list (an `ArrayList`) using a standard for loop with index to display the processed patients.
 * 
 * 6.  **Best Practices:** The code adheres to best practices by using private fields, public methods (getters, functional methods), meaningful names, comments, input validation within the `Patient` constructor, robust error handling using `try-catch` and `System.err`, and a clear separation of concerns between the `Patient` data class and the `EmergencyRoomSystem` logic class. The `Scanner` is closed when the application finishes.
 * 
 * This solution effectively integrates `Queue`, `List`/`ArrayList`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` blocks in a practical, structured application, meeting the requirements of a challenging exam task.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the Emergency Room system.
 */
class Patient {
    private int id;
    private String name;
    private String severity; // e.g., Standard, Urgent, Critical

    /**
     * Constructs a new Patient object.
     *
     * @param id The unique ID of the patient.
     * @param name The name of the patient. Cannot be null or empty.
     * @param severity The severity level of the patient. Must be "Standard", "Urgent", or "Critical" (case-insensitive).
     * @throws IllegalArgumentException if name is invalid or severity is invalid.
     */
    public Patient(int id, String name, String severity) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be empty.");
        }
        // Basic severity validation (case-insensitive)
        String lowerSeverity = severity != null ? severity.toLowerCase() : "";
        if (!lowerSeverity.equals("standard") &&
            !lowerSeverity.equals("urgent") &&
            !lowerSeverity.equals("critical")) {
            throw new IllegalArgumentException("Invalid severity. Must be Standard, Urgent, or Critical.");
        }

        this.id = id;
        this.name = name.trim();
        this.severity = severity; // Store original case or normalize if preferred
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the patient's severity level.
     * @return The patient severity.
     */
    public String getSeverity() {
        return severity;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return String representation including ID, Name, and Severity.
     */
    @Override
    public String toString() {
        return "Patient [ID=" + id + ", Name=" + name + ", Severity=" + severity + "]";
    }
}

/**
 * Manages the Emergency Room system, including patient queue and processed list.
 */
public class EmergencyRoomSystem {

    private Queue<Patient> waitingQueue;
    private List<Patient> processedPatients;
    private int nextPatientId;
    private Scanner scanner;

    /**
     * Constructs a new EmergencyRoomSystem.
     * Initializes data structures and scanner.
     */
    public EmergencyRoomSystem() {
        // Use LinkedList as an implementation of Queue
        waitingQueue = new LinkedList<>();
        // Use ArrayList as an implementation of List
        processedPatients = new ArrayList<>();
        nextPatientId = 1;
        scanner = new Scanner(System.in);
    }

    /**
     * Runs the main application loop for the ER system.
     * Displays the menu and processes user input.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("--- Emergency Room Triage System ---");
        int choice = -1;

        // Main application loop
        while (choice != 5) {
            printMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                // Consume the newline character left-over after reading the integer
                scanner.nextLine();

                // Process user choice using a switch statement
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        viewWaitingQueue();
                        break;
                    case 3:
                        seeNextPatient();
                        break;
                    case 4:
                        viewProcessedPatients();
                        break;
                    case 5:
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice
                System.err.println("Invalid input. Please enter a number.");
                // Consume the invalid input to prevent infinite loop
                scanner.nextLine();
                choice = -1; // Reset choice to stay in the loop and show menu again
            } catch (IllegalArgumentException e) {
                // Handle exceptions thrown by Patient constructor (invalid name/severity)
                System.err.println("Error adding patient: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging purposes
            }
            System.out.println(); // Add a blank line for better readability between interactions
        }

        // Close the scanner when exiting the application
        scanner.close();
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("Select an option:");
        System.out.println("1. Add New Patient");
        System.out.println("2. View Waiting Queue");
        System.out.println("3. See Next Patient (Doctor Call)");
        System.out.println("4. View Processed Patients");
        System.out.println("5. Exit");
    }

    /**
     * Prompts the user for patient details and adds a new patient to the waiting queue.
     * Handles potential IllegalArgumentException from Patient constructor.
     */
    private void addPatient() {
        System.out.println("--- Add New Patient ---");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine(); // Read full line for name

        System.out.print("Enter severity (Standard, Urgent, Critical): ");
        String severity = scanner.nextLine(); // Read full line for severity

        // The Patient constructor validates input and throws IllegalArgumentException
        // This exception is caught by the try-catch block in the run() method.
        Patient newPatient = new Patient(nextPatientId, name, severity);
        waitingQueue.offer(newPatient); // Use offer() which is suitable for capacity-constrained queues (though LinkedList isn't) and is generally safer than add().
        System.out.println("Patient added to waiting queue: " + newPatient);
        nextPatientId++; // Increment ID for the next patient
    }

    /**
     * Displays the current patients in the waiting queue without removing them.
     */
    private void viewWaitingQueue() {
        System.out.println("--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate through the queue elements. The order reflects the queue's state.
            int position = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(position + ". " + patient);
                position++;
            }
        }
    }

    /**
     * Simulates a doctor seeing the next patient.
     * Removes the patient from the front of the waiting queue and moves them to the processed list.
     */
    private void seeNextPatient() {
        System.out.println("--- See Next Patient ---");
        // poll() retrieves and removes the head of the queue, or returns null if the queue is empty.
        Patient nextPatient = waitingQueue.poll();

        if (nextPatient == null) {
            // Use System.err for error condition (queue empty)
            System.err.println("The waiting queue is empty. No patients to see.");
        } else {
            // Add the processed patient to the processedPatients list
            processedPatients.add(nextPatient);
            System.out.println("Doctor is now seeing: " + nextPatient);
            System.out.println("Patient moved to processed list.");
        }
    }

    /**
     * Displays the list of patients who have been processed.
     */
    private void viewProcessedPatients() {
        System.out.println("--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            // Iterate through the list of processed patients
            for (int i = 0; i < processedPatients.size(); i++) {
                System.out.println((i + 1) + ". " + processedPatients.get(i));
            }
        }
    }

    /**
     * The entry point of the Emergency Room System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        EmergencyRoomSystem system = new EmergencyRoomSystem();
        system.run(); // Start the application loop
    }
}
