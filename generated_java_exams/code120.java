/*
 * Exam Question #120
 * Generated on: 2025-05-11 22:17:20
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Scheduler**
 * 
 * You are tasked with developing a simplified appointment scheduling system for a small clinic. The system needs to manage a waiting list of patients and schedule them for available slots.
 * 
 * **System Requirements:**
 * 
 * 1.  **Patient Waiting List:** Patients who arrive without a prior appointment are added to a waiting list. This list operates on a First-In, First-Out (FIFO) basis.
 * 2.  **Appointment Scheduling:** The system can schedule the next patient from the waiting list into an available appointment slot. For simplicity, appointment slots will be represented by a sequential ID starting from 1.
 * 3.  **View Appointments:** The system should be able to display all currently scheduled appointments.
 * 4.  **Cancel Appointment:** The system should allow canceling a scheduled appointment using its unique ID.
 * 5.  **User Interface:** A simple text-based menu driven interface is required.
 * 6.  **Error Handling:** The system must handle potential errors gracefully, such as trying to schedule from an empty waiting list or trying to cancel a non-existent appointment. Invalid user input should also be handled.
 * 
 * **Implementation Details:**
 * 
 * *   Use a `Queue` to manage the patient waiting list.
 * *   Use a `List` (specifically, an `ArrayList`) to store the scheduled appointments.
 * *   Use `Scanner` to get user input for menu choices and patient details.
 * *   Use a `switch` statement to handle the main menu options.
 * *   Use `System.out` for displaying the menu, successful operations, and appointment lists.
 * *   Use `System.err` for displaying error messages (e.g., empty queue, invalid appointment ID).
 * *   Implement class-wide exception handling using `try-catch` blocks to manage potential runtime issues, particularly around user input processing.
 * *   Structure your code into appropriate classes (`Patient`, `Appointment`, `HospitalScheduler`).
 * *   Apply best practices: encapsulation (private fields, public methods), meaningful names, comments, and input validation where applicable.
 * 
 * **Classes to Create:**
 * 
 * 1.  `Patient`: Represents a patient with at least a name.
 * 2.  `Appointment`: Represents a scheduled appointment, linking a `Patient` to an appointment slot ID.
 * 3.  `HospitalScheduler`: Contains the main logic, managing the `Queue` and `List`, handling user interaction, and implementing the menu operations.
 * 
 * **Menu Options:**
 * 
 * 1.  Add Patient to Waiting List
 * 2.  Schedule Next Patient
 * 3.  View All Appointments
 * 4.  Cancel Appointment
 * 5.  Exit
 * 
 * **Expected Output:**
 * 
 * *   The program should display the menu and prompt for user input repeatedly until the user chooses to exit.
 * *   Adding a patient should confirm the patient has been added to the waiting list.
 * *   Scheduling should confirm which patient was scheduled and their appointment ID, or print an error if the waiting list is empty.
 * *   Viewing appointments should list all scheduled appointments with patient name and appointment ID, or indicate if no appointments are scheduled.
 * *   Canceling an appointment should confirm the cancellation or print an error if the ID is invalid.
 * *   Error messages should be printed to `System.err`.
 * *   A general error caught by the class-wide `try-catch` should print an informative message.
 * 
 * **Note:** You do not need to implement complex time slot management. A simple sequential integer ID for appointments is sufficient.
 * 
 * Write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic hospital appointment scheduler demonstrating the required Java concepts.
 * 
 * **Class Structure:**
 * *   `Patient`: A simple class to hold patient data (name). Encapsulation is used with a private field and a public getter.
 * *   `Appointment`: Holds the appointment details, including a unique integer ID and the `Patient` object. Encapsulation is used.
 * *   `HospitalScheduler`: This is the main class containing the application logic. It manages the data structures and user interaction.
 * 
 * **Required Component Usage:**
 * *   `Queue`: A `LinkedList` object is instantiated and assigned to a `Queue<Patient>` reference (`waitingList`). `offer()` is used to add patients (FIFO), and `poll()` is used to remove and retrieve the next patient.
 * *   `ArrayList`: An `ArrayList` object is instantiated and assigned to a `List<Appointment>` reference (`scheduledAppointments`). `add()` is used to store scheduled appointments, and `remove()` (via an `Iterator` for safe removal) is used for cancellation.
 * *   `List interface`: The `scheduledAppointments` variable is declared as `List<Appointment>`, adhering to the principle of programming to interfaces.
 * *   `Scanner`: A `Scanner` object reads user input from `System.in`. It's used to get menu choices, patient names, and appointment IDs for cancellation. The `try-with-resources` block ensures the scanner is closed automatically.
 * *   `Switch statement`: The main application loop uses a `switch` statement based on the user's menu choice to direct execution to the appropriate method (`addPatientToWaitingList`, `scheduleNextPatient`, `viewAllAppointments`, `cancelAppointment`).
 * *   `System.err`: Used specifically for printing error messages, such as attempting to schedule when the queue is empty, attempting to cancel a non-existent appointment, or invalid input format.
 * *   `System.out`: Used for printing the menu, prompts, success messages, and the list of scheduled appointments.
 * *   `Class-wide exception handling with try-catch`:
 *     *   The `main` method's core logic (the `while` loop and `Scanner` usage) is wrapped in a `try-catch` block. This catches general exceptions that might occur during the program's execution.
 *     *   Specific input parsing operations (like converting menu choice or appointment ID string to integer) are wrapped in inner `try-catch` blocks to handle `NumberFormatException` gracefully, preventing the program from crashing on non-numeric input and providing specific error messages to `System.err`.
 * 
 * **Best Practices:**
 * *   **Encapsulation:** Fields in `Patient` and `Appointment` are private with public getter methods.
 * *   **Meaningful Names:** Variables (`waitingList`, `scheduledAppointments`, `nextAppointmentId`, `patientName`, `appointmentId`, `choice`, etc.) and methods (`addPatientToWaitingList`, `scheduleNextPatient`, `viewAllAppointments`, `cancelAppointment`, `displayMenu`) are clearly named.
 * *   **Comments:** Code includes comments explaining the purpose of classes, fields, and methods.
 * *   **Input Validation:** Basic validation is done for patient name (not empty) and menu choice (within range). More importantly, `NumberFormatException` is handled for integer inputs.
 * *   **Error Handling:** Specific errors (empty queue, invalid ID) are checked for and reported via `System.err`. `try-catch` blocks handle unexpected exceptions and invalid input format.
 * *   **Clean Code Structure:** The code is organized into logical classes, each with a specific responsibility. The `HospitalScheduler` class orchestrates the operations. The `displayMenu` method is separate for clarity.
 * 
 * The solution demonstrates how to combine these fundamental Java data structures and control flow mechanisms to build a functional, albeit simple, application with robust error handling. The use of `Iterator` for safe removal during list iteration in `cancelAppointment` is a specific detail that shows attention to potential pitfalls when modifying collections while iterating.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Iterator;

// Represents a patient
class Patient {
    private String name;

    public Patient(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a scheduled appointment
class Appointment {
    private int appointmentId;
    private Patient patient;

    public Appointment(int appointmentId, Patient patient) {
        this.appointmentId = appointmentId;
        this.patient = patient;
    }

    public int getAppointmentId() {
        return appointmentId;
    }

    public Patient getPatient() {
        return patient;
    }

    @Override
    public String toString() {
        return "Appointment ID: " + appointmentId + ", Patient: " + patient.getName();
    }
}

// Manages the waiting list and scheduled appointments
public class HospitalScheduler {

    // Required: Queue for waiting list (FIFO)
    private Queue<Patient> waitingList;

    // Required: List for scheduled appointments (using ArrayList)
    private List<Appointment> scheduledAppointments;

    private int nextAppointmentId; // To generate unique appointment IDs

    public HospitalScheduler() {
        this.waitingList = new LinkedList<>(); // LinkedList implements Queue
        this.scheduledAppointments = new ArrayList<>(); // ArrayList implements List
        this.nextAppointmentId = 1;
    }

    // Add a patient to the waiting list
    public void addPatientToWaitingList(String patientName) {
        if (patientName == null || patientName.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        Patient patient = new Patient(patientName.trim());
        waitingList.offer(patient); // Add to the end of the queue
        System.out.println(patient.getName() + " added to the waiting list.");
    }

    // Schedule the next patient from the waiting list
    public void scheduleNextPatient() {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule.");
        } else {
            Patient patient = waitingList.poll(); // Remove and get the head of the queue
            Appointment newAppointment = new Appointment(nextAppointmentId++, patient);
            scheduledAppointments.add(newAppointment); // Add to the list of scheduled appointments
            System.out.println("Scheduled: " + newAppointment);
        }
    }

    // View all scheduled appointments
    public void viewAllAppointments() {
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            System.out.println("\n--- Scheduled Appointments ---");
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
            System.out.println("----------------------------\n");
        }
    }

    // Cancel a scheduled appointment by ID
    public void cancelAppointment(int appointmentId) {
        boolean found = false;
        // Use Iterator for safe removal while iterating
        Iterator<Appointment> iterator = scheduledAppointments.iterator();
        while (iterator.hasNext()) {
            Appointment appointment = iterator.next();
            if (appointment.getAppointmentId() == appointmentId) {
                iterator.remove(); // Safely remove the current element
                System.out.println("Appointment ID " + appointmentId + " for " + appointment.getPatient().getName() + " cancelled.");
                found = true;
                break; // Assuming appointment IDs are unique
            }
        }

        if (!found) {
            System.err.println("Error: Appointment with ID " + appointmentId + " not found.");
        }
    }

    // Main method to run the scheduler
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        // Required: Scanner for user input
        // Required: Class-wide exception handling with try-catch
        try (Scanner scanner = new Scanner(System.in)) {
            int choice = -1;
            while (choice != 5) {
                displayMenu();
                System.out.print("Enter your choice: ");

                try {
                    choice = Integer.parseInt(scanner.nextLine()); // Read line and parse

                    // Required: Switch statement for flow control
                    switch (choice) {
                        case 1:
                            System.out.print("Enter patient name: ");
                            String name = scanner.nextLine();
                            scheduler.addPatientToWaitingList(name);
                            break;
                        case 2:
                            scheduler.scheduleNextPatient();
                            break;
                        case 3:
                            scheduler.viewAllAppointments();
                            break;
                        case 4:
                            System.out.print("Enter appointment ID to cancel: ");
                            try {
                                int idToCancel = Integer.parseInt(scanner.nextLine());
                                scheduler.cancelAppointment(idToCancel);
                            } catch (NumberFormatException e) {
                                System.err.println("Error: Invalid input. Please enter a valid appointment ID (number).");
                            }
                            break;
                        case 5:
                            System.out.println("Exiting Hospital Scheduler. Goodbye!");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (NumberFormatException e) {
                    System.err.println("Error: Invalid input. Please enter a number for your choice.");
                    choice = -1; // Reset choice to avoid exiting if input was non-numeric
                } catch (Exception e) {
                    // Required: System.err for error messages
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for debugging
                }
                System.out.println(); // Add a newline for better readability
            }
        } catch (Exception e) {
            // Required: Class-wide exception handling outside the loop as well
            System.err.println("A critical error occurred during application startup or shutdown: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        }
    }

    // Display the main menu
    private static void displayMenu() {
        // Required: System.out for normal output
        System.out.println("--- Hospital Scheduler Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Patient");
        System.out.println("3. View All Appointments");
        System.out.println("4. Cancel Appointment");
        System.out.println("5. Exit");
        System.out.println("-------------------------------");
    }
}
