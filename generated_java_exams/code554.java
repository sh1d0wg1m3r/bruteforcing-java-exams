/*
 * Exam Question #554
 * Generated on: 2025-05-11 23:28:42
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Document Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple Document Processing System. This system manages documents that need to be processed in the order they are submitted. It maintains a queue of documents awaiting processing and a list of documents that have been successfully processed. Users interact with the system via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Document Representation:** Create a `Document` class with the following attributes:
 *     *   `id` (int): Unique identifier for the document.
 *     *   `name` (String): Name or title of the document.
 *     *   `type` (String): Type of document (e.g., "Report", "Form", "Image").
 *     *   `status` (String): Current status (e.g., "PENDING", "PROCESSED").
 *     *   Implement appropriate encapsulation (private fields, public getters). Include a constructor to initialize the document with ID, name, type, and set status to "PENDING".
 * 
 * 2.  **Processing System Class:** Create a `DocumentProcessingSystem` class that manages the document collections and user interaction.
 *     *   It must contain a `Queue<Document>` to hold documents awaiting processing. Use `java.util.LinkedList` as the concrete implementation for the `Queue`.
 *     *   It must contain a `List<Document>` to hold documents that have been processed. Use `java.util.ArrayList` as the concrete implementation for the `List`, but declare the field using the `List` interface type (`List<Document>`).
 *     *   It must use a `Scanner` to read user input from the console.
 *     *   Implement the following functionalities:
 *         *   **Add Document:** Prompt the user for document name and type, generate a unique ID (a simple counter starting from 1 is sufficient), create a `Document` object, and add it to the processing queue.
 *         *   **Process Next Document:** Take the next document from the front of the queue, change its status to "PROCESSED", and move it to the list of processed documents. If the queue is empty, report an error.
 *         *   **View Processing Queue:** Display the details (ID, Name, Type, Status) of all documents currently in the processing queue, in the order they will be processed.
 *         *   **View Processed Documents:** Display the details of all documents that have been processed.
 *         *   **Exit:** Terminate the application.
 * 
 * 3.  **User Interface:** Implement a simple text-based menu driven interface using a `switch` statement to handle the user's choice. The menu options should correspond to the functionalities listed above.
 * 
 * 4.  **Error Handling:**
 *     *   Use `System.err` to output error messages (e.g., "Queue is empty, cannot process!", "Invalid menu choice.").
 *     *   Implement class-wide exception handling using a `try-catch` block around the main application loop to catch unexpected runtime errors and provide a graceful exit message.
 * 
 * 5.  **Input Validation:** Handle cases where the user enters non-numeric input for menu choices or invalid menu options.
 * 
 * 6.  **Output:** Use `System.out` for displaying the menu, prompts, document details, and success messages.
 * 
 * 7.  **Best Practices:** Adhere to Java best practices including:
 *     *   Proper encapsulation.
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Clean code structure.
 * 
 * **Expected Output Format:**
 * 
 * *   Menu should be clearly displayed.
 * *   Prompts for input should be clear.
 * *   Document details should be printed one per line, showing ID, Name, Type, and Status.
 * *   Error messages should go to `System.err`.
 * *   Success messages or status updates should go to `System.out`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Document Processing System ---
 * 1. Add Document
 * 2. Process Next Document
 * 3. View Processing Queue
 * 4. View Processed Documents
 * 5. Exit
 * Enter your choice: 1
 * Enter document name: Report A
 * Enter document type: PDF
 * Document added to queue.
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 1
 * Enter document name: Form B
 * Enter document type: DOC
 * Document added to queue.
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 3
 * --- Processing Queue ---
 * ID: 1, Name: Report A, Type: PDF, Status: PENDING
 * ID: 2, Name: Form B, Type: DOC, Status: PENDING
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 2
 * Processing document ID: 1 (Report A)
 * Document processed.
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 3
 * --- Processing Queue ---
 * ID: 2, Name: Form B, Type: DOC, Status: PENDING
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 4
 * --- Processed Documents ---
 * ID: 1, Name: Report A, Type: PDF, Status: PROCESSED
 * 
 * --- Document Processing System ---
 * ... (menu)
 * Enter your choice: 5
 * Exiting Document Processing System.
 * ```
 * 
 * **Note:** Focus on correctly implementing the core logic and using all required Java components as specified.
 *
 * EXPLANATION:
 * This solution implements a `DocumentProcessingSystem` that manages documents using a queue for pending items and a list for processed items, demonstrating the required Java components and programming practices.
 * 
 * 1.  **`Document` Class:**
 *     *   Represents a single document with `id`, `name`, `type`, and `status`.
 *     *   Uses `private` fields and `public` getters for encapsulation.
 *     *   The constructor initializes a document with a "PENDING" status.
 *     *   Includes a `setStatus` method to change the document's status.
 *     *   Overrides `toString()` for easy printing of document details.
 * 
 * 2.  **`DocumentProcessingSystem` Class:**
 *     *   **Data Structures:**
 *         *   `processingQueue`: Declared as `Queue<Document>` and initialized with `new LinkedList<>()`. This fulfills the requirement to use `Queue` and `LinkedList`. Documents are added to the end (`add()`) and removed from the front (`poll()`), adhering to the FIFO (First-In, First-Out) nature of a queue.
 *         *   `processedDocuments`: Declared as `List<Document>` and initialized with `new ArrayList<>()`. This fulfills the requirement to use `List` and `ArrayList`, demonstrating programming to the interface (`List`). Processed documents are simply added to this list.
 *     *   **Input:**
 *         *   `scanner`: An instance of `Scanner` is used to read user input from `System.in`. It's initialized in the constructor and closed in the `finally` block of the `run` method to release system resources.
 *     *   **Functionality Methods:**
 *         *   `displayMenu()`: Prints the available options to `System.out`.
 *         *   `addDocument()`: Prompts for details, creates a `Document` object with a unique ID (managed by `nextDocumentId`), and adds it to the `processingQueue` using `add()`. Output is via `System.out`.
 *         *   `processNextDocument()`: Checks if the `processingQueue` is empty. If so, it prints an error message to `System.err`. Otherwise, it uses `poll()` to retrieve and remove the document at the head of the queue, updates its status using `setStatus()`, and adds it to the `processedDocuments` list using `add()`. Output is via `System.out`.
 *         *   `viewProcessingQueue()`: Iterates through the `processingQueue` using a for-each loop. This iterates in the order elements would be processed by `poll()`. Document details are printed to `System.out`.
 *         *   `viewProcessedDocuments()`: Iterates through the `processedDocuments` list and prints each document's details to `System.out`.
 *     *   **`run()` Method:**
 *         *   Contains the main application loop (`while(running)`).
 *         *   **Class-wide Exception Handling:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This demonstrates catching potentially unexpected runtime errors that might occur during the application's execution. Error details are printed to `System.err`. A `finally` block ensures the `Scanner` is closed even if an exception occurs or the loop terminates normally.
 *         *   **Input Validation:** A nested `try-catch(InputMismatchException e)` is used specifically for reading the menu choice using `scanner.nextInt()`. If the user enters non-integer input, it catches the exception, prints an error to `System.err`, consumes the invalid input using `scanner.next()`, and continues the loop. A `finally` block after the inner `try-catch` handles consuming the newline character left by `nextInt()`, which is crucial before subsequent `nextLine()` calls in `addDocument()`.
 *         *   **Switch Statement:** A `switch` statement is used to control the flow of execution based on the user's valid menu choice, calling the appropriate method for each case. The `default` case handles invalid numeric choices and prints an error to `System.err`.
 * 
 * 3.  **`main()` Method:**
 *     *   Creates an instance of `DocumentProcessingSystem` and calls its `run()` method to start the application.
 * 
 * This solution effectively integrates all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `Switch`, `System.err`, `System.out`, `try-catch`) within a practical, albeit simple, real-world simulation, while adhering to good programming practices like encapsulation, meaningful naming, and basic error handling/input validation.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a document managed by the processing system.
 */
class Document {
    private int id;
    private String name;
    private String type;
    private String status; // e.g., "PENDING", "PROCESSED"

    /**
     * Constructs a new Document.
     *
     * @param id   The unique identifier.
     * @param name The name of the document.
     * @param type The type of the document.
     */
    public Document(int id, String name, String type) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.status = "PENDING"; // Default status
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the document.
     *
     * @param status The new status.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Type: %s, Status: %s",
                             id, name, type, status);
    }
}

/**
 * Manages the queue and list of documents for processing.
 */
public class DocumentProcessingSystem {

    // Required: Queue to hold documents awaiting processing
    private Queue<Document> processingQueue;

    // Required: List to hold processed documents (using List interface)
    private List<Document> processedDocuments;

    // Required: Scanner for user input
    private Scanner scanner;

    private int nextDocumentId; // Counter for unique document IDs

    /**
     * Constructs a new DocumentProcessingSystem.
     */
    public DocumentProcessingSystem() {
        // Initialize the queue using LinkedList
        this.processingQueue = new LinkedList<>();
        // Initialize the list using ArrayList, declared as List
        this.processedDocuments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.nextDocumentId = 1; // Start ID counter
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Document Processing System ---");
        System.out.println("1. Add Document");
        System.out.println("2. Process Next Document");
        System.out.println("3. View Processing Queue");
        System.out.println("4. View Processed Documents");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new document to the processing queue based on user input.
     */
    private void addDocument() {
        System.out.print("Enter document name: ");
        String name = scanner.nextLine();
        System.out.print("Enter document type: ");
        String type = scanner.nextLine();

        Document newDoc = new Document(nextDocumentId++, name, type);
        processingQueue.add(newDoc); // Add to the queue
        System.out.println("Document added to queue. " + newDoc);
    }

    /**
     * Processes the next document from the queue, changing its status
     * and moving it to the processed list.
     */
    private void processNextDocument() {
        if (processingQueue.isEmpty()) {
            // Required: System.err for error messages
            System.err.println("Error: Processing queue is empty, cannot process!");
        } else {
            Document docToProcess = processingQueue.poll(); // Get and remove from queue
            docToProcess.setStatus("PROCESSED"); // Update status
            processedDocuments.add(docToProcess); // Add to processed list
            System.out.println("Processing document: " + docToProcess.getName() + " (ID: " + docToProcess.getId() + ")");
            System.out.println("Document processed.");
        }
    }

    /**
     * Displays all documents currently in the processing queue.
     */
    private void viewProcessingQueue() {
        System.out.println("\n--- Processing Queue ---");
        if (processingQueue.isEmpty()) {
            System.out.println("The processing queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Document doc : processingQueue) {
                System.out.println(doc);
            }
        }
    }

    /**
     * Displays all documents that have been processed.
     */
    private void viewProcessedDocuments() {
        System.out.println("\n--- Processed Documents ---");
        if (processedDocuments.isEmpty()) {
            System.out.println("No documents have been processed yet.");
        } else {
            // Iterate through the list
            for (Document doc : processedDocuments) {
                System.out.println(doc);
            }
        }
    }

    /**
     * Runs the main application loop, handling user input and menu choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Required: Class-wide exception handling with try-catch
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Initialize choice

                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    // Required: System.err for error messages
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration
                } finally {
                     // Consume the newline character left by nextInt()
                     // This is important before the next nextLine() call
                     if (scanner.hasNextLine()) {
                         scanner.nextLine();
                     }
                }


                // Required: Switch statement for flow control
                switch (choice) {
                    case 1:
                        addDocument();
                        break;
                    case 2:
                        processNextDocument();
                        break;
                    case 3:
                        viewProcessingQueue();
                        break;
                    case 4:
                        viewProcessedDocuments();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Document Processing System.");
                        break;
                    default:
                        // Required: System.err for error messages
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            // Required: System.err for error messages in catch block
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
            System.err.println("System is shutting down due to error.");
        } finally {
            // Ensure scanner is closed regardless of how the loop exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     */
    public static void main(String[] args) {
        DocumentProcessingSystem system = new DocumentProcessingSystem();
        system.run();
    }
}
