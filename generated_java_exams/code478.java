/*
 * Exam Question #478
 * Generated on: 2025-05-11 23:16:58
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam: Support Ticket System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line based support ticket management system. This system should allow users (simulating customers and agents) to submit new support tickets and for agents to process tickets in the order they were received. The system should maintain a queue of waiting tickets and a list of processed tickets.
 * 
 * Your solution must be implemented in a single Java class and adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store tickets that are waiting to be processed. Tickets should be processed in a First-In, First-Out (FIFO) manner.
 *     *   Use a `java.util.List` (specifically, an `ArrayList` implementation) to store tickets that have been processed.
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (e.g., Submit Ticket, Process Next Ticket, View Waiting Tickets, View Processed Tickets, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 3.  **Ticket Representation:**
 *     *   Create a simple inner class (or static nested class) called `Ticket` to represent a support ticket.
 *     *   Each `Ticket` should have an auto-generated unique ID (starting from 1), a description (String), and a status (String, e.g., "Waiting", "Processed").
 *     *   Implement appropriate getters and setters for the `Ticket` class.
 * 
 * 4.  **System Logic:**
 *     *   When a ticket is submitted, it should be added to the waiting queue.
 *     *   When a ticket is processed, it should be removed from the waiting queue, its status updated to "Processed", and added to the list of processed tickets.
 *     *   Users should be able to view the list of tickets currently in the waiting queue and the list of tickets that have been processed.
 * 
 * 5.  **Input Validation and Error Handling:**
 *     *   Validate user input where necessary (e.g., ensuring menu choice is an integer, ensuring ticket description is not empty).
 *     *   Use `System.err` to print error messages (e.g., invalid input, attempting to process a ticket when the queue is empty, empty ticket description).
 *     *   Use `System.out` for all normal output (menu, prompts, ticket details, confirmations).
 *     *   Implement "class-wide" exception handling using `try-catch` blocks within the main operational loop to gracefully handle potential issues like invalid input format or errors during collection operations, preventing the program from crashing unexpectedly.
 * 
 * 6.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include brief comments explaining complex parts or purpose of methods/fields.
 *     *   Structure your code cleanly with separate methods for different actions (submitting, processing, viewing, printing menu).
 * 
 * **Expected Output:**
 * 
 * The system should present a menu, accept user input, perform the requested action, and display relevant information or error messages. Examples:
 * 
 * ```
 * --- Support Ticket System Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Waiting Tickets
 * 4. View Processed Tickets
 * 0. Exit
 * ----------------------------------
 * Enter your choice: 1
 * Enter ticket description: My printer is not working.
 * Ticket submitted: Ticket [ID=1, Description='My printer is not working.', Status='Waiting']
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 1
 * Enter ticket description: Internet connection is slow.
 * Ticket submitted: Ticket [ID=2, Description='Internet connection is slow.', Status='Waiting']
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 3
 * --- Waiting Tickets ---
 * Ticket [ID=1, Description='My printer is not working.', Status='Waiting']
 * Ticket [ID=2, Description='Internet connection is slow.', Status='Waiting']
 * -----------------------
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 2
 * Processed ticket: Ticket [ID=1, Description='My printer is not working.', Status='Processed']
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 3
 * --- Waiting Tickets ---
 * Ticket [ID=2, Description='Internet connection is slow.', Status='Waiting']
 * -----------------------
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 4
 * --- Processed Tickets ---
 * Ticket [ID=1, Description='My printer is not working.', Status='Processed']
 * -------------------------
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 2
 * Processed ticket: Ticket [ID=2, Description='Internet connection is slow.', Status='Processed']
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 2
 * No tickets in the queue to process.
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: invalid
 * Invalid input. Please enter a number.
 * 
 * --- Support Ticket System Menu ---
 * ... (menu repeats)
 * Enter your choice: 0
 * Exiting system. Goodbye!
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the support ticket system as requested, demonstrating the use of various Java concepts and best practices.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **`java.util.Queue`:** The `ticketQueue` is declared as a `Queue<Ticket>` and instantiated using `new LinkedList<>()`. The `LinkedList` class implements the `Queue` interface, providing the necessary FIFO behavior. Methods like `offer()` (to add tickets) and `poll()` (to remove and retrieve the head ticket) are used to manage the waiting tickets.
 * 2.  **`java.util.ArrayList` and `java.util.List`:** The `processedTickets` is declared as a `List<Ticket>` and instantiated using `new ArrayList<>()`. This demonstrates polymorphism by using the interface type `List` while using a concrete `ArrayList` implementation, which is suitable for storing processed items where order is maintained and access by index is possible (though not strictly required by the problem, it's a common use case for `ArrayList`). `ArrayList` is used to store the history of tickets that have been resolved.
 * 3.  **`java.util.Scanner`:** An instance of `Scanner` is created in the `main` method using `System.in` and passed to the `SupportTicketSystem` constructor. It is used within the `runSystemLoop` and `submitTicket` methods to read user input from the console.
 * 4.  **`switch` statement:** The `switch` statement in the `runSystemLoop` method is used to handle the user's integer choice from the menu, directing the program flow to the appropriate method (submit, process, view, or exit).
 * 5.  **`System.err`:** This is used specifically for printing error messages, such as when the user enters invalid input (non-integer choice), attempts to process a ticket when the queue is empty, or provides an empty ticket description. This helps distinguish error output from normal program output.
 * 6.  **`System.out`:** Used for all standard output, including displaying the menu, prompts for input, confirmation messages (like ticket submitted/processed), and listing the details of tickets in the queues/lists.
 * 7.  **Class-wide Exception Handling with `try-catch`:** A `try-catch` block is placed within the `while` loop in the `runSystemLoop` method. This block wraps the code that reads user input and executes the `switch` statement. It specifically catches `InputMismatchException` (for non-integer input to `scanner.nextInt()`) and a general `Exception` to handle any other unexpected runtime errors that might occur during an operation. This provides robust handling for the core operational logic of the system. An additional `try-catch` in `main` handles potential issues during `Scanner` creation or system initialization.
 * 8.  **Encapsulation:** The `SupportTicketSystem` class's data fields (`ticketQueue`, `processedTickets`, `scanner`, `nextTicketId`) are declared as `private`. The `Ticket` inner class also has private fields. Access and modification are controlled through public methods (`submitTicket`, `processNextTicket`, `viewWaitingTickets`, `viewProcessedTickets`, `runSystemLoop`, `getters`, `setStatus`).
 * 9.  **Meaningful Names:** Variables (`ticketQueue`, `processedTickets`, `nextTicketId`, `description`, `status`), methods (`runSystemLoop`, `submitTicket`, `processNextTicket`, `viewWaitingTickets`, `viewProcessedTickets`, `printMenu`), and the class names (`SupportTicketSystem`, `Ticket`) are named descriptively to indicate their purpose.
 * 10. **Comments and Documentation:** Javadoc comments are included for the classes and key methods, explaining their purpose, parameters, and return values (where applicable). Inline comments are used for specific lines or blocks of code that might need clarification (e.g., explaining `scanner.nextLine()` after `nextInt()`, or the use of `poll()` and `offer()`).
 * 11. **Input Validation:** The `submitTicket` method checks if the entered description is empty using `description.isEmpty()` after trimming whitespace. The `try-catch` block in `runSystemLoop` handles `InputMismatchException` for non-integer input.
 * 12. **Error Handling:** Beyond the `try-catch` for input, the `processNextTicket` method checks the return value of `ticketQueue.poll()` (which is `null` if the queue is empty) to avoid errors and print a user-friendly message to `System.err`. The empty checks in `viewWaitingTickets` and `viewProcessedTickets` also prevent iterating over empty collections.
 * 13. **Clean Code Structure:** The logic is divided into methods, each responsible for a single task (submitting, processing, viewing, printing menu, running the loop). The `Ticket` class is a separate, well-defined entity. The `main` method is minimal, focusing on setup and starting the main loop. `try-with-resources` is used for the `Scanner` to ensure it's closed properly.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating a solid understanding of collections, I/O, control flow, object-oriented principles, and exception handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Explicitly import for clarity

/**
 * A simple command-line support ticket management system.
 * Allows submitting, processing, and viewing support tickets.
 */
public class SupportTicketSystem {

    // Inner class to represent a support ticket
    private static class Ticket {
        private int id;
        private String description;
        private String status; // e.g., "Waiting", "Processed"

        /**
         * Constructs a new Ticket.
         * @param id The unique ID for the ticket.
         * @param description The description of the support issue.
         */
        public Ticket(int id, String description) {
            this.id = id;
            this.description = description;
            this.status = "Waiting"; // Initial status
        }

        // --- Getters ---
        public int getId() {
            return id;
        }

        public String getDescription() {
            return description;
        }

        public String getStatus() {
            return status;
        }

        // --- Setter ---
        public void setStatus(String status) {
            this.status = status;
        }

        @Override
        public String toString() {
            return "Ticket [ID=" + id + ", Description='" + description + "', Status='" + status + "']";
        }
    }

    private Queue<Ticket> ticketQueue; // Queue for tickets waiting to be processed
    private List<Ticket> processedTickets; // List for tickets that have been processed
    private Scanner scanner;
    private int nextTicketId; // Counter for generating unique ticket IDs

    /**
     * Constructs a new SupportTicketSystem.
     * @param scanner The Scanner object to use for user input.
     */
    public SupportTicketSystem(Scanner scanner) {
        // Using LinkedList as a Queue implementation
        this.ticketQueue = new LinkedList<>();
        // Using ArrayList as a List implementation
        this.processedTickets = new ArrayList<>();
        this.scanner = scanner;
        this.nextTicketId = 1; // Start ticket IDs from 1
    }

    /**
     * Runs the main application loop, displaying the menu and handling user input.
     */
    public void runSystemLoop() {
        int choice = -1; // Initialize choice to a non-exit value

        // Loop until the user chooses to exit
        while (choice != 0) {
            printMenu(); // Display menu options

            // Class-wide exception handling for the main loop operations
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt(); // Read integer input for choice
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Handle user choice using a switch statement
                switch (choice) {
                    case 1:
                        submitTicket(); // Submit a new ticket
                        break;
                    case 2:
                        processNextTicket(); // Process the next ticket in the queue
                        break;
                    case 3:
                        viewWaitingTickets(); // View tickets currently waiting
                        break;
                    case 4:
                        viewProcessedTickets(); // View tickets that have been processed
                        break;
                    case 0:
                        System.out.println("Exiting system. Goodbye!"); // Exit the loop
                        break;
                    default:
                        // Handle invalid integer choices
                        System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for the menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent an infinite loop
                choice = -1; // Reset choice to ensure loop continues and menu is shown again
            } catch (Exception e) {
                // Catch any other unexpected exceptions during an operation
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optionally print stack trace for debugging: e.printStackTrace();
            }
            System.out.println(); // Add a newline for better formatting between menu iterations
        }
    }

    /**
     * Prompts the user for a ticket description and submits a new ticket to the queue.
     * Includes input validation for the description.
     */
    private void submitTicket() {
        System.out.print("Enter ticket description: ");
        String description = scanner.nextLine().trim(); // Read description and remove leading/trailing whitespace

        // Validate that the description is not empty
        if (description.isEmpty()) {
            System.err.println("Ticket description cannot be empty. Ticket not submitted.");
            return; // Exit method without creating ticket
        }

        // Create a new ticket with a unique ID and add it to the queue
        Ticket newTicket = new Ticket(nextTicketId++, description);
        ticketQueue.offer(newTicket); // offer() is generally preferred for queues (returns false if failed, doesn't throw)
        System.out.println("Ticket submitted: " + newTicket);
    }

    /**
     * Processes the next ticket in the queue (FIFO).
     * Removes the ticket from the queue, updates its status, and adds it to the processed list.
     * Handles the case where the queue is empty.
     */
    private void processNextTicket() {
        // Use poll() to retrieve and remove the head of the queue, returns null if empty
        Ticket nextTicket = ticketQueue.poll();

        if (nextTicket != null) {
            // Update ticket status and add to processed list
            nextTicket.setStatus("Processed");
            processedTickets.add(nextTicket);
            System.out.println("Processed ticket: " + nextTicket);
        } else {
            // Handle the case where the queue is empty
            System.err.println("No tickets in the queue to process.");
        }
    }

    /**
     * Displays all tickets currently in the waiting queue.
     */
    private void viewWaitingTickets() {
        System.out.println("--- Waiting Tickets ---");
        if (ticketQueue.isEmpty()) {
            System.out.println("No tickets currently waiting.");
        } else {
            // Iterate through the queue without removing elements
            for (Ticket ticket : ticketQueue) {
                System.out.println(ticket);
            }
        }
        System.out.println("-----------------------");
    }

    /**
     * Displays all tickets that have been processed.
     */
    private void viewProcessedTickets() {
        System.out.println("--- Processed Tickets ---");
        if (processedTickets.isEmpty()) {
            System.out.println("No tickets have been processed yet.");
        } else {
            // Iterate through the processed list
            for (Ticket ticket : processedTickets) {
                System.out.println(ticket);
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Support Ticket System Menu ---");
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Waiting Tickets");
        System.out.println("4. View Processed Tickets");
        System.out.println("0. Exit");
        System.out.println("----------------------------------");
    }

    /**
     * Main method to start the application.
     * Creates a Scanner and the SupportTicketSystem instance, then runs the loop.
     * Uses try-with-resources for the Scanner to ensure it's closed.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Use try-with-resources to ensure the Scanner is closed automatically
        try (Scanner scanner = new Scanner(System.in)) {
            SupportTicketSystem system = new SupportTicketSystem(scanner);
            system.runSystemLoop(); // Start the main system loop
        } catch (Exception e) {
            // Catch any exceptions that might occur during Scanner creation or system startup
            System.err.println("An error occurred during system initialization: " + e.getMessage());
            // e.printStackTrace(); // For debugging
        }
    }
}
