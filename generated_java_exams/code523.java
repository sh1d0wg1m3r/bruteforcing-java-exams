/*
 * Exam Question #523
 * Generated on: 2025-05-11 23:24:02
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Package Processing Simulation**
 * 
 * You are tasked with developing a simple console-based simulation for a package processing center. Packages arrive and are placed in a queue to await processing. Once processed, their details are stored in a list of completed packages. The system should allow users to manage packages through a menu-driven interface.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Package Representation:** Create a `Package` class to represent a package. It should have private fields for `packageId` (String), `weightKg` (double), and `destinationAddress` (String). Include a constructor and public getter methods for these fields. Override the `toString()` method to provide a clear string representation of a package.
 * 
 * 2.  **Data Structures:**
 *     *   Use a `java.util.Queue` to hold packages waiting to be processed.
 *     *   Use a `java.util.List` (specifically implemented with `java.util.ArrayList`) to store packages that have been successfully processed.
 * 
 * 3.  **Core Functionality:** Implement the following operations via a main menu:
 *     *   **Add New Package:** Prompt the user for package details (ID, weight, destination). Validate the input (ID and destination cannot be empty, weight must be a positive number). Create a `Package` object and add it to the processing queue.
 *     *   **Process Next Package:** Take the next package from the front of the processing queue. If the queue is empty, display an error. If successful, remove the package from the queue and add it to the list of completed packages. Display the details of the processed package.
 *     *   **View Pending Packages:** Display all packages currently in the processing queue without removing them. If the queue is empty, display a message indicating that.
 *     *   **View Completed Packages:** Display all packages in the list of completed packages. If the list is empty, display a message indicating that.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:**
 *     *   Present a clear menu of options using `System.out`.
 *     *   Use `java.util.Scanner` to read user input for menu choices and package details.
 *     *   Use a `switch` statement to handle the different menu options.
 * 
 * 5.  **Error Handling:**
 *     *   Implement input validation as described in requirement 3. Use `System.err` to display error messages for invalid user input (e.g., non-numeric weight, empty fields, invalid menu choice) and when attempting to process a package from an empty queue.
 *     *   Use `System.out` for all successful operations, menu display, and informational messages (like lists/queues being empty when viewing).
 *     *   Include class-wide exception handling using a `try-catch` block around the main program loop to catch any unexpected runtime exceptions.
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Ensure clean code structure (e.g., separate methods for different operations).
 *     *   Close the `Scanner` resource when the program exits.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, and perform actions based on the choice.
 * *   Successful operations and menu should go to `System.out`.
 * *   Error messages (invalid input, empty queue for processing) should go to `System.err`.
 * *   Viewing empty queues/lists should go to `System.out`.
 * 
 * Example interaction flow:
 * ```
 * --- Package Processing System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Pending Packages
 * 4. View Completed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: P101
 * Enter Weight (kg): 5.5
 * Enter Destination Address: New York
 * Package P101 added to processing queue.
 * 
 * --- Package Processing System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Packages ---
 * Package ID: P101, Weight: 5.5 kg, Destination: New York
 * --- End of Pending Packages ---
 * 
 * --- Package Processing System Menu ---
 * ...
 * Enter your choice: 2
 * Processing package: Package ID: P101, Weight: 5.5 kg, Destination: New York
 * Package P101 processed and moved to completed list.
 * 
 * --- Package Processing System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Packages ---
 * No packages currently in the processing queue.
 * --- End of Pending Packages ---
 * 
 * --- Package Processing System Menu ---
 * ...
 * Enter your choice: 4
 * --- Completed Packages ---
 * Package ID: P101, Weight: 5.5 kg, Destination: New York
 * --- End of Completed Packages ---
 * 
 * --- Package Processing System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * The provided solution implements a `PackageProcessingSystem` that simulates a simple package sorting facility, meeting all the specified requirements.
 * 
 * 1.  **`Package` Class:** A simple `Package` class is defined with private fields (`packageId`, `weightKg`, `destinationAddress`), a constructor to initialize them, and public getter methods (`getPackageId`, `getWeightKg`, `getDestinationAddress`) to allow external access while maintaining encapsulation. The `toString()` method is overridden to provide a user-friendly string representation of a package, used when printing package details.
 * 
 * 2.  **Data Structures (`Queue` and `List`/`ArrayList`):**
 *     *   `processingQueue`: A `java.util.Queue` is used to store packages waiting for processing. `LinkedList` is chosen as the concrete implementation because it efficiently supports queue operations (`offer` to add, `poll` to remove from the head).
 *     *   `completedPackages`: A `java.util.List` is used to store packages that have been processed. `ArrayList` is chosen as the concrete implementation because it's suitable for storing and iterating over a collection of items once they are in their final state.
 * 
 * 3.  **Core Functionality:**
 *     *   The `run()` method contains the main loop that keeps the system running until the user chooses to exit.
 *     *   `displayMenu()`: A helper method to print the menu options using `System.out`.
 *     *   `addPackage()`: Prompts the user for package details using `scanner.nextLine()`. It includes input validation for empty strings (ID, destination) and numeric/positive weight using `Double.parseDouble` within a dedicated `try-catch` block for `NumberFormatException`. If input is valid, a new `Package` object is created and added to the `processingQueue` using `offer()`.
 *     *   `processNextPackage()`: Checks if the `processingQueue` is empty. If not, it uses `poll()` to retrieve and remove the package at the front of the queue. This package is then added to the `completedPackages` `List` using `add()`. Appropriate messages are printed to `System.out` or `System.err`.
 *     *   `viewPendingPackages()`: Iterates through the `processingQueue` using a for-each loop. This allows viewing the elements without removing them. Prints messages to `System.out`.
 *     *   `viewCompletedPackages()`: Iterates through the `completedPackages` `List` using a for-each loop. Prints messages to `System.out`.
 * 
 * 4.  **User Interface and Control Flow:**
 *     *   `Scanner` is used throughout the system to read user input.
 *     *   The main loop in `run()` reads the user's menu choice.
 *     *   A `switch` statement is used to direct the program flow to the appropriate method based on the user's integer choice. A `default` case handles invalid numeric inputs.
 * 
 * 5.  **Error Handling (`System.err`, `System.out`, `try-catch`):**
 *     *   `System.err` is used specifically for error messages: invalid menu input (non-numeric or out of range), invalid package details (empty fields, non-positive weight), and attempting to process from an empty queue.
 *     *   `System.out` is used for all normal output: menu display, prompts, successful operation confirmations, and displaying contents of queues/lists (including messages when they are empty).
 *     *   Input validation for weight parsing (`NumberFormatException`) is handled within a specific `try-catch` block inside `addPackage()`.
 *     *   A larger `try-catch` block is wrapped around the main `while` loop in the `run()` method. This serves as the "class-wide" exception handling, catching any unexpected `Exception` that might occur during the program's execution and preventing it from crashing abruptly. It prints an error message to `System.err` and the stack trace.
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names like `processingQueue`, `completedPackages`, `addPackage`, `weightKg` are used.
 *     *   Encapsulation is applied in the `Package` class with private fields and public getters.
 *     *   Javadoc comments are included for classes and methods, explaining their purpose.
 *     *   The code is structured into logical methods (`addPackage`, `processNextPackage`, etc.) for better readability and maintainability.
 *     *   The `Scanner` resource is properly closed in a `finally` block within the `run()` method to release system resources.
 * 
 * This solution effectively demonstrates the required Java concepts in a cohesive, practical simulation, incorporating essential programming practices like validation and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a package with ID, weight, and destination.
 */
class Package {
    private String packageId;
    private double weightKg;
    private String destinationAddress;

    /**
     * Constructs a new Package object.
     * @param packageId The unique identifier for the package.
     * @param weightKg The weight of the package in kilograms.
     * @param destinationAddress The destination address of the package.
     */
    public Package(String packageId, double weightKg, String destinationAddress) {
        this.packageId = packageId;
        this.weightKg = weightKg;
        this.destinationAddress = destinationAddress;
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public double getWeightKg() {
        return weightKg;
    }

    public String getDestinationAddress() {
        return destinationAddress;
    }

    /**
     * Provides a string representation of the Package object.
     * @return A formatted string detailing the package.
     */
    @Override
    public String toString() {
        return String.format("Package ID: %s, Weight: %.2f kg, Destination: %s",
                             packageId, weightKg, destinationAddress);
    }
}

/**
 * Simulates a package processing center using a queue and a list.
 */
public class PackageProcessingSystem {

    private Queue<Package> processingQueue; // Packages waiting to be processed
    private List<Package> completedPackages; // Packages that have been processed
    private Scanner scanner; // Scanner for user input

    /**
     * Constructs a new PackageProcessingSystem.
     * Initializes the queue, list, and scanner.
     */
    public PackageProcessingSystem() {
        // Use LinkedList as a Queue implementation
        this.processingQueue = new LinkedList<>();
        // Use ArrayList as a List implementation
        this.completedPackages = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Package Processing System Menu ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Pending Packages");
        System.out.println("4. View Completed Packages");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new package to the processing queue based on user input.
     * Includes input validation.
     */
    private void addPackage() {
        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine().trim();

        if (id.isEmpty()) {
            System.err.println("Error: Package ID cannot be empty.");
            return;
        }

        double weight = -1;
        System.out.print("Enter Weight (kg): ");
        try {
            weight = Double.parseDouble(scanner.nextLine().trim());
            if (weight <= 0) {
                System.err.println("Error: Weight must be a positive number.");
                return;
            }
        } catch (NumberFormatException e) {
            System.err.println("Error: Invalid weight format. Please enter a number.");
            return;
        }

        System.out.print("Enter Destination Address: ");
        String destination = scanner.nextLine().trim();

        if (destination.isEmpty()) {
            System.err.println("Error: Destination address cannot be empty.");
            return;
        }

        Package newPackage = new Package(id, weight, destination);
        processingQueue.offer(newPackage); // offer is generally preferred for queues
        System.out.println("Package " + id + " added to processing queue.");
    }

    /**
     * Processes the next package from the processing queue and moves it to the completed list.
     */
    private void processNextPackage() {
        if (processingQueue.isEmpty()) {
            System.err.println("Error: No packages currently in the processing queue.");
            return;
        }

        Package processedPackage = processingQueue.poll(); // Retrieves and removes the head of the queue
        completedPackages.add(processedPackage); // Add to the completed list

        System.out.println("Processing package: " + processedPackage);
        System.out.println("Package " + processedPackage.getPackageId() + " processed and moved to completed list.");
    }

    /**
     * Displays all packages currently waiting in the processing queue.
     */
    private void viewPendingPackages() {
        System.out.println("--- Pending Packages ---");
        if (processingQueue.isEmpty()) {
            System.out.println("No packages currently in the processing queue.");
        } else {
            // Iterate through the queue without removing elements
            for (Package p : processingQueue) {
                System.out.println(p);
            }
        }
        System.out.println("--- End of Pending Packages ---");
    }

    /**
     * Displays all packages that have been processed and are in the completed list.
     */
    private void viewCompletedPackages() {
        System.out.println("--- Completed Packages ---");
        if (completedPackages.isEmpty()) {
            System.out.println("No packages have been completed yet.");
        } else {
            // Iterate through the list
            for (Package p : completedPackages) {
                System.out.println(p);
            }
        }
        System.out.println("--- End of Completed Packages ---");
    }

    /**
     * Runs the main program loop, displaying the menu and handling user choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Class-wide exception handling
        try {
            while (running) {
                displayMenu();
                String choiceString = scanner.nextLine().trim();
                int choice = -1;

                try {
                    choice = Integer.parseInt(choiceString);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration
                }

                // Switch statement for flow control
                switch (choice) {
                    case 1:
                        addPackage();
                        break;
                    case 2:
                        processNextPackage();
                        break;
                    case 3:
                        viewPendingPackages();
                        break;
                    case 4:
                        viewCompletedPackages();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the package processing system.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PackageProcessingSystem system = new PackageProcessingSystem();
        system.run();
    }
}
