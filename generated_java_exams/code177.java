/*
 * Exam Question #177
 * Generated on: 2025-05-11 22:26:51
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Personal Task Manager
 * 
 * **Scenario:** You need to develop a simple command-line application that acts as a personal task manager. The application should allow a user to add tasks to a 'to-do' list, mark the next task in the list as complete, and view both pending and completed tasks. The 'to-do' list should function like a queue, where tasks are processed in the order they were added (First-In, First-Out).
 * 
 * **Task Requirements:**
 * 
 * Implement a Java program named `TaskManager` that provides the following functionality through a command-line menu:
 * 
 * 1.  **Add New Task:** Prompt the user for a task description and add it to the end of a pending task queue.
 * 2.  **Complete Next Task:** Take the task at the front of the pending task queue, remove it, and add it to a list of completed tasks. If the pending queue is empty, display an error message.
 * 3.  **View Pending Tasks:** Display all tasks currently in the pending task queue in their current order. If the queue is empty, indicate that.
 * 4.  **View Completed Tasks:** Display all tasks currently in the completed tasks list. If the list is empty, indicate that.
 * 5.  **Exit:** Terminate the application.
 * 
 * Your solution must strictly adhere to the following technical requirements:
 * 
 * -   Use `java.util.Queue` to represent the pending tasks. A `java.util.LinkedList` is a suitable concrete implementation.
 * -   Use `java.util.List` to represent the completed tasks. A `java.util.ArrayList` is a suitable concrete implementation.
 * -   Use `java.util.Scanner` to read user input from the console for menu choices and task descriptions.
 * -   Use a `switch` statement to handle the different menu options.
 * -   Use `System.err` to display all error messages (e.g., invalid menu input, attempting to complete a task when none are pending).
 * -   Use `System.out` for all normal output (menu display, prompts, task lists, confirmation messages, exit message).
 * -   Implement comprehensive exception handling using `try-catch` blocks. This should include handling potential issues with user input (like non-integer input for menu choices) and other unexpected runtime errors within the main application loop. Ensure resources like the `Scanner` are properly managed (e.g., closed).
 * 
 * Follow best practices for code quality:
 * 
 * -   Use meaningful variable and method names.
 * -   Include comments where necessary to clarify complex logic (though the logic here is relatively straightforward, explain key sections).
 * -   Validate user input where appropriate (e.g., check for empty task descriptions, handle non-numeric menu input).
 * -   Provide clear and informative error messages.
 * -   Structure your code logically within the `main` method or using helper methods if preferred, ensuring the core requirements are met cleanly.
 * 
 * **Expected Interaction Example:**
 * 
 * ```
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 1
 * Enter task description: Buy groceries
 * Task added: "Buy groceries"
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 1
 * Enter task description: Walk the dog
 * Task added: "Walk the dog"
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 3
 * 
 * --- Pending Tasks ---
 * 1. Buy groceries
 * 2. Walk the dog
 * ---------------------
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 2
 * Completed task: "Buy groceries"
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 3
 * 
 * --- Pending Tasks ---
 * 1. Walk the dog
 * ---------------------
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 4
 * 
 * --- Completed Tasks ---
 * 1. Buy groceries
 * -----------------------
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: invalid
 * Invalid input. Please enter a number.
 * 
 * --- Task Manager Menu ---
 * ... (menu redisplays)
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Manager Menu ---
 * ... (menu redisplays)
 * Enter your choice: 2
 * Completed task: "Walk the dog"
 * 
 * --- Task Manager Menu ---
 * ... (menu redisplays)
 * Enter your choice: 2
 * No pending tasks to complete.
 * 
 * --- Task Manager Menu ---
 * ... (menu redisplays)
 * Enter your choice: 5
 * Exiting Task Manager. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing the `TaskManager` class with the `main` method.
 *
 * EXPLANATION:
 * The provided solution implements a simple command-line task manager, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Core Data Structures:**
 *     -   `java.util.Queue<String> pendingTasks = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface. This is suitable for the pending tasks list because a queue naturally supports adding elements to the end (`offer`) and removing elements from the beginning (`poll`), fulfilling the "First-In, First-Out" requirement for processing tasks.
 *     -   `java.util.List<String> completedTasks = new ArrayList<>();`: An `ArrayList` is used to implement the `List` interface. This is suitable for storing completed tasks as we primarily need to add completed tasks to the end (`add`) and iterate through them to display (`get` via index or enhanced for loop).
 * 
 * 2.  **User Input:**
 *     -   `java.util.Scanner scanner = new Scanner(System.in);`: A `Scanner` object is created to read input from the standard input stream (`System.in`). It's used to read both integer menu choices (`nextInt()`) and full line task descriptions (`nextLine()`).
 *     -   A common pitfall when mixing `nextInt()` (or `nextDouble()`, etc.) with `nextLine()` is that `nextInt()` consumes only the number, leaving the newline character in the input buffer. The subsequent `nextLine()` then immediately consumes this leftover newline instead of waiting for user input. The line `scanner.nextLine();` after `scanner.nextInt();` correctly consumes this leftover newline, ensuring the next `scanner.nextLine()` call behaves as expected.
 * 
 * 3.  **Flow Control:**
 *     -   A `boolean running` flag controls the main `while` loop, keeping the application running until the user chooses to exit.
 *     -   A `switch` statement is used to direct the program's flow based on the integer `choice` entered by the user. This is a clean way to handle multiple distinct menu options.
 *     -   The `default` case in the `switch` handles any integer input that does not match a valid menu option (1-5), displaying an error.
 * 
 * 4.  **Input/Output Streams:**
 *     -   `System.out.println()` and `System.out.print()` are used for displaying the menu, prompts, task lists, and confirmation/exit messages, adhering to the requirement for normal output.
 *     -   `System.err.println()` is used specifically for displaying error messages, such as invalid input type, invalid menu choice, or attempting an operation on an empty queue, as required.
 * 
 * 5.  **Error Handling and Validation:**
 *     -   **`try-catch` for `InputMismatchException`:** A specific `try-catch` block is wrapped around `scanner.nextInt()`. This catches the `InputMismatchException` that occurs if the user enters non-integer text when prompted for a menu choice. It prints an error using `System.err`, consumes the invalid input line to clear the buffer, and uses `continue` to restart the loop, showing the menu again. This prevents the program from crashing due to bad input type.
 *     -   **General `try-catch`:** A larger `try-catch` block surrounds the main `while` loop. This acts as a fallback to catch any other unexpected `Exception` that might occur during the program's execution, printing a generic error message to `System.err`.
 *     -   **`finally` block:** A `finally` block is used to ensure that the `scanner.close()` method is called before the program terminates, regardless of whether an exception occurred or the loop finished normally. This releases the system resource used by the `Scanner`.
 *     -   **Operational Error Handling:** The "Complete Next Task" case (`case 2`) explicitly checks `if (pendingTasks.isEmpty())` before calling `pendingTasks.poll()`. The `poll()` method on an empty queue would return `null`, which could potentially lead to a `NullPointerException` later if not handled. Checking `isEmpty()` first allows for a specific, user-friendly error message using `System.err`.
 *     -   **Input Validation:** In the "Add New Task" case (`case 1`), the code checks if the entered `taskDescription` is null or empty after trimming whitespace. If it is, an error message is displayed using `System.err`, and the empty task is not added.
 * 
 * 6.  **Best Practices:**
 *     -   **Meaningful Names:** Variables (`pendingTasks`, `completedTasks`, `scanner`, `choice`, `taskDescription`, `running`) and the helper method (`printMenu`) have clear, descriptive names.
 *     -   **Comments:** Comments explain the purpose of data structures, key logic sections (like exception handling), and helper methods.
 *     -   **Clean Structure:** The code is structured within the `main` method, with a separate helper method `printMenu` for modularity. The logic for each menu option is contained within its respective `case` block in the `switch` statement.
 * 
 * This solution effectively integrates all the required Java components while demonstrating robust error handling, input validation, and adherence to basic software engineering principles, making it a suitable challenge for assessing advanced Java understanding.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * A simple command-line personal task manager application.
 * Allows adding tasks to a queue, completing the next task,
 * and viewing pending and completed tasks.
 */
public class TaskManager {

    public static void main(String[] args) {
        // Use LinkedList as a Queue for pending tasks (FIFO)
        Queue<String> pendingTasks = new LinkedList<>();
        // Use ArrayList as a List for completed tasks
        List<String> completedTasks = new ArrayList<>();
        // Scanner for reading user input
        Scanner scanner = new Scanner(System.in);

        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                printMenu(); // Display the main menu
                System.out.print("Enter your choice: ");

                int choice = -1;
                // Try-catch block specifically for reading the integer menu choice
                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    // Handle non-integer input gracefully
                    System.err.println("Invalid input. Please enter a number.");
                    // Consume the invalid input to prevent an infinite loop
                    scanner.nextLine();
                    continue; // Skip the rest of the loop and show the menu again
                }

                // Use a switch statement to handle menu actions
                switch (choice) {
                    case 1:
                        // Add New Task
                        System.out.print("Enter task description: ");
                        String taskDescription = scanner.nextLine();
                        // Basic input validation for task description
                        if (taskDescription == null || taskDescription.trim().isEmpty()) {
                             System.err.println("Task description cannot be empty.");
                        } else {
                            // Add task to the pending queue
                            pendingTasks.offer(taskDescription.trim()); // offer is suitable for adding to a queue
                            System.out.println("Task added: \"" + taskDescription.trim() + "\"");
                        }
                        break;

                    case 2:
                        // Complete Next Task
                        // Check if the pending queue is empty before attempting to poll
                        if (pendingTasks.isEmpty()) {
                            System.err.println("No pending tasks to complete.");
                        } else {
                            // Get and remove the head of the queue (next task)
                            String completedTask = pendingTasks.poll();
                            // Add the completed task to the completed list
                            completedTasks.add(completedTask);
                            System.out.println("Completed task: \"" + completedTask + "\"");
                        }
                        break;

                    case 3:
                        // View Pending Tasks
                        System.out.println("\n--- Pending Tasks ---");
                        if (pendingTasks.isEmpty()) {
                            System.out.println("No pending tasks.");
                        } else {
                            // Iterate through the queue without removing elements
                            int i = 1;
                            for (String task : pendingTasks) {
                                System.out.println(i++ + ". " + task);
                            }
                        }
                        System.out.println("---------------------");
                        break;

                    case 4:
                        // View Completed Tasks
                        System.out.println("\n--- Completed Tasks ---");
                        if (completedTasks.isEmpty()) {
                            System.out.println("No completed tasks.");
                        } else {
                            // Iterate through the list using index
                            for (int i = 0; i < completedTasks.size(); i++) {
                                System.out.println((i + 1) + ". " + completedTasks.get(i));
                            }
                        }
                        System.out.println("-----------------------");
                        break;

                    case 5:
                        // Exit Application
                        System.out.println("Exiting Task Manager. Goodbye!");
                        running = false; // Set flag to exit the loop
                        break;

                    default:
                        // Handle invalid menu choices (numbers outside 1-5)
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
                // Add a newline for better separation between menu cycles
                System.out.println();
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging if needed
        } finally {
            // Ensure the scanner resource is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Task Manager Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.println("-------------------------");
    }
}
