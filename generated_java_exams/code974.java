/*
 * Exam Question #974
 * Generated on: 2025-05-12 17:07:15
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Printer Queue Management System
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple console-based Printer Queue Management System. The system should allow users to add print jobs to a queue, process the next job in the queue, view the current queue, and view completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **Print Job Representation:** Create a class `PrintJob` to represent a print job. It should store a unique job ID (integer), a file name (String), and the number of pages (integer).
 * 2.  **Queue Management:** Use a `java.util.Queue` to hold print jobs waiting to be processed. Jobs should be processed in a First-In, First-Out (FIFO) manner.
 * 3.  **Completed Jobs:** Use a `java.util.List` (specifically, an `java.util.ArrayList`) to store print jobs that have been successfully processed.
 * 4.  **User Interaction:** Use `java.util.Scanner` to read user commands and input (file name, number of pages).
 * 5.  **Menu-Driven Interface:** Provide a simple menu with the following options:
 *     *   Add New Print Job
 *     *   Process Next Job
 *     *   View Print Queue
 *     *   View Completed Jobs
 *     *   Exit
 * 6.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 7.  **Output:**
 *     *   Use `System.out` for displaying the menu, job details, queue contents, completed job list, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue is empty).
 * 8.  **Error Handling:**
 *     *   Implement input validation for the number of pages (must be a positive integer). Use `System.err` for validation errors.
 *     *   Handle the case where the user tries to process a job when the queue is empty. Use `System.err` for this message.
 *     *   Implement class-wide exception handling using `try-catch` blocks in the main execution loop to gracefully handle unexpected errors, such as invalid input format when reading menu choices or number of pages. Print a generic error message using `System.err` in the catch block.
 * 9.  **Best Practices:**
 *     *   Apply proper encapsulation: `PrintJob` fields should be private with public getters. The queue and list in the manager class should be private.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure with separate methods for different functionalities (e.g., adding, processing, displaying).
 *     *   Close the `Scanner` resource when the program exits.
 * 
 * **Expected Output:**
 * 
 * The program should loop, displaying the menu, accepting user input, performing the requested action, and providing feedback. Error messages should go to `System.err`, and normal output to `System.out`. Example interaction could look like:
 * 
 * ```
 * --- Printer Queue Management ---
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Print Queue
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name: document.txt
 * Enter number of pages: 15
 * Job added: Job ID: 1, File: document.txt, Pages: 15
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 3
 * Current Print Queue:
 * Job ID: 1, File: document.txt, Pages: 15
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 2
 * Processing job: Job ID: 1, File: document.txt, Pages: 15
 * Job completed.
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 3
 * Current Print Queue:
 * (Queue is empty)
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 4
 * Completed Jobs:
 * Job ID: 1, File: document.txt, Pages: 15
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 2
 * Error: The print queue is currently empty. (This goes to System.err)
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: invalid
 * Error: Invalid input. Please enter a number. (This goes to System.err)
 * 
 * --- Printer Queue Management ---
 * ... (menu repeats)
 * Enter your choice: 5
 * Exiting Printer Queue Management.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.out`, `System.err`, `try-catch`.
 * *   Adherence to all requirements.
 * *   Correct implementation of the logic (FIFO queue, adding/processing/viewing).
 * *   Robust input validation and error handling.
 * *   Clean code structure, encapsulation, meaningful names, and comments.
 * 
 * **Difficulty:** Challenging
 * 
 * **Estimated Time:** 45-60 minutes
 *
 * EXPLANATION:
 * This solution implements the `Printer Queue Management System` as requested, demonstrating the required Java concepts in a practical scenario.
 * 
 * 1.  **`PrintJob` Class:** This class serves as a simple Plain Old Java Object (POJO) to encapsulate the data for a single print job (ID, file name, pages). It uses private fields and public getters, adhering to encapsulation principles. The `toString()` method provides a convenient way to display job information.
 * 
 * 2.  **`PrinterQueueManager` Class:** This is the core logic class.
 *     *   It holds a `Queue<PrintJob>` named `jobQueue` (implemented using `LinkedList` for FIFO behavior) and a `List<PrintJob>` named `completedJobs` (implemented using `ArrayList` for dynamic storage of processed items). Declaring `completedJobs` as `List` showcases the use of the interface.
 *     *   `nextJobId` is a simple counter to ensure unique IDs for new jobs.
 *     *   **`addJob(String fileName, int numPages)`:** Creates a new `PrintJob`, validates that `numPages` is positive (throwing `IllegalArgumentException` if not), and adds it to the `jobQueue` using `offer()`.
 *     *   **`processNextJob()`:** Uses `poll()` to retrieve and remove the job at the head of the `jobQueue`. If the queue is not empty (`poll()` returns non-null), the job is added to the `completedJobs` list. If the queue is empty, it prints an error message to `System.err` and returns `null`.
 *     *   **`displayQueue()`:** Iterates through the `jobQueue` to print its contents without removing elements.
 *     *   **`displayCompletedJobs()`:** Iterates through the `completedJobs` list and prints its contents.
 *     *   All internal data structures (`jobQueue`, `completedJobs`, `nextJobId`) are private, maintaining encapsulation.
 * 
 * 3.  **`PrinterSystem` Class (Main):**
 *     *   Contains the `main` method, which is the entry point of the application.
 *     *   A `Scanner` is initialized to read user input.
 *     *   An instance of `PrinterQueueManager` is created.
 *     *   The main logic runs in a `while(running)` loop, which continues until the user chooses to exit.
 *     *   **Class-wide `try-catch`:** The entire `while` loop and `Scanner` initialization are wrapped in a large `try-catch` block. This ensures that even unexpected exceptions (like internal errors or runtime issues not specifically caught elsewhere) are caught, an error message is printed to `System.err`, and the `Scanner` is closed in the `finally` block, preventing resource leaks.
 *     *   **Menu and `switch`:** Inside the loop, `displayMenu()` is called, and the user's choice is read. A nested `try-catch` specifically handles `InputMismatchException` when reading the integer choice, printing an error to `System.err` and consuming the invalid input line to prevent an infinite loop.
 *     *   A `switch` statement handles the user's valid choice, calling the appropriate method on the `manager` object.
 *     *   **Specific Error Handling:** Inside the "Add Job" case (case 1), another nested `try-catch` handles potential `InputMismatchException` when reading the number of pages and the `IllegalArgumentException` thrown by `manager.addJob()` for invalid page counts. Errors are printed to `System.err`.
 *     *   The "Process Job" case (case 2) relies on the `manager.processNextJob()` method to handle the empty queue scenario and print the error to `System.err`.
 *     *   The "Exit" case (case 5) sets `running` to `false`, terminating the loop.
 *     *   The `default` case in the `switch` handles invalid integer choices, printing an error to `System.err`.
 *     *   The `finally` block guarantees that `scanner.close()` is called when the `try` block is exited, whether normally or due to an exception.
 * 
 * This solution effectively integrates `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.out`, `System.err`, and `try-catch` within a well-structured, encapsulated, and error-handled application, fulfilling all requirements of the challenging exam task.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException; // To catch non-integer input

/**
 * Represents a single print job with ID, file name, and number of pages.
 */
class PrintJob {
    private int jobId;
    private String fileName;
    private int numPages;

    /**
     * Constructs a new PrintJob.
     * @param jobId The unique identifier for the job.
     * @param fileName The name of the file to print.
     * @param numPages The number of pages in the file.
     */
    public PrintJob(int jobId, String fileName, int numPages) {
        this.jobId = jobId;
        this.fileName = fileName;
        this.numPages = numPages;
    }

    // --- Getters ---
    public int getJobId() {
        return jobId;
    }

    public String getFileName() {
        return fileName;
    }

    public int getNumPages() {
        return numPages;
    }

    /**
     * Provides a string representation of the PrintJob.
     * @return A formatted string describing the print job.
     */
    @Override
    public String toString() {
        return String.format("Job ID: %d, File: %s, Pages: %d", jobId, fileName, numPages);
    }
}

/**
 * Manages the queue of print jobs and the list of completed jobs.
 */
class PrinterQueueManager {
    private Queue<PrintJob> jobQueue;
    private List<PrintJob> completedJobs;
    private int nextJobId; // Counter for unique job IDs

    /**
     * Constructs a new PrinterQueueManager.
     * Initializes the job queue and completed jobs list.
     */
    public PrinterQueueManager() {
        // Using LinkedList as a Queue implementation
        this.jobQueue = new LinkedList<>();
        // Using ArrayList as a List implementation
        this.completedJobs = new ArrayList<>();
        this.nextJobId = 1; // Start job IDs from 1
    }

    /**
     * Adds a new print job to the queue.
     * Validates the number of pages.
     * @param fileName The name of the file.
     * @param numPages The number of pages.
     * @throws IllegalArgumentException if numPages is not positive.
     */
    public void addJob(String fileName, int numPages) {
        if (numPages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        PrintJob newJob = new PrintJob(nextJobId++, fileName, numPages);
        jobQueue.offer(newJob); // offer() is preferred over add() in queues as it returns false on failure (though unlikely here)
        System.out.println("Job added: " + newJob);
    }

    /**
     * Processes the next job in the queue.
     * Moves the job from the queue to the completed list.
     * @return The processed PrintJob, or null if the queue was empty.
     */
    public PrintJob processNextJob() {
        PrintJob jobToProcess = jobQueue.poll(); // poll() retrieves and removes the head, returns null if empty
        if (jobToProcess != null) {
            completedJobs.add(jobToProcess);
            System.out.println("Processing job: " + jobToProcess);
            System.out.println("Job completed.");
            return jobToProcess;
        } else {
            System.err.println("Error: The print queue is currently empty.");
            return null;
        }
    }

    /**
     * Displays the current print queue.
     */
    public void displayQueue() {
        System.out.println("Current Print Queue:");
        if (jobQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterating through the queue without removing elements
            for (PrintJob job : jobQueue) {
                System.out.println(job);
            }
        }
    }

    /**
     * Displays the list of completed print jobs.
     */
    public void displayCompletedJobs() {
        System.out.println("Completed Jobs:");
        if (completedJobs.isEmpty()) {
            System.out.println("(No jobs completed yet)");
        } else {
            for (PrintJob job : completedJobs) {
                System.out.println(job);
            }
        }
    }
}

/**
 * Main class to run the Printer Queue Management System.
 * Handles user interaction and delegates tasks to PrinterQueueManager.
 */
public class PrinterSystem {

    /**
     * Displays the main menu options.
     */
    private static void displayMenu() {
        System.out.println("\n--- Printer Queue Management ---");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Print Queue");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrinterQueueManager manager = new PrinterQueueManager();
        boolean running = true;

        // Class-wide try-catch block for the main application loop
        try {
            while (running) {
                displayMenu();

                int choice = -1; // Default invalid choice

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the while loop
                }

                switch (choice) {
                    case 1:
                        System.out.print("Enter file name: ");
                        String fileName = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        try {
                            int numPages = scanner.nextInt();
                            scanner.nextLine(); // Consume the newline
                            manager.addJob(fileName, numPages);
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid input for pages. Please enter an integer.");
                            scanner.nextLine(); // Consume the invalid input
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;

                    case 2:
                        manager.processNextJob();
                        break;

                    case 3:
                        manager.displayQueue();
                        break;

                    case 4:
                        manager.displayCompletedJobs();
                        break;

                    case 5:
                        running = false;
                        System.out.println("Exiting Printer Queue Management.");
                        break;

                    default:
                        System.err.println("Error: Invalid choice. Please select a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions not handled elsewhere
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure scanner is closed even if an exception occurs
            scanner.close();
        }
    }
}
