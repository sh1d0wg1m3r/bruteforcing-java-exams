/*
 * Exam Question #906
 * Generated on: 2025-05-12 16:57:47
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Restaurant Order Management System
 * 
 * You are tasked with developing a simplified console-based restaurant order management system. The system should handle incoming orders, process them, and display their status.
 * 
 * **Requirements:**
 * 
 * 1.  **Order Representation:** Create a class named `Order` to represent a single customer order. It should have:
 *     *   A private integer field `orderId`.
 *     *   A private String field `items` (description of items ordered).
 *     *   A private enum field `status` (representing the order's state, e.g., `PENDING`, `PROCESSED`).
 *     *   A constructor `Order(int orderId, String items)` that initializes the ID, items, and sets the status to `PENDING`.
 *     *   Public getter methods for `orderId`, `items`, and `status`.
 *     *   A public method `markAsProcessed()` that changes the status to `PROCESSED`.
 *     *   Override the `toString()` method to provide a user-friendly string representation of the order.
 * 
 * 2.  **Order Management System:** Create a class named `RestaurantOrderProcessor` to manage the orders. This class should:
 *     *   Use a `java.util.Queue<Order>` (specifically, an instance of `java.util.LinkedList`) to store incoming orders that are waiting to be processed.
 *     *   Use a `java.util.List<Order>` (specifically, an instance of `java.util.ArrayList`) to store orders that have been processed.
 *     *   Use a `java.util.Scanner` to read user input from the console.
 *     *   Implement a main application loop that presents the following menu to the user and processes their choice using a `switch` statement:
 *         1.  Add New Order
 *         2.  Process Next Order
 *         3.  View Order Status
 *         4.  Exit
 *     *   **Add New Order (Option 1):**
 *         *   Prompt the user for the order ID and items description.
 *         *   Validate that the order ID is a positive integer. If not, display an error message using `System.err` and do not add the order.
 *         *   Create a new `Order` object and add it to the pending orders queue.
 *         *   Display a success message using `System.out`.
 *     *   **Process Next Order (Option 2):**
 *         *   Attempt to retrieve and remove the next order from the pending orders queue.
 *         *   If the queue is empty, display an error message using `System.err`.
 *         *   If an order is retrieved, call its `markAsProcessed()` method and add it to the processed orders list.
 *         *   Display a success message using `System.out`, indicating which order was processed.
 *     *   **View Order Status (Option 3):**
 *         *   Display all orders currently in the pending queue.
 *         *   Display all orders currently in the processed list.
 *         *   Clearly label each section using `System.out`.
 *         *   Handle the case where a list/queue is empty by printing an appropriate message.
 *     *   **Exit (Option 4):** Terminate the program.
 *     *   **Input Handling:** Implement robust error handling using `try-catch` blocks. Specifically, handle `java.util.InputMismatchException` if the user enters non-numeric input when an integer is expected (like the menu choice or order ID). If such an error occurs, display an informative message using `System.err`, clear the invalid input from the scanner, and continue the loop. Place a `try-catch` around the main loop's core logic (reading input and executing the switch) to catch potential unexpected errors and provide a graceful exit or recovery.
 *     *   **Resource Management:** Ensure the `Scanner` is closed properly when the application exits.
 *     *   **Best Practices:** Adhere to Java best practices, including proper encapsulation (private fields, public methods), meaningful variable and method names, and appropriate comments (including Javadoc for classes/methods).
 * 
 * **Expected Output Format:**
 * 
 * *   Menu is displayed clearly.
 * *   Prompts for input are clear.
 * *   Success messages confirm actions.
 * *   Status view lists pending and processed orders distinctly.
 * *   Error messages for invalid input or operations are printed to `System.err`.
 * 
 * **Example Interaction:**
 * 
 * ```
 * Restaurant Order Management Menu:
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Order Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Order ID: 101
 * Enter Items: Pizza and Coke
 * Order 101 added to pending queue.
 * 
 * Restaurant Order Management Menu:
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Order Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Order ID: -5
 * Enter Items: Burger
 * Error: Order ID must be a positive integer.
 * (Error message printed to System.err)
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Orders ---
 * Order ID: 101, Items: Pizza and Coke, Status: PENDING
 * 
 * --- Processed Orders ---
 * (No processed orders yet)
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: 2
 * Processing next order...
 * Order 101 processed and moved to processed list.
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Orders ---
 * (No pending orders)
 * 
 * --- Processed Orders ---
 * Order ID: 101, Items: Pizza and Coke, Status: PROCESSED
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * (Error message printed to System.err)
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: 2
 * Processing next order...
 * Error: No pending orders to process.
 * (Error message printed to System.err)
 * 
 * Restaurant Order Management Menu:
 * ...
 * Enter your choice: 4
 * Exiting system.
 * ```
 * 
 * Your solution should consist of the `Order` class (and potentially an `OrderStatus` enum) and the `RestaurantOrderProcessor` class with a `main` method to start the application.
 *
 * EXPLANATION:
 * This solution implements a simple restaurant order management system demonstrating the required Java concepts.
 * 
 * 1.  **`Order` Class:** Represents a single order with ID, items, and status. It includes proper encapsulation (private fields, public getters), an enum for status (`OrderStatus`), a method to change status (`markAsProcessed`), and an overridden `toString` for easy printing.
 * 2.  **`RestaurantOrderProcessor` Class:** This is the core class managing the system logic.
 *     *   **Data Structures:** It uses `java.util.Queue<Order>` (`LinkedList` implementation) for `pendingOrdersQueue` to manage orders in a First-In, First-Out (FIFO) manner, which is typical for processing incoming requests. It uses `java.util.List<Order>` (`ArrayList` implementation) for `processedOrdersList` to simply store completed orders in a dynamic list.
 *     *   **User Input:** `java.util.Scanner` is used to read user input from the console for menu choices and order details.
 *     *   **Menu and Flow Control:** A `while` loop keeps the application running until the user chooses to exit. A `switch` statement is used inside the loop to direct execution based on the user's menu choice, fulfilling the requirement for `switch` statement usage. `System.out` is used for displaying the menu, prompts, success messages, and order status.
 *     *   **Adding Orders (`addOrder`):** Prompts for ID and items. It includes input validation to ensure the ID is a positive integer. If validation fails or `InputMismatchException` occurs during ID reading, an error message is printed to `System.err`, and the order is not added. Valid orders are added to the `pendingOrdersQueue` using `offer()`.
 *     *   **Processing Orders (`processNextOrder`):** Uses `poll()` on the `pendingOrdersQueue` to get and remove the next order. `poll()` is safe as it returns `null` if the queue is empty. If an order is retrieved, its status is updated, and it's added to the `processedOrdersList`. An error message is printed to `System.err` if the queue is empty.
 *     *   **Viewing Status (`viewStatus`):** Iterates through both the `pendingOrdersQueue` and `processedOrdersList` to print the details of all orders using their `toString()` method. It checks if the collections are empty and prints appropriate messages.
 *     *   **Exception Handling:**
 *         *   A `try-catch (InputMismatchException e)` block is specifically used around reading the main menu choice within the `run()` method to handle non-integer input gracefully. It prints an error to `System.err` and consumes the invalid input using `scanner.nextLine()` to prevent an infinite loop.
 *         *   Similar `try-catch (InputMismatchException e)` is used within `addOrder` when reading the `orderId`.
 *         *   A general `catch (Exception e)` is included in the `run()` loop to catch any other unexpected runtime errors that might occur during the execution of the chosen operation. This demonstrates class-wide or method-level exception handling for robustness. It prints an error to `System.err` and the stack trace for debugging before exiting the loop.
 *     *   **Resource Management:** The `scanner.close()` method is called in `closeScanner()` when the main loop finishes (user chooses exit or an unexpected error occurs), ensuring the resource is released.
 *     *   **Best Practices:** The code follows best practices with private fields, public methods, clear naming, comments (including Javadoc), and separation of concerns into methods.
 * 
 * This solution effectively integrates all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating understanding of collection usage, input handling, control flow, and robust error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Enum to represent the status of an order
enum OrderStatus {
    PENDING,
    PROCESSED
}

/**
 * Represents a single customer order in the restaurant system.
 */
class Order {
    private int orderId;
    private String items;
    private OrderStatus status;

    /**
     * Constructs a new Order with the given ID and items, initially setting status to PENDING.
     *
     * @param orderId The unique identifier for the order.
     * @param items   A description of the items in the order.
     */
    public Order(int orderId, String items) {
        this.orderId = orderId;
        this.items = items;
        this.status = OrderStatus.PENDING;
    }

    // --- Getters ---

    public int getOrderId() {
        return orderId;
    }

    public String getItems() {
        return items;
    }

    public OrderStatus getStatus() {
        return status;
    }

    /**
     * Marks the order's status as PROCESSED.
     */
    public void markAsProcessed() {
        this.status = OrderStatus.PROCESSED;
    }

    /**
     * Provides a string representation of the order.
     *
     * @return A formatted string describing the order.
     */
    @Override
    public String toString() {
        return String.format("Order ID: %d, Items: %s, Status: %s", orderId, items, status);
    }
}

/**
 * Manages the restaurant order processing system.
 * Handles adding, processing, and viewing orders using queues and lists.
 */
public class RestaurantOrderProcessor {
    private Queue<Order> pendingOrdersQueue;
    private List<Order> processedOrdersList;
    private Scanner scanner;

    /**
     * Constructs a new RestaurantOrderProcessor, initializing the order queues and lists.
     */
    public RestaurantOrderProcessor() {
        this.pendingOrdersQueue = new LinkedList<>(); // LinkedList implements Queue
        this.processedOrdersList = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nRestaurant Order Management Menu:");
        System.out.println("1. Add New Order");
        System.out.println("2. Process Next Order");
        System.out.println("3. View Order Status");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Handles adding a new order based on user input.
     * Validates the order ID.
     */
    private void addOrder() {
        System.out.print("Enter Order ID: ");
        int orderId = -1;
        try {
            orderId = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            if (orderId <= 0) {
                System.err.println("Error: Order ID must be a positive integer.");
                return; // Exit method if validation fails
            }

            System.out.print("Enter Items: ");
            String items = scanner.nextLine();

            Order newOrder = new Order(orderId, items);
            pendingOrdersQueue.offer(newOrder); // offer is generally preferred over add for capacity-constrained queues
            System.out.println("Order " + orderId + " added to pending queue.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for Order ID. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
            // Catch any other unexpected errors during input or order creation
            System.err.println("An unexpected error occurred while adding order: " + e.getMessage());
        }
    }

    /**
     * Processes the next available order from the pending queue.
     * Moves the processed order to the processed list.
     */
    private void processNextOrder() {
        System.out.println("Processing next order...");
        Order nextOrder = pendingOrdersQueue.poll(); // poll retrieves and removes, returns null if empty

        if (nextOrder == null) {
            System.err.println("Error: No pending orders to process.");
        } else {
            nextOrder.markAsProcessed();
            processedOrdersList.add(nextOrder);
            System.out.println("Order " + nextOrder.getOrderId() + " processed and moved to processed list.");
        }
    }

    /**
     * Displays the current status of all orders (pending and processed).
     */
    private void viewStatus() {
        System.out.println("\n--- Pending Orders ---");
        if (pendingOrdersQueue.isEmpty()) {
            System.out.println("(No pending orders)");
        } else {
            // Iterating over the queue does not remove elements
            for (Order order : pendingOrdersQueue) {
                System.out.println(order);
            }
        }

        System.out.println("\n--- Processed Orders ---");
        if (processedOrdersList.isEmpty()) {
            System.out.println("(No processed orders)");
        } else {
            for (Order order : processedOrdersList) {
                System.out.println(order);
            }
        }
    }

    /**
     * Runs the main application loop.
     * Handles user interaction and menu choices.
     */
    public void run() {
        int choice = -1;
        while (choice != 4) {
            displayMenu();
            try {
                choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                switch (choice) {
                    case 1:
                        addOrder();
                        break;
                    case 2:
                        processNextOrder();
                        break;
                    case 3:
                        viewStatus();
                        break;
                    case 4:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to stay in loop
            } catch (Exception e) {
                // Catch any other unexpected runtime errors
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace for debugging
                choice = 4; // Exit loop on unexpected critical error
            }
        }
        closeScanner();
    }

    /**
     * Closes the scanner resource.
     */
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
        }
    }

    /**
     * Main method to start the Restaurant Order Processor application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RestaurantOrderProcessor processor = new RestaurantOrderProcessor();
        processor.run();
    }
}
