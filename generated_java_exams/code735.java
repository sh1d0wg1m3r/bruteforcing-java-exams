/*
 * Exam Question #735
 * Generated on: 2025-05-12 16:33:01
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Job Spooler Simulation
 * 
 * **Scenario:**
 * 
 * You are tasked with creating a simplified simulation of a print job spooler. This system should allow users to submit new print jobs and an administrator to process these jobs from a queue. The system needs to keep track of jobs waiting to be printed and jobs that have already been processed.
 * 
 * **Requirements:**
 * 
 * Implement a Java application consisting of three classes: `PrintJob`, `PrintSpooler`, and `PrintSpoolerApp`.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Create a class named `PrintJob`.
 *     *   It must have the following **private** fields: `id` (int), `content` (String), and `priority` (int).
 *     *   Include a public constructor `PrintJob(int id, String content, int priority)` to initialize these fields.
 *     *   Provide public getter methods for `id`, `content`, and `priority`.
 *     *   Override the `toString()` method to return a formatted string representing the job (e.g., "Job [ID=1, Content='Report', Priority=5]").
 * 
 * 2.  **`PrintSpooler` Class:**
 *     *   Create a class named `PrintSpooler`.
 *     *   It must use a `java.util.Queue<PrintJob>` to store pending jobs. This queue should be instantiated as a `java.util.LinkedList`. Declare the field using the `Queue` interface type.
 *     *   It must use a `java.util.List<PrintJob>` to store processed jobs. This list should be instantiated as a `java.util.ArrayList`. Declare the field using the `List` interface type.
 *     *   Include a **private** field `nextJobId` (int) initialized to 1, used to assign unique IDs to new jobs.
 *     *   Implement the following **public** methods:
 *         *   `submitJob(String content, int priority)`: Creates a new `PrintJob` with the next available `id`, increments `nextJobId`, and adds the new job to the pending job queue.
 *         *   `processNextJob()`: Removes the next job from the pending queue. If a job was removed, add it to the processed jobs list and return the processed `PrintJob`. If the queue was empty, return `null`.
 *         *   `viewPendingJobs()`: Returns a `java.util.List<PrintJob>` containing a *copy* of the jobs currently in the pending queue, preserving their order.
 *         *   `viewProcessedJobs()`: Returns the `java.util.List<PrintJob>` containing the jobs that have been processed.
 *         *   `getPendingJobCount()`: Returns the number of jobs in the pending queue.
 *         *   `getProcessedJobCount()`: Returns the number of jobs in the processed list.
 * 
 * 3.  **`PrintSpoolerApp` Class:**
 *     *   Create a class named `PrintSpoolerApp` with a `main` method.
 *     *   Initialize a `PrintSpooler` object and a `java.util.Scanner` object for reading user input from the console.
 *     *   Implement a command-line interface loop that continuously presents the following menu options to the user:
 *         1.  Submit New Job
 *         2.  Process Next Job
 *         3.  View Pending Jobs
 *         4.  View Processed Jobs
 *         5.  Exit
 *     *   Read the user's choice using the `Scanner`.
 *     *   Use a **`switch` statement** to handle the user's selection.
 *     *   For "Submit New Job", prompt the user for content and priority. Ensure priority input is a valid integer.
 *     *   For "Process Next Job", call the corresponding `PrintSpooler` method and report the result.
 *     *   For "View Pending Jobs" and "View Processed Jobs", call the corresponding `PrintSpooler` methods and print the details of each job in the returned list.
 *     *   Use **`System.out`** for all normal output (menu, prompts, successful actions, job lists).
 *     *   Use **`System.err`** for all error messages (e.g., invalid menu choice, invalid number format for priority, attempting to process when the queue is empty).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks within the `main` method's loop to gracefully handle potential errors like `InputMismatchException` (for non-integer menu choice) and `NumberFormatException` (for invalid priority input). Also handle the case where `processNextJob` returns `null`.
 *     *   Ensure the `Scanner` resource is properly closed when the application exits.
 * 
 * **Constraints:**
 * 
 * *   You **must** use `java.util.Queue`, `java.util.ArrayList`, `java.util.List`, `java.util.Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` as specified.
 * *   Adhere to Java best practices regarding encapsulation, meaningful names, comments, input validation, and error handling.
 * *   The priority field is stored but does not need to influence the processing order, which should be First-In, First-Out (FIFO) as per standard Queue behavior.
 * 
 * **Expected Output:**
 * 
 * The application should run interactively, displaying a menu, accepting user input, performing actions based on the input, and providing clear feedback using `System.out` and `System.err`.
 * 
 * ```
 * --- Print Spooler Menu ---
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * --------------------------
 * Enter choice: 1
 * Enter job content: My Document
 * Enter job priority (integer): 10
 * Submitted: Job [ID=1, Content='My Document', Priority=10]
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 1 again)
 * Enter choice: 1
 * Enter job content: Another Report
 * Enter job priority (integer): 5
 * Submitted: Job [ID=2, Content='Another Report', Priority=5]
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 3)
 * Enter choice: 3
 * 
 * --- Pending Jobs (2) ---
 * Job [ID=1, Content='My Document', Priority=10]
 * Job [ID=2, Content='Another Report', Priority=5]
 * --------------------------
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 2)
 * Enter choice: 2
 * Attempting to process next job...
 * Processed: Job [ID=1, Content='My Document', Priority=10]
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 3)
 * Enter choice: 3
 * 
 * --- Pending Jobs (1) ---
 * Job [ID=2, Content='Another Report', Priority=5]
 * --------------------------
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 4)
 * Enter choice: 4
 * 
 * --- Processed Jobs (1) ---
 * Job [ID=1, Content='My Document', Priority=10]
 * --------------------------
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 2 again)
 * Enter choice: 2
 * Attempting to process next job...
 * Processed: Job [ID=2, Content='Another Report', Priority=5]
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 2 again)
 * Enter choice: 2
 * Attempting to process next job...
 * No pending jobs to process. (This message goes to System.err)
 * 
 * --- Print Spooler Menu ---
 * ... (user enters invalid input)
 * Enter choice: abc
 * Invalid input. Please enter a number. (This message goes to System.err)
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 1, then invalid priority)
 * Enter choice: 1
 * Enter job content: Final Draft
 * Enter job priority (integer): high
 * Error: Invalid priority. Please enter an integer. (This message goes to System.err)
 * 
 * --- Print Spooler Menu ---
 * ... (user enters 5)
 * Enter choice: 5
 * Exiting Print Spooler simulation.
 * ```
 *
 * EXPLANATION:
 * This solution implements a simplified print job spooler simulation using the required Java components and best practices.
 * 
 * 1.  **`PrintJob` Class:** This is a simple Plain Old Java Object (POJO) representing a single print job. It encapsulates the job's data (`id`, `content`, `priority`) using private fields and provides public getter methods. The `toString()` method makes it easy to print job details.
 * 
 * 2.  **`PrintSpooler` Class:** This class manages the core logic.
 *     *   It uses a `Queue<PrintJob>` (`jobQueue`) implemented by `LinkedList` to store jobs waiting to be processed. The `Queue` interface is suitable here because jobs are processed in the order they are submitted (FIFO - First-In, First-Out). `offer()` is used for adding jobs, and `poll()` is used for removing the next job, which gracefully returns `null` if the queue is empty.
 *     *   It uses a `List<PrintJob>` (`processedJobs`) implemented by `ArrayList` to store jobs after they have been processed. The `List` interface is appropriate as processed jobs are essentially archived and can be viewed or iterated over sequentially.
 *     *   `nextJobId` ensures each submitted job gets a unique identifier.
 *     *   Methods like `submitJob`, `processNextJob`, `viewPendingJobs`, `viewProcessedJobs`, `getPendingJobCount`, and `getProcessedJobCount` provide the necessary operations for managing the spooler state. `viewPendingJobs` creates a new `ArrayList` copy to return, demonstrating how to provide a view of internal data without exposing the underlying collection directly, which is a good practice for encapsulation.
 * 
 * 3.  **`PrintSpoolerApp` Class:** This is the main application class.
 *     *   The `main` method sets up the `PrintSpooler` and `Scanner`.
 *     *   A `try-with-resources` block is used for the `Scanner` to ensure it is automatically closed, preventing resource leaks.
 *     *   The core logic runs inside a `while(running)` loop.
 *     *   A menu is displayed, and user input is read.
 *     *   A **`switch` statement** is used to direct the program flow based on the user's integer choice.
 *     *   **Input validation and exception handling** are implemented using `try-catch` blocks:
 *         *   The main `try-catch` inside the loop handles `InputMismatchException` if the user enters non-integer input for the menu choice and a general `Exception` for other unexpected errors during a command execution.
 *         *   A nested `try-catch` is used specifically when parsing the priority input in case 1 (`submitJob`) to catch `NumberFormatException`.
 *         *   The result of `spooler.processNextJob()` is checked for `null` to handle the empty queue case.
 *     *   **`System.out`** is used for displaying the menu, prompts, confirmations, and successful list views.
 *     *   **`System.err`** is used specifically for printing error messages, as required.
 *     *   The `running` flag controls the main loop, allowing the user to exit gracefully via option 5.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating good object-oriented design principles (encapsulation, separation of concerns) and robust error handling for user input. The use of interfaces (`Queue`, `List`) where appropriate promotes flexibility, although the specific implementation types (`LinkedList`, `ArrayList`) are required by the problem.
 */

package com.exam.spooler;

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single print job with an ID, content, and priority.
 */
class PrintJob {
    private final int id;
    private final String content;
    private final int priority; // Higher number could indicate higher priority, though queue processes FIFO here

    /**
     * Constructs a new PrintJob.
     * @param id The unique identifier for the job.
     * @param content The content description of the job.
     * @param priority The priority level of the job.
     */
    public PrintJob(int id, String content, int priority) {
        this.id = id;
        this.content = content;
        this.priority = priority;
    }

    /**
     * Gets the job ID.
     * @return The job ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the job content description.
     * @return The job content.
     */
    public String getContent() {
        return content;
    }

    /**
     * Gets the job priority.
     * @return The job priority.
     */
    public int getPriority() {
        return priority;
    }

    /**
     * Returns a string representation of the PrintJob.
     * @return A formatted string including ID, content, and priority.
     */
    @Override
    public String toString() {
        return "Job [ID=" + id + ", Content='" + content + "', Priority=" + priority + "]";
    }
}

/**
 * Manages the queue of pending print jobs and a list of processed jobs.
 */
class PrintSpooler {
    // Use Queue interface type, instantiate with LinkedList as required
    private Queue<PrintJob> jobQueue;
    // Use List interface type, instantiate with ArrayList as required
    private List<PrintJob> processedJobs;
    private int nextJobId;

    /**
     * Constructs a new PrintSpooler, initializing the job queues and ID counter.
     */
    public PrintSpooler() {
        this.jobQueue = new LinkedList<>(); // Requirement: use LinkedList for Queue
        this.processedJobs = new ArrayList<>(); // Requirement: use ArrayList for List
        this.nextJobId = 1;
    }

    /**
     * Submits a new print job to the queue.
     * @param content The content description of the job.
     * @param priority The priority level of the job.
     */
    public void submitJob(String content, int priority) {
        PrintJob newJob = new PrintJob(nextJobId++, content, priority);
        jobQueue.offer(newJob); // offer is generally preferred over add for queues
        System.out.println("Submitted: " + newJob);
    }

    /**
     * Processes the next job in the queue.
     * @return The PrintJob that was processed, or null if the queue is empty.
     */
    public PrintJob processNextJob() {
        PrintJob jobToProcess = jobQueue.poll(); // poll returns null if queue is empty
        if (jobToProcess != null) {
            processedJobs.add(jobToProcess);
            System.out.println("Processed: " + jobToProcess);
        } else {
            // No error thrown, return null as specified
        }
        return jobToProcess;
    }

    /**
     * Returns a list of jobs currently pending in the queue.
     * Creates a new ArrayList to avoid exposing the internal queue structure.
     * @return A List of pending PrintJob objects.
     */
    public List<PrintJob> viewPendingJobs() {
        // Requirement: Return a List. Create a new ArrayList from queue elements.
        // This copies the elements without exposing the internal queue.
        return new ArrayList<>(jobQueue);
    }

    /**
     * Returns a list of jobs that have been processed.
     * @return A List of processed PrintJob objects.
     */
    public List<PrintJob> viewProcessedJobs() {
        // Requirement: Return the List of processed jobs.
        return processedJobs; // It's acceptable to return the list itself here as it's processed/archival
    }

    /**
     * Gets the number of jobs currently waiting in the queue.
     * @return The count of pending jobs.
     */
    public int getPendingJobCount() {
        return jobQueue.size();
    }

    /**
     * Gets the number of jobs that have been processed.
     * @return The count of processed jobs.
     */
    public int getProcessedJobCount() {
        return processedJobs.size();
    }
}

/**
 * Main application class for the Print Job Spooler simulation.
 * Handles user interaction and orchestrates PrintSpooler operations.
 */
public class PrintSpoolerApp {

    public static void main(String[] args) {
        PrintSpooler spooler = new PrintSpooler();
        // Use try-with-resources to ensure Scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            boolean running = true;

            // Class-wide exception handling around the main loop
            while (running) {
                printMenu();
                System.out.print("Enter choice: ");

                try {
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Requirement: Use switch statement
                    switch (choice) {
                        case 1: // Submit New Job
                            System.out.print("Enter job content: ");
                            String content = scanner.nextLine();
                            System.out.print("Enter job priority (integer): ");
                            // Input validation and exception handling for priority
                            try {
                                int priority = Integer.parseInt(scanner.nextLine());
                                spooler.submitJob(content, priority);
                            } catch (NumberFormatException e) {
                                System.err.println("Error: Invalid priority. Please enter an integer."); // Requirement: Use System.err
                            }
                            break;

                        case 2: // Process Next Job
                            System.out.println("Attempting to process next job...");
                            PrintJob processedJob = spooler.processNextJob();
                            if (processedJob == null) {
                                System.err.println("No pending jobs to process."); // Requirement: Use System.err for this error case
                            }
                            break;

                        case 3: // View Pending Jobs
                            System.out.println("\n--- Pending Jobs (" + spooler.getPendingJobCount() + ") ---");
                            List<PrintJob> pending = spooler.viewPendingJobs(); // Requirement: Use List interface
                            if (pending.isEmpty()) {
                                System.out.println("No jobs currently pending.");
                            } else {
                                for (PrintJob job : pending) {
                                    System.out.println(job); // Uses PrintJob's toString()
                                }
                            }
                            System.out.println("--------------------------");
                            break;

                        case 4: // View Processed Jobs
                            System.out.println("\n--- Processed Jobs (" + spooler.getProcessedJobCount() + ") ---");
                            List<PrintJob> processed = spooler.viewProcessedJobs(); // Requirement: Use List interface
                            if (processed.isEmpty()) {
                                System.out.println("No jobs have been processed yet.");
                            } else {
                                for (PrintJob job : processed) {
                                    System.out.println(job); // Uses PrintJob's toString()
                                }
                            }
                            System.out.println("--------------------------");
                            break;

                        case 5: // Exit
                            System.out.println("Exiting Print Spooler simulation.");
                            running = false;
                            break;

                        default: // Invalid choice
                            System.err.println("Invalid choice. Please enter a number between 1 and 5."); // Requirement: Use System.err
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Catches non-integer input for the main menu choice
                    System.err.println("Invalid input. Please enter a number."); // Requirement: Use System.err
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during the loop iteration
                    System.err.println("An unexpected error occurred: " + e.getMessage()); // Requirement: Use System.err
                    // e.printStackTrace(); // Optional: print stack trace for debugging in exam context
                }
                System.out.println(); // Add a newline for better readability between actions
            }

        } catch (Exception e) {
            // Catch any exceptions that might occur during Scanner initialization or closing
            System.err.println("A critical error occurred: " + e.getMessage());
            // e.printStackTrace(); // Optional: print stack trace for debugging in exam context
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Print Spooler Menu ---");
        System.out.println("1. Submit New Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View Processed Jobs");
        System.out.println("5. Exit");
        System.out.println("--------------------------");
    }
}
