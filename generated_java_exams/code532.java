/*
 * Exam Question #532
 * Generated on: 2025-05-11 23:25:40
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Package Delivery Hub Management
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified system for a package delivery hub. The system needs to manage incoming packages, queue them up for delivery, and dispatch them. The system should be interactive, allowing a user (the hub manager) to perform various actions via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a class named `Package` with the following private attributes:
 *     *   `packageId` (String): A unique identifier for the package.
 *     *   `destinationAddress` (String): The delivery address.
 *     *   `status` (String): The current status of the package (e.g., "Received", "Queued", "Dispatched").
 *     *   Include a constructor, public getter methods for all attributes, and a public setter method for `status`. Override the `toString()` method for easy printing.
 * 
 * 2.  **Delivery Hub System:** Create a class named `DeliveryHubSystem` that manages the packages. This class must contain:
 *     *   A private field declared as `List<Package>` (instantiated as `ArrayList<Package>`) to store **all** packages received by the hub, regardless of their current status.
 *     *   A private field declared as `Queue<Package>` (instantiated using a class that implements `Queue`, like `LinkedList`) to store packages that are **ready for delivery** and waiting to be dispatched in First-In, First-Out (FIFO) order.
 *     *   A private `Scanner` instance for reading user input.
 * 
 * 3.  **Interactive Menu:** Implement a main loop in `DeliveryHubSystem` that presents the following menu to the user and processes their choice:
 *     *   `1. Add New Package`: Prompts for Package ID and Destination Address. Creates a `Package` object with status "Received" and adds it to the `List`. Implement input validation to ensure ID and Address are not empty.
 *     *   `2. List All Packages`: Displays all packages currently in the `List<Package>`, including their ID, Destination, and Status.
 *     *   `3. Queue Package for Delivery`: Prompts for a Package ID. Finds the package in the `List<Package>`. If found and its status is "Received", it should be *removed* from the `List` and *added* to the `Queue`, updating its status to "Queued". If not found or already queued/dispatched, print an error.
 *     *   `4. Dispatch Next Package`: Removes the package at the head of the `Queue<Package>`. If the queue is not empty, print details of the dispatched package and update its status to "Dispatched" (this package remains in the `allPackages` list with the new status). If the queue is empty, print an error.
 *     *   `5. Show Delivery Queue`: Displays all packages currently waiting in the `Queue<Package>` without removing them.
 *     *   `0. Exit`: Terminates the program.
 * 
 * 4.  **Required Java Components:** You *must* use **ALL** of the following components in your solution:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (interface)
 *     *   `java.util.Scanner`
 *     *   `switch` statement (for menu handling)
 *     *   `System.err` (for all error messages)
 *     *   `System.out` (for menu, prompts, normal output, success messages)
 *     *   Class-wide exception handling with `try-catch` blocks (wrap the main execution logic of your `DeliveryHubSystem` class to catch potential runtime errors, especially related to input or collection operations).
 * 
 * 5.  **Best Practices:**
 *     *   Implement proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (briefly explaining key parts).
 *     *   Implement input validation where necessary (e.g., non-empty strings, valid menu choices).
 *     *   Implement proper error handling using `try-catch` and `System.err`.
 *     *   Ensure clean code structure (methods for different actions).
 *     *   Handle resource cleanup (e.g., closing the `Scanner`).
 * 
 * **Expected Output:**
 * 
 * Your program should run interactively, presenting the menu and responding to user input.
 * - Menu and successful operation messages should go to `System.out`.
 * - Invalid input or operation failure messages (e.g., package not found, queue empty) should go to `System.err`.
 * - Listing options should clearly display the contents of the respective collections.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Delivery Hub System ---
 * 1. Add New Package
 * ...
 * 0. Exit
 * -------------------------
 * Enter your choice: 1
 * --- Add New Package ---
 * Enter Package ID: P001
 * Enter Destination Address: 123 Main St
 * Package added: P001
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 1
 * --- Add New Package ---
 * Enter Package ID: P002
 * Enter Destination Address: 456 Oak Ave
 * Package added: P002
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 2
 * --- All Packages ---
 * 1. Package [ID=P001, Dest='123 Main St', Status='Received']
 * 2. Package [ID=P002, Dest='456 Oak Ave', Status='Received']
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 3
 * --- Queue Package for Delivery ---
 * Enter Package ID to queue: P001
 * Package P001 queued for delivery.
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 5
 * --- Delivery Queue ---
 * 1. Package [ID=P001, Dest='123 Main St', Status='Queued']
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 4
 * --- Dispatch Next Package ---
 * Dispatching package: P001
 * Destination: 123 Main St
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 5
 * --- Delivery Queue ---
 * Delivery queue is empty.
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 2
 * --- All Packages ---
 * 1. Package [ID=P002, Dest='456 Oak Ave', Status='Received']
 * 2. Package [ID=P001, Dest='123 Main St', Status='Dispatched']
 * 
 * --- Delivery Hub System ---
 * ...
 * Enter your choice: 0
 * Exiting system. Goodbye!
 * ```
 * 
 * Implement the complete Java code for the `Package` and `DeliveryHubSystem` classes.
 *
 * EXPLANATION:
 * This solution implements a basic Package Delivery Hub Management system demonstrating the required Java concepts.
 * 
 * 1.  **`Package` Class:** This class serves as a simple data structure using encapsulation. It holds the state (`packageId`, `destinationAddress`, `status`) with private fields and provides controlled access via public getters and a setter for the mutable `status`. The `toString()` method provides a convenient way to print package details.
 * 
 * 2.  **`DeliveryHubSystem` Class:** This is the core class managing the system logic and data structures.
 *     *   `allPackages`: Declared as `List<Package>` and instantiated as `ArrayList<Package>`. This `ArrayList` acts as the central repository for all packages that have entered the system. Using the `List` interface for declaration promotes flexibility.
 *     *   `deliveryQueue`: Declared as `Queue<Package>` and instantiated as `LinkedList<Package>`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO behavior required for dispatching.
 *     *   `scanner`: A `Scanner` object is used to read user input from the console.
 * 
 * 3.  **`run()` Method:** This is the main entry point for the system's interactive loop.
 *     *   It contains a `while` loop that continues until the user chooses to exit (option 0).
 *     *   **Class-wide Exception Handling:** The main logic within the `while` loop is wrapped in a `try-catch(Exception e)` block. This serves as the "class-wide" handler, catching any unexpected runtime exceptions that might occur during the execution of the system's operations. A more specific `try-catch(NumberFormatException e)` is nested inside to handle invalid (non-integer) input specifically for the menu choice, preventing the program from exiting solely due to bad input format for the menu.
 *     *   **`switch` Statement:** The `switch` statement is used to direct execution based on the user's valid integer choice, calling the appropriate private helper method for each operation.
 *     *   `finally` Block: Ensures the `scanner` resource is closed when the main `try` block is exited, whether normally or due to an exception.
 * 
 * 4.  **Helper Methods (`addPackage`, `listAllPackages`, `queuePackageForDelivery`, `dispatchNextPackage`, `showDeliveryQueue`):**
 *     *   Each method implements one of the required functionalities.
 *     *   `addPackage`: Reads input, validates non-empty fields using `if` statements, optionally checks for duplicates, creates a `Package` object, and adds it to the `allPackages` `List`.
 *     *   `listAllPackages`: Iterates through the `allPackages` `List` using an indexed `for` loop and prints each package's details using its `toString()` method.
 *     *   `queuePackageForDelivery`: Reads a package ID, iterates through the `allPackages` `List` using an `Iterator` to safely find and remove the package. It checks the package's status before attempting to queue it. If eligible, it removes the package from the `List`, updates its status, and adds it to the `deliveryQueue` using `offer()`. Error messages are printed to `System.err` if the package is not found or has an incorrect status.
 *     *   `dispatchNextPackage`: Uses `deliveryQueue.poll()` to retrieve and remove the package at the front of the queue. If `poll()` returns `null` (queue is empty), an error is printed to `System.err`. Otherwise, it prints dispatch details and updates the package's status (the package remains in `allPackages` but with the new status).
 *     *   `showDeliveryQueue`: Iterates through the `deliveryQueue` using a for-each loop (which works because `Queue` extends `Iterable`) and prints the details of packages waiting in the queue without removing them. Checks for an empty queue and prints a message to `System.out`.
 * 
 * 5.  **Input/Output and Error Handling:**
 *     *   `System.out` is used for displaying the menu, prompts, successful operations, and listing the contents of collections when the operation is successful.
 *     *   `System.err` is used exclusively for printing error conditions, such as invalid menu choices, empty input fields, packages not found, or attempting to dispatch from an empty queue.
 *     *   Input validation is performed for package details (non-empty) and menu choice (using `NumberFormatException` handling).
 * 
 * This solution effectively utilizes all required components in a practical scenario, demonstrates collection manipulation (adding to List, moving from List to Queue, polling from Queue), implements a menu-driven interface with a `switch` statement, and incorporates essential error handling and best practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Iterator; // Useful for safe removal during iteration

// Represents a package in the delivery system
class Package {
    private String packageId;
    private String destinationAddress;
    private String status; // e.g., "Received", "Queued", "Dispatched"

    /**
     * Constructs a new Package object.
     * @param packageId The unique ID of the package.
     * @param destinationAddress The destination address for delivery.
     */
    public Package(String packageId, String destinationAddress) {
        this.packageId = packageId;
        this.destinationAddress = destinationAddress;
        this.status = "Received"; // Initial status upon creation
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public String getDestinationAddress() {
        return destinationAddress;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    /**
     * Sets the status of the package.
     * @param status The new status (e.g., "Queued", "Dispatched").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the Package object.
     * @return Formatted string including ID, Destination, and Status.
     */
    @Override
    public String toString() {
        return "Package [ID=" + packageId + ", Dest='" + destinationAddress + "', Status='" + status + "']";
    }
}

// Manages the package delivery operations
public class DeliveryHubSystem {

    // List to hold ALL packages ever received
    private List<Package> allPackages;
    // Queue to hold packages ready for dispatch (FIFO)
    private Queue<Package> deliveryQueue;
    // Scanner for user input
    private Scanner scanner;

    /**
     * Constructs a new DeliveryHubSystem.
     * Initializes the package list, delivery queue, and scanner.
     */
    public DeliveryHubSystem() {
        // Use ArrayList as the concrete implementation for List
        allPackages = new ArrayList<>();
        // Use LinkedList as the concrete implementation for Queue
        deliveryQueue = new LinkedList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Main method to start the Delivery Hub System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliveryHubSystem system = new DeliveryHubSystem();
        system.run(); // Start the main system loop
    }

    /**
     * Runs the main interactive loop of the delivery system.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1; // Initialize choice to a non-exit value

        // Class-wide try block covering the main execution loop
        try {
            while (choice != 0) {
                printMenu();
                System.out.print("Enter your choice: ");

                try {
                    // Read the entire line to consume the newline character
                    String input = scanner.nextLine();
                    choice = Integer.parseInt(input); // Attempt to parse input as integer

                    // Use switch statement for menu control
                    switch (choice) {
                        case 1:
                            addPackage();
                            break;
                        case 2:
                            listAllPackages();
                            break;
                        case 3:
                            queuePackageForDelivery();
                            break;
                        case 4:
                            dispatchNextPackage();
                            break;
                        case 5:
                            showDeliveryQueue();
                            break;
                        case 0:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            // Handle choices outside the valid range
                            System.err.println("Invalid choice. Please enter a number from the menu.");
                    }
                } catch (NumberFormatException e) {
                    // Handle non-integer input specifically for the menu choice
                    System.err.println("Invalid input. Please enter a number for your choice.");
                    choice = -1; // Reset choice to keep the loop running and re-prompt
                }
                // Add a small delay or prompt to make output clearer between actions
                if(choice != 0) {
                     // System.out.println("\nPress Enter to continue...");
                     // scanner.nextLine(); // Consume newline after action, wait for user
                     // Removed wait for simplicity in exam
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions that might occur during execution
            System.err.println("An unexpected error occurred during system operation: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging purposes in an exam context
        } finally {
            // Ensure resources are cleaned up
            if (scanner != null) {
                scanner.close(); // Close the scanner resource
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("\n--- Delivery Hub System ---");
        System.out.println("1. Add New Package");
        System.out.println("2. List All Packages");
        System.out.println("3. Queue Package for Delivery");
        System.out.println("4. Dispatch Next Package");
        System.out.println("5. Show Delivery Queue");
        System.out.println("0. Exit");
        System.out.println("-------------------------");
    }

    /**
     * Adds a new package to the system's list of all packages.
     * Prompts user for package details and performs input validation.
     */
    private void addPackage() {
        System.out.println("\n--- Add New Package ---");
        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine().trim(); // Read and trim input
        System.out.print("Enter Destination Address: ");
        String address = scanner.nextLine().trim(); // Read and trim input

        // Input validation for empty fields
        if (id.isEmpty() || address.isEmpty()) {
            System.err.println("Error: Package ID and Destination Address cannot be empty.");
            return; // Exit method if validation fails
        }

        // Optional: Check for duplicate ID
        for (Package pkg : allPackages) {
            if (pkg.getPackageId().equals(id)) {
                System.err.println("Error: Package with ID " + id + " already exists.");
                return; // Exit method if duplicate is found
            }
        }

        // Create and add the new package
        Package newPackage = new Package(id, address);
        allPackages.add(newPackage); // Add to the List
        System.out.println("Success: Package added with ID " + newPackage.getPackageId());
    }

    /**
     * Lists all packages currently stored in the system's main list.
     */
    private void listAllPackages() {
        System.out.println("\n--- All Packages ---");
        if (allPackages.isEmpty()) {
            System.out.println("No packages in the system.");
        } else {
            // Iterate through the List and print each package
            for (int i = 0; i < allPackages.size(); i++) {
                System.out.println((i + 1) + ". " + allPackages.get(i));
            }
        }
    }

    /**
     * Finds a package by ID in the allPackages list and moves it to the delivery queue
     * if its status is "Received".
     */
    private void queuePackageForDelivery() {
        System.out.println("\n--- Queue Package for Delivery ---");
        System.out.print("Enter Package ID to queue: ");
        String id = scanner.nextLine().trim();

        if (id.isEmpty()) {
             System.err.println("Error: Package ID cannot be empty.");
             return;
        }

        Package packageToQueue = null;
        // Find the package in the allPackages list using an iterator for safe removal
        Iterator<Package> iterator = allPackages.iterator();
        while (iterator.hasNext()) {
            Package pkg = iterator.next();
            if (pkg.getPackageId().equals(id)) {
                packageToQueue = pkg;
                // Check status before deciding to remove/queue
                if (pkg.getStatus().equals("Received")) {
                    iterator.remove(); // Safely remove from the List using the iterator
                    pkg.setStatus("Queued"); // Update status
                    deliveryQueue.offer(pkg); // Add to the Queue
                    System.out.println("Success: Package " + id + " queued for delivery.");
                    return; // Exit method after successful operation
                } else {
                    // Package found but not in "Received" status
                    System.err.println("Error: Package with ID " + id + " cannot be queued. Current status: " + pkg.getStatus());
                    return; // Exit method
                }
            }
        }

        // If the loop finishes without finding the package
        System.err.println("Error: Package with ID " + id + " not found in the system.");
    }

    /**
     * Dispatches the next package from the delivery queue (removes it).
     */
    private void dispatchNextPackage() {
        System.out.println("\n--- Dispatch Next Package ---");

        // Use poll() to retrieve and remove the head of the queue, returns null if empty
        Package dispatchedPackage = deliveryQueue.poll();

        if (dispatchedPackage == null) {
            System.err.println("Error: Delivery queue is empty. No packages to dispatch.");
        } else {
            // Update the status of the package (it's still in allPackages list)
            dispatchedPackage.setStatus("Dispatched");
            System.out.println("Success: Dispatching package: " + dispatchedPackage.getPackageId());
            System.out.println("Destination: " + dispatchedPackage.getDestinationAddress());
            // The package is now logically dispatched and removed from the queue.
            // Its status is updated in the allPackages list.
        }
    }

    /**
     * Displays the packages currently waiting in the delivery queue without removing them.
     */
    private void showDeliveryQueue() {
        System.out.println("\n--- Delivery Queue ---");
        if (deliveryQueue.isEmpty()) {
            System.out.println("Delivery queue is empty.");
        } else {
            // Iterate through the queue for display purposes.
            // Queue implements Iterable, so a for-each loop works.
            // Note: This iterates over the elements but doesn't guarantee the exact queue order
            // for all Queue implementations, but it's sufficient for simple display.
            // For guaranteed FIFO display order, one might copy to a list first or use
            // an iterator and print. The simple for-each is often sufficient.
             int i = 0;
             for (Package pkg : deliveryQueue) {
                 i++;
                 System.out.println(i + ". " + pkg);
             }

             // Alternative using iterator (guarantees order for LinkedList):
             // Iterator<Package> queueIterator = deliveryQueue.iterator();
             // int i = 0;
             // while(queueIterator.hasNext()){
             //     i++;
             //     System.out.println(i + ". " + queueIterator.next());
             // }
        }
    }
}
