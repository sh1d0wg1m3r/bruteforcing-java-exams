/*
 * Exam Question #1102
 * Generated on: 2025-05-12 17:25:04
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Patient Flow Management
 * 
 * **Scenario:** You are tasked with developing a simplified system for managing patient flow in a small hospital clinic. Patients arrive and are added to a waiting list. When a doctor is ready, the next patient from the waiting list is called and moved to a list of processed patients. The system should allow clinic staff to manage this flow via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a **waiting list** of patients using a `java.util.Queue`. Patients should be processed in the order they arrive (FIFO).
 *     *   Maintain a list of **processed patients** using a `java.util.List`. This list should store patients after they have been called from the waiting list. Use `java.util.ArrayList` as the concrete implementation for this list, but declare the variable using the `List` interface (`List<Patient> processedPatients = new ArrayList<>();`).
 * 
 * 2.  **Patient Representation:**
 *     *   Create a `Patient` class with private fields for `id` (int) and `name` (String).
 *     *   Include a constructor to initialize these fields.
 *     *   Provide public getter methods for `id` and `name`.
 *     *   Override the `toString()` method to provide a user-friendly string representation of a patient (e.g., "Patient ID: [id], Name: [name]").
 * 
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a menu-driven interface using a `switch` statement to handle user commands. The menu options should be:
 *         *   `1`: Add Patient to Waiting List
 *         *   `2`: Call Next Patient
 *         *   `3`: View Waiting List
 *         *   `4`: View Processed Patients
 *         *   `5`: Exit
 *     *   Use `System.out` for displaying the menu, prompts, successful actions, and lists of patients.
 *     *   Use `System.err` for displaying error messages (e.g., "Invalid input", "Waiting list is empty").
 * 
 * 4.  **Core Logic:**
 *     *   **Add Patient:** Prompt the user for patient ID and name. Create a `Patient` object and add it to the waiting list (`Queue`). Implement input validation to ensure the ID is a positive integer and the name is not empty. If validation fails, print an error to `System.err` and do not add the patient.
 *     *   **Call Next Patient:** If the waiting list is not empty, remove the patient at the front of the queue, add them to the list of processed patients, and print a confirmation message to `System.out`. If the waiting list is empty, print an error message to `System.err`.
 *     *   **View Waiting List:** Display all patients currently in the waiting list, maintaining their order. If the list is empty, print a message indicating so.
 *     *   **View Processed Patients:** Display all patients who have been called from the waiting list. If the list is empty, print a message indicating so.
 *     *   **Exit:** Terminate the program.
 * 
 * 5.  **Error Handling:**
 *     *   Implement robust error handling using `try-catch` blocks. This should cover potential issues like the user entering non-integer input when an integer is expected (e.g., for the menu choice or patient ID).
 *     *   The main application logic (the loop handling user commands) should be enclosed in a `try-catch` block to provide class-wide exception handling for unexpected runtime issues, printing an informative message to `System.err`.
 *     *   Handle specific validation errors (e.g., non-positive ID, empty name) separately before attempting to create a `Patient` object or add to the queue/list.
 * 
 * 6.  **Best Practices:**
 *     *   Adhere to encapsulation principles for the `Patient` class.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Maintain a clean and readable code structure.
 * 
 * **Expected Output:**
 * 
 * The program should loop, presenting the menu and processing user input until the 'Exit' option is chosen. Output should clearly distinguish between normal information (`System.out`) and errors (`System.err`).
 * 
 * Example interaction flow:
 * 
 * ```
 * --- Hospital Patient Flow System ---
 * 1. Add Patient to Waiting List
 * 2. Call Next Patient
 * 3. View Waiting List
 * 4. View Processed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Patient 101 (Alice) added to waiting list.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 1
 * Enter Patient ID: 102
 * Enter Patient Name: Bob
 * Patient 102 (Bob) added to waiting list.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Patient ID: 101, Name: Alice
 * Patient ID: 102, Name: Bob
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 2
 * Calling next patient... Patient ID: 101, Name: Alice
 * Patient 101 (Alice) moved to processed list.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Patient ID: 102, Name: Bob
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 4
 * --- Processed Patients ---
 * Patient ID: 101, Name: Alice
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 2
 * Calling next patient... Patient ID: 102, Name: Bob
 * Patient 102 (Bob) moved to processed list.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 2
 * Error: Waiting list is empty. No patients to call.
 * 
 * --- Hospital Patient Flow System ---
 * ... menu ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * You need to provide the complete Java code for this system.
 *
 * EXPLANATION:
 * The provided solution implements a simplified hospital patient flow management system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Patient Class:** The `Patient` class is a simple Plain Old Java Object (POJO) representing a patient. It follows encapsulation principles with `private` fields (`id`, `name`) and `public` getter methods. The `toString()` method provides a convenient way to print patient information.
 * 
 * 2.  **Data Structures (`Queue`, `List`, `ArrayList`):**
 *     *   `waitingList`: A `Queue<Patient>` is used here, specifically implemented as a `LinkedList`. The `Queue` interface ensures FIFO behavior, which is appropriate for a waiting list where patients are called in arrival order. `offer()` is used to add patients (returns `true` on success, `false` if the queue is full, though a `LinkedList` is unbounded), and `poll()` is used to retrieve and remove the patient at the head of the queue (returns `null` if the queue is empty).
 *     *   `processedPatients`: A `List<Patient>` is used, with `ArrayList` as the concrete implementation. This list stores patients after they've been `poll()`ed from the waiting list. `List` is suitable here as we only need to add patients to the end and iterate through the list to view them. Declaring the variable as `List<Patient>` rather than `ArrayList<Patient>` adheres to the principle of programming to interfaces.
 * 
 * 3.  **User Interface (`Scanner`, `Switch`, `System.out`, `System.err`):**
 *     *   `Scanner`: An instance of `Scanner` reads input from `System.in` (the console).
 *     *   `displayMenu()`: This private helper method prints the available options using `System.out`.
 *     *   `run()` method: Contains the main loop that repeatedly displays the menu, reads the user's choice using `scanner.nextInt()`, and uses a `switch` statement to direct execution to the appropriate method (`addPatientToWaitingList`, `callNextPatient`, etc.).
 *     *   `System.out`: Used for all standard output, including the menu, prompts, success messages, and lists of patients.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid input, non-positive IDs, empty names, or when trying to call a patient from an empty waiting list.
 * 
 * 4.  **Core Logic Methods:**
 *     *   `addPatientToWaitingList()`: Prompts for ID and name. It includes `while` loops and `try-catch` blocks to validate that the ID is a positive integer and the name is not empty before creating a `Patient` object and adding it to the `waitingList` using `offer()`.
 *     *   `callNextPatient()`: Uses `waitingList.poll()` to get the next patient. If `poll()` returns a `Patient` object (meaning the queue wasn't empty), it adds the patient to the `processedPatients` list using `add()`. If `poll()` returns `null`, it prints an error to `System.err`.
 *     *   `viewWaitingList()`: Iterates through the `waitingList`. Since `Queue` doesn't have a standard `get(index)` method and iterating directly with an enhanced for loop or iterator doesn't guarantee not affecting the queue depending on implementation, a common pattern to *view* the queue content without removing elements is to create a temporary `ArrayList` from the queue and iterate over that copy. This is done using `List<Patient> tempWaitingList = new ArrayList<>(waitingList);`.
 *     *   `viewProcessedPatients()`: Iterates through the `processedPatients` `List` using an enhanced for loop and prints each patient's details.
 * 
 * 5.  **Error Handling (`try-catch`):**
 *     *   **Input Parsing:** `try-catch (InputMismatchException e)` blocks are used specifically around `scanner.nextInt()` calls (for menu choice and patient ID) to catch cases where the user enters non-integer text. The invalid input is consumed using `scanner.next()` to prevent an infinite loop.
 *     *   **Validation Errors:** Specific checks (`id <= 0`, `name.isEmpty()`) are performed *before* creating objects or adding to lists. Error messages for these are printed to `System.err`.
 *     *   **Class-wide Handling:** The main `while` loop in the `run()` method is wrapped in a broad `try-catch (Exception e)` block. This catches any other unexpected runtime exceptions that might occur within the command processing logic, prints an error message and stack trace to `System.err`, and gracefully handles or exits the program.
 * 
 * 6.  **Best Practices:**
 *     *   Encapsulation is used in the `Patient` class.
 *     *   Variable names (`waitingList`, `processedPatients`, `patientId`, `patientName`) and method names (`addPatientToWaitingList`, `callNextPatient`, `viewWaitingList`, `viewProcessedPatients`, `displayMenu`, `run`) are descriptive.
 *     *   Basic Javadoc comments are included for classes and methods.
 *     *   Input validation is performed where user input is critical.
 *     *   Error handling distinguishes between standard output (`System.out`) and error output (`System.err`).
 *     *   The code is organized into methods for clarity and modularity.
 *     *   The `Scanner` resource is closed when the program exits.
 * 
 * This solution effectively integrates all required components into a functional, albeit simplified, application demonstrating advanced understanding of Java collections, I/O, control flow, object-oriented principles, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList is a common Queue implementation
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int id;
    private String name;

    /**
     * Constructs a new Patient object.
     * @param id The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the Patient.
     * @return A formatted string including patient ID and name.
     */
    @Override
    public String toString() {
        return "Patient ID: " + id + ", Name: " + name;
    }
}

/**
 * Manages the patient flow in the hospital clinic.
 * Uses a Queue for the waiting list and a List for processed patients.
 */
public class HospitalSystem {

    private Queue<Patient> waitingList;
    private List<Patient> processedPatients;
    private Scanner scanner;

    /**
     * Constructs a new HospitalSystem.
     * Initializes the waiting list, processed patients list, and scanner.
     */
    public HospitalSystem() {
        // Use LinkedList as a concrete implementation of Queue
        this.waitingList = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List
        this.processedPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Patient Flow System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Call Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list.
     * Prompts user for ID and name, performs validation.
     */
    private void addPatientToWaitingList() {
        int id = -1;
        String name = "";

        // Input validation loop for Patient ID
        while (id <= 0) {
            System.out.print("Enter Patient ID: ");
            try {
                id = scanner.nextInt();
                if (id <= 0) {
                    System.err.println("Error: Patient ID must be a positive integer.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for Patient ID.");
                scanner.next(); // Consume the invalid input
            }
        }
        scanner.nextLine(); // Consume the newline character left by nextInt()

        // Input validation loop for Patient Name
        while (name.trim().isEmpty()) {
            System.out.print("Enter Patient Name: ");
            name = scanner.nextLine().trim();
            if (name.isEmpty()) {
                System.err.println("Error: Patient name cannot be empty.");
            }
        }

        Patient patient = new Patient(id, name);
        waitingList.offer(patient); // Use offer for adding to queue
        System.out.println("Patient " + id + " (" + name + ") added to waiting list.");
    }

    /**
     * Calls the next patient from the waiting list and moves them to the processed list.
     */
    private void callNextPatient() {
        System.out.println("Calling next patient...");
        Patient nextPatient = waitingList.poll(); // Use poll to retrieve and remove

        if (nextPatient != null) {
            processedPatients.add(nextPatient); // Add to the processed list
            System.out.println(nextPatient + " moved to processed list.");
        } else {
            System.err.println("Error: Waiting list is empty. No patients to call.");
        }
    }

    /**
     * Displays all patients currently in the waiting list.
     */
    private void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            // A common way is to convert to a temporary list for iteration/printing
            List<Patient> tempWaitingList = new ArrayList<>(waitingList);
            for (Patient patient : tempWaitingList) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Displays all patients who have been processed.
     */
    private void viewProcessedPatients() {
        System.out.println("--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            for (Patient patient : processedPatients) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Runs the main application loop, handling user interaction.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = 0;
        while (choice != 5) {
            displayMenu();
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        callNextPatient();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewProcessedPatients();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for your choice.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
                choice = 0; // Reset choice to stay in the loop
            } catch (Exception e) { // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace to standard error
                choice = 5; // Optionally exit on unexpected critical errors
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
