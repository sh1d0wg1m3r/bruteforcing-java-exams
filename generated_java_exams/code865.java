/*
 * Exam Question #865
 * Generated on: 2025-05-12 16:52:25
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Clinic Appointment Queue Management**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based application for a clinic to manage a waiting list for a specific doctor or service. Patients arrive and are added to a waiting queue on a first-come, first-served basis. When the doctor is ready, the next patient in the queue is called. The system should also keep a record of patients who have completed their appointments.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with a single field: `String name`. Include a constructor and override the `toString()` method to easily print patient information.
 * 2.  **Clinic Manager:** Create a `ClinicManager` class that encapsulates the logic for managing the queues. This class must contain:
 *     *   A `private` field `waitingQueue` of type `java.util.Queue<Patient>` to store patients currently waiting.
 *     *   A `private` field `completedPatients` of type `java.util.List<Patient>` (using `ArrayList` as the concrete implementation) to store patients who have finished their appointments.
 *     *   A constructor to initialize these collections.
 *     *   A `public` method `addPatient(String name)` that creates a `Patient` object and adds it to the `waitingQueue`.
 *     *   A `public` method `callNextPatient()` that removes the patient at the head of the `waitingQueue` and adds them to the `completedPatients` list. This method should return the `Patient` object that was called, or `null` if the `waitingQueue` is empty.
 *     *   `public` methods `getWaitingQueue()` and `getCompletedPatients()` to allow external access to the lists (consider returning copies or unmodifiable views in a real system, but for this exam, returning the collections themselves is acceptable). Ensure `getCompletedPatients()` returns a `java.util.List`.
 * 3.  **Main Application:** Create a main class (e.g., `ClinicApp`) with a `main` method to run the application.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Implement a menu-driven interface with the following options:
 *         1.  Add Patient to Waiting Queue
 *         2.  Call Next Patient
 *         3.  View Waiting Queue
 *         4.  View Completed Patients
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and list contents.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, attempting to call a patient when the queue is empty).
 *     *   Implement robust error handling using `try-catch` blocks. Include a general `catch (Exception e)` block around the main application loop to catch unexpected errors, and handle specific cases like an empty queue when trying to call the next patient. Handle potential input errors (like non-integer input for the menu choice).
 *     *   Ensure input validation where necessary (e.g., checking if the waiting queue is empty before calling the next patient).
 *     *   Include appropriate comments and documentation.
 *     *   Follow Java coding best practices (meaningful names, encapsulation).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, prompt for input based on the choice, and display results or errors.
 * 
 * *   **Menu Display:** Clearly list options 1-5.
 * *   **Add Patient:** Prompt for name, confirm addition.
 * *   **Call Next Patient:** If queue is not empty, announce the patient being called and moved to completed. If empty, print an error message using `System.err`.
 * *   **View Waiting Queue:** List patients in the queue (order matters - FIFO). Indicate if the queue is empty.
 * *   **View Completed Patients:** List patients who finished. Indicate if the list is empty.
 * *   **Invalid Choice:** Print an error message using `System.err`.
 * *   **General Errors:** Print a generic error message using `System.err` in the catch block.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Alice added to the waiting queue.
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Bob added to the waiting queue.
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * 1. Alice
 * 2. Bob
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 2
 * Calling next patient: Alice
 * Alice moved to completed patients list.
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * 1. Bob
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 4
 * Completed Patients:
 * 1. Alice
 * 
 * --- Clinic Menu ---
 * 1. Add Patient to Waiting Queue
 * 2. Call Next Patient
 * 3. View Waiting Queue
 * 4. View Completed Patients
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Clinic Menu ---
 * ... (continue until 5 is chosen)
 * Enter your choice: 5
 * Exiting Clinic Management System.
 * ```
 * 
 * **Assessment Focus:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`.
 * *   Proper object-oriented design (encapsulation, separate classes).
 * *   Effective error handling and input validation.
 * *   Code clarity, comments, and adherence to best practices.
 *
 * EXPLANATION:
 * The solution provides a console-based clinic appointment queue management system as required. It is structured into three classes: `Patient`, `ClinicManager`, and `ClinicApp`.
 * 
 * 1.  **`Patient` Class:** This is a simple Plain Old Java Object (POJO) representing a patient. It holds the patient's `name` and overrides `toString()` for easy printing. It follows encapsulation by making the `name` field private and providing a public getter.
 * 
 * 2.  **`ClinicManager` Class:** This class encapsulates the core logic and data structures of the system.
 *     *   It uses a `private Queue<Patient> waitingQueue` initialized with `LinkedList`. `Queue` is used here because the requirement specifies a *waiting queue* where patients are processed on a *first-come, first-served* (FIFO) basis, which is the fundamental principle of a queue. `LinkedList` is a common implementation of the `Queue` interface.
 *     *   It uses a `private List<Patient> completedPatients` initialized with `ArrayList`. `List` is used for the completed patients because it represents a simple ordered collection where elements are added sequentially. `ArrayList` is a common and efficient concrete implementation of the `List` interface for dynamic arrays.
 *     *   The `addPatient` method demonstrates adding to the `Queue` using `offer()`.
 *     *   The `callNextPatient` method demonstrates removing from the `Queue` using `poll()`. It also checks if the queue is empty *before* attempting to poll, handling the empty queue scenario gracefully by printing an error to `System.err` and returning `null`. If a patient is polled, they are added to the `completedPatients` `List`.
 *     *   `getWaitingQueue` and `getCompletedPatients` provide access to the underlying collections. `getCompletedPatients` is explicitly typed as returning `List<Patient>`, fulfilling the `List` interface requirement in a method signature.
 * 
 * 3.  **`ClinicApp` Class:** This is the main entry point of the application.
 *     *   It uses `java.util.Scanner` to read user input from the console. `scanner.nextLine()` is used for reading input, which is generally safer than `nextInt()` followed by `nextLine()` when mixing string and integer input.
 *     *   A `while(true)` loop keeps the application running until the user explicitly chooses to exit.
 *     *   A `switch` statement is used to control the program flow based on the integer input from the user, handling each menu option.
 *     *   `System.out` is used for all standard output, including the menu, prompts, success messages, and the contents of the queues/lists.
 *     *   `System.err` is specifically used for printing error messages, such as an invalid menu choice or attempting to call a patient from an empty queue (though the latter is handled within `ClinicManager`, the `ClinicApp` could also handle it if `callNextPatient` threw an exception instead of returning null).
 *     *   **Exception Handling:**
 *         *   A `try-catch(NumberFormatException)` block is used inside the loop when parsing the user's input string to an integer. This handles cases where the user enters non-numeric text for the menu choice, preventing the program from crashing.
 *         *   A broad `try-catch(Exception e)` block wraps the main `while` loop. This fulfills the requirement for "class-wide exception handling" by catching any unexpected runtime exceptions that might occur within the application's main execution flow and printing a generic error message to `System.err`.
 *     *   Input Validation: Basic validation is performed (e.g., checking for empty patient name in `addPatient`, checking for empty queue in `callNextPatient`).
 *     *   Best Practices: The code demonstrates encapsulation, meaningful variable and method names, comments explaining the purpose of classes and methods, and a clear structure.
 * 
 * This solution effectively integrates all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, cohesive application while adhering to good programming practices and handling potential errors.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the clinic system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient with the given name.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the patient.
     * @return The patient's name.
     */
    @Override
    public String toString() {
        return name;
    }
}

/**
 * Manages the waiting queue and completed patients list for the clinic.
 */
class ClinicManager {
    // Use LinkedList as a concrete implementation of Queue for FIFO behavior
    private Queue<Patient> waitingQueue;
    // Use ArrayList as a concrete implementation of List for easy storage and retrieval
    private List<Patient> completedPatients;

    /**
     * Constructs a new ClinicManager, initializing the waiting queue and completed patients list.
     */
    public ClinicManager() {
        waitingQueue = new LinkedList<>(); // Queue requirement
        completedPatients = new ArrayList<>(); // ArrayList and List requirement
    }

    /**
     * Adds a new patient to the waiting queue.
     * @param name The name of the patient to add. Must not be null or empty.
     */
    public void addPatient(String name) {
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        Patient patient = new Patient(name.trim());
        // offer() is generally preferred for queues as it handles capacity constraints gracefully
        waitingQueue.offer(patient);
        System.out.println(patient.getName() + " added to the waiting queue.");
    }

    /**
     * Calls the next patient from the waiting queue.
     * Removes the patient from the waiting queue and adds them to the completed list.
     * @return The Patient who was called, or null if the waiting queue is empty.
     */
    public Patient callNextPatient() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        Patient nextPatient = waitingQueue.poll();
        if (nextPatient != null) {
            completedPatients.add(nextPatient);
            System.out.println("Calling next patient: " + nextPatient.getName());
            System.out.println(nextPatient.getName() + " moved to completed patients list.");
        } else {
            // Use System.err for error message as per requirement
            System.err.println("Error: Waiting queue is empty. No patients to call.");
        }
        return nextPatient;
    }

    /**
     * Gets the current waiting queue.
     * @return The Queue of waiting patients.
     */
    public Queue<Patient> getWaitingQueue() {
        return waitingQueue;
    }

    /**
     * Gets the list of completed patients.
     * @return The List of completed patients.
     */
    public List<Patient> getCompletedPatients() {
        return completedPatients; // Returns as List<Patient> as required
    }
}

/**
 * Main application class for the Clinic Appointment Queue Management system.
 */
public class ClinicApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Scanner requirement
        ClinicManager manager = new ClinicManager();

        // Main application loop with class-wide exception handling
        try {
            while (true) {
                printMenu();
                System.out.print("Enter your choice: ");

                int choice = -1;
                // Handle potential non-integer input using try-catch
                try {
                    choice = Integer.parseInt(scanner.nextLine());
                } catch (NumberFormatException e) {
                    // Use System.err for invalid input error
                    System.err.println("Error: Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement for flow control based on user choice
                switch (choice) { // Switch statement requirement
                    case 1: // Add Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        manager.addPatient(name);
                        break;

                    case 2: // Call Next Patient
                        manager.callNextPatient(); // Error message handled inside ClinicManager
                        break;

                    case 3: // View Waiting Queue
                        Queue<Patient> waiting = manager.getWaitingQueue(); // Queue requirement
                        System.out.println("\n--- Waiting Queue ---");
                        if (waiting.isEmpty()) {
                            System.out.println("Waiting queue is empty.");
                        } else {
                            int count = 1;
                            // Iterate through the queue for printing (order matters)
                            for (Patient p : waiting) {
                                System.out.println(count++ + ". " + p.getName()); // System.out requirement
                            }
                        }
                        System.out.println("---------------------");
                        break;

                    case 4: // View Completed Patients
                        List<Patient> completed = manager.getCompletedPatients(); // List and ArrayList requirement
                        System.out.println("\n--- Completed Patients ---");
                        if (completed.isEmpty()) {
                            System.out.println("No patients have completed appointments yet.");
                        } else {
                            int count = 1;
                            // Iterate through the list for printing
                            for (Patient p : completed) {
                                System.out.println(count++ + ". " + p.getName()); // System.out requirement
                            }
                        }
                        System.out.println("------------------------");
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Clinic Management System."); // System.out requirement
                        scanner.close();
                        System.exit(0); // Terminate the application
                        break;

                    default: // Invalid Choice
                        // Use System.err for invalid choice error
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a newline for better formatting
            }
        } catch (Exception e) {
            // Class-wide exception handling using try-catch
            // Use System.err for unexpected errors
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
             // Ensure scanner is closed even if an exception occurs, though System.exit makes this less critical
             // in this specific program flow. A more robust app might keep scanner management elsewhere.
             // if (scanner != null) scanner.close(); // Already closed on exit case
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Clinic Menu ---"); // System.out requirement
        System.out.println("1. Add Patient to Waiting Queue");
        System.out.println("2. Call Next Patient");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Completed Patients");
        System.out.println("5. Exit");
    }
}
