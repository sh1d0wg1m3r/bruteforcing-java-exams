/*
 * Exam Question #466
 * Generated on: 2025-05-11 23:15:23
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Simple Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple console-based task management system for a small team. The system should allow users to add new tasks, mark the next pending task as completed, view the list of pending tasks, view the list of completed tasks, and exit the application.
 * 
 * Pending tasks should be processed in a First-In, First-Out (FIFO) manner, meaning the task that has been pending the longest is the next one to be completed. Completed tasks should be stored in an archive list.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Task Representation:** Create a simple class (e.g., `Task`) to represent a task, primarily holding a description (String).
 * 2.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store pending tasks, ensuring FIFO order.
 *     *   Use a `java.util.ArrayList`, referenced by the `java.util.List` interface, to store completed tasks (the archive).
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Add Task, Complete Next Task, View Pending Tasks, View Completed Tasks, Exit).
 *     *   Use a `switch` statement to handle the different menu choices.
 * 4.  **Functionality:**
 *     *   **Add Task:** Prompt the user for a task description and add it to the queue of pending tasks.
 *     *   **Complete Next Task:** Remove the task at the front of the pending task queue and add it to the list of completed tasks. Handle the case where there are no pending tasks.
 *     *   **View Pending Tasks:** Display all tasks currently in the pending queue.
 *     *   **View Completed Tasks:** Display all tasks currently in the completed tasks list.
 *     *   **Exit:** Terminate the application.
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, task lists, confirmation messages, and the exit message.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, attempting to complete a task when the queue is empty, empty task description).
 * 6.  **Error Handling:**
 *     *   Implement input validation for user choices (e.g., ensure input is a number within the valid range).
 *     *   Implement specific error handling for attempting to complete a task when the pending queue is empty.
 *     *   Include class-wide exception handling using a `try-catch` block that wraps the main application loop to catch any unexpected runtime errors. Ensure the `Scanner` resource is properly closed.
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments explaining key parts of the code.
 *     *   Structure the code cleanly with separate methods for different actions.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input, and providing feedback or error messages based on user actions.
 * 
 * Example interaction flow:
 * 
 * ```
 * Task Management System
 * 
 * --- Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * ------------
 * Enter choice: 1
 * Enter task description: Buy groceries
 * Task added: 'Buy groceries'
 * 
 * --- Menu ---
 * ... (menu repeats) ...
 * Enter choice: 1
 * Enter task description: Walk the dog
 * Task added: 'Walk the dog'
 * 
 * --- Menu ---
 * ...
 * Enter choice: 3
 * 
 * --- Pending Tasks ---
 * - Buy groceries
 * - Walk the dog
 * ---------------------
 * 
 * --- Menu ---
 * ...
 * Enter choice: 2
 * Completed task: 'Buy groceries'
 * 
 * --- Menu ---
 * ...
 * Enter choice: 3
 * 
 * --- Pending Tasks ---
 * - Walk the dog
 * ---------------------
 * 
 * --- Menu ---
 * ...
 * Enter choice: 4
 * 
 * --- Completed Tasks ---
 * - Buy groceries
 * -----------------------
 * 
 * --- Menu ---
 * ...
 * Enter choice: 2
 * Completed task: 'Walk the dog'
 * 
 * --- Menu ---
 * ...
 * Enter choice: 2
 * Error: No pending tasks to complete.
 * 
 * --- Menu ---
 * ...
 * Enter choice: 9
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Menu ---
 * ...
 * Enter choice: abc
 * Invalid input. Please enter a number (1-5).
 * 
 * --- Menu ---
 * ...
 * Enter choice: 5
 * Exiting Task Management System. Goodbye!
 * ```
 * 
 * Your code should compile and run demonstrating all the required features and handling.
 *
 * EXPLANATION:
 * This solution implements the `Task Management System` as described in the exam question, effectively utilizing all the required Java components and adhering to best practices.
 * 
 * 1.  **`Task` Class:** A simple class `Task` is defined to hold the `description` of a task. It follows encapsulation by making the field `private` and providing a `public` getter. The `toString()` method is overridden for convenient printing of task details.
 * 
 * 2.  **`TaskManager` Class:** This is the main class that orchestrates the system.
 *     *   **Data Structures:**
 *         *   `private Queue<Task> pendingTasks;`: Declared as a `Queue` interface type and initialized with `new LinkedList<>()`. `LinkedList` is a common class that implements the `Queue` interface, providing the necessary FIFO behavior (`offer` for adding, `poll` for removing from the head).
 *         *   `private List<Task> completedTasks;`: Declared as a `List` interface type and initialized with `new ArrayList<>()`. `ArrayList` is used to store the completed tasks in a dynamic array structure, suitable for archiving and iteration.
 *     *   **`Scanner`:** `private Scanner scanner;` is used to read input from `System.in`. It's initialized in the constructor.
 *     *   **Encapsulation:** All data fields (`pendingTasks`, `completedTasks`, `scanner`) are declared as `private`.
 *     *   **Methods:**
 *         *   `addTask(String description)`: Takes a description, creates a new `Task` object, and adds it to the `pendingTasks` queue using `offer()`. It includes basic input validation for the description.
 *         *   `completeNextTask()`: Uses `poll()` to retrieve and remove the task at the head of the `pendingTasks` queue. If `poll()` returns `null` (meaning the queue was empty), an error message is printed to `System.err`. Otherwise, the retrieved task is added to the `completedTasks` list.
 *         *   `viewPendingTasks()`: Iterates through the `pendingTasks` queue using an enhanced for loop and prints each task to `System.out`. It checks if the queue is empty.
 *         *   `viewCompletedTasks()`: Iterates through the `completedTasks` list using an enhanced for loop and prints each task to `System.out`. It checks if the list is empty.
 *         *   `printMenu()`: A helper method to display the user menu options to `System.out`.
 *         *   `run()`: This is the core method containing the main application loop.
 *             *   It's wrapped in a `try { ... } catch (Exception e) { ... } finally { ... }` block. This provides the required class-wide exception handling, catching any unexpected `Exception` that might occur during the program's execution and printing an error to `System.err`.
 *             *   Inside the `try` block, a `while(true)` loop keeps the application running until explicitly exited.
 *             *   The menu is printed, and user input is read using `scanner.nextLine()`.
 *             *   Input validation checks if the input is empty.
 *             *   A nested `try-catch(NumberFormatException e)` is used specifically for parsing the user's menu choice string into an integer. If parsing fails, an error is printed to `System.err`, and the loop continues.
 *             *   A `switch` statement is used to dispatch control based on the valid integer choice. Each case calls the appropriate method (`addTask`, `completeNextTask`, `viewPendingTasks`, `viewCompletedTasks`).
 *             *   Case `5` uses `return;` to exit the `run()` method, terminating the application loop.
 *             *   The `default` case handles invalid numbers outside the 1-5 range, printing an error to `System.err`.
 *             *   The `finally` block ensures that the `scanner` resource is closed, which is crucial for resource management, especially when dealing with I/O streams.
 *     *   **`main` Method:** The entry point of the program. It creates a `TaskManager` object and calls its `run()` method to start the application.
 * 
 * This solution demonstrates practical use of `Queue` for managing a processing order, `List` for archiving, `Scanner` for interactive input, `switch` for menu control, and robust error handling with both specific checks (`if`, `NumberFormatException`) and a general `try-catch` around the main execution flow, directing errors to `System.err` and normal output to `System.out`.
 */

import java.util.LinkedList; // A common implementation for Queue
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Represents a simple task with a description.
 */
class Task {
    private String description;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     */
    public Task(String description) {
        this.description = description;
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Provides a string representation of the task.
     * @return Formatted string for the task.
     */
    @Override
    public String toString() {
        return "- " + description;
    }
}

/**
 * Manages a list of pending and completed tasks using Queue and List.
 */
public class TaskManager {
    // Queue for tasks waiting to be processed (FIFO)
    private Queue<Task> pendingTasks;
    // List for tasks that have been completed (Archive)
    private List<Task> completedTasks;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new TaskManager, initializing the task lists and scanner.
     */
    public TaskManager() {
        // Use LinkedList as a concrete implementation of Queue
        pendingTasks = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List
        completedTasks = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Adds a new task to the pending tasks queue.
     * Performs basic validation on the description.
     * @param description The description of the task to add.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }
        Task newTask = new Task(description.trim());
        // offer() is the preferred method for adding to a Queue
        pendingTasks.offer(newTask);
        System.out.println("Task added: '" + description.trim() + "'");
    }

    /**
     * Completes the next task in the pending queue (FIFO).
     * Moves the completed task to the completed tasks list.
     * Handles the case where the pending queue is empty.
     */
    public void completeNextTask() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        Task completedTask = pendingTasks.poll();
        if (completedTask != null) {
            completedTasks.add(completedTask);
            System.out.println("Completed task: '" + completedTask.getDescription() + "'");
        } else {
            System.err.println("Error: No pending tasks to complete.");
        }
    }

    /**
     * Displays all tasks currently in the pending tasks queue.
     */
    public void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : pendingTasks) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Displays all tasks currently in the completed tasks list.
     */
    public void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
        System.out.println("-----------------------");
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("\n--- Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.println("------------");
    }

    /**
     * Runs the main application loop, handling user input and dispatching actions.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("Task Management System");

        // Class-wide try-catch block wrapping the main operational loop
        try {
            while (true) {
                printMenu();
                System.out.print("Enter choice: ");
                String input = scanner.nextLine();

                // Validate if input is empty before parsing
                if (input == null || input.trim().isEmpty()) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop and show menu again
                }

                int choice;
                // Try-catch block for parsing the user input to an integer
                try {
                    choice = Integer.parseInt(input.trim());
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number (1-5).");
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement to handle different menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        addTask(description); // Call method to add task
                        break;
                    case 2:
                        completeNextTask(); // Call method to complete task
                        break;
                    case 3:
                        viewPendingTasks(); // Call method to view pending tasks
                        break;
                    case 4:
                        viewCompletedTasks(); // Call method to view completed tasks
                        break;
                    case 5:
                        System.out.println("Exiting Task Management System. Goodbye!");
                        return; // Exit the run method, ending the program
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a blank line for readability after each action
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions during the application's execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Optional: e.printStackTrace(); // Uncomment for debugging details
        } finally {
            // Ensure the scanner is closed regardless of whether an exception occurred or the loop exited normally
            if (scanner != null) {
                scanner.close();
                // System.out.println("Scanner closed."); // Optional confirmation
            }
        }
    }

    /**
     * The main method to start the Task Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run(); // Start the main application loop
    }
}
