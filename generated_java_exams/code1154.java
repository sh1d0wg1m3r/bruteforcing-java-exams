/*
 * Exam Question #1154
 * Generated on: 2025-05-12 17:32:15
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Simple Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified command-line Task Management System for a small team. The system should allow users to add new tasks, process the next pending task, and view both pending and completed tasks. Tasks are processed in a First-In, First-Out (FIFO) manner.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a class `Task` with a private field `description` (String) and a public constructor and getter. The constructor should validate that the description is not null or empty.
 * 2.  **Task Management Logic:** Create a class `TaskManager`.
 *     *   It must use a `java.util.Queue<Task>` (specifically, a `java.util.LinkedList` implementation) to store tasks that are pending processing.
 *     *   It must use a `java.util.List<Task>` (specifically, a `java.util.ArrayList` implementation) to store tasks that have been completed.
 *     *   Implement the following public methods in `TaskManager`:
 *         *   `addTask(String description)`: Creates a new `Task` object and adds it to the pending queue. Must handle potential validation errors from the `Task` constructor.
 *         *   `completeNextTask()`: Removes the task at the front of the pending queue and adds it to the completed list. This method should handle the case where the pending queue is empty.
 *         *   `printPendingTasks()`: Iterates through and prints the descriptions of all tasks currently in the pending queue.
 *         *   `printCompletedTasks()`: Iterates through and prints the descriptions of all tasks in the completed list.
 * 3.  **User Interface:** Create a `Main` class with a `main` method.
 *     *   The `main` method should instantiate `TaskManager` and use a `java.util.Scanner` to interact with the user.
 *     *   Display a menu with options: 1. Add New Task, 2. Complete Next Task, 3. View Pending Tasks, 4. View Completed Tasks, 5. Exit.
 *     *   Read the user's menu choice using `Scanner`.
 *     *   Use a `switch` statement to process the user's choice, calling the appropriate `TaskManager` methods.
 * 4.  **Input/Output:**
 *     *   Use `System.out` for displaying the menu, success messages (task added/completed), and task lists.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid menu choice, invalid input type, empty queue when trying to complete, invalid task description).
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling in the `main` method using `try-catch` blocks to handle potential runtime errors gracefully. Specifically, handle `InputMismatchException` when reading the menu choice and any `IllegalArgumentException` thrown during task creation.
 *     *   The `completeNextTask` method should handle the empty queue case internally and report the error using `System.err`.
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Perform basic input validation (e.g., task description not empty, handling non-integer input).
 * 
 * **Expected Output:**
 * 
 * The program should run in a loop, presenting the menu and responding to user commands until the 'Exit' option is selected. Error messages should appear on the standard error stream, and normal output (menu, lists, confirmations) on the standard output stream. The interaction should resemble the example shown in the problem description.
 * 
 * **Example Interaction (Illustrative - Exact wording may vary based on your implementation, but the flow and use of System.out/System.err should match):**
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Prepare report
 * Task added: Prepare report
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * 1. Prepare report
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Task completed: Prepare report
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * 1. Prepare report
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * System.err: No tasks in the pending queue to complete.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: invalid_input
 * System.err: Invalid input. Please enter a number.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting Task Management System.
 * Scanner closed.
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple command-line task management system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The problem is broken down into three classes:
 *     *   `Task`: A simple Plain Old Java Object (POJO) to hold task data (the description). It includes basic validation in its constructor.
 *     *   `TaskManager`: Encapsulates the core logic of managing tasks. It holds the `Queue` for pending tasks and the `List` for completed tasks and provides methods for operations on these collections.
 *     *   `Main`: Contains the `main` method, which serves as the application's entry point and handles user interaction, menu display, input processing, and overall flow control.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue`: `pendingTasks` in `TaskManager` is declared as `Queue<Task>` and instantiated as `LinkedList<Task>`. This correctly uses the `Queue` interface and a common implementation to manage tasks in a FIFO order. `offer()` is used to add tasks, and `poll()` is used to remove and retrieve the head task.
 *     *   `ArrayList`: `completedTasks` in `TaskManager` is instantiated as `ArrayList<Task>`.
 *     *   `List`: `completedTasks` is declared as `List<Task>`, demonstrating programming to the interface.
 *     *   `Scanner`: Used in the `Main` class to read user input from the console for menu choices and task descriptions.
 *     *   `Switch statement`: Used in the `Main` class within the main loop to direct program flow based on the user's menu choice.
 *     *   `System.err`: Used in `TaskManager.completeNextTask()` when the queue is empty, and in `Main` for invalid input type, invalid menu choice, and general unexpected errors. This separates error messages from normal output.
 *     *   `System.out`: Used in `TaskManager` for success messages (task added/completed) and printing task lists, and in `Main` for displaying the menu and the exit message. This handles normal program output.
 *     *   `try-catch blocks`: Used in `Main` for robust exception handling:
 *         *   An outer `try-catch` around the main `while` loop provides class-wide handling for any unexpected exceptions during the application's runtime.
 *         *   An inner `try-catch` specifically handles `InputMismatchException` when reading the integer menu choice, preventing the program from crashing on non-numeric input.
 *         *   A `try-catch` is used around the `taskManager.addTask()` call within the `switch` statement to catch `IllegalArgumentException` thrown by the `Task` constructor if an invalid description is provided.
 *         *   A `finally` block is used to ensure the `Scanner` resource is closed when the program exits, regardless of whether an exception occurred.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Task` and `TaskManager` are `private`, and access/modification is controlled through public methods. This protects the internal state of the objects.
 *     *   **Meaningful Names:** Variables (`pendingTasks`, `completedTasks`, `description`, `choice`), methods (`addTask`, `completeNextTask`, `printPendingTasks`, `printMenu`), and classes (`Task`, `TaskManager`, `Main`) have names that clearly indicate their purpose.
 *     *   **Comments and Documentation:** Javadoc comments are provided for public methods explaining their function, parameters, and potential exceptions. Inline comments clarify specific logic points (e.g., consuming newline after `nextInt`).
 *     *   **Input Validation:** The `Task` constructor validates the description. The `Main` method handles non-integer input and validates the menu choice range.
 *     *   **Proper Error Handling:** Different types of errors (invalid input, empty queue, invalid data) are identified and handled with specific error messages directed to `System.err`. The use of `try-catch` prevents program termination due to common runtime issues.
 *     *   **Clean Code Structure:** The code is organized into logical classes, separating data representation, business logic, and user interface concerns. The main loop is clear, and the `switch` statement effectively manages the menu options. The use of `scanner.nextLine()` after `scanner.nextInt()` in a `finally` block correctly handles the scanner's buffer, preventing common input bugs.
 * 
 * This solution effectively demonstrates the required Java concepts in a practical scenario while adhering to important programming best practices.
 */

package com.example.taskmanager; // Example package structure

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Class representing a single task
class Task {
    private String description;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     * @throws IllegalArgumentException if the description is null or empty.
     */
    public Task(String description) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        this.description = description.trim();
    }

    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return description;
    }
}

// Class managing the collection of tasks
class TaskManager {
    // Queue for pending tasks (FIFO processing)
    private Queue<Task> pendingTasks;
    // List for completed tasks (historical record)
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskManager with empty task lists.
     */
    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new task to the pending queue.
     * @param description The description of the task.
     * @throws IllegalArgumentException if description is null or empty (propagated from Task constructor).
     */
    public void addTask(String description) {
        // Task constructor handles description validation and throws IllegalArgumentException
        Task newTask = new Task(description);
        pendingTasks.offer(newTask); // offer is the preferred way to add to a queue
        System.out.println("Task added: " + newTask.getDescription());
    }

    /**
     * Completes the next task from the pending queue and moves it to completed tasks.
     * Reports success or failure to System.out/System.err.
     */
    public void completeNextTask() {
        Task completedTask = pendingTasks.poll(); // poll retrieves and removes the head, returns null if queue is empty
        if (completedTask != null) {
            completedTasks.add(completedTask);
            System.out.println("Task completed: " + completedTask.getDescription());
        } else {
            // Use System.err for error indication
            System.err.println("No tasks in the pending queue to complete.");
        }
    }

    /**
     * Prints all tasks currently in the pending queue.
     */
    public void printPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Task task : pendingTasks) {
                System.out.println(index++ + ". " + task.getDescription());
            }
        }
    }

    /**
     * Prints all tasks currently in the completed list.
     */
    public void printCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            int index = 1;
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(index++ + ". " + task.getDescription());
            }
        }
    }
}

// Main class to run the application
public class Main {

    public static void main(String[] args) {
        TaskManager taskManager = new TaskManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling using a try-catch block around the main loop
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                int choice = -1;
                // Specific try-catch for handling non-integer input
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    // Consume the invalid input to prevent infinite loop
                    scanner.next();
                    // Skip the rest of the current loop iteration and show menu again
                    continue;
                } finally {
                    // Consume the newline character left by nextInt() or next()
                    // This is necessary before reading strings with nextLine() later
                    scanner.nextLine();
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        try {
                            taskManager.addTask(description);
                        } catch (IllegalArgumentException e) {
                            // Catch validation error from Task constructor via TaskManager
                            System.err.println("Error adding task: " + e.getMessage());
                        }
                        break;
                    case 2:
                        taskManager.completeNextTask(); // TaskManager handles empty queue and prints output
                        break;
                    case 3:
                        taskManager.printPendingTasks();
                        break;
                    case 4:
                        taskManager.printCompletedTasks();
                        break;
                    case 5:
                        System.out.println("Exiting Task Management System.");
                        running = false;
                        break;
                    default:
                        // Use System.err for invalid menu options
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
            // General catch-all for any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging purposes
        } finally {
            // Ensure the scanner resource is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed."); // Optional confirmation
        }
    }

    /**
     * Prints the main menu options to the console (System.out).
     */
    private static void printMenu() {
        System.out.println("--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
