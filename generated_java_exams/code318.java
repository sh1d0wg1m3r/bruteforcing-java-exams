/*
 * Exam Question #318
 * Generated on: 2025-05-11 22:54:28
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Library Book Management with Waitlists
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified library management system. The system needs to keep track of books, allow users to borrow and return books, and manage a waiting list (hold queue) for books that are currently borrowed.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Book Representation:** Create a `Book` class with private fields for `title`, `author`, `isbn` (String), `isBorrowed` (boolean), `borrowedBy` (String, stores the name of the borrower, null if not borrowed), and a `waitingList` (`Queue<String>`) to store the names of borrowers waiting for the book. Include a constructor and appropriate public getter methods. Add methods to handle borrowing (`borrow(String borrowerName)`), returning (`returnBook()`), adding to the waitlist (`addToWaitlist(String borrowerName)`), and managing the waitlist upon return.
 * 
 * 2.  **Library Management:** Create a `Library` class that manages a collection of `Book` objects. This class should use a `List<Book>` (specifically an `ArrayList<Book>`) to store the books.
 * 
 * 3.  **Core Functionality (Implemented in `Library` class):**
 *     *   **Add Book:** Allow adding new books to the library's collection.
 *     *   **Borrow Book:**
 *         *   Find the book by ISBN.
 *         *   If the book is available, mark it as borrowed by the specified borrower.
 *         *   If the book is already borrowed, inform the user and offer to add them to the waiting list for that book. If they accept, add their name to the book's waiting list queue.
 *         *   Handle cases where the book is not found.
 *     *   **Return Book:**
 *         *   Find the book by ISBN.
 *         *   If the book was borrowed (and by the *correct* person - optional but good practice, or just check if `isBorrowed` is true), mark it as available.
 *         *   If the book has a waiting list, dequeue the first borrower and inform them that the book is now available for them.
 *         *   Handle cases where the book is not found or wasn't borrowed.
 *     *   **Place Hold (Explicit):** Allow a user to explicitly place a hold on a book by ISBN and their name, regardless of its current status. If the book is available, inform them they can just borrow it. If it's borrowed, add them to the waiting list.
 *     *   **Display Book Status:** Display the status of a specific book (title, author, ISBN, availability, who borrowed it if applicable, size of waiting list, and who is next on the waiting list).
 *     *   **Display All Books:** List the status of all books in the library.
 * 
 * 4.  **User Interface:** Implement a simple command-line interface using `Scanner` to interact with the system. Provide a menu with options for the functionalities listed above.
 * 
 * 5.  **Flow Control:** Use a `switch` statement to handle the user's menu selections.
 * 
 * 6.  **Error Handling:**
 *     *   Use `try-catch` blocks to handle potential errors, such as invalid input (e.g., non-integer input for menu choice) or attempting operations on non-existent books.
 *     *   Use `System.err.println()` to output all error messages.
 *     *   Use `System.out.println()` for normal output, prompts, success messages, and status displays.
 * 
 * 7.  **Required Components:** Your solution *must* demonstrate the correct usage of **ALL** of the following:
 *     *   `java.util.Queue` (specifically a concrete implementation like `LinkedList`)
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (as the interface type for the collection)
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err`
 *     *   `System.out`
 *     *   Class-wide exception handling using `try-catch`
 * 
 * 8.  **Best Practices:** Adhere to best practices including proper encapsulation (private fields, public methods), meaningful variable and method names, basic input validation (e.g., checking for empty strings for names/ISBNs), and clear code structure with comments.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's input, it should perform the requested action and print appropriate messages to `System.out` (success, status, prompts) or `System.err` (errors, book not found, invalid input).
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * --- Library Menu ---
 * 1. Add Book
 * 2. Borrow Book
 * 3. Return Book
 * 4. Place Hold
 * 5. Display Book Status (ISBN)
 * 6. Display All Books
 * 7. Exit
 * Enter your choice: 1
 * Enter ISBN: 978-0321765723
 * Enter Title: The Lord of the Rings
 * Enter Author: J.R.R. Tolkien
 * Book "The Lord of the Rings" added successfully.
 * 
 * --- Library Menu ---
 * ...
 * Enter your choice: 2
 * Enter ISBN of the book to borrow: 978-0321765723
 * Enter your name: Alice
 * Book "The Lord of the Rings" borrowed successfully by Alice.
 * 
 * --- Library Menu ---
 * ...
 * Enter your choice: 2
 * Enter ISBN of the book to borrow: 978-0321765723
 * Enter your name: Bob
 * Book "The Lord of the Rings" is currently borrowed by Alice.
 * Would you like to place a hold? (yes/no): yes
 * Bob added to the waiting list for "The Lord of the Rings". Waitlist size: 1
 * 
 * --- Library Menu ---
 * ...
 * Enter your choice: 5
 * Enter ISBN of the book to display: 978-0321765723
 * --- Book Status ---
 * Title: The Lord of the Rings
 * Author: J.R.R. Tolkien
 * ISBN: 978-0321765723
 * Status: Borrowed by Alice
 * Waiting List: 1 person(s) waiting. Next: Bob
 * 
 * --- Library Menu ---
 * ...
 * Enter your choice: 3
 * Enter ISBN of the book to return: 978-0321765723
 * Book "The Lord of the Rings" returned successfully.
 * Notification: The Lord of the Rings is now available for Bob (next on waitlist).
 * ```
 * 
 * Your code should handle edge cases like entering non-numeric input for the menu, trying to return a book that isn't borrowed, or trying to borrow/hold a book that doesn't exist.
 * 
 * **Submission:** Provide the complete Java source code for the `Book` and `Library` classes.
 *
 * EXPLANATION:
 * The solution implements a simplified library management system demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:** The problem is divided into two classes: `Book` and `Library`. This promotes good object-oriented design and encapsulation. The `Book` class manages the state and operations related to a single book, while the `Library` class manages the collection of books and the overall application flow.
 * 
 * 2.  **Book Class:**
 *     *   **Encapsulation:** Private fields (`title`, `author`, `isbn`, `isBorrowed`, `borrowedBy`, `waitingList`) protect the internal state. Public getter methods provide controlled access.
 *     *   **Queue Usage:** The `waitingList` is declared as `Queue<String>` and initialized with a `LinkedList` implementation (`new LinkedList<>()`). This adheres to the principle of programming to the interface and uses a concrete class suitable for queue operations (FIFO - First-In, First-Out). `offer()` is used to add to the tail, and `poll()` is used to remove from the head when a book is returned. `peek()` is used to view the next element without removing it.
 *     *   **State Management:** The `isBorrowed` boolean and `borrowedBy` String track the book's availability and current borrower.
 *     *   **Methods:** `borrow()`, `returnBook()`, and `addToWaitlist()` encapsulate the core logic for changing the book's state and managing the waitlist.
 * 
 * 3.  **Library Class:**
 *     *   **List/ArrayList Usage:** The collection of books is stored in a `List<Book>` variable, initialized with `new ArrayList<>()`. This uses the `List` interface and the dynamic resizing capability of `ArrayList`.
 *     *   **Scanner Usage:** A `Scanner` instance is created to read user input from `System.in`. It's managed as a class field and closed when the application exits.
 *     *   **Switch Statement:** The `run()` method contains the main application loop. A `switch` statement is used to process the integer input received from the user's menu choice, directing execution to the appropriate method (`addBook`, `borrowBook`, etc.).
 *     *   **System.out and System.err:** `System.out.println()` is used for displaying the menu, prompts, successful operation messages, and book status information. `System.err.println()` is specifically used for printing error messages, making them distinguishable from normal output.
 *     *   **Try-Catch Exception Handling:**
 *         *   A `try-catch(InputMismatchException)` block is used around `scanner.nextInt()` in the `run()` method to gracefully handle cases where the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input to prevent an infinite loop.
 *         *   Specific checks for null or empty input strings (`isbn`, `title`, `author`, `borrowerName`) are performed at the beginning of relevant methods, printing errors to `System.err`.
 *         *   Checks for books not found (`findBookByIsbn` returning null) are performed before attempting operations on a book, with errors directed to `System.err`.
 *         *   Checks for invalid state (e.g., returning a book that wasn't borrowed) are performed, with errors directed to `System.err`.
 *         *   A general `catch (Exception e)` is included in the `run()` loop to catch any other unexpected runtime exceptions that might occur during execution, printing a generic error message to `System.err`.
 *         *   The `Book` constructor includes validation and throws `IllegalArgumentException`, which is caught in `Library.addBook()` and reported via `System.err`.
 * 
 * 4.  **Functionality Implementation:**
 *     *   Methods like `addBook`, `borrowBook`, `returnBook`, `placeHold`, `displayBookStatus`, and `displayAllBooks` implement the core library logic.
 *     *   `findBookByIsbn` is a private helper method used internally by other methods to locate books, promoting code reuse.
 *     *   The logic for borrowing handles both available books and placing holds on borrowed books, interacting with the `Book` object's state and `waitingList`.
 *     *   The return logic updates the book's status and automatically checks/notifies the next person on the waitlist using `waitingList.poll()`.
 *     *   `placeHold` provides a dedicated option to add a user to the waitlist.
 * 
 * 5.  **Best Practices:**
 *     *   Meaningful names are used for variables, methods, and classes (`Book`, `Library`, `waitingList`, `borrowBook`, `findBookByIsbn`).
 *     *   Basic input validation is performed.
 *     *   Comments explain the purpose of classes, methods, and key logic sections.
 *     *   The code is structured logically with methods dedicated to specific tasks.
 * 
 * This solution effectively integrates all required components to create a functional and robust system simulation, demonstrating advanced understanding of Java collections, object-oriented principles, user interaction, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single book in the library
class Book {
    private String title;
    private String author;
    private String isbn;
    private boolean isBorrowed;
    private String borrowedBy; // Stores the name of the borrower
    private Queue<String> waitingList; // Queue for borrowers waiting for the book

    /**
     * Constructor for the Book class.
     * @param title The title of the book.
     * @param author The author of the book.
     * @param isbn The ISBN of the book.
     */
    public Book(String title, String author, String isbn) {
        if (title == null || title.trim().isEmpty() || author == null || author.trim().isEmpty() || isbn == null || isbn.trim().isEmpty()) {
            throw new IllegalArgumentException("Title, author, and ISBN cannot be null or empty.");
        }
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isBorrowed = false;
        this.borrowedBy = null;
        this.waitingList = new LinkedList<>(); // Use LinkedList as a Queue implementation
    }

    // --- Getters ---
    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public boolean isBorrowed() {
        return isBorrowed;
    }

    public String getBorrowedBy() {
        return borrowedBy;
    }

    public int getWaitingListSize() {
        return waitingList.size();
    }

    public String getNextBorrowerOnWaitlist() {
        return waitingList.peek(); // Peek without removing
    }

    // --- Core Book Operations ---

    /**
     * Attempts to borrow the book.
     * @param borrowerName The name of the borrower.
     * @return true if the book was successfully borrowed, false otherwise (if already borrowed).
     */
    public boolean borrow(String borrowerName) {
        if (!this.isBorrowed) {
            this.isBorrowed = true;
            this.borrowedBy = borrowerName;
            return true; // Successfully borrowed
        }
        return false; // Already borrowed
    }

    /**
     * Returns the book.
     * @return The name of the next borrower on the waitlist, or null if the waitlist is empty.
     */
    public String returnBook() {
        if (this.isBorrowed) {
            this.isBorrowed = false;
            this.borrowedBy = null;
            // Check the waiting list
            if (!waitingList.isEmpty()) {
                return waitingList.poll(); // Remove and return the next borrower
            }
        }
        return null; // Book was not borrowed or waitlist is empty
    }

    /**
     * Adds a borrower to the waiting list if not already on it.
     * @param borrowerName The name of the borrower to add to the waitlist.
     * @return true if the borrower was added, false if they were already on the list.
     */
    public boolean addToWaitlist(String borrowerName) {
        // Check if borrower is already on the waitlist (simple check, not perfect for duplicate names)
        if (waitingList.contains(borrowerName)) {
            return false; // Already on the list
        }
        return waitingList.offer(borrowerName); // Add to the end of the queue
    }

    // --- Display Helper ---
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("--- Book Status ---\n");
        sb.append("Title: ").append(title).append("\n");
        sb.append("Author: ").append(author).append("\n");
        sb.append("ISBN: ").append(isbn).append("\n");
        sb.append("Status: ");
        if (isBorrowed) {
            sb.append("Borrowed by ").append(borrowedBy).append("\n");
        } else {
            sb.append("Available\n");
        }
        sb.append("Waiting List: ").append(waitingList.size()).append(" person(s) waiting.");
        if (!waitingList.isEmpty()) {
            sb.append(" Next: ").append(waitingList.peek());
        }
        sb.append("\n");
        return sb.toString();
    }
}

// Manages the collection of books and library operations
public class Library {
    // Use List interface with ArrayList implementation
    private List<Book> books;
    private Scanner scanner;

    /**
     * Constructor for the Library class.
     */
    public Library() {
        this.books = new ArrayList<>(); // Use ArrayList to store books
        this.scanner = new Scanner(System.in); // Scanner for user input
    }

    /**
     * Finds a book in the library by its ISBN.
     * @param isbn The ISBN to search for.
     * @return The Book object if found, null otherwise.
     */
    private Book findBookByIsbn(String isbn) {
        if (isbn == null || isbn.trim().isEmpty()) {
             // Basic validation, but error message handled by caller
            return null;
        }
        for (Book book : books) {
            if (book.getIsbn().equals(isbn.trim())) {
                return book;
            }
        }
        return null; // Book not found
    }

    /**
     * Adds a new book to the library.
     */
    public void addBook() {
        System.out.print("Enter ISBN: ");
        String isbn = scanner.nextLine().trim();
        System.out.print("Enter Title: ");
        String title = scanner.nextLine().trim();
        System.out.print("Enter Author: ");
        String author = scanner.nextLine().trim();

        // Input validation
        if (isbn.isEmpty() || title.isEmpty() || author.isEmpty()) {
            System.err.println("Error: ISBN, Title, and Author cannot be empty.");
            return;
        }

        // Check if book with same ISBN already exists
        if (findBookByIsbn(isbn) != null) {
            System.err.println("Error: Book with ISBN " + isbn + " already exists.");
            return;
        }

        try {
            Book newBook = new Book(title, author, isbn);
            books.add(newBook); // Add to ArrayList
            System.out.println("Book \"" + title + "\" added successfully.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding book: " + e.getMessage());
        } catch (Exception e) {
             // Catch any other unexpected exceptions during book creation
             System.err.println("An unexpected error occurred while adding the book: " + e.getMessage());
        }
    }

    /**
     * Handles the process of borrowing a book.
     */
    public void borrowBook() {
        System.out.print("Enter ISBN of the book to borrow: ");
        String isbn = scanner.nextLine().trim();
        System.out.print("Enter your name: ");
        String borrowerName = scanner.nextLine().trim();

        if (isbn.isEmpty() || borrowerName.isEmpty()) {
            System.err.println("Error: ISBN and Borrower Name cannot be empty.");
            return;
        }

        Book book = findBookByIsbn(isbn);

        if (book == null) {
            System.err.println("Error: Book with ISBN " + isbn + " not found.");
            return;
        }

        // Try to borrow
        if (book.borrow(borrowerName)) {
            System.out.println("Book \"" + book.getTitle() + "\" borrowed successfully by " + borrowerName + ".");
        } else {
            // Book is already borrowed
            System.out.println("Book \"" + book.getTitle() + "\" is currently borrowed by " + book.getBorrowedBy() + ".");
            System.out.print("Would you like to place a hold? (yes/no): ");
            String response = scanner.nextLine().trim().toLowerCase();

            if (response.equals("yes")) {
                if (book.addToWaitlist(borrowerName)) {
                    System.out.println(borrowerName + " added to the waiting list for \"" + book.getTitle() + "\". Waitlist size: " + book.getWaitingListSize());
                } else {
                    System.out.println(borrowerName + " is already on the waiting list for \"" + book.getTitle() + "\".");
                }
            } else {
                System.out.println("Hold not placed.");
            }
        }
    }

    /**
     * Handles the process of returning a book.
     */
    public void returnBook() {
        System.out.print("Enter ISBN of the book to return: ");
        String isbn = scanner.nextLine().trim();

         if (isbn.isEmpty()) {
            System.err.println("Error: ISBN cannot be empty.");
            return;
        }

        Book book = findBookByIsbn(isbn);

        if (book == null) {
            System.err.println("Error: Book with ISBN " + isbn + " not found.");
            return;
        }

        if (!book.isBorrowed()) {
            System.err.println("Error: Book \"" + book.getTitle() + "\" was not borrowed.");
            return;
        }

        String nextBorrower = book.returnBook(); // Return the book and get the next borrower

        System.out.println("Book \"" + book.getTitle() + "\" returned successfully.");

        // Notify the next person on the waitlist
        if (nextBorrower != null) {
            System.out.println("Notification: \"" + book.getTitle() + "\" is now available for " + nextBorrower + " (next on waitlist).");
        }
    }

     /**
     * Handles placing a hold on a book.
     */
    public void placeHold() {
        System.out.print("Enter ISBN of the book to place a hold on: ");
        String isbn = scanner.nextLine().trim();
        System.out.print("Enter your name: ");
        String borrowerName = scanner.nextLine().trim();

         if (isbn.isEmpty() || borrowerName.isEmpty()) {
            System.err.println("Error: ISBN and Borrower Name cannot be empty.");
            return;
        }

        Book book = findBookByIsbn(isbn);

        if (book == null) {
            System.err.println("Error: Book with ISBN " + isbn + " not found.");
            return;
        }

        if (!book.isBorrowed()) {
            System.out.println("Book \"" + book.getTitle() + "\" is currently available. You can just borrow it.");
            // Optionally offer to borrow directly here, but requirement is just to place hold
        } else {
             if (book.addToWaitlist(borrowerName)) {
                System.out.println(borrowerName + " added to the waiting list for \"" + book.getTitle() + "\". Waitlist size: " + book.getWaitingListSize());
            } else {
                System.out.println(borrowerName + " is already on the waiting list for \"" + book.getTitle() + "\".");
            }
        }
    }


    /**
     * Displays the status of a specific book by ISBN.
     */
    public void displayBookStatus() {
        System.out.print("Enter ISBN of the book to display: ");
        String isbn = scanner.nextLine().trim();

         if (isbn.isEmpty()) {
            System.err.println("Error: ISBN cannot be empty.");
            return;
        }

        Book book = findBookByIsbn(isbn);

        if (book == null) {
            System.err.println("Error: Book with ISBN " + isbn + " not found.");
        } else {
            System.out.println(book.toString()); // Use Book's toString method
        }
    }

    /**
     * Displays the status of all books in the library.
     */
    public void displayAllBooks() {
        if (books.isEmpty()) {
            System.out.println("The library currently has no books.");
            return;
        }
        System.out.println("\n--- All Library Books ---");
        for (Book book : books) {
            System.out.println(book.toString());
        }
        System.out.println("-------------------------");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Library Menu ---");
        System.out.println("1. Add Book");
        System.out.println("2. Borrow Book");
        System.out.println("3. Return Book");
        System.out.println("4. Place Hold");
        System.out.println("5. Display Book Status (ISBN)");
        System.out.println("6. Display All Books");
        System.out.println("7. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main library application loop.
     */
    public void run() {
        int choice = -1;
        while (choice != 7) {
            displayMenu();
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addBook();
                        break;
                    case 2:
                        borrowBook();
                        break;
                    case 3:
                        returnBook();
                        break;
                     case 4:
                        placeHold();
                        break;
                    case 5:
                        displayBookStatus();
                        break;
                    case 6:
                        displayAllBooks();
                        break;
                    case 7:
                        System.out.println("Exiting Library System. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 7.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to stay in loop
            } catch (Exception e) {
                 // Catch any other unexpected runtime exceptions
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 // e.printStackTrace(); // Uncomment for detailed debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the library application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Library library = new Library();
        library.run();
    }
}
