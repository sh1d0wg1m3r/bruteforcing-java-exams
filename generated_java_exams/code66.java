/*
 * Exam Question #66
 * Generated on: 2025-05-11 22:07:43
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line Task Management System. This system should allow a user to manage two lists of tasks: tasks that are pending and tasks that have been completed. Pending tasks are processed in a first-in, first-out manner, while completed tasks are simply stored in a list for review.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store tasks that are pending. Tasks should be added to the end and processed from the front.
 *     *   Use a `List` (specifically an `ArrayList` implementation) to store tasks that have been completed.
 * 
 * 2.  **Task Representation:**
 *     *   Create a `Task` class with appropriate private fields (e.g., description, status) and public methods (getters, setters, and a method to mark as completed). Ensure proper encapsulation.
 * 
 * 3.  **User Interface (Command Line):**
 *     *   The system should present a menu of options to the user:
 *         *   Add a new task.
 *         *   Complete the next pending task.
 *         *   View all pending tasks.
 *         *   View all completed tasks.
 *         *   Exit the application.
 *     *   Use `Scanner` to read user input for menu choices and task descriptions.
 *     *   Use a `switch` statement to handle the different menu options.
 * 
 * 4.  **Input Validation:**
 *     *   Validate user input for menu choices (ensure it's a valid integer within the menu range).
 *     *   Validate the task description when adding a new task (ensure it's not empty or just whitespace).
 * 
 * 5.  **Error Handling:**
 *     *   Use `try-catch` blocks to handle potential exceptions, such as `NumberFormatException` when parsing user input for menu choices.
 *     *   Handle operational errors gracefully, such as attempting to complete a task when there are no pending tasks.
 *     *   Use `System.err` to display all error messages (invalid input, operational errors).
 *     *   Implement class-wide exception handling (e.g., wrapping the main application loop in a `try-catch` in the `main` method or a top-level `run` method).
 * 
 * 6.  **Output:**
 *     *   Use `System.out` to display the menu, task lists, and success messages.
 *     *   Clearly label the output for pending and completed tasks.
 * 
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain complex logic or purpose of classes/methods.
 *     *   Structure the code logically into appropriate classes and methods.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively. Users should see a menu, enter choices, and see appropriate output or error messages based on their actions.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Buy groceries
 * Task added successfully.
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Walk the dog
 * Task added successfully.
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * [ ] Buy groceries
 * [ ] Walk the dog
 * ---------------------
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Completed task: Buy groceries
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * [ ] Walk the dog
 * ---------------------
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * [x] Buy groceries
 * -----------------------
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Complete Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 2
 * Completed task: Walk the dog
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 2
 * Error: No pending tasks to complete.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should implement the Task and TaskManager classes and the main method to drive the application as described.
 *
 * EXPLANATION:
 * This solution implements the Task Management System as described, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Task Class:** A simple class encapsulating the `description` and `isCompleted` status of a task. It provides standard getters, a `markCompleted` method, and an overridden `toString` for easy printing with a status indicator (`[ ]` or `[x]`). This fulfills the encapsulation requirement.
 * 
 * 2.  **TaskManager Class:**
 *     *   It holds the core data structures: `pendingTasks` (a `Queue` implemented with `LinkedList`) and `completedTasks` (a `List` implemented with `ArrayList`). This directly addresses the requirement to use these specific data structures and the `List` interface.
 *     *   It includes methods for each menu option: `addTask`, `completeNextTask`, `viewPendingTasks`, and `viewCompletedTasks`. These methods contain the logic for manipulating the task collections.
 *     *   The `run()` method contains the main application loop. It repeatedly displays the menu, reads user input using `Scanner`, and uses a `switch` statement to dispatch actions based on the user's choice. This fulfills the `Scanner` and `switch` requirements.
 *     *   **Input Validation:** Inside `addTask`, it checks if the provided description is null, empty, or just whitespace using `trim().isEmpty()`.
 *     *   **Error Handling:**
 *         *   The `run()` method has an internal `try-catch` block specifically for handling `NumberFormatException` if the user enters non-integer input for the menu choice. It prints an error using `System.err`.
 *         *   The `completeNextTask()` method checks if `pendingTasks.poll()` returns `null` (indicating an empty queue) and prints a specific error message using `System.err` if so.
 *         *   The `switch` statement's `default` case handles invalid integer choices and prints an error using `System.err`.
 *         *   A general `Exception` catch block is included within `run()` to catch any other unexpected runtime errors during operation, printing a message to `System.err`.
 * 
 * 3.  **TaskApp Class (Main Method):**
 *     *   The `main` method serves as the application entry point.
 *     *   It uses a `try-with-resources` block to ensure the `Scanner` is properly closed, even if exceptions occur.
 *     *   Crucially, it wraps the call to `manager.run()` within a top-level `try-catch` block. This demonstrates class-wide exception handling, catching any unhandled exceptions that might propagate out of the `TaskManager.run()` method, providing a final safety net before the program crashes. Error messages from this top-level catch also go to `System.err`.
 * 
 * 4.  **Best Practices:**
 *     *   Variable names (`pendingTasks`, `completedTasks`, `taskToComplete`, `description`, `choice`) and method names (`addTask`, `completeNextTask`, `viewPendingTasks`, `run`, `displayMenu`) are descriptive.
 *     *   Comments explain the purpose of classes, methods, and key logic sections.
 *     *   The code is structured into logical units (`Task` and `TaskManager` classes).
 *     *   `System.out` is used for normal output (menu, task lists, success messages), and `System.err` is exclusively used for error messages, adhering to the requirement.
 * 
 * This solution effectively integrates the required Java components into a functional, albeit simple, application, demonstrating understanding of data structures, control flow, user interaction, encapsulation, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Represents a single task
class Task {
    private String description;
    private boolean isCompleted;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     */
    public Task(String description) {
        this.description = description;
        this.isCompleted = false; // Tasks start as not completed
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Checks if the task is completed.
     * @return true if completed, false otherwise.
     */
    public boolean isCompleted() {
        return isCompleted;
    }

    /**
     * Marks the task as completed.
     */
    public void markCompleted() {
        this.isCompleted = true;
    }

    /**
     * Provides a string representation of the task, indicating its status.
     * @return Formatted string representing the task.
     */
    @Override
    public String toString() {
        return (isCompleted ? "[x]" : "[ ]") + " " + description;
    }
}

// Manages the collection of tasks
class TaskManager {
    // Queue for tasks waiting to be done (FIFO)
    private Queue<Task> pendingTasks;
    // List for tasks that have been completed
    private List<Task> completedTasks;
    private Scanner scanner;

    /**
     * Constructs a TaskManager, initializing task collections and scanner.
     */
    public TaskManager(Scanner scanner) {
        // LinkedList is a common implementation for Queue
        this.pendingTasks = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.completedTasks = new ArrayList<>();
        this.scanner = scanner;
    }

    /**
     * Adds a new task to the pending tasks queue.
     * Validates that the description is not empty.
     * @param description The description of the task to add.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }
        Task newTask = new Task(description.trim());
        pendingTasks.add(newTask);
        System.out.println("Task added successfully.");
    }

    /**
     * Completes the next task from the pending queue.
     * Moves the completed task to the completed tasks list.
     * Handles the case where there are no pending tasks.
     */
    public void completeNextTask() {
        // poll() retrieves and removes the head of the queue, returns null if queue is empty
        Task taskToComplete = pendingTasks.poll();
        if (taskToComplete != null) {
            taskToComplete.markCompleted();
            completedTasks.add(taskToComplete);
            System.out.println("Completed task: " + taskToComplete.getDescription());
        } else {
            System.err.println("Error: No pending tasks to complete.");
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    public void viewPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements
            pendingTasks.forEach(System.out::println);
        }
        System.out.println("---------------------");
    }

    /**
     * Displays all tasks currently in the completed list.
     */
    public void viewCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            // Iterate through the list
            completedTasks.forEach(System.out::println);
        }
        System.out.println("-----------------------");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nTask Management System Menu:");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Pending Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user interaction.
     * Contains internal error handling for input parsing and operation-specific issues.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            String inputLine = scanner.nextLine(); // Read the entire line

            try {
                int choice = Integer.parseInt(inputLine);

                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        addTask(description); // Input validation inside addTask
                        break;
                    case 2:
                        completeNextTask(); // Operational error handling inside completeNextTask
                        break;
                    case 3:
                        viewPendingTasks();
                        break;
                    case 4:
                        viewCompletedTasks();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            } catch (NumberFormatException e) {
                // Handles cases where the input is not a valid integer
                System.err.println("Error: Invalid input. Please enter a number.");
            } catch (Exception e) {
                // Catch any other unexpected runtime exceptions during operation
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optionally log the full stack trace during development/debugging
                // e.printStackTrace(System.err);
            }
        }
    }
}

// Main class to start the application
public class TaskApp {
    public static void main(String[] args) {
        // Use try-with-resources to ensure the scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            TaskManager manager = new TaskManager(scanner);
            // Run the task manager within a top-level try-catch for class-wide handling
            try {
                manager.run();
            } catch (Exception e) {
                // This catches any unhandled exceptions that might escape the run loop
                System.err.println("A critical error occurred during application execution: " + e.getMessage());
                // e.printStackTrace(System.err); // For debugging
            }
        } catch (Exception e) {
            // Catches exceptions related to scanner initialization or closure
            System.err.println("An error occurred during scanner setup or application shutdown: " + e.getMessage());
            // e.printStackTrace(System.err); // For debugging
        }
    }
}
