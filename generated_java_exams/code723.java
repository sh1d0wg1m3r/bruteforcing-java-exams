/*
 * Exam Question #723
 * Generated on: 2025-05-12 16:31:16
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Patient Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified patient management system for a small hospital clinic. The system needs to keep track of registered patients and manage a queue of patients waiting to see a doctor.
 * 
 * **Requirements:**
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (String), `name` (String), and `age` (int). Provide a constructor and public getter methods for these fields. Include a meaningful `toString()` method for easy printing.
 * 2.  **System Core:** Create a `HospitalSystem` class. This class will contain:
 *     *   A `List` (implemented by `ArrayList`) to store all registered `Patient` objects.
 *     *   A `Queue` (use a suitable implementation like `LinkedList`) to store `Patient` objects currently waiting for an appointment.
 *     *   A `Scanner` object for reading user input, which should be managed properly (e.g., initialized once, closed at the end).
 * 3.  **Functionality:** The system should present a menu-driven interface with the following options:
 *     *   **1. Register New Patient:**
 *         *   Prompt the user for patient ID, name, and age.
 *         *   Validate that the patient ID is not empty, the name is not empty, and the age is a positive integer.
 *         *   Check if a patient with the same ID already exists in the registered list. If so, display an error using `System.err` and do not register.
 *         *   If valid and unique, create a `Patient` object and add it to the registered patients list (`ArrayList`). Display a success message using `System.out`.
 *     *   **2. Add Patient to Waiting Queue:**
 *         *   Prompt the user for the patient ID to add to the queue.
 *         *   Search for the patient in the registered patients list (`ArrayList`).
 *         *   If the patient is not found, display an error using `System.err`.
 *         *   If found, add the `Patient` object to the waiting queue (`Queue`). Display a success message using `System.out`. Consider if the patient is already in the queue (optional complexity, but good practice to handle).
 *     *   **3. Process Next Patient:**
 *         *   Check if the waiting queue is empty. If so, display a message using `System.err`.
 *         *   If not empty, remove the next patient from the queue (`Queue`). Display the details of the processed patient using `System.out`.
 *     *   **4. View Waiting Queue:**
 *         *   Display the details of all patients currently in the waiting queue (`Queue`) without removing them. If the queue is empty, display a message using `System.out`.
 *     *   **5. View All Registered Patients:**
 *         *   Display the details of all patients in the registered patients list (`ArrayList`). If the list is empty, display a message using `System.out`.
 *     *   **6. Exit:** Terminate the program.
 * 4.  **Control Flow:** Use a `switch` statement to handle the user's menu selection. The program should loop until the user chooses to exit.
 * 5.  **Error Handling:**
 *     *   Use `System.err` for all error messages (e.g., invalid input, patient not found, queue empty when processing).
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, list displays).
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential `InputMismatchException` when reading integer input (like age or menu choice) and general `Exception`s that might occur during the main program loop to ensure graceful termination or error reporting.
 * 6.  **Best Practices:**
 *     *   Follow proper encapsulation principles (private fields, public methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (JavaDocs are a plus).
 *     *   Implement input validation as described.
 *     *   Ensure the `Scanner` resource is closed properly.
 * 
 * **Expected Output:**
 * 
 * *   Menu should be displayed clearly.
 * *   Successful operations should print informative messages using `System.out`.
 * *   Error conditions should print informative messages using `System.err`.
 * *   Lists/Queues should be printed clearly showing patient details.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Hospital System Menu ---
 * 1. Register New Patient
 * 2. Add Patient to Waiting Queue
 * 3. Process Next Patient
 * 4. View Waiting Queue
 * 5. View All Registered Patients
 * 6. Exit
 * Enter your choice: 1
 * Enter Patient ID: P001
 * Enter Name: Alice
 * Enter Age: 30
 * Patient P001 (Alice) registered successfully.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter Patient ID to add to queue: P001
 * Patient P001 added to the waiting queue.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 4
 * Waiting Queue:
 * Patient ID: P001, Name: Alice, Age: 30
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Processing patient from queue: Patient ID: P001, Name: Alice, Age: 30
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Error: Waiting queue is empty.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 6
 * Exiting Hospital System.
 * ```
 * 
 * **Evaluation Criteria:**
 * Your solution will be evaluated based on correctness, adherence to all requirements (including the use of specified components), implementation of best practices, proper error handling, and clarity of code.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Patient Management System demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:** This class serves as a simple Plain Old Java Object (POJO) to represent a patient. It has private fields (`patientId`, `name`, `age`) enforcing encapsulation. Public getter methods provide controlled access to the data. The `toString()` method is overridden for easy printing of patient details. The `equals()` and `hashCode()` methods are overridden based on `patientId` to correctly identify unique patients, which is useful for checking for duplicates in the list or queue.
 * 
 * 2.  **`HospitalSystem` Class:** This is the main class containing the application logic.
 *     *   **`registeredPatients`:** A `List<Patient>` implemented by `ArrayList<Patient>` is used to store all patients ever registered in the system. `ArrayList` is suitable here because we need random access (though not heavily used in this example, it's a common use case for a registry) and dynamic resizing.
 *     *   **`waitingQueue`:** A `Queue<Patient>` implemented by `LinkedList<Patient>` is used to manage the waiting list. `Queue` is the ideal interface for a waiting list as it enforces FIFO (First-In, First-Out) order, and `LinkedList` is a standard, efficient implementation for queue operations like `offer` (add) and `poll` (remove head).
 *     *   **`scanner`:** A `Scanner` object is used for all console input. It's initialized once in the constructor and closed in the `finally` block to ensure resource management.
 * 
 * 3.  **Functionality Implementation:**
 *     *   **Menu:** The `displayMenu()` method prints the options.
 *     *   **`run()` Method:** This method contains the main application loop (`while(running)`). It repeatedly displays the menu, reads user input, and uses a `switch` statement to delegate the action to appropriate private methods.
 *     *   **`registerNewPatient()`:** Reads input, performs validation (non-empty ID/name, positive age), checks for duplicate IDs by iterating through the `registeredPatients` list, and adds the new `Patient` object to the `ArrayList`.
 *     *   **`addPatientToQueue()`:** Reads an ID, searches the `registeredPatients` list for the patient. If found, it adds the `Patient` object to the `waitingQueue` using `offer()`. An optional check for the patient already being in the queue is included using `contains()`.
 *     *   **`processNextPatient()`:** Uses `poll()` to retrieve and remove the head of the `waitingQueue`. It checks if the queue is empty before attempting to poll.
 *     *   **`viewWaitingQueue()`:** Iterates through the `waitingQueue` using a `for-each` loop. This iterates over the elements without removing them, fulfilling the requirement to view the queue contents.
 *     *   **`viewAllRegisteredPatients()`:** Iterates through the `registeredPatients` list (`ArrayList`) and prints each patient.
 * 
 * 4.  **Required Component Usage:**
 *     *   `Queue` (`waitingQueue`): Used for FIFO waiting list.
 *     *   `ArrayList` (`registeredPatients`): Used for storing all registered patients.
 *     *   `List` (`registeredPatients`): The `ArrayList` is declared using the `List` interface type.
 *     *   `Scanner` (`scanner`): Used for reading all user input.
 *     *   `Switch statement`: Used in the `run()` method to handle menu choices.
 *     *   `System.err`: Used for displaying all error messages (invalid input, patient not found, queue empty, duplicate ID).
 *     *   `System.out`: Used for displaying the menu, prompts, success messages, and list/queue contents.
 *     *   `try-catch`:
 *         *   An inner `try-catch` block in `run()` handles `InputMismatchException` specifically for reading the menu choice, preventing the program from crashing on non-integer input. It consumes the invalid input using `scanner.nextLine()`.
 *         *   A `try-catch` block in `registerNewPatient()` handles `InputMismatchException` for reading the age.
 *         *   An outer `try-catch` block wraps the main `while` loop in the `run()` method. This provides "class-wide" exception handling, catching any unexpected `Exception` that might propagate up and printing an error message before the program potentially terminates, ensuring a more robust application loop.
 *         *   A `finally` block ensures the `scanner` is closed, releasing the system resource.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Patient fields are private with public getters.
 *     *   **Naming:** Variable and method names are descriptive (e.g., `registeredPatients`, `addPatientToQueue`, `displayMenu`).
 *     *   **Comments/Documentation:** Javadoc comments are included for classes and methods, explaining their purpose and parameters.
 *     *   **Input Validation:** Checks for empty strings and non-positive age are performed. `InputMismatchException` is handled for integer inputs.
 *     *   **Error Handling:** Specific error messages are printed to `System.err`.
 *     *   **Clean Structure:** The code is divided into logical methods, making the `run()` method clean and readable. The `Patient` class is separate from the main system logic.
 * 
 * This solution effectively combines the required Java components in a practical scenario, demonstrating understanding of data structures, control flow, input/output, and error handling in Java.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the hospital system
class Patient {
    private String patientId;
    private String name;
    private int age;

    /**
     * Constructs a new Patient object.
     * @param patientId The unique identifier for the patient.
     * @param name The name of the patient.
     * @param age The age of the patient.
     */
    public Patient(String patientId, String name, int age) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
    }

    // --- Getters ---
    public String getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return A formatted string containing patient details.
     */
    @Override
    public String toString() {
        return String.format("Patient ID: %s, Name: %s, Age: %d", patientId, name, age);
    }

    /**
     * Compares two Patient objects based on their patientId.
     * Useful for checking uniqueness or finding patients.
     * @param o The object to compare with.
     * @return true if the patientIds are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Patient patient = (Patient) o;
        return patientId.equals(patient.patientId);
    }

    /**
     * Generates a hash code for the Patient object based on patientId.
     * @return The hash code.
     */
    @Override
    public int hashCode() {
        return patientId.hashCode();
    }
}

// The main system managing patients and the waiting queue
public class HospitalSystem {

    // List to store all registered patients
    private List<Patient> registeredPatients;
    // Queue to store patients waiting for an appointment
    private Queue<Patient> waitingQueue;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new HospitalSystem.
     * Initializes the patient list, waiting queue, and scanner.
     */
    public HospitalSystem() {
        registeredPatients = new ArrayList<>();
        waitingQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital System Menu ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Add Patient to Waiting Queue");
        System.out.println("3. Process Next Patient");
        System.out.println("4. View Waiting Queue");
        System.out.println("5. View All Registered Patients");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Registers a new patient in the system.
     * Handles input validation and checks for duplicate IDs.
     */
    private void registerNewPatient() {
        System.out.print("Enter Patient ID: ");
        String id = scanner.nextLine().trim();
        System.out.print("Enter Name: ");
        String name = scanner.nextLine().trim();
        int age = -1; // Use a sentinel value

        if (id.isEmpty()) {
            System.err.println("Error: Patient ID cannot be empty.");
            return;
        }
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        // Check for duplicate ID
        for (Patient p : registeredPatients) {
            if (p.getPatientId().equals(id)) {
                System.err.println("Error: Patient with ID " + id + " already exists.");
                return;
            }
        }

        // Input validation for age
        try {
            System.out.print("Enter Age: ");
            age = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character left by nextInt()

            if (age <= 0) {
                System.err.println("Error: Age must be a positive integer.");
                return;
            }
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid age input. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
            return;
        }

        // Create and add the new patient
        Patient newPatient = new Patient(id, name, age);
        registeredPatients.add(newPatient);
        System.out.println("Patient " + id + " (" + name + ") registered successfully.");
    }

    /**
     * Adds an existing registered patient to the waiting queue.
     * Searches for the patient by ID in the registered list.
     */
    private void addPatientToQueue() {
        System.out.print("Enter Patient ID to add to queue: ");
        String id = scanner.nextLine().trim();

        Patient patientToAdd = null;
        for (Patient p : registeredPatients) {
            if (p.getPatientId().equals(id)) {
                patientToAdd = p;
                break;
            }
        }

        if (patientToAdd == null) {
            System.err.println("Error: Patient with ID " + id + " not found in registered patients.");
        } else {
            // Optional: Check if patient is already in queue
            if (waitingQueue.contains(patientToAdd)) {
                 System.err.println("Error: Patient with ID " + id + " is already in the waiting queue.");
            } else {
                waitingQueue.offer(patientToAdd); // offer is generally preferred over add for queues
                System.out.println("Patient " + id + " added to the waiting queue.");
            }
        }
    }

    /**
     * Processes (removes) the next patient from the waiting queue.
     */
    private void processNextPatient() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty.");
        } else {
            Patient processedPatient = waitingQueue.poll(); // poll removes and returns the head
            System.out.println("Processing patient from queue: " + processedPatient);
        }
    }

    /**
     * Displays all patients currently in the waiting queue without removing them.
     */
    private void viewWaitingQueue() {
        System.out.println("\nWaiting Queue:");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient p : waitingQueue) {
                System.out.println(p);
            }
        }
    }

    /**
     * Displays all patients registered in the system.
     */
    private void viewAllRegisteredPatients() {
        System.out.println("\nAll Registered Patients:");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient p : registeredPatients) {
                System.out.println(p);
            }
        }
    }

    /**
     * Runs the main application loop.
     * Displays the menu and processes user choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;
        try { // Class-wide exception handling
            while (running) {
                displayMenu();
                int choice = -1; // Use a sentinel value

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 6.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip the rest of the loop iteration
                }

                switch (choice) {
                    case 1:
                        registerNewPatient();
                        break;
                    case 2:
                        addPatientToQueue();
                        break;
                    case 3:
                        processNextPatient();
                        break;
                    case 4:
                        viewWaitingQueue();
                        break;
                    case 5:
                        viewAllRegisteredPatients();
                        break;
                    case 6:
                        running = false;
                        System.out.println("Exiting Hospital System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during runtime
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed regardless of exceptions
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * The main method to start the Hospital System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
