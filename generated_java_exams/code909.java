/*
 * Exam Question #909
 * Generated on: 2025-05-12 16:58:16
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Clinic Appointment Scheduler**
 * 
 * **Scenario:**
 * You are tasked with building a simple command-line application for a small clinic to manage patient flow. The system needs to handle patients arriving and being placed in a virtual waiting room (a queue). When a doctor is ready, the next patient from the waiting room is scheduled for an appointment. The system also needs to allow viewing the waiting list, viewing scheduled appointments, and canceling a scheduled appointment.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with `private` fields for `id` (an integer) and `name` (a String). Include a constructor, public getter methods for both fields, and an appropriate `toString()` method for easy printing.
 * 2.  **ClinicScheduler Class:** Create a `ClinicScheduler` class that manages the clinic's operations.
 *     *   It must have a `private` field representing the virtual waiting room using `java.util.Queue<Patient>`.
 *     *   It must have a `private` field representing the scheduled appointments using `java.util.List<Patient>` (specifically, instantiate it as an `ArrayList`).
 *     *   It must use `java.util.Scanner` to read user input from the console.
 *     *   Implement a main application loop that presents a menu of options to the user.
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 3.  **Menu Options:** The application must support the following operations via the menu:
 *     *   **1. Add Patient to Waiting List:** Prompt the user for a patient ID (integer) and name (String). Create a `Patient` object and add it to the waiting room queue.
 *     *   **2. Schedule Next Patient:** Take the next patient from the waiting room queue and add them to the scheduled appointments list. If the waiting list is empty, inform the user.
 *     *   **3. View Waiting List:** Display all patients currently in the waiting room queue, in order. If the list is empty, inform the user.
 *     *   **4. View Scheduled Appointments:** Display all patients currently scheduled. If the list is empty, inform the user.
 *     *   **5. Cancel Scheduled Appointment:** Prompt the user for a patient ID. Find and remove the patient with that ID from the scheduled appointments list. If no patient with that ID is found, inform the user.
 *     *   **6. Exit:** Terminate the application.
 * 4.  **Input Validation & Error Handling:**
 *     *   Handle cases where the user enters non-integer input when an integer is expected (e.g., for menu choice or patient ID). Use a `try-catch` block for this and inform the user using `System.err`.
 *     *   Use `System.err` to display error messages (e.g., invalid menu choice, patient ID not found for cancellation).
 *     *   Use `System.out` for all other output (menu, prompts, success messages, list displays).
 *     *   Implement class-wide exception handling by wrapping the main application loop (or the method containing it) in a `try-catch` block that catches general `Exception` and prints an unexpected error message to `System.err`.
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure proper encapsulation (`private` fields, public methods).
 *     *   Write clean and readable code.
 * 
 * **Expected Output:**
 * The application should present a clear menu, prompt for necessary input, and display informative messages based on the user's actions, including error messages using `System.err` when appropriate.
 * 
 * ```
 * --- Clinic Scheduler Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Cancel Scheduled Appointment
 * 6. Exit
 * Enter your choice:
 * ```
 * (Example interactions would follow based on choices)
 * 
 * **Constraints:**
 * - You must use `java.util.Queue`, `java.util.ArrayList`, `java.util.List`, `java.util.Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` as specified.
 * - The solution should be contained within a single file for submission purposes in an exam context, typically with the main class public and other helper classes (like `Patient`) defined within or in the same file.
 * 
 * **Deliverables:**
 * - Complete Java source code (`.java` file).
 *
 * EXPLANATION:
 * This solution implements a simple clinic appointment scheduler using the required Java components and demonstrating key programming concepts.
 * 
 * 1.  **`Patient` Class:** This is a simple Plain Old Java Object (POJO) representing a patient. It follows encapsulation principles with `private` fields (`id`, `name`) and public getter methods. The `toString()` method provides a convenient way to display patient information.
 * 
 * 2.  **`ClinicScheduler` Class:** This is the main class containing the application logic.
 *     *   **Data Structures:**
 *         *   `private Queue<Patient> waitingList;`: A `Queue` is used for the waiting list because it naturally supports FIFO (First-In, First-Out) behavior â€“ the patient who has been waiting the longest is the next one to be scheduled. `LinkedList` is a common implementation of `Queue`.
 *         *   `private List<Patient> scheduledAppointments;`: A `List` is used for scheduled appointments as it allows easy addition and removal of elements. `ArrayList` is a common, efficient implementation for general-purpose lists. The variable is declared using the `List` interface, promoting good practice by programming to the interface.
 *     *   **User Input:** `private Scanner scanner;` is used to read input from `System.in`.
 *     *   **Menu and `switch`:** The `run()` method contains the main application loop. Inside the loop, `displayMenu()` shows the options, and a `switch` statement handles the user's integer choice, directing execution to the appropriate private method (`addToWaitingList`, `scheduleNextPatient`, etc.).
 *     *   **Operations:**
 *         *   `addToWaitingList()`: Reads ID and name, creates a `Patient` object, and adds it to the `waitingList` using `queue.offer()`. Includes basic validation for non-empty name and handles `InputMismatchException` for the ID input.
 *         *   `scheduleNextPatient()`: Uses `queue.poll()` to get and remove the head of the `waitingList`. If `poll()` returns `null` (meaning the queue was empty), it prints a message. Otherwise, it adds the retrieved `Patient` to the `scheduledAppointments` list using `list.add()`.
 *         *   `viewWaitingList()` and `viewScheduledAppointments()`: Iterate through the respective collections (Queue and List) and print the `toString()` representation of each `Patient`. They check if the lists are empty before iterating.
 *         *   `cancelAppointment()`: Prompts for an ID. It iterates through the `scheduledAppointments` list using an `Iterator`. Using an `Iterator` is the correct and safe way to remove elements from a collection while iterating over it, preventing `ConcurrentModificationException`. If the patient is found, `iterator.remove()` is called, and a success message is printed to `System.out`. If the loop completes without finding the ID, an error message is printed to `System.err`. It also handles `InputMismatchException` for the ID input.
 * 
 * 3.  **Exception Handling (`try-catch`) and `System.err`/`System.out`:**
 *     *   **Input Validation:** `try-catch (InputMismatchException e)` blocks are used specifically when reading integer input (`scanner.nextInt()`) in `run()`, `addToWaitingList()`, and `cancelAppointment()`. This prevents the program from crashing if the user types text instead of a number. An error message is printed to `System.err`, and `scanner.nextLine()` is called to consume the invalid input and prevent an infinite loop.
 *     *   **Operational Errors:** Errors like "Patient ID not found for cancellation" are printed to `System.err` as they represent a failure in executing the requested operation.
 *     *   **Informational Output:** Menu display, prompts, success messages, and list contents are printed to `System.out`.
 *     *   **Class-Wide Handling:** The `run()` method's entire logic is wrapped in a `try-catch (Exception e)`. This serves as a fallback for any unexpected exceptions that might occur elsewhere in the program that haven't been handled specifically. If such an exception occurs, a generic error message is printed to `System.err`, and the stack trace is printed for debugging.
 *     *   **Resource Management:** A `finally` block in `run()` ensures the `Scanner` is closed when the application exits (either normally or due to an unhandled exception), releasing system resources.
 * 
 * 4.  **Best Practices:** The code uses descriptive names (`waitingList`, `scheduleNextPatient`, `cancelAppointment`), follows encapsulation by making fields `private`, uses interfaces (`List`, `Queue`) where appropriate, and includes basic Javadoc comments.
 * 
 * This solution effectively demonstrates the required Java components and practices in a cohesive, albeit simple, application simulating a real-world scenario. The use of `Queue` for FIFO, `List` for general storage and removal, `Scanner` for interaction, `switch` for control flow, and robust `try-catch` blocks with `System.err` for errors covers all requirements.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Iterator;

// Represents a patient in the clinic system.
class Patient {
    private int id;
    private String name;

    /**
     * Constructs a new Patient object.
     * @param id The unique identifier for the patient.
     * @param name The name of the patient.
     */
    public Patient(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the Patient.
     * @return A string in the format "ID: [id], Name: [name]".
     */
    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }

    // Optional: equals and hashCode based on ID if needed for set/map or advanced list operations
    // Not strictly required by this problem, but good practice if ID is unique identifier.
    // @Override
    // public boolean equals(Object o) {
    //     if (this == o) return true;
    //     if (o == null || getClass() != o.getClass()) return false;
    //     Patient patient = (Patient) o;
    //     return id == patient.id;
    // }
    //
    // @Override
    // public int hashCode() {
    //     return Integer.hashCode(id);
    // }
}

/**
 * Manages the clinic's patient waiting list and scheduled appointments.
 */
public class ClinicScheduler {

    private Queue<Patient> waitingList;
    private List<Patient> scheduledAppointments;
    private Scanner scanner;

    /**
     * Constructs a ClinicScheduler, initializing data structures and scanner.
     */
    public ClinicScheduler() {
        // Use LinkedList as a Queue implementation
        this.waitingList = new LinkedList<>();
        // Use ArrayList as a List implementation
        this.scheduledAppointments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Clinic Scheduler Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Cancel Scheduled Appointment");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list based on user input.
     * Handles input validation for ID.
     */
    private void addToWaitingList() {
        int id = -1;
        System.out.println("\n--- Add Patient ---");
        System.out.print("Enter Patient ID (integer): ");
        try {
            id = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            System.out.print("Enter Patient Name: ");
            String name = scanner.nextLine();

            if (name == null || name.trim().isEmpty()) {
                 System.err.println("Error: Patient name cannot be empty.");
                 return;
            }

            Patient newPatient = new Patient(id, name.trim());
            waitingList.offer(newPatient); // offer is generally preferred over add for capacity-constrained queues, though LinkedList isn't capacity constrained. It returns boolean.
            System.out.println("Patient added to waiting list: " + newPatient);

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter an integer for Patient ID.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while adding patient: " + e.getMessage());
        }
    }

    /**
     * Schedules the next patient from the waiting list.
     * Removes patient from waiting list and adds to scheduled list.
     */
    private void scheduleNextPatient() {
        System.out.println("\n--- Schedule Patient ---");
        Patient nextPatient = waitingList.poll(); // poll retrieves and removes the head of the queue

        if (nextPatient != null) {
            scheduledAppointments.add(nextPatient);
            System.out.println("Scheduled patient from waiting list: " + nextPatient);
        } else {
            System.out.println("Waiting list is empty. No patients to schedule.");
        }
    }

    /**
     * Displays all patients currently in the waiting list.
     */
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Patient patient : waitingList) {
                System.out.println(index++ + ". " + patient);
            }
        }
    }

    /**
     * Displays all patients currently in the scheduled appointments list.
     */
    private void viewScheduledAppointments() {
        System.out.println("\n--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            // Iterate through the list
            int index = 1;
            for (Patient patient : scheduledAppointments) {
                System.out.println(index++ + ". " + patient);
            }
        }
    }

    /**
     * Cancels a scheduled appointment by patient ID.
     * Removes the patient from the scheduled list.
     * Handles input validation for ID and case where ID is not found.
     */
    private void cancelAppointment() {
        System.out.println("\n--- Cancel Appointment ---");
        System.out.print("Enter Patient ID to cancel: ");
        try {
            int idToCancel = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            boolean found = false;
            // Using Iterator to safely remove elements while iterating
            Iterator<Patient> iterator = scheduledAppointments.iterator();
            while (iterator.hasNext()) {
                Patient patient = iterator.next();
                if (patient.getId() == idToCancel) {
                    iterator.remove(); // Safely remove the current element
                    System.out.println("Appointment cancelled for Patient ID: " + idToCancel + " (" + patient.getName() + ")");
                    found = true;
                    break; // Assuming IDs are unique in scheduled list
                }
            }

            if (!found) {
                System.err.println("Error: Patient with ID " + idToCancel + " not found in scheduled appointments.");
            }

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter an integer for Patient ID.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while cancelling appointment: " + e.getMessage());
        }
    }

    /**
     * Runs the main clinic scheduler application loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;
        // Class-wide exception handling
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 6.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip the rest of the loop and show menu again
                }

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        addToWaitingList();
                        break;
                    case 2:
                        scheduleNextPatient();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        cancelAppointment();
                        break;
                    case 6:
                        System.out.println("Exiting Clinic Scheduler. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exception not handled elsewhere
            System.err.println("An unexpected fatal error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Clinic Scheduler application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicScheduler scheduler = new ClinicScheduler();
        scheduler.run();
    }
}
