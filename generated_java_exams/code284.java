/*
 * Exam Question #284
 * Generated on: 2025-05-11 22:49:18
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Warehouse Inventory and Order Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified system for managing inventory and processing customer orders in a small warehouse. The system needs to keep track of items in stock and process orders placed by customers in a First-In, First-Out (FIFO) manner.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this warehouse system. Your program must include the following functionalities, accessible via a simple command-line menu:
 * 
 * 1.  **Add New Inventory Item:** Allow the user to add a new item to the warehouse inventory. Each item should have a unique ID (integer), a name (string), initial quantity (integer), and price (double).
 * 2.  **View Inventory:** Display the current list of all inventory items, including their ID, name, quantity, and price.
 * 3.  **Place Order:** Allow a customer to place an order for a specific item ID and quantity. Orders should be added to a queue for processing.
 * 4.  **View Pending Orders:** Display the list of orders currently waiting to be processed in the queue.
 * 5.  **Process Next Order:** Take the next order from the front of the queue and attempt to fulfill it. If the item exists and there is sufficient stock, decrease the inventory quantity and confirm the order processing. If the item doesn't exist or stock is insufficient, output an error and discard the order from the queue.
 * 6.  **Exit:** Terminate the program.
 * 
 * **Technical Constraints & Required Java Components:**
 * 
 * Your solution MUST explicitly use and demonstrate understanding of the following Java components:
 * 
 * *   `java.util.Queue`: To manage the pending customer orders (FIFO).
 * *   `java.util.ArrayList`: As the underlying implementation for storing the inventory items.
 * *   `java.util.List`: Declare the inventory collection using the `List` interface type.
 * *   `java.util.Scanner`: To read user input from the console for menu options and data.
 * *   `switch` statement: To handle the different menu options selected by the user.
 * *   `System.err`: To output error messages (e.g., invalid input, item not found, insufficient stock, empty queue).
 * *   `System.out`: To output normal information (menu, inventory lists, order confirmations).
 * *   Class-wide exception handling using `try-catch` blocks: Implement robust error handling, especially for user input parsing and potential runtime issues (like accessing non-existent items or processing empty queues). The main interaction loop or key methods should contain appropriate `try-catch` blocks to prevent the program from crashing due to user errors or unexpected conditions.
 * 
 * **Best Practices:**
 * 
 * *   Employ proper encapsulation (private fields, public methods) for your classes.
 * *   Use meaningful names for variables, methods, and classes.
 * *   Include appropriate comments and documentation (e.g., Javadoc).
 * *   Implement input validation (e.g., ensuring quantities are positive, item IDs are numbers).
 * *   Structure your code cleanly into appropriate classes (e.g., `InventoryItem`, `Order`, `WarehouseSystem`).
 * 
 * **Expected Output:**
 * 
 * The program should present a clear menu to the user. Based on the user's input, it should perform the requested action, displaying relevant information or error messages.
 * 
 * Example Interaction Flow (Illustrative - exact messages can vary):
 * 
 * ```
 * --- Warehouse System Menu ---
 * 1. Add Inventory Item
 * 2. View Inventory
 * 3. Place Order
 * 4. View Pending Orders
 * 5. Process Next Order
 * 6. Exit
 * Enter your choice: 1
 * Enter Item ID: 101
 * Enter Item Name: Laptop
 * Enter Quantity: 50
 * Enter Price: 1200.50
 * Item added successfully.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 2
 * Inventory List:
 * ID: 101, Name: Laptop, Quantity: 50, Price: $1200.50
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 3
 * Enter Item ID to order: 101
 * Enter Quantity to order: 2
 * Order placed successfully.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 5
 * Processing next order...
 * Order for Item ID 101, Quantity 2 processed successfully.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 5
 * Processing next order...
 * No pending orders to process.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 3
 * Enter Item ID to order: 101
 * Enter Quantity to order: 60
 * Order placed successfully.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 5
 * Processing next order...
 * Error: Insufficient stock for Item ID 101. Required: 60, Available: 48. Order discarded.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Warehouse Inventory and Order Processing System as described in the problem statement, demonstrating the required Java concepts and best practices.
 * 
 * **Class Structure:**
 * 
 * 1.  **`InventoryItem`:** A simple class representing an item in the inventory with private fields (`id`, `name`, `quantity`, `price`), a constructor, public getters, a specific setter for `quantity` (as it's modified by order processing), and an overridden `toString()` for easy printing. This adheres to encapsulation.
 * 2.  **`Order`:** A class representing a customer order with private fields (`orderId`, `itemId`, `quantity`). It includes a static counter (`nextOrderId`) to assign unique IDs to orders automatically. It also has getters and a `toString()` method.
 * 3.  **`WarehouseSystem`:** This is the core class that manages the system state and logic.
 *     *   It holds the inventory in a `List<InventoryItem>` field, specifically instantiated as an `ArrayList`. Using the `List` interface type for the field is a good practice for flexibility.
 *     *   It holds pending orders in a `Queue<Order>` field, specifically instantiated as a `LinkedList`. `LinkedList` is a common choice for implementing `Queue` as it provides efficient additions/removals from both ends.
 *     *   It contains methods for `addItem`, `viewInventory`, `placeOrder`, `viewPendingOrders`, and `processNextOrder`, implementing the required functionalities.
 *     *   `findItemById` is a private helper method demonstrating encapsulation.
 *     *   Input validation (e.g., checking for duplicate item IDs) and business logic validation (e.g., checking stock levels) are handled within its methods.
 * 4.  **`WarehouseApp`:** The main class containing the `main` method.
 *     *   It initializes a `Scanner` for user input and a `WarehouseSystem` instance.
 *     *   It runs a `while` loop to keep the application running until the user chooses to exit.
 *     *   A `printMenu` helper method displays the available options.
 *     *   The main loop uses a `switch` statement to direct execution based on the user's menu choice.
 *     *   Crucially, the main `while` loop is wrapped in a `try-catch` block. This provides class-wide exception handling, catching potential `NumberFormatException` errors if the user enters non-numeric input when a number is expected, and a general `Exception` to catch any other unexpected issues during an iteration of the loop, preventing the program from crashing and allowing it to continue. Error messages are printed to `System.err`.
 * 
 * **Required Component Usage:**
 * 
 * *   `Queue`: The `pendingOrders` field is declared as a `Queue<Order>` and uses methods like `offer()` to add orders and `poll()` to retrieve and remove the head order.
 * *   `ArrayList`: The `inventory` field is instantiated as an `ArrayList<InventoryItem>`.
 * *   `List`: The `inventory` field is declared using the `List` interface (`List<InventoryItem> inventory;`).
 * *   `Scanner`: An instance is created in `main` (`Scanner scanner = new Scanner(System.in);`) and used to read user input via `scanner.nextLine()` which is then parsed.
 * *   `switch`: Used in the `main` method to handle the user's menu selection.
 * *   `System.err`: Used to print error messages, such as invalid input, item not found, insufficient stock, or no pending orders.
 * *   `System.out`: Used for printing the menu, inventory lists, order confirmations, and exit messages.
 * *   `try-catch`: A comprehensive `try-catch` block surrounds the main application loop in `main` to catch `NumberFormatException` and other potential exceptions, demonstrating robust error handling at a high level. Specific validation checks (like negative quantities or duplicate IDs) are also handled within the `WarehouseSystem` methods, often printing errors to `System.err` without necessarily throwing exceptions for simpler validation failures.
 * 
 * **Best Practices Demonstrated:**
 * 
 * *   **Encapsulation:** Fields in `InventoryItem`, `Order`, and `WarehouseSystem` are `private`, with controlled access via public methods.
 * *   **Meaningful Names:** Variable names (`inventory`, `pendingOrders`, `itemId`, `requiredQuantity`), method names (`addItem`, `processNextOrder`, `viewInventory`), and class names (`InventoryItem`, `WarehouseSystem`) are descriptive.
 * *   **Comments and Documentation:** Javadoc comments are provided for classes and methods explaining their purpose, and inline comments clarify specific logic.
 * *   **Input Validation:** Basic validation is performed when adding items (positive ID, non-negative quantity/price) and placing orders (positive ID/quantity), as well as handling non-numeric input using `try-catch`.
 * *   **Error Handling:** `try-catch` blocks handle parsing errors and general unexpected issues. Logical errors like insufficient stock or non-existent items are checked and reported to `System.err`.
 * *   **Clean Code Structure:** The code is organized into logical classes, separating data (`InventoryItem`, `Order`), business logic (`WarehouseSystem`), and user interaction (`WarehouseApp`). Methods are relatively short and focused on a single task.
 * 
 * This solution effectively combines the required Java components within a practical scenario, emphasizing good design principles and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue and List
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents an item in the warehouse inventory.
 */
class InventoryItem {
    private int id;
    private String name;
    private int quantity;
    private double price;

    /**
     * Constructs an InventoryItem.
     * @param id The unique ID of the item.
     * @param name The name of the item.
     * @param quantity The initial quantity in stock.
     * @param price The price of the item.
     */
    public InventoryItem(int id, String name, int quantity, double price) {
        this.id = id;
        this.name = name;
        this.quantity = quantity;
        this.price = price;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    // Setter for quantity (used when processing orders)
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Quantity: %d, Price: $%.2f",
                             id, name, quantity, price);
    }
}

/**
 * Represents a customer order.
 */
class Order {
    private static int nextOrderId = 1;
    private int orderId;
    private int itemId;
    private int quantity;

    /**
     * Constructs an Order.
     * @param itemId The ID of the item being ordered.
     * @param quantity The quantity ordered.
     */
    public Order(int itemId, int quantity) {
        this.orderId = nextOrderId++;
        this.itemId = itemId;
        this.quantity = quantity;
    }

    // Getters
    public int getOrderId() {
        return orderId;
    }

    public int getItemId() {
        return itemId;
    }

    public int getQuantity() {
        return quantity;
    }

    @Override
    public String toString() {
        return String.format("Order ID: %d, Item ID: %d, Quantity: %d",
                             orderId, itemId, quantity);
    }
}

/**
 * Manages the warehouse inventory and processes orders.
 */
class WarehouseSystem {
    // Use List interface, implemented by ArrayList
    private List<InventoryItem> inventory;
    // Use Queue interface, implemented by LinkedList (common choice)
    private Queue<Order> pendingOrders;

    /**
     * Constructs a WarehouseSystem.
     */
    public WarehouseSystem() {
        this.inventory = new ArrayList<>();
        this.pendingOrders = new LinkedList<>();
    }

    /**
     * Adds a new item to the inventory.
     * Checks if an item with the same ID already exists.
     * @param item The InventoryItem to add.
     * @return true if item was added, false if ID already exists.
     */
    public boolean addItem(InventoryItem item) {
        // Prevent adding item with duplicate ID
        for (InventoryItem existingItem : inventory) {
            if (existingItem.getId() == item.getId()) {
                return false; // Item with this ID already exists
            }
        }
        inventory.add(item);
        return true;
    }

    /**
     * Finds an item in the inventory by its ID.
     * @param itemId The ID of the item to find.
     * @return The InventoryItem if found, null otherwise.
     */
    private InventoryItem findItemById(int itemId) {
        for (InventoryItem item : inventory) {
            if (item.getId() == itemId) {
                return item;
            }
        }
        return null; // Item not found
    }

    /**
     * Displays the current inventory list.
     */
    public void viewInventory() {
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            System.out.println("Inventory List:");
            for (InventoryItem item : inventory) {
                System.out.println(item);
            }
        }
    }

    /**
     * Places a new order by adding it to the pending orders queue.
     * @param order The Order to place.
     */
    public void placeOrder(Order order) {
        pendingOrders.offer(order); // offer is preferred over add for queues
        System.out.println("Order placed successfully: " + order);
    }

    /**
     * Displays the list of pending orders.
     */
    public void viewPendingOrders() {
        if (pendingOrders.isEmpty()) {
            System.out.println("No pending orders.");
        } else {
            System.out.println("Pending Orders:");
            // Iterate without removing
            for (Order order : pendingOrders) {
                System.out.println(order);
            }
        }
    }

    /**
     * Processes the next order in the queue.
     * Attempts to fulfill the order by updating inventory.
     */
    public void processNextOrder() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        Order nextOrder = pendingOrders.poll();

        if (nextOrder == null) {
            System.err.println("No pending orders to process.");
            return;
        }

        System.out.println("Processing order: " + nextOrder);

        InventoryItem itemToOrder = findItemById(nextOrder.getItemId());

        if (itemToOrder == null) {
            System.err.println("Error: Item with ID " + nextOrder.getItemId() + " not found in inventory. Order discarded.");
        } else {
            int requiredQuantity = nextOrder.getQuantity();
            int availableQuantity = itemToOrder.getQuantity();

            if (requiredQuantity <= availableQuantity) {
                itemToOrder.setQuantity(availableQuantity - requiredQuantity);
                System.out.println("Order " + nextOrder.getOrderId() + " processed successfully. " + requiredQuantity + " units of Item " + itemToOrder.getName() + " shipped.");
            } else {
                System.err.println("Error: Insufficient stock for Item ID " + nextOrder.getItemId() + ". Required: " + requiredQuantity + ", Available: " + availableQuantity + ". Order discarded.");
            }
        }
    }
}

/**
 * Main class to run the Warehouse Inventory and Order Processing System.
 * Contains the main application loop and user interaction.
 */
public class WarehouseApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        WarehouseSystem warehouse = new WarehouseSystem();
        boolean running = true;

        // Class-wide exception handling for the main loop
        while (running) {
            try {
                printMenu();
                System.out.print("Enter your choice: ");
                int choice = Integer.parseInt(scanner.nextLine()); // Read entire line to avoid issues with nextInt()

                switch (choice) {
                    case 1: // Add Inventory Item
                        System.out.print("Enter Item ID: ");
                        int addId = Integer.parseInt(scanner.nextLine());
                        System.out.print("Enter Item Name: ");
                        String addName = scanner.nextLine();
                        System.out.print("Enter Quantity: ");
                        int addQuantity = Integer.parseInt(scanner.nextLine());
                        System.out.print("Enter Price: ");
                        double addPrice = Double.parseDouble(scanner.nextLine());

                        // Basic validation
                        if (addId <= 0 || addQuantity < 0 || addPrice < 0) {
                            System.err.println("Error: ID, Quantity, and Price must be non-negative (ID > 0).");
                        } else {
                            InventoryItem newItem = new InventoryItem(addId, addName, addQuantity, addPrice);
                            if (warehouse.addItem(newItem)) {
                                System.out.println("Item added successfully.");
                            } else {
                                System.err.println("Error: Item with ID " + addId + " already exists.");
                            }
                        }
                        break;

                    case 2: // View Inventory
                        warehouse.viewInventory();
                        break;

                    case 3: // Place Order
                        System.out.print("Enter Item ID to order: ");
                        int orderItemId = Integer.parseInt(scanner.nextLine());
                        System.out.print("Enter Quantity to order: ");
                        int orderQuantity = Integer.parseInt(scanner.nextLine());

                        // Basic validation
                        if (orderItemId <= 0 || orderQuantity <= 0) {
                            System.err.println("Error: Item ID and Quantity must be positive.");
                        } else {
                            Order newOrder = new Order(orderItemId, orderQuantity);
                            warehouse.placeOrder(newOrder);
                        }
                        break;

                    case 4: // View Pending Orders
                        warehouse.viewPendingOrders();
                        break;

                    case 5: // Process Next Order
                        warehouse.processNextOrder();
                        break;

                    case 6: // Exit
                        System.out.println("Exiting Warehouse System. Goodbye!");
                        running = false;
                        break;

                    default: // Invalid choice
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (NumberFormatException e) {
                // Catch errors if user enters non-numeric input where numbers are expected
                System.err.println("Error: Invalid input. Please enter a valid number.");
            } catch (Exception e) {
                // Catch any other unexpected errors during the loop iteration
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for detailed debugging
            }
            System.out.println(); // Add a blank line for readability
        }

        scanner.close(); // Close the scanner when done
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Warehouse System Menu ---");
        System.out.println("1. Add Inventory Item");
        System.out.println("2. View Inventory");
        System.out.println("3. Place Order");
        System.out.println("4. View Pending Orders");
        System.out.println("5. Process Next Order");
        System.out.println("6. Exit");
    }
}
