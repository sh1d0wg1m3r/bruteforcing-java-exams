/*
 * Exam Question #728
 * Generated on: 2025-05-12 16:32:04
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment scheduling system for a small clinic. The system needs to manage patients who arrive and are put on a waiting list, and then schedule them for appointments with a doctor.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must adhere to the following requirements:
 * 
 * 1.  **Patient Representation:** Create a simple `Patient` class with a `name` field.
 * 2.  **Appointment Representation:** Create an `Appointment` class that holds a `Patient` object.
 * 3.  **Data Structures:**
 *     *   Maintain a **waiting list** for patients who have arrived but not yet been scheduled. This must use `java.util.Queue`.
 *     *   Maintain a **list of scheduled appointments**. This must use `java.util.List` as the declared type, instantiated with `java.util.ArrayList`.
 * 4.  **User Interface:**
 *     *   Provide a text-based menu interface using `java.util.Scanner` for user interaction.
 *     *   The menu options should be:
 *         1.  Add Patient to Waiting List
 *         2.  Schedule Next Patient
 *         3.  View Waiting List
 *         4.  View Scheduled Appointments
 *         5.  Exit
 * 5.  **Flow Control:** Use a `switch` statement to handle the user's menu selection.
 * 6.  **Input Validation:**
 *     *   When adding a patient, ensure the name entered is not empty or just whitespace. If invalid, print an error message to `System.err` and do not add the patient.
 *     *   Handle invalid menu choices by printing an error message to `System.err`.
 * 7.  **Error Handling:**
 *     *   If the user attempts to "Schedule Next Patient" but the waiting list is empty, print an error message to `System.err`.
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime issues within the main interaction loop (e.g., issues reading input, though specific checks are also needed).
 * 8.  **Output:**
 *     *   Use `System.out` for normal output (menu, lists, success messages).
 *     *   Use `System.err` for all error messages.
 * 9.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments explaining key parts of the code.
 *     *   Structure the code logically within a main class (e.g., `HospitalScheduler`).
 * 
 * **Execution:**
 * 
 * The program should start, display the menu, and loop, processing user input until the user chooses to exit.
 * 
 * **Example Interaction (Illustrative):**
 * 
 * ```
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Alice added to the waiting list.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Bob added to the waiting list.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 3
 * --- Waiting List ---
 * Alice
 * Bob
 * --------------------
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Alice scheduled for an appointment.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 4
 * --- Scheduled Appointments ---
 * Appointment for: Alice
 * ----------------------------
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Bob scheduled for an appointment.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Error: Waiting list is empty. Cannot schedule.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * Your solution must compile and run, demonstrating the correct usage of all specified Java components and following the required structure and practices.
 *
 * EXPLANATION:
 * This solution implements a simple hospital appointment scheduler demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:** The program is organized into three classes: `Patient`, `Appointment`, and `HospitalScheduler`. This follows good object-oriented design principles by separating concerns. `Patient` and `Appointment` are simple data holders, while `HospitalScheduler` contains the core logic and manages the data structures.
 * 2.  **Encapsulation:** Fields in `Patient`, `Appointment`, and `HospitalScheduler` are declared as `private`, and access is provided through public methods (`getName`, `getPatient`).
 * 3.  **Data Structures:**
 *     *   `java.util.Queue`: The `waitingList` is declared as a `Queue<Patient>` and instantiated with `java.util.LinkedList`. `LinkedList` is a common implementation of `Queue` that provides efficient insertion and removal from the ends. Patients are added using `offer()` and removed (scheduled) using `poll()`, respecting the First-In, First-Out (FIFO) nature of a waiting list.
 *     *   `java.util.List` and `java.util.ArrayList`: The `scheduledAppointments` is declared as a `List<Appointment>` and instantiated with `java.util.ArrayList`. This demonstrates programming to the interface (`List`), which is a best practice. `ArrayList` is suitable for storing scheduled appointments where indexed access or simple iteration is common.
 * 4.  **User Input (`Scanner`):** A `java.util.Scanner` is used to read user input from `System.in` for both the menu choice and the patient's name. Note the use of `scanner.nextLine()` after `scanner.nextInt()` to consume the leftover newline character, which is a common pitfall when mixing `nextInt()` and `nextLine()`.
 * 5.  **Flow Control (`switch`):** A `switch` statement is used within the main loop (`run` method) to direct the program flow based on the user's integer menu choice. Each case corresponds to a specific action (add patient, schedule, view lists, exit).
 * 6.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for displaying the menu, success messages, and the contents of the waiting and scheduled lists.
 *     *   `System.err.println()` is specifically used for printing all error messages, such as invalid input, empty waiting list when scheduling, or invalid menu choices. This is important for distinguishing normal output from error conditions.
 * 7.  **Input Validation:**
 *     *   When adding a patient, `name.trim().isEmpty()` checks if the entered name is empty or contains only whitespace. An error is printed to `System.err` if invalid.
 *     *   The `default` case in the `switch` handles integer inputs that are outside the valid menu range (1-5), printing an error to `System.err`.
 * 8.  **Error Handling (`try-catch`):**
 *     *   **Specific Logical Error:** The `scheduleNextPatient` method explicitly checks `if (waitingList.isEmpty())` before calling `poll()`. This prevents a `NullPointerException` or similar issue if `poll()` returned `null` (which it does for an empty queue) and we tried to use the result. An error is printed to `System.err`.
 *     *   **General Exception Handling:** The main `while` loop in the `run` method is wrapped in a `try-catch` block. This `try-catch` block specifically catches `java.util.InputMismatchException` if the user enters non-integer input when prompted for a menu choice. It also includes a generic `catch (Exception e)` as a safety net for any other unexpected runtime errors that might occur during the execution of the chosen menu option. Catching `InputMismatchException` is crucial to prevent an infinite loop if invalid input isn't consumed.
 * 9.  **Best Practices:** Meaningful names (`waitingList`, `scheduleNextPatient`, `displayMenu`), comments explaining the purpose of classes and methods, and the overall structure contribute to code readability and maintainability. The use of interfaces (`List`) promotes flexibility.
 * 
 * This solution effectively integrates all the required components into a functional program that simulates a practical scenario while adhering to best practices and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Represents a patient
class Patient {
    private String name;

    public Patient(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a scheduled appointment
class Appointment {
    private Patient patient;

    public Appointment(Patient patient) {
        this.patient = patient;
    }

    public Patient getPatient() {
        return patient;
    }

    @Override
    public String toString() {
        return "Appointment for: " + patient.getName();
    }
}

// Main class for the hospital scheduling system
public class HospitalScheduler {

    // Use Queue for the waiting list (FIFO)
    private Queue<Patient> waitingList;
    // Use List interface with ArrayList implementation for scheduled appointments
    private List<Appointment> scheduledAppointments;
    // Scanner for user input
    private Scanner scanner;

    public HospitalScheduler() {
        // Initialize data structures
        waitingList = new LinkedList<>(); // LinkedList implements Queue
        scheduledAppointments = new ArrayList<>(); // ArrayList implements List
        scanner = new Scanner(System.in);
    }

    // Displays the main menu to the user
    private void displayMenu() {
        System.out.println("\nHospital Scheduling System Menu:");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Adds a new patient to the waiting list
    private void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        // Consume the newline character left by previous nextInt() or next()
        scanner.nextLine(); // Important: Consume newline before reading string
        String name = scanner.nextLine().trim(); // Read full line and trim whitespace

        // Validate input
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Exit method if input is invalid
        }

        Patient patient = new Patient(name);
        waitingList.offer(patient); // Add patient to the end of the queue
        System.out.println(name + " added to the waiting list.");
    }

    // Schedules the next patient from the waiting list
    private void scheduleNextPatient() {
        System.out.println("Scheduling next patient...");
        // Check if the waiting list is empty before attempting to poll
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule.");
            return; // Exit method if queue is empty
        }

        Patient nextPatient = waitingList.poll(); // Remove and get the head of the queue
        Appointment appointment = new Appointment(nextPatient);
        scheduledAppointments.add(appointment); // Add the appointment to the list
        System.out.println(nextPatient.getName() + " scheduled for an appointment.");
    }

    // Displays the current waiting list
    private void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    // Displays the list of scheduled appointments
    private void viewScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            // Iterate through the list
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
        }
        System.out.println("----------------------------");
    }

    // Runs the main application loop
    public void run() {
        int choice = 0;
        boolean exit = false;

        // Main application loop
        while (!exit) {
            displayMenu();
            try {
                // Read user input for menu choice
                choice = scanner.nextInt();

                // Use switch statement to handle different menu options
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        scheduleNextPatient();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        exit = true; // Set exit flag to true
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Handle invalid integer input (outside 1-5 range)
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            } catch (java.util.InputMismatchException e) {
                // Catch non-integer input specifically
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Generic catch-all for unexpected errors during execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run();
    }
}
