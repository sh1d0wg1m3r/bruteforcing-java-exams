/*
 * Exam Question #430
 * Generated on: 2025-05-11 23:10:04
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified appointment scheduling system for a hospital. Patients arrive and are added to a waiting list (queue). Doctors can then schedule the next patient from the waiting list for an appointment. The system should also allow viewing all currently scheduled appointments.
 * 
 * **Requirements:**
 * 
 * 1.  **Implement the `Patient` class:**
 *     *   Should have a private field for `name` (String).
 *     *   Include a constructor `Patient(String name)`.
 *     *   Provide a public getter `getName()`.
 *     *   Override the `toString()` method to return the patient's name.
 * 
 * 2.  **Implement the `Appointment` class:**
 *     *   Should have private fields: `patient` (`Patient`), `doctorName` (String), and `timeSlot` (String).
 *     *   Include a constructor `Appointment(Patient patient, String doctorName, String timeSlot)`.
 *     *   Provide public getters for all fields (`getPatient()`, `getDoctorName()`, `getTimeSlot()`).
 *     *   Override the `toString()` method to provide a user-friendly representation of the appointment (e.g., "Appointment for [Patient Name] with Dr. [Doctor Name] at [Time Slot]").
 * 
 * 3.  **Implement the `HospitalScheduler` class:**
 *     *   This class will manage the system's state and user interaction.
 *     *   It must contain:
 *         *   A private field `patientQueue` of type `Queue<Patient>` to hold patients waiting for scheduling.
 *         *   A private field `scheduledAppointments` of type `List<Appointment>` to store scheduled appointments. This list must be implemented using `ArrayList`.
 *         *   A private field `scanner` of type `Scanner` for user input.
 *     *   Include a constructor that initializes `patientQueue` (using a suitable `Queue` implementation like `LinkedList`), `scheduledAppointments` (using `ArrayList`), and `scanner`.
 *     *   Implement the following public methods:
 *         *   `addPatientToQueue()`: Prompts the user for a patient's name and adds a new `Patient` object to the `patientQueue`.
 *         *   `scheduleNextPatient()`:
 *             *   Attempts to retrieve (and remove) the next patient from the `patientQueue` using `poll()`.
 *             *   If the queue is empty, print an error message using `System.err` and return.
 *             *   If a patient is retrieved, prompt the user for the doctor's name and the time slot.
 *             *   Create a new `Appointment` object and add it to the `scheduledAppointments` list.
 *             *   Print a success message using `System.out`.
 *         *   `viewAppointments()`: Iterates through the `scheduledAppointments` list and prints details of each appointment using `System.out`. If the list is empty, print a message indicating no appointments are scheduled.
 *         *   `run()`: This method contains the main application loop.
 *             *   It should display a menu with options: 1) Add Patient to Queue, 2) Schedule Next Patient, 3) View All Appointments, 4) Exit.
 *             *   It should read the user's choice using the `scanner`.
 *             *   It must use a `switch` statement to handle the user's choice, calling the appropriate methods.
 *             *   The loop should continue until the user chooses the Exit option.
 *             *   Implement **class-wide exception handling** using a `try-catch` block that wraps the main loop or the critical operations within it to catch potential runtime errors (e.g., `InputMismatchException` if you were parsing integers directly, though Scanner's `nextLine` simplifies this, a general `Exception` catch around the loop is required). Print an error message using `System.err` if an exception occurs.
 *             *   Ensure the `scanner` is closed when the application exits.
 * 
 * **General Requirements & Best Practices:**
 * 
 * *   Use meaningful variable and method names.
 * *   Include comments to explain complex parts.
 * *   Ensure proper encapsulation (private fields, public methods).
 * *   Handle invalid input gracefully (e.g., non-numeric input for menu choice, though the switch handles valid options, the loop structure and `try-catch` should prevent crashes).
 * *   Use `System.out` for normal output and `System.err` for error messages.
 * *   Adhere to standard Java coding conventions.
 * 
 * **Expected Output Structure (Example Interaction):**
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice added to the queue.
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient Bob added to the queue.
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Enter doctor name: Dr. Smith
 * Enter time slot (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled for Alice with Dr. Smith at 10:30 AM.
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 3
 * --- Scheduled Appointments ---
 * Appointment for Alice with Dr. Smith at 10:30 AM.
 * -----------------------------
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Enter doctor name: Dr. Jones
 * Enter time slot (e.g., 10:00 AM): 11:00 AM
 * Appointment scheduled for Bob with Dr. Jones at 11:00 AM.
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 2
 * Scheduling next patient...
 * Error: Patient queue is empty. Cannot schedule.
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 3
 * --- Scheduled Appointments ---
 * Appointment for Alice with Dr. Smith at 10:30 AM.
 * Appointment for Bob with Dr. Jones at 11:00 AM.
 * -----------------------------
 * 
 * --- Hospital Scheduler Menu ---
 * 1) Add Patient to Queue
 * 2) Schedule Next Patient
 * 3) View All Appointments
 * 4) Exit
 * Enter your choice: 4
 * Exiting Hospital Scheduler. Goodbye!
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simplified hospital appointment scheduler demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` and `Appointment` classes are simple Plain Old Java Objects (POJOs) representing the core entities, demonstrating basic encapsulation with private fields and public getters. `toString()` is overridden for easy printing.
 *     *   `HospitalScheduler` is the main class managing the application logic, state (the queue and list), and user interaction.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue`: `patientQueue` is declared as `Queue<Patient>` and instantiated as a `LinkedList`. Patients are added using `offer()` and removed for scheduling using `poll()`, adhering to the FIFO (First-In, First-Out) nature of a queue.
 *     *   `ArrayList`: `scheduledAppointments` is declared as `List<Appointment>` and instantiated as an `ArrayList`. This demonstrates using the `List` interface while implementing with `ArrayList`. Scheduled appointments are added using `add()`.
 *     *   `List interface`: The `scheduledAppointments` field is typed as `List<Appointment>`, promoting good practice by programming to the interface rather than the specific implementation (`ArrayList`).
 *     *   `Scanner`: A `Scanner` object is used to read user input from `System.in` for menu choices and patient/appointment details. `nextLine()` is used to read complete lines, which is generally safer than `nextInt()` or `nextDouble()` when mixing line-based and token-based input.
 *     *   `Switch statement`: The `run()` method uses a `switch` statement to direct execution based on the user's numeric menu choice, providing clear flow control for the different actions.
 *     *   `System.err`: Used for printing error messages, such as when the patient queue is empty during scheduling or when input validation fails (e.g., empty name/doctor/time). This separates error output from standard application output (`System.out`).
 *     *   `System.out`: Used for printing the menu, prompts, success messages, and the list of scheduled appointments.
 *     *   `Class-wide exception handling with try-catch blocks`: A `try-catch(Exception e)` block wraps the main `while` loop in the `run()` method. This provides a form of "class-wide" handling for unexpected runtime exceptions that might occur during the execution of the main application logic. A specific `catch(NumberFormatException e)` is also included inside the loop to handle cases where the user enters non-numeric input for the menu choice gracefully, preventing the program from crashing and allowing it to continue. The `finally` block ensures the `scanner` is closed regardless of how the `try` block exits.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Patient`, `Appointment`, and `HospitalScheduler` are `private`, accessed via public methods (`getters`, `addPatientToQueue`, etc.).
 *     *   **Meaningful Names:** Variable names (`patientQueue`, `scheduledAppointments`, `doctorName`, `timeSlot`) and method names (`addPatientToQueue`, `scheduleNextPatient`, `viewAppointments`, `run`) are descriptive.
 *     *   **Comments and Documentation:** Javadoc comments are used for classes and public methods, explaining their purpose, parameters, and return values. Inline comments explain specific logic points.
 *     *   **Input Validation:** Basic validation is included for patient name, doctor name, and time slot to prevent empty strings. Validation for the menu choice handles non-numeric input and out-of-range numbers.
 *     *   **Error Handling:** `System.err` is used for errors. The `try-catch` block provides robust handling for potential runtime issues. Specific error messages are provided for scenarios like an empty queue.
 *     *   **Clean Code Structure:** The code is organized into logical classes and methods, making it readable and maintainable. The main application loop is contained within the `run()` method, separating it from the setup in the constructor and the entry point in `main()`.
 * 
 * This solution effectively integrates all the required Java components into a practical scenario, demonstrating an understanding of data structures, object-oriented principles, user interaction, and error handling in Java.
 */

import java.util.Queue;
import java.util.LinkedList; // A common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException; // Although Scanner.nextLine avoids this for menu

// Represents a patient
class Patient {
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the patient.
     * @return The patient's name.
     */
    @Override
    public String toString() {
        return name;
    }
}

// Represents a scheduled appointment
class Appointment {
    private Patient patient;
    private String doctorName;
    private String timeSlot;

    /**
     * Constructs a new Appointment object.
     * @param patient The patient for the appointment.
     * @param doctorName The name of the doctor.
     * @param timeSlot The time slot for the appointment.
     */
    public Appointment(Patient patient, String doctorName, String timeSlot) {
        this.patient = patient;
        this.doctorName = doctorName;
        this.timeSlot = timeSlot;
    }

    /**
     * Gets the patient for this appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the doctor's name for this appointment.
     * @return The doctor's name.
     */
    public String getDoctorName() {
        return doctorName;
    }

    /**
     * Gets the time slot for this appointment.
     * @return The time slot string.
     */
    public String getTimeSlot() {
        return timeSlot;
    }

    /**
     * Returns a user-friendly string representation of the appointment.
     * @return The appointment details string.
     */
    @Override
    public String toString() {
        return "Appointment for " + patient.getName() + " with Dr. " + doctorName + " at " + timeSlot + ".";
    }
}

// Manages the patient queue and scheduled appointments
public class HospitalScheduler {
    private Queue<Patient> patientQueue;
    private List<Appointment> scheduledAppointments; // Use List interface
    private Scanner scanner;

    /**
     * Constructs a new HospitalScheduler.
     * Initializes the patient queue, scheduled appointments list, and scanner.
     */
    public HospitalScheduler() {
        // Initialize Queue using LinkedList
        this.patientQueue = new LinkedList<>();
        // Initialize List using ArrayList
        this.scheduledAppointments = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the waiting queue based on user input.
     */
    public void addPatientToQueue() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return; // Input validation
        }
        Patient patient = new Patient(name.trim());
        patientQueue.offer(patient); // Add patient to the end of the queue
        System.out.println("Patient " + patient.getName() + " added to the queue.");
    }

    /**
     * Schedules the next patient from the queue for an appointment.
     * Prompts for doctor name and time slot.
     */
    public void scheduleNextPatient() {
        System.out.println("Scheduling next patient...");
        Patient nextPatient = patientQueue.poll(); // Get and remove the head of the queue

        if (nextPatient == null) {
            System.err.println("Error: Patient queue is empty. Cannot schedule.");
            return;
        }

        System.out.print("Enter doctor name: ");
        String doctorName = scanner.nextLine();
         if (doctorName == null || doctorName.trim().isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty. Appointment not scheduled.");
             patientQueue.offer(nextPatient); // Put the patient back if input is invalid
             return;
         }

        System.out.print("Enter time slot (e.g., 10:00 AM): ");
        String timeSlot = scanner.nextLine();
         if (timeSlot == null || timeSlot.trim().isEmpty()) {
             System.err.println("Error: Time slot cannot be empty. Appointment not scheduled.");
              patientQueue.offer(nextPatient); // Put the patient back if input is invalid
             return;
         }

        Appointment appointment = new Appointment(nextPatient, doctorName.trim(), timeSlot.trim());
        scheduledAppointments.add(appointment); // Add appointment to the list
        System.out.println("Appointment scheduled for " + nextPatient.getName() + " with Dr. " + doctorName.trim() + " at " + timeSlot.trim() + ".");
    }

    /**
     * Displays all currently scheduled appointments.
     */
    public void viewAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments are currently scheduled.");
        } else {
            for (Appointment appt : scheduledAppointments) {
                System.out.println(appt); // Uses Appointment's toString()
            }
        }
        System.out.println("-----------------------------");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Scheduler Menu ---");
        System.out.println("1) Add Patient to Queue");
        System.out.println("2) Schedule Next Patient");
        System.out.println("3) View All Appointments");
        System.out.println("4) Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and actions.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1;
        // Class-wide exception handling wrapping the main operational loop
        try {
            while (choice != 4) {
                displayMenu();
                String input = scanner.nextLine(); // Read entire line to avoid Scanner issues

                try {
                    choice = Integer.parseInt(input); // Attempt to parse as integer
                } catch (NumberFormatException e) {
                    // Handle non-integer input specifically
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 4.");
                    continue; // Go back to the start of the loop
                }

                // Use a switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatientToQueue();
                        break;
                    case 2:
                        scheduleNextPatient();
                        break;
                    case 3:
                        viewAppointments();
                        break;
                    case 4:
                        System.out.println("Exiting Hospital Scheduler. Goodbye!");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure scanner is closed even if an exception occurs or loop exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run(); // Start the scheduler's main loop
    }
}
