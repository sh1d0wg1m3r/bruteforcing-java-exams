/*
 * Exam Question #770
 * Generated on: 2025-05-12 16:38:21
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based application for a hospital to manage patient appointments. The system needs to handle scheduling new appointments, listing appointments currently in the waiting queue, and canceling appointments from the queue.
 * 
 * **Requirements:**
 * 
 * Implement a Java application that fulfills the following requirements:
 * 
 * 1.  **Appointment Representation:** Create a class `Appointment` with private fields for a unique integer `id`, `patientName` (String), and `timeSlot` (String). Include a constructor and public getter methods for these fields. Implement a `toString()` method to provide a readable representation of an appointment.
 * 
 * 2.  **Scheduler Logic:** Create a class `HospitalScheduler` that manages the appointments. This class should contain:
 *     *   A private field `waitingQueue` of type `Queue<Appointment>` to store appointments currently in the queue. Use a suitable implementation like `java.util.LinkedList`.
 *     *   A private field `allAppointmentsLog` of type `List<Appointment>` to keep a historical log of *all* appointments ever scheduled. Use `java.util.ArrayList`.
 *     *   A private counter to generate unique appointment IDs, starting from 1.
 *     *   A public method `scheduleAppointment(String patientName, String timeSlot)`:
 *         *   Generate a unique ID.
 *         *   Create a new `Appointment` object.
 *         *   Add the new appointment to both the `waitingQueue` and the `allAppointmentsLog`.
 *         *   Print a confirmation message using `System.out` including the appointment ID.
 *         *   Return the generated appointment ID.
 *     *   A public method `listWaitingAppointments()`:
 *         *   Iterate through the `waitingQueue` and print each appointment's details using `System.out`.
 *         *   If the queue is empty, print a message indicating no appointments are waiting.
 *     *   A public method `cancelAppointment(int appointmentId)`:
 *         *   Attempt to find and remove the appointment with the given `appointmentId` from the `waitingQueue`.
 *         *   Print a success message using `System.out` if the appointment was found and removed.
 *         *   Print an error message using `System.err` if the appointment with the given ID was not found in the `waitingQueue`.
 *         *   *Note:* Removing an element by ID from a Queue requires iteration; standard Queue methods don't support direct removal by arbitrary criteria. You will need to iterate and find the element.
 * 
 * 3.  **Main Application Flow:** Create a main class (e.g., `HospitalApp`) with a `main` method to handle user interaction.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Schedule Appointment
 *         2.  List Waiting Appointments
 *         3.  Cancel Appointment
 *         4.  Exit
 *     *   Use a `switch` statement to process the user's menu choice.
 *     *   Implement the logic for each menu option by calling the appropriate methods in the `HospitalScheduler` instance.
 *     *   Handle invalid menu choices by printing an error message using `System.err`.
 *     *   Ensure the application continues to loop and present the menu until the user chooses the Exit option.
 * 
 * 4.  **Error Handling and Validation:**
 *     *   Implement input validation for scheduling: ensure patient name and time slot are not empty. Use `System.err` for validation errors.
 *     *   Implement exception handling: Use `try-catch` blocks to handle potential exceptions, particularly for invalid input (e.g., non-integer input when expecting an appointment ID for cancellation). Implement "class-wide exception handling" by wrapping the main application loop or critical sections in `try-catch`. Use `System.err` to report caught exceptions.
 * 
 * 5.  **Best Practices:**
 *     *   Follow proper encapsulation principles (private fields, public methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments to explain complex logic.
 *     *   Use `System.out` for normal program output and prompts.
 *     *   Use `System.err` for all error messages (validation errors, exceptions, item not found errors).
 *     *   Ensure the `Scanner` resource is properly closed.
 * 
 * **Expected Output:**
 * 
 * The application should interact with the user via the console. Example interactions might look like this:
 * 
 * ```
 * Hospital Appointment Management System
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter time slot (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled with ID: 1
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Enter time slot (e.g., 10:00 AM): 11:00 AM
 * Appointment scheduled with ID: 2
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 2
 * --- Waiting Appointments ---
 * Appointment ID: 1, Patient: Alice, Time: 10:30 AM
 * Appointment ID: 2, Patient: Bob, Time: 11:00 AM
 * ----------------------------
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 3
 * Enter Appointment ID to cancel: 1
 * Appointment ID 1 cancelled successfully.
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 2
 * --- Waiting Appointments ---
 * Appointment ID: 2, Patient: Bob, Time: 11:00 AM
 * ----------------------------
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 1 and 4.
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: 3
 * Enter Appointment ID to cancel: 99
 * Error: Appointment with ID 99 not found in the waiting queue.
 * 
 * Menu:
 * 1. Schedule Appointment
 * 2. List Waiting Appointments
 * 3. Cancel Appointment
 * 4. Exit
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * ```
 * 
 * Your code should be well-structured, readable, and correctly implement all the specified requirements using the required Java components.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Appointment` Class:** A basic Plain Old Java Object (POJO) representing an appointment with encapsulated data (`id`, `patientName`, `timeSlot`) and getter methods. The `toString()` method provides a convenient way to display appointment details.
 * 
 * 2.  **`HospitalScheduler` Class:** This class acts as the core logic controller.
 *     *   It uses a `Queue<Appointment>` (`waitingQueue`) implemented by `LinkedList` to manage appointments that are currently waiting to be seen. The `offer()` method is used for adding, which is the standard `Queue` method for adding elements. Listing iterates through the queue using an enhanced for loop, which does not remove elements.
 *     *   It uses a `List<Appointment>` (`allAppointmentsLog`) implemented by `ArrayList` to keep a record of *all* appointments ever created. This fulfills the requirement to use `ArrayList` and `List`, although in this specific simulation, it primarily serves as a log and is not directly used for cancellation lookup (cancellation targets the waiting queue).
 *     *   `scheduleAppointment` creates a new appointment, assigns a unique ID using a counter, and adds it to *both* the log list and the waiting queue.
 *     *   `listWaitingAppointments` simply iterates and prints the contents of the `waitingQueue`.
 *     *   `cancelAppointment` demonstrates how to remove an element from a `Queue` based on a criterion (the appointment ID). Since `Queue` doesn't have a direct `removeById` method, we obtain an `Iterator` and manually iterate through the queue, checking the ID of each appointment. When the matching appointment is found, `iterator.remove()` is called. This is the safe way to remove elements from a collection while iterating over it.
 * 
 * 3.  **`HospitalApp` Class (`main` method):**
 *     *   This class handles the user interface and application loop.
 *     *   `Scanner` is used to read input from `System.in`.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   A `switch` statement directs the program flow based on the user's integer input, handling the four menu options and a default case for invalid choices.
 *     *   `System.out` is used for printing the menu, prompts, successful operation messages, and the list of appointments.
 *     *   `System.err` is used exclusively for printing error messages, including invalid input, validation failures, and appointments not found during cancellation.
 * 
 * 4.  **Error Handling and Validation:**
 *     *   Input validation is performed in the "Schedule Appointment" case to ensure patient name and time slot are not empty using `trim().isEmpty()`. Errors are reported via `System.err`.
 *     *   Class-wide exception handling is implemented by wrapping the main `while` loop within a `try-catch(Exception e)` block. This catches any unexpected runtime exceptions that might occur during the application's execution.
 *     *   Specific `try-catch(InputMismatchException)` blocks are used within the main loop (around reading the menu choice) and within the "Cancel Appointment" case (around reading the appointment ID) to gracefully handle cases where the user enters non-integer input when a number is expected. The `scanner.nextLine()` is crucial after `scanner.nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls.
 *     *   A `finally` block ensures the `Scanner` resource is closed when the main loop exits or if an unexpected exception terminates the loop prematurely.
 * 
 * 5.  **Best Practices:**
 *     *   The code uses private fields and public methods in `Appointment` and `HospitalScheduler` for proper encapsulation.
 *     *   Variable and method names are descriptive (e.g., `waitingQueue`, `scheduleAppointment`, `patientName`).
 *     *   Comments are included to explain the purpose of classes, methods, and key logic sections.
 *     *   Output streams (`System.out` vs. `System.err`) are used appropriately.
 *     *   The code structure is modular, separating data representation (`Appointment`), business logic (`HospitalScheduler`), and user interface (`HospitalApp`).
 * 
 * This solution effectively integrates all the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a functional simulation of a real-world scenario, demonstrating competence in handling collections, user input, and error management in Java.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Iterator;

// Represents a single appointment
class Appointment {
    private int id;
    private String patientName;
    private String timeSlot;

    // Constructor
    public Appointment(int id, String patientName, String timeSlot) {
        this.id = id;
        this.patientName = patientName;
        this.timeSlot = timeSlot;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getPatientName() {
        return patientName;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    // String representation of the appointment
    @Override
    public String toString() {
        return "Appointment ID: " + id + ", Patient: " + patientName + ", Time: " + timeSlot;
    }
}

// Manages the scheduling and queuing of appointments
class HospitalScheduler {
    // Queue to hold appointments currently waiting
    private Queue<Appointment> waitingQueue;
    // List to log all appointments ever scheduled
    private List<Appointment> allAppointmentsLog;
    // Counter for generating unique appointment IDs
    private int nextAppointmentId;

    // Constructor
    public HospitalScheduler() {
        this.waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        this.allAppointmentsLog = new ArrayList<>();
        this.nextAppointmentId = 1;
    }

    /**
     * Schedules a new appointment.
     * Creates an Appointment object, adds it to the log and the waiting queue.
     *
     * @param patientName The name of the patient.
     * @param timeSlot    The desired time slot.
     * @return The ID of the newly scheduled appointment.
     */
    public int scheduleAppointment(String patientName, String timeSlot) {
        // Generate unique ID
        int id = nextAppointmentId++;
        // Create appointment
        Appointment newAppointment = new Appointment(id, patientName, timeSlot);

        // Add to log and queue
        allAppointmentsLog.add(newAppointment); // Add to historical log
        waitingQueue.offer(newAppointment);    // Add to waiting queue (offer is preferred for Queue)

        System.out.println("Appointment scheduled with ID: " + id);
        return id;
    }

    /**
     * Lists all appointments currently in the waiting queue.
     */
    public void listWaitingAppointments() {
        System.out.println("--- Waiting Appointments ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("No appointments currently in the waiting queue.");
        } else {
            // Iterate through the queue without removing elements
            for (Appointment app : waitingQueue) {
                System.out.println(app);
            }
        }
        System.out.println("----------------------------");
    }

    /**
     * Cancels an appointment by removing it from the waiting queue based on its ID.
     *
     * @param appointmentId The ID of the appointment to cancel.
     * @return true if the appointment was found and cancelled, false otherwise.
     */
    public boolean cancelAppointment(int appointmentId) {
        // Iterate through the queue to find and remove the appointment by ID
        // Using Iterator's remove is safe while iterating
        Iterator<Appointment> iterator = waitingQueue.iterator();
        while (iterator.hasNext()) {
            Appointment appointment = iterator.next();
            if (appointment.getId() == appointmentId) {
                iterator.remove(); // Safely remove the element from the queue
                System.out.println("Appointment ID " + appointmentId + " cancelled successfully.");
                return true;
            }
        }
        // If loop finishes without finding the appointment
        System.err.println("Error: Appointment with ID " + appointmentId + " not found in the waiting queue.");
        return false;
    }
}

// Main class for the Hospital Appointment Management System
public class HospitalApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalScheduler scheduler = new HospitalScheduler();
        boolean running = true;

        System.out.println("Hospital Appointment Management System");

        // Class-wide exception handling around the main application loop
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Inner try-catch for handling non-integer input specifically for the menu choice
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip the rest of the loop iteration
                }

                // Switch statement for menu control
                switch (choice) {
                    case 1: // Schedule Appointment
                        System.out.print("Enter patient name: ");
                        String patientName = scanner.nextLine();
                        System.out.print("Enter time slot (e.g., 10:00 AM): ");
                        String timeSlot = scanner.nextLine();

                        // Input validation
                        if (patientName.trim().isEmpty() || timeSlot.trim().isEmpty()) {
                            System.err.println("Error: Patient name and time slot cannot be empty.");
                        } else {
                            scheduler.scheduleAppointment(patientName.trim(), timeSlot.trim());
                        }
                        break;

                    case 2: // List Waiting Appointments
                        scheduler.listWaitingAppointments();
                        break;

                    case 3: // Cancel Appointment
                        System.out.print("Enter Appointment ID to cancel: ");
                        try {
                            int idToCancel = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            scheduler.cancelAppointment(idToCancel);
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid input for Appointment ID. Please enter a number.");
                            scanner.nextLine(); // Consume invalid input
                        }
                        break;

                    case 4: // Exit
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;

                    default: // Invalid choice
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                }
                System.out.println(); // Add a blank line for better readability
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions at the top level
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed regardless of exceptions
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    // Helper method to print the menu
    private static void printMenu() {
        System.out.println("Menu:");
        System.out.println("1. Schedule Appointment");
        System.out.println("2. List Waiting Appointments");
        System.out.println("3. Cancel Appointment");
        System.out.println("4. Exit");
    }
}
