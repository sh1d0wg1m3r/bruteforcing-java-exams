/*
 * Exam Question #295
 * Generated on: 2025-05-11 22:51:08
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Software Development Task Management System
 * 
 * **Objective:** Design and implement a simplified command-line based system to manage software development tasks. The system should allow users to add new tasks, simulate a developer picking up and completing the next available task, and view the lists of pending and completed tasks.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a `Task` class with private fields: `taskId` (an integer, maybe auto-generated or user-provided), `description` (String), and `status` (String, e.g., "Pending", "Completed"). Include a constructor, getters, and a meaningful `toString()` method.
 * 2.  **System Structure:** Create a main class (e.g., `TaskManagementSystem`) that manages the task lists.
 * 3.  **Data Structures:**
 *     *   Maintain pending tasks in a `java.util.Queue`. Tasks should be processed in the order they were added (FIFO).
 *     *   Maintain completed tasks in a `java.util.List`. Use `java.util.ArrayList` as the concrete implementation.
 * 4.  **User Interface:** Provide a simple command-line menu using `java.util.Scanner` for user interaction. The menu options should include:
 *     *   Add a new task.
 *     *   Complete the next pending task.
 *     *   View pending tasks.
 *     *   View completed tasks.
 *     *   Exit.
 * 5.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 6.  **Input Handling:**
 *     *   Read user input using `java.util.Scanner`.
 *     *   Validate user input where necessary (e.g., ensuring menu choices are valid integers, checking if task description is empty).
 * 7.  **Output:**
 *     *   Use `System.out` for displaying the menu, task lists, and successful operation messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, attempting to complete a task when the queue is empty).
 * 8.  **Error Handling:** Implement class-wide exception handling using `try-catch` blocks. Wrap the main execution loop or critical operations to catch potential runtime errors (like `InputMismatchException` or custom errors if you choose to define them, although basic `Exception` handling is sufficient here for the "class-wide" requirement around the main flow).
 * 9.  **Best Practices:**
 *     *   Follow proper encapsulation (`private` fields, `public` methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure.
 * 
 * **Execution Flow:**
 * 
 * 1.  The program starts and displays the menu.
 * 2.  The user enters a menu option.
 * 3.  The program performs the requested action:
 *     *   **Add Task:** Prompts for task description, creates a `Task` object, and adds it to the pending queue. Assign a simple unique ID (e.g., auto-incrementing).
 *     *   **Complete Task:** Removes the next task from the pending queue, updates its status to "Completed", and adds it to the completed list. If the queue is empty, display an error.
 *     *   **View Pending:** Displays all tasks currently in the pending queue.
 *     *   **View Completed:** Displays all tasks in the completed list.
 *     *   **Exit:** Terminates the program.
 * 4.  The program loops back to display the menu until the user chooses to exit.
 * 
 * **Expected Output Format:**
 * 
 * *   Menu display.
 * *   Prompts for input.
 * *   Confirmation messages for successful operations.
 * *   Lists of tasks (showing ID, description, status).
 * *   Error messages using `System.err`.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Implement login feature
 * Task 1 added to pending queue.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write API documentation
 * Task 2 added to pending queue.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task [ID: 1, Description: Implement login feature, Status: Pending]
 * Task [ID: 2, Description: Write API documentation, Status: Pending]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * ...
 * Enter your choice: 2
 * Task 1 'Implement login feature' completed.
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 4
 * --- Completed Tasks ---
 * Task [ID: 1, Description: Implement login feature, Status: Completed]
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System demonstrating the required Java concepts.
 * 
 * 1.  **`Task` Class:**
 *     *   Encapsulates task data (`taskId`, `description`, `status`) using `private` fields.
 *     *   Provides a constructor to create tasks and getter methods to access properties.
 *     *   Includes a `setStatus` method to change the task's state.
 *     *   Overrides `toString()` for convenient printing of task details.
 * 
 * 2.  **`TaskManagementSystem` Class:**
 *     *   **Data Structures:**
 *         *   `pendingTasks`: Declared as `Queue<Task>` and initialized with `new LinkedList<>()`. `Queue` ensures tasks are processed in FIFO order (first in, first out), which is suitable for a task queue. `LinkedList` is a common class that implements the `Queue` interface.
 *         *   `completedTasks`: Declared as `List<Task>` and initialized with `new ArrayList<>()`. `List` provides ordered storage and allows easy iteration, suitable for viewing completed tasks. `ArrayList` is a dynamic array implementation of `List`.
 *     *   **`Scanner`:** An instance of `Scanner` is used to read user input from `System.in`. It's initialized in the constructor and closed in the `finally` block of the `run` method to release system resources.
 *     *   **`nextTaskId`:** A simple integer field used to generate unique IDs for new tasks.
 *     *   **Methods:**
 *         *   `displayMenu()`: Prints the available options to `System.out`.
 *         *   `addNewTask()`: Prompts the user for a description, validates that it's not empty, creates a new `Task` object with an auto-incrementing ID, and adds it to the `pendingTasks` queue using `offer()`. `offer()` is preferred over `add()` for queues as it returns `false` if the element cannot be added (though for `LinkedList`, it behaves like `add`). Success messages are printed to `System.out`, errors to `System.err`.
 *         *   `completeNextTask()`: Retrieves and removes the head of the `pendingTasks` queue using `poll()`. `poll()` returns `null` if the queue is empty, which is handled to display an error message using `System.err`. If a task is retrieved, its status is updated, and it's added to the `completedTasks` list. Success messages are printed to `System.out`.
 *         *   `viewPendingTasks()`: Iterates through the `pendingTasks` queue (using an enhanced for loop, which uses the queue's iterator and doesn't remove elements) and prints each task using `System.out`.
 *         *   `viewCompletedTasks()`: Iterates through the `completedTasks` list and prints each task using `System.out`.
 *         *   `run()`: This is the main execution loop.
 *             *   It contains a `while` loop that continues until the user chooses option 5 (Exit).
 *             *   Inside the loop, it displays the menu and reads the user's choice.
 *             *   A nested `try-catch (InputMismatchException)` block specifically handles cases where the user enters non-integer input for the menu choice, printing an error to `System.err` and consuming the invalid input to prevent an infinite loop.
 *             *   A `switch` statement is used to direct the program flow based on the valid user choice, calling the appropriate method (`addNewTask`, `completeNextTask`, etc.).
 *             *   A `default` case in the `switch` handles invalid integer choices, printing an error to `System.err`.
 *             *   **Class-wide Exception Handling:** The entire `while` loop (the core operational part of the system) is wrapped in a `try-catch (Exception e)` block. This demonstrates catching unexpected exceptions that might occur anywhere within the main system loop, printing a general error message and the stack trace to `System.err`. This fulfills the requirement for "class-wide" handling by wrapping the primary execution method's logic.
 *             *   A `finally` block ensures the `Scanner` resource is closed regardless of whether an exception occurred or the loop finished normally.
 *         *   `main()`: The entry point of the program, creating a `TaskManagementSystem` instance and calling its `run()` method.
 * 
 * 3.  **Required Components Usage:**
 *     *   `Queue`: Used for `pendingTasks` (specifically `LinkedList`).
 *     *   `ArrayList`: Used as the implementation for `completedTasks`.
 *     *   `List`: Used as the type for the `completedTasks` variable.
 *     *   `Scanner`: Used for reading user input.
 *     *   `switch`: Used to handle menu options in the `run` method.
 *     *   `System.err`: Used for all error messages (input validation, empty queue, unexpected exceptions).
 *     *   `System.out`: Used for menu display, prompts, success messages, and task lists.
 *     *   `try-catch`: Used around the main loop in `run` for class-wide exception handling and specifically for `InputMismatchException` within the loop.
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is used in the `Task` class.
 *     *   Variable and method names are descriptive (`pendingTasks`, `completeNextTask`, `addNewTask`, `nextTaskId`).
 *     *   Basic comments explain the purpose of classes and methods.
 *     *   Input validation checks for empty task descriptions and non-integer menu input.
 *     *   Error handling uses `System.err` and different levels of `try-catch` blocks.
 *     *   The code is structured into logical methods within the `TaskManagementSystem` class.
 * 
 * This solution effectively uses all the required Java components in a practical scenario, demonstrating understanding of data structures, control flow, input/output, and error handling in Java.
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList is a common implementation for Queue
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a software development task.
 */
class Task {
    private int taskId;
    private String description;
    private String status;

    /**
     * Constructs a new Task.
     *
     * @param taskId The unique identifier for the task.
     * @param description The description of the task.
     */
    public Task(int taskId, String description) {
        this.taskId = taskId;
        this.description = description;
        this.status = "Pending"; // Default status
    }

    // Getters
    public int getTaskId() {
        return taskId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the task.
     * @param status The new status (e.g., "Completed").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Task [ID: " + taskId + ", Description: " + description + ", Status: " + status + "]";
    }
}

/**
 * Manages a queue of software development tasks.
 */
public class TaskManagementSystem {

    private Queue<Task> pendingTasks;
    private List<Task> completedTasks;
    private Scanner scanner;
    private int nextTaskId; // Simple auto-incrementing ID generator

    /**
     * Constructs a new TaskManagementSystem.
     */
    public TaskManagementSystem() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.nextTaskId = 1; // Start task IDs from 1
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task to the pending queue based on user input.
     */
    private void addNewTask() {
        System.out.print("Enter task description: ");
        scanner.nextLine(); // Consume the newline character left by previous nextInt()
        String description = scanner.nextLine().trim();

        if (description.isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }

        Task newTask = new Task(nextTaskId++, description);
        pendingTasks.offer(newTask); // Use offer for adding to queue
        System.out.println("Task " + newTask.getTaskId() + " added to pending queue.");
    }

    /**
     * Simulates completing the next task in the pending queue.
     */
    private void completeNextTask() {
        Task taskToComplete = pendingTasks.poll(); // Use poll for retrieving and removing

        if (taskToComplete == null) {
            System.err.println("Error: No pending tasks to complete.");
        } else {
            taskToComplete.setStatus("Completed");
            completedTasks.add(taskToComplete);
            System.out.println("Task " + taskToComplete.getTaskId() + " '" + taskToComplete.getDescription() + "' completed.");
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    private void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No tasks currently pending.");
        } else {
            // Iterate without removing using the Queue's iterator
            for (Task task : pendingTasks) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays all tasks currently in the completed list.
     */
    private void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks have been completed yet.");
        } else {
            // Iterate through the List
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
    }

    /**
     * Runs the main task management system loop.
     */
    public void run() {
        int choice = 0;
        // Class-wide exception handling around the main execution loop
        try {
            while (choice != 5) {
                displayMenu();
                try {
                    choice = scanner.nextInt();

                    switch (choice) {
                        case 1:
                            addNewTask();
                            break;
                        case 2:
                            completeNextTask();
                            break;
                        case 3:
                            viewPendingTasks();
                            break;
                        case 4:
                            viewCompletedTasks();
                            break;
                        case 5:
                            System.out.println("Exiting Task Management System.");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    choice = 0; // Reset choice to continue loop
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the system's operation
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed when the system exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Task Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManagementSystem system = new TaskManagementSystem();
        system.run();
    }
}
