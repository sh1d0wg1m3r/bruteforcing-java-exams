/*
 * Exam Question #93
 * Generated on: 2025-05-11 22:13:01
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam - Package Delivery Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Package Delivery Management System. This system needs to manage packages waiting for delivery, a fleet of delivery vehicles, and simulate the process of assigning packages to vehicles and then delivering them.
 * 
 * The system should allow users to perform the following operations via a command-line interface:
 * 
 * 1.  **Add a new package:** Add a package with a unique ID and destination to a queue of packages awaiting assignment.
 * 2.  **Add a new delivery vehicle:** Add a vehicle with a unique ID and maximum capacity to the fleet.
 * 3.  **Assign the next pending package:** Take the next package from the waiting queue and assign it to a *specific* delivery vehicle, provided the vehicle has capacity.
 * 4.  **Simulate delivery for a vehicle:** Mark all packages currently assigned to a specific vehicle as 'delivered' and clear the vehicle, making it ready for new assignments.
 * 5.  **View system status:** Display the number of packages waiting in the queue and list all vehicles, showing their ID, capacity, and the packages they are currently carrying (if any).
 * 6.  **Exit:** Terminate the program.
 * 
 * **Requirements:**
 * 
 * Your solution must adhere to the following technical requirements:
 * 
 * 1.  **Class Structure:** Create appropriate classes to represent `Package` and `DeliveryVehicle`. A main class (e.g., `DeliverySystem`) will manage the overall system logic.
 * 2.  **Data Structures:**
 *     *   Use `java.util.Queue` (specifically, an implementation like `LinkedList`) to store packages waiting for assignment.
 *     *   Use `java.util.ArrayList` to store the fleet of `DeliveryVehicle` objects.
 *     *   Use `java.util.List` as the declared type for the collection of vehicles (i.e., `List<DeliveryVehicle> vehicleFleet = new ArrayList<>();`).
 * 3.  **User Interaction:** Use `java.util.Scanner` to read user commands and input (package ID, destination, vehicle ID, capacity, etc.).
 * 4.  **Control Flow:** Use a `switch` statement to handle the different user menu options.
 * 5.  **Output:**
 *     *   Use `System.out.println()` for normal program output, menus, and status displays.
 *     *   Use `System.err.println()` for error messages (e.g., invalid input, vehicle not found, vehicle full, queue empty).
 * 6.  **Error Handling:** Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues like invalid input formats or logical errors during operations (e.g., trying to assign to a non-existent vehicle).
 * 7.  **Input Validation:** Validate user input where necessary (e.g., vehicle capacity must be positive, vehicle/package IDs should ideally be unique, although you don't need to enforce strict uniqueness beyond finding by ID). Handle cases where a requested vehicle or package is not found.
 * 8.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public getters/setters where needed, public methods for operations).
 *     *   Use meaningful names for classes, variables, and methods.
 *     *   Include appropriate comments and basic Javadoc for clarity.
 *     *   Maintain a clean code structure.
 * 
 * **Example Interaction (Illustrative):**
 * 
 * ```
 * --- Delivery Management System ---
 * 1. Add Package
 * 2. Add Vehicle
 * 3. Assign Next Package to Vehicle
 * 4. Simulate Vehicle Delivery
 * 5. View Status
 * 6. Exit
 * Enter choice: 1
 * Enter Package ID: P001
 * Enter Destination: New York
 * Package P001 added to queue.
 * 
 * --- Delivery Management System ---
 * ...
 * Enter choice: 2
 * Enter Vehicle ID: V101
 * Enter Capacity: 3
 * Vehicle V101 (Capacity: 3) added to fleet.
 * 
 * --- Delivery Management System ---
 * ...
 * Enter choice: 3
 * Enter Vehicle ID to assign to: V101
 * Assigning package P001 to vehicle V101.
 * Package P001 assigned to V101.
 * 
 * --- Delivery Management System ---
 * ...
 * Enter choice: 5
 * --- System Status ---
 * Packages in queue: 0
 * Vehicles:
 *  - V101 (Capacity: 3) - Carrying: [P001 to New York]
 * ---
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct usage of all specified Java components.
 * *   Correct implementation of the system logic for each operation.
 * *   Effective use of data structures.
 * *   Robust error handling and input validation.
 * *   Adherence to best practices (encapsulation, naming, comments, structure).
 * *   The code should be runnable and demonstrate the required functionality.
 * 
 * **Time Limit:** 45-60 minutes
 * 
 * **Submission:** Provide the complete Java code for all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Package Delivery Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Package`: Represents a package with its ID, destination, and delivery status. Encapsulates package data.
 *     *   `DeliveryVehicle`: Represents a vehicle with its ID, capacity, and a `List` of packages it's currently carrying. Encapsulates vehicle data and behavior (`addPackage`, `deliverPackages`).
 *     *   `DeliverySystem`: The main class that orchestrates the system. It holds the collection of pending packages and the fleet of vehicles. It contains the main application loop and methods for each operation.
 * 
 * 2.  **Data Structures:**
 *     *   `pendingPackages`: Declared as `Queue<Package>` and implemented using `LinkedList`. This correctly models packages waiting in a line â€“ the `poll()` method retrieves and removes the package that has been waiting the longest (FIFO - First-In, First-Out).
 *     *   `vehicleFleet`: Declared as `List<DeliveryVehicle>` and implemented using `ArrayList`. This allows for easy storage and retrieval of vehicles by index or iteration. The `ArrayList` provides dynamic resizing as vehicles are added.
 *     *   `currentPackages` within `DeliveryVehicle`: Declared as `List<Package>` and implemented using `ArrayList`. This stores the packages currently assigned to a specific vehicle. `List` is appropriate here as the order doesn't strictly matter for delivery simulation, and random access/iteration is useful.
 * 
 * 3.  **User Interaction (`Scanner`) and Control Flow (`switch`):**
 *     *   A `Scanner` object is used to read user input from `System.in`.
 *     *   The main application loop in `runSimulationLoop()` continuously displays a menu and reads the user's choice.
 *     *   A `switch` statement is used to direct the program flow to the appropriate method based on the user's integer input.
 * 
 * 4.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for displaying the menu, confirming successful operations (e.g., package added, vehicle added, package assigned), and showing the system status.
 *     *   `System.err.println()` is used specifically for printing error messages, such as invalid input, when a requested vehicle is not found, when a vehicle is full, or when the pending queue is empty. This helps distinguish errors from normal output.
 * 
 * 5.  **Error Handling (`try-catch`):**
 *     *   A main `try-catch` block surrounds the `switch` statement within the `runSimulationLoop`. This provides class-wide exception handling for unexpected errors that might occur during any operation.
 *     *   Specific `try-catch` blocks are also used within methods like `addVehicle` to handle anticipated input errors (`InputMismatchException` for non-integer capacity) and validation errors (`IllegalArgumentException` for non-positive capacity).
 *     *   Error messages are printed to `System.err`.
 * 
 * 6.  **Input Validation:**
 *     *   Basic validation is performed, such as checking if package/vehicle IDs are empty.
 *     *   Vehicle capacity is validated to be positive using an `IllegalArgumentException` in the `DeliveryVehicle` constructor.
 *     *   The assignment logic checks if the pending queue is empty, if the target vehicle exists, and if the vehicle has capacity before attempting the assignment.
 *     *   The delivery simulation checks if the target vehicle exists.
 *     *   Input reading in the main loop handles `InputMismatchException` if the user enters non-integer input for the menu choice.
 * 
 * 7.  **Best Practices:**
 *     *   **Encapsulation:** Class fields (`packageId`, `destination`, `isDelivered`, `vehicleId`, `capacity`, `currentPackages`) are `private`. Public methods (`getters`, `addPackage`, `deliverPackages`, etc.) provide controlled access and modification.
 *     *   **Naming:** Variable and method names are descriptive (e.g., `pendingPackages`, `vehicleFleet`, `assignNextPackageToVehicle`, `simulateVehicleDelivery`).
 *     *   **Comments:** Basic comments explain the purpose of classes, fields, and key methods. Javadoc-style comments are used for class descriptions.
 *     *   **Clean Code:** The code is structured into logical methods, separating different operations. The main loop is kept clean by delegating tasks to specific methods.
 * 
 * This solution effectively integrates all the required components to build a functional, albeit simplified, system, demonstrating an understanding of core Java concepts, data structures, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a package to be delivered
class Package {
    private String packageId;
    private String destination;
    private boolean isDelivered;

    public Package(String packageId, String destination) {
        this.packageId = packageId;
        this.destination = destination;
        this.isDelivered = false;
    }

    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public boolean isDelivered() {
        return isDelivered;
    }

    public void markDelivered() {
        this.isDelivered = true;
    }

    @Override
    public String toString() {
        return packageId + " to " + destination;
    }
}

// Represents a delivery vehicle
class DeliveryVehicle {
    private String vehicleId;
    private int capacity;
    private List<Package> currentPackages; // Using List for packages on board

    public DeliveryVehicle(String vehicleId, int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity must be positive.");
        }
        this.vehicleId = vehicleId;
        this.capacity = capacity;
        this.currentPackages = new ArrayList<>(); // Implementation is ArrayList
    }

    public String getVehicleId() {
        return vehicleId;
    }

    public int getCapacity() {
        return capacity;
    }

    public List<Package> getCurrentPackages() {
        // Return a copy or unmodifiable list to prevent external modification
        return new ArrayList<>(currentPackages);
    }

    public boolean isFull() {
        return currentPackages.size() >= capacity;
    }

    public boolean addPackage(Package pkg) {
        if (!isFull()) {
            return currentPackages.add(pkg);
        }
        return false; // Vehicle is full
    }

    public void deliverPackages() {
        if (currentPackages.isEmpty()) {
            System.out.println("Vehicle " + vehicleId + " has no packages to deliver.");
            return;
        }
        System.out.println("Vehicle " + vehicleId + " delivering " + currentPackages.size() + " packages...");
        for (Package pkg : currentPackages) {
            pkg.markDelivered();
            System.out.println(" - Delivered: " + pkg.getPackageId());
        }
        currentPackages.clear(); // Clear the vehicle
        System.out.println("Vehicle " + vehicleId + " is now empty.");
    }

    @Override
    public String toString() {
        return vehicleId + " (Capacity: " + capacity + ")";
    }
}

// Manages the overall delivery system logic
public class DeliverySystem {

    // Queue of packages waiting for assignment
    private Queue<Package> pendingPackages;
    // List of available delivery vehicles
    private List<DeliveryVehicle> vehicleFleet;
    private Scanner scanner;

    public DeliverySystem() {
        // Using LinkedList as the Queue implementation
        this.pendingPackages = new LinkedList<>();
        // Using ArrayList as the List implementation for vehicles
        this.vehicleFleet = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    // --- Operations ---

    public void addPackage() {
        try {
            System.out.print("Enter Package ID: ");
            String packageId = scanner.nextLine().trim();
            System.out.print("Enter Destination: ");
            String destination = scanner.nextLine().trim();

            if (packageId.isEmpty() || destination.isEmpty()) {
                System.err.println("Package ID and Destination cannot be empty.");
                return;
            }
            // Basic check for uniqueness (not strictly required by prompt, but good practice)
            // Skipping strict uniqueness check for exam scope, focus on core logic

            Package newPackage = new Package(packageId, destination);
            pendingPackages.offer(newPackage); // offer returns true/false, doesn't throw exception
            System.out.println("Package " + packageId + " added to queue.");
        } catch (Exception e) { // Catch any unexpected errors during input
            System.err.println("An error occurred while adding package: " + e.getMessage());
        }
    }

    public void addVehicle() {
        try {
            System.out.print("Enter Vehicle ID: ");
            String vehicleId = scanner.nextLine().trim();
            System.out.print("Enter Capacity: ");
            int capacity = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (vehicleId.isEmpty()) {
                System.err.println("Vehicle ID cannot be empty.");
                return;
            }
             // Basic check for uniqueness (not strictly required by prompt)
             for(DeliveryVehicle vehicle : vehicleFleet) {
                 if (vehicle.getVehicleId().equals(vehicleId)) {
                     System.err.println("Vehicle with ID " + vehicleId + " already exists.");
                     return;
                 }
             }

            DeliveryVehicle newVehicle = new DeliveryVehicle(vehicleId, capacity);
            vehicleFleet.add(newVehicle);
            System.out.println("Vehicle " + vehicleId + " (Capacity: " + capacity + ") added to fleet.");

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a valid number for capacity.");
            scanner.nextLine(); // Consume the invalid input
        } catch (IllegalArgumentException e) {
             System.err.println("Error adding vehicle: " + e.getMessage());
        } catch (Exception e) { // Catch any other unexpected errors
            System.err.println("An error occurred while adding vehicle: " + e.getMessage());
        }
    }

    public void assignNextPackageToVehicle() {
        try {
            if (pendingPackages.isEmpty()) {
                System.err.println("No packages waiting in the queue to be assigned.");
                return;
            }

            System.out.print("Enter Vehicle ID to assign to: ");
            String vehicleId = scanner.nextLine().trim();

            DeliveryVehicle targetVehicle = findVehicleById(vehicleId);

            if (targetVehicle == null) {
                System.err.println("Vehicle with ID " + vehicleId + " not found.");
                return;
            }

            if (targetVehicle.isFull()) {
                System.err.println("Vehicle " + vehicleId + " is full. Cannot assign more packages.");
                return;
            }

            // Get the next package from the queue (removes it)
            Package packageToAssign = pendingPackages.poll();

            if (packageToAssign != null) {
                if (targetVehicle.addPackage(packageToAssign)) {
                    System.out.println("Assigning package " + packageToAssign.getPackageId() + " to vehicle " + vehicleId + ".");
                    System.out.println("Package " + packageToAssign.getPackageId() + " assigned to " + vehicleId + ".");
                } else {
                    // This case should ideally not happen if isFull() check is correct,
                    // but included for robustness.
                    System.err.println("Failed to add package to vehicle " + vehicleId + " (vehicle might have become full unexpectedly).");
                    pendingPackages.offer(packageToAssign); // Put it back in queue
                }
            } else {
                 // Should not happen if pendingPackages.isEmpty() check passes, but for safety
                 System.err.println("Error: Queue was unexpectedly empty.");
            }

        } catch (Exception e) { // Catch any unexpected errors
            System.err.println("An error occurred during package assignment: " + e.getMessage());
            // Consider if packageToAssign needs to be put back in queue here if it was polled
            // For simplicity in this exam, we might accept losing it on unexpected errors,
            // or add more complex state management. Sticking to simpler error handling.
        }
    }

    public void simulateVehicleDelivery() {
        try {
            if (vehicleFleet.isEmpty()) {
                System.err.println("No vehicles in the fleet to simulate delivery.");
                return;
            }

            System.out.print("Enter Vehicle ID to simulate delivery for: ");
            String vehicleId = scanner.nextLine().trim();

            DeliveryVehicle targetVehicle = findVehicleById(vehicleId);

            if (targetVehicle == null) {
                System.err.println("Vehicle with ID " + vehicleId + " not found.");
                return;
            }

            targetVehicle.deliverPackages();

        } catch (Exception e) { // Catch any unexpected errors
            System.err.println("An error occurred during delivery simulation: " + e.getMessage());
        }
    }

    public void viewStatus() {
        System.out.println("\n--- System Status ---");
        System.out.println("Packages in queue: " + pendingPackages.size());

        System.out.println("Vehicles:");
        if (vehicleFleet.isEmpty()) {
            System.out.println(" - No vehicles in the fleet.");
        } else {
            for (DeliveryVehicle vehicle : vehicleFleet) {
                System.out.print(" - " + vehicle);
                List<Package> carried = vehicle.getCurrentPackages(); // Get the list of packages
                if (carried.isEmpty()) {
                    System.out.println(" - Carrying: None");
                } else {
                    System.out.println(" - Carrying: " + carried); // List.toString() is helpful here
                }
            }
        }
        System.out.println("---");
    }

    // Helper method to find a vehicle by its ID
    private DeliveryVehicle findVehicleById(String vehicleId) {
        for (DeliveryVehicle vehicle : vehicleFleet) {
            if (vehicle.getVehicleId().equals(vehicleId)) {
                return vehicle;
            }
        }
        return null; // Not found
    }

    // --- Main Application Loop ---

    public void runSimulationLoop() {
        int choice = -1;
        while (choice != 6) {
            printMenu();
            try {
                System.out.print("Enter choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                // Class-wide exception handling for the switch block
                try {
                    switch (choice) {
                        case 1:
                            addPackage();
                            break;
                        case 2:
                            addVehicle();
                            break;
                        case 3:
                            assignNextPackageToVehicle();
                            break;
                        case 4:
                            simulateVehicleDelivery();
                            break;
                        case 5:
                            viewStatus();
                            break;
                        case 6:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (Exception operationException) {
                    // Catch any exceptions not handled within specific operation methods
                    System.err.println("An unexpected error occurred during operation: " + operationException.getMessage());
                    // operationException.printStackTrace(); // Optional: for debugging
                }

            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
                choice = -1; // Reset choice to stay in loop
            } catch (Exception mainException) {
                 // Catch any other unexpected exceptions in the main loop
                 System.err.println("An unexpected error occurred: " + mainException.getMessage());
                 // mainException.printStackTrace(); // Optional: for debugging
                 choice = 6; // Exit on critical unexpected error
            }
            System.out.println(); // Add a newline for better readability between operations
        }
        scanner.close(); // Close the scanner when exiting
    }

    private void printMenu() {
        System.out.println("--- Delivery Management System ---");
        System.out.println("1. Add Package");
        System.out.println("2. Add Vehicle");
        System.out.println("3. Assign Next Package to Vehicle");
        System.out.println("4. Simulate Vehicle Delivery");
        System.out.println("5. View Status");
        System.out.println("6. Exit");
    }

    // Main method to start the application
    public static void main(String[] args) {
        DeliverySystem system = new DeliverySystem();
        system.runSimulationLoop();
    }
}
