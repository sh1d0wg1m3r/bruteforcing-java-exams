/*
 * Exam Question #862
 * Generated on: 2025-05-12 16:51:46
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Job Scheduler
 * 
 * **Scenario:** You are tasked with building a simple command-line application that simulates a print job scheduler. The system should allow users to submit print jobs, view pending jobs, process the next available job, and view a history of completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **PrintJob Class:** Create a class `PrintJob` with private fields `jobName` (String) and `pageCount` (int). Include a constructor, public getter methods for both fields, and a `toString()` method that returns a formatted string representation of the job (e.g., "Job 'Report.pdf' (10 pages)").
 * 2.  **PrintScheduler Class:** Create a class `PrintScheduler` to manage the print jobs.
 *     *   It must use a `java.util.Queue<PrintJob>` to store pending print jobs.
 *     *   It must use a `java.util.List<PrintJob>` (initialized with `java.util.ArrayList`) to store completed print jobs.
 *     *   Implement the following public methods with appropriate input validation and error handling:
 *         *   `addJob(String name, int pages)`: Adds a new `PrintJob` to the pending queue. Validate that the `name` is not null or empty, and `pages` is greater than 0. Throw `IllegalArgumentException` for invalid input. Print a success message using `System.out`.
 *         *   `viewPendingJobs()`: Displays all jobs currently in the pending queue using `System.out`. Indicate if the queue is empty.
 *         *   `processNextJob()`: Removes the next job from the pending queue, simulates processing (print a message using `System.out`), and adds it to the completed jobs list. If the queue is empty, print an error message using `System.err`.
 *         *   `viewCompletedJobs()`: Displays all jobs in the completed jobs list using `System.out`. Indicate if the list is empty.
 * 3.  **Main Application Class:** Create a class (e.g., `PrintSchedulerApp`) with a `main` method to run the application.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Implement a text-based menu with the following options:
 *         1.  Submit New Print Job
 *         2.  View Pending Print Jobs
 *         3.  Process Next Print Job
 *         4.  View Completed Print Jobs
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement a loop to keep the application running until the user chooses to exit.
 *     *   Use `System.out` for displaying the menu, job details, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, validation errors caught from `PrintScheduler`, empty queue/list conditions where an action was attempted).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks in the `main` method's loop to gracefully handle potential issues like `InputMismatchException` (if the user enters non-numeric input for a number) or `IllegalArgumentException` thrown by the `PrintScheduler`.
 * 
 * **Best Practices:**
 * 
 * *   Use meaningful variable and method names.
 * *   Include comments where necessary to explain complex logic.
 * *   Ensure proper encapsulation (private fields, public methods).
 * *   Handle the `Scanner` lifecycle (close it when done).
 * 
 * **Expected Output:**
 * 
 * The application should interact with the user via the console, displaying menus, prompts, job information, and error messages as specified using `System.out` and `System.err`. The flow should match the menu options and job processing logic.
 * 
 * *(Self-correction: The prompt asks for class-wide exception handling. While wrapping the main loop in `main` is common, the term "class-wide" might imply handling within the `PrintScheduler` methods themselves or a more centralized approach. However, given the context of a simple command-line app and the required components, handling exceptions thrown *by* the `PrintScheduler` *in* the `main` method's loop using a `try-catch` surrounding the menu logic is the most practical and common interpretation for this kind of exam question demonstrating basic exception flow. Let's stick with the `try-catch` in `main` catching exceptions from `Scanner` and `PrintScheduler` methods.)*
 * 
 * *(Self-correction 2: Ensure the `Scanner` newline issue is handled after reading integers.)*
 *
 * EXPLANATION:
 * The solution implements a simple Print Job Scheduler application demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:** This is a simple Plain Old Java Object (POJO) representing a print job. It encapsulates the `jobName` and `pageCount` using private fields and provides public getter methods. The `toString()` method provides a convenient string representation for printing.
 * 
 * 2.  **`PrintScheduler` Class:** This class manages the core logic.
 *     *   It uses a `Queue<PrintJob>` (`pendingJobs`) implemented by `LinkedList` to store jobs waiting to be printed. The `Queue` interface is suitable because jobs are processed in a First-In, First-Out (FIFO) manner (`offer` to add, `poll` to remove from the front).
 *     *   It uses a `List<PrintJob>` (`completedJobs`) implemented by `ArrayList` to store jobs that have finished processing. `List` is appropriate for maintaining an ordered history that can be iterated over easily.
 *     *   The `addJob` method includes input validation for the job name and page count, throwing `IllegalArgumentException` for invalid input, which is then caught in the `main` method.
 *     *   `viewPendingJobs` iterates through the queue without removing elements to display its current state.
 *     *   `processNextJob` uses `poll()` to get and remove the next job from the queue, simulating processing and adding it to the `completedJobs` list. It checks if the queue is empty before attempting to poll.
 *     *   `viewCompletedJobs` iterates through the `ArrayList` to display the history.
 *     *   All methods use `System.out` for normal output and `System.err` for specific error conditions like an empty queue when processing.
 * 
 * 3.  **`PrintSchedulerApp` Class:** This class contains the `main` method, which serves as the application's entry point and user interface.
 *     *   `Scanner` is used to read user input from the console for menu choices and job details.
 *     *   A `while` loop keeps the application running until the `isRunning` flag is set to `false` (when the user chooses option 5).
 *     *   A `switch` statement is used to direct the program flow based on the user's numeric menu choice.
 *     *   `System.out` is used extensively for displaying the menu, prompts, and successful operations.
 *     *   `System.err` is used for displaying error messages, such as invalid menu choices or errors caught from the `PrintScheduler`.
 *     *   **Class-wide exception handling** is implemented using a `try-catch` block that wraps the main logic inside the `while` loop. This block catches:
 *         *   `InputMismatchException`: Specifically handles cases where the user enters non-numeric input when a number is expected (e.g., typing "abc" for the menu choice or page count). It also includes `scanner.nextLine()` in the catch block to consume the invalid input and prevent an infinite loop.
 *         *   `IllegalArgumentException`: Catches the validation errors thrown by the `PrintScheduler` methods (`addJob`).
 *         *   `Exception`: A general catch-all for any other unexpected runtime errors, demonstrating a robust approach.
 *     *   The `Scanner` is closed using `scanner.close()` when the application exits to release system resources.
 *     *   The `displayMenu` method is a private helper method to keep the `main` method cleaner.
 * 
 * This solution effectively integrates `Queue`, `ArrayList` (via `List`), `Scanner`, `switch`, `System.out`, `System.err`, and exception handling within a practical scenario, adhering to best practices like encapsulation, meaningful names, and input validation.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single print job
class PrintJob {
    private String jobName;
    private int pageCount;

    /**
     * Constructs a new PrintJob.
     * @param jobName The name of the print job.
     * @param pageCount The number of pages in the job.
     */
    public PrintJob(String jobName, int pageCount) {
        // Basic validation handled in the scheduler before creating the object,
        // but constructor could also validate if needed.
        this.jobName = jobName;
        this.pageCount = pageCount;
    }

    public String getJobName() {
        return jobName;
    }

    public int getPageCount() {
        return pageCount;
    }

    @Override
    public String toString() {
        return "Job '" + jobName + "' (" + pageCount + " pages)";
    }
}

// Manages the queue of pending jobs and list of completed jobs
class PrintScheduler {
    // Queue to hold jobs waiting to be processed
    private Queue<PrintJob> pendingJobs;
    // List to hold jobs that have been processed
    private List<PrintJob> completedJobs; // Using List interface, implemented by ArrayList

    /**
     * Constructs a new PrintScheduler.
     */
    public PrintScheduler() {
        this.pendingJobs = new LinkedList<>(); // LinkedList implements Queue
        this.completedJobs = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new print job to the pending queue.
     * Performs validation on input parameters.
     * @param name The name of the job.
     * @param pages The number of pages.
     * @throws IllegalArgumentException if name is null/empty or pages <= 0.
     */
    public void addJob(String name, int pages) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Job name cannot be empty.");
        }
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }

        PrintJob newJob = new PrintJob(name.trim(), pages);
        pendingJobs.offer(newJob); // offer is preferred over add for queues as it handles capacity
        System.out.println("Successfully submitted: " + newJob);
    }

    /**
     * Displays all jobs currently in the pending queue.
     */
    public void viewPendingJobs() {
        System.out.println("\n--- Pending Print Jobs ---");
        if (pendingJobs.isEmpty()) {
            System.out.println("No pending jobs.");
        } else {
            // Iterate without removing elements
            for (PrintJob job : pendingJobs) {
                System.out.println("  - " + job);
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Processes the next job in the pending queue.
     * Moves the processed job to the completed list.
     */
    public void processNextJob() {
        System.out.println("\n--- Processing Job ---");
        PrintJob jobToProcess = pendingJobs.poll(); // Retrieves and removes the head of the queue

        if (jobToProcess == null) {
            System.err.println("Error: No pending jobs to process.");
        } else {
            // Simulate processing
            System.out.println("Processing: " + jobToProcess);
            completedJobs.add(jobToProcess); // Add to the end of the completed list
            System.out.println("Finished processing. Moved to completed list.");
        }
        System.out.println("----------------------");
    }

    /**
     * Displays all jobs in the completed jobs list.
     */
    public void viewCompletedJobs() {
        System.out.println("\n--- Completed Print Jobs ---");
        if (completedJobs.isEmpty()) {
            System.out.println("No completed jobs.");
        } else {
            for (PrintJob job : completedJobs) {
                System.out.println("  - " + job);
            }
        }
        System.out.println("----------------------------");
    }
}

// Main application class with user interaction
public class PrintSchedulerApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintScheduler scheduler = new PrintScheduler();
        boolean isRunning = true;

        System.out.println("Welcome to the Print Job Scheduler!");

        // Main application loop with class-wide exception handling
        while (isRunning) {
            displayMenu();

            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Submit New Print Job
                        System.out.print("Enter job name: ");
                        String jobName = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        int pageCount = scanner.nextInt();
                        // Consume the newline after nextInt()
                        scanner.nextLine();
                        scheduler.addJob(jobName, pageCount);
                        break;
                    case 2: // View Pending Print Jobs
                        scheduler.viewPendingJobs();
                        break;
                    case 3: // Process Next Print Job
                        scheduler.processNextJob();
                        break;
                    case 4: // View Completed Print Jobs
                        scheduler.viewCompletedJobs();
                        break;
                    case 5: // Exit
                        isRunning = false;
                        System.out.println("Exiting Print Scheduler. Goodbye!");
                        break;
                    default:
                        // Use System.err for invalid menu choices
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice or page count
                System.err.println("Error: Invalid input. Please enter a number.");
                // Consume the invalid input to prevent infinite loop
                scanner.nextLine();
            } catch (IllegalArgumentException e) {
                // Handle validation errors from PrintScheduler methods
                System.err.println("Validation Error: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: print stack trace for debugging in exam
                 // e.printStackTrace();
            }
            System.out.println(); // Add a blank line for readability
        }

        // Close the scanner when the application exits
        scanner.close();
    }

    /**
     * Displays the main menu options.
     */
    private static void displayMenu() {
        System.out.println("--- Print Scheduler Menu ---");
        System.out.println("1. Submit New Print Job");
        System.out.println("2. View Pending Print Jobs");
        System.out.println("3. Process Next Print Job");
        System.out.println("4. View Completed Print Jobs");
        System.out.println("5. Exit");
        System.out.println("----------------------------");
    }
}
