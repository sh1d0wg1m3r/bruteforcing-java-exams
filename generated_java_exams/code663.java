/*
 * Exam Question #663
 * Generated on: 2025-05-12 16:21:59
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Customer Support Ticket System
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple console-based customer support ticket system. The system should manage incoming support tickets, allow processing of tickets in the order they are received, and maintain a history of processed tickets.
 * 
 * **Requirements:**
 * 
 * 1.  **Ticket Representation:** Create a `Ticket` class with the following attributes:
 *     *   A unique integer ID (auto-generated).
 *     *   A String description of the issue.
 *     *   A Priority (e.g., HIGH, MEDIUM, LOW) using an enum.
 *     *   Implement appropriate constructors, getters, and a `toString()` method. Ensure encapsulation by making fields private.
 * 
 * 2.  **Ticket Management System:** Create a `TicketSystem` class to manage the tickets. This class must use:
 *     *   A `java.util.Queue` to store pending tickets. Tickets should be processed in a First-In, First-Out (FIFO) manner.
 *     *   A `java.util.List` (specifically, an `ArrayList`) to store processed tickets.
 * 
 * 3.  **Core Functionality:** The `TicketSystem` class must provide the following methods:
 *     *   `addTicket(String description, Priority priority)`: Creates a new `Ticket` object and adds it to the pending queue. Should handle potential issues like empty description.
 *     *   `processNextTicket()`: Removes the next ticket from the pending queue (if any), adds it to the processed list, and reports which ticket was processed. If the queue is empty, it should indicate that there are no tickets to process.
 *     *   `viewPendingTickets()`: Displays the details of all tickets currently in the pending queue without removing them.
 *     *   `viewProcessedTickets()`: Displays the details of all tickets in the processed history list.
 * 
 * 4.  **User Interface:** Implement a console-based interactive menu in the `TicketSystem` class (or a separate `Main` class calling `TicketSystem.run()`). The menu should present options for:
 *     *   Adding a new ticket.
 *     *   Processing the next ticket.
 *     *   Viewing pending tickets.
 *     *   Viewing processed tickets.
 *     *   Exiting the application.
 *     Use `java.util.Scanner` to read user input.
 * 
 * 5.  **Control Flow:** Use a `switch` statement to handle the user's menu selection.
 * 
 * 6.  **Error Handling:**
 *     *   Use `System.err` to print error messages (e.g., invalid menu input, attempting to process an empty queue, invalid ticket data).
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, ticket details).
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main application loop (`run` method) to gracefully handle potential issues like invalid input types (`InputMismatchException`) and any other unexpected runtime errors, preventing the program from crashing. Also include specific validation and error handling within methods like `addTicket` and `processNextTicket`.
 * 
 * 7.  **Best Practices:** Adhere to best practices including:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Input validation (e.g., for menu choices, priority input, ticket description).
 *     *   Clean code structure (e.g., separate classes for concerns).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input for actions, and print relevant information or error messages to the console (`System.out` for normal output, `System.err` for errors). Example interaction might look like:
 * 
 * ```
 * --- Welcome to the Customer Support Ticket System ---
 * 
 * --- Menu ---
 * 1. Add New Ticket
 * 2. Process Next Ticket
 * 3. View Pending Tickets
 * 4. View Processed Tickets
 * 5. Exit
 * ------------
 * Enter your choice: 1
 * Enter ticket description: Printer not working
 * Select priority:
 * 1. HIGH
 * 2. MEDIUM
 * 3. LOW
 * Enter priority choice (1-3): 1
 * 
 * SUCCESS: Ticket added to queue: Ticket [ID=1, Priority=HIGH, Description='Printer not working']
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 2
 * 
 * SUCCESS: Processed ticket: Ticket [ID=1, Priority=HIGH, Description='Printer not working']
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 2
 * 
 * INFO: No pending tickets to process.
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Pending Tickets ---
 * No pending tickets.
 * -----------------------
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Processed Tickets ---
 * 1. Ticket [ID=1, Priority=HIGH, Description='Printer not working']
 * -------------------------
 * 
 * --- Menu ---
 * ...
 * Enter your choice: invalid input
 * ERROR: Invalid input. Please enter a number.
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 9
 * ERROR: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Menu ---
 * ...
 * Enter your choice: 5
 * 
 * Exiting Ticket System. Goodbye!
 * ```
 * 
 * **Instructions:**
 * 
 * Write the complete Java code for the `Ticket`, `TicketSystem`, and `Main` classes. Ensure the code compiles and runs correctly, demonstrating all required components and practices.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`.
 * *   Effective implementation of `try-catch` for exception handling, including handling specific input errors and general exceptions.
 * *   Adherence to OOP principles (encapsulation, class structure).
 * *   Input validation and robust error handling.
 * *   Code clarity, comments, and meaningful naming.
 * *   Correct program flow according to the menu options.
 *
 * EXPLANATION:
 * The provided solution implements a console-based Customer Support Ticket System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Ticket` Class:**
 *     *   Represents a single support ticket with `id`, `description`, and `priority`.
 *     *   Uses `AtomicInteger` to generate unique, sequential IDs.
 *     *   An `enum` `Priority` is used for clear and type-safe priority levels.
 *     *   Fields are `private` with public `getter` methods, adhering to encapsulation.
 *     *   The constructor includes basic input validation for `description` and `priority`, throwing `IllegalArgumentException` for invalid data.
 *     *   The `toString()` method provides a convenient way to display ticket information.
 * 
 * 2.  **`TicketSystem` Class:**
 *     *   Manages the collections of tickets.
 *     *   `pendingTickets`: Declared as `Queue<Ticket>` and instantiated as `LinkedList<Ticket>`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO behavior suitable for a waiting list.
 *     *   `processedTickets`: Declared as `List<Ticket>` and instantiated as `ArrayList<Ticket>`. `ArrayList` is a common implementation of the `List` interface, suitable for storing a dynamic list of processed items.
 *     *   `scanner`: An instance of `Scanner` is managed within the class to handle console input throughout the system's lifecycle.
 *     *   **`addTicketFromInput()`:** Prompts the user for ticket details and calls the `Ticket` constructor. It uses a `try-catch` block to specifically handle the `IllegalArgumentException` that the `Ticket` constructor might throw due to invalid input, printing the error to `System.err`. It uses `queue.offer()` to add the ticket, which is the standard non-throwing way to add to a queue.
 *     *   **`processNextTicket()`:** Uses `queue.poll()` to retrieve and remove the head of the pending queue. `poll()` returns `null` if the queue is empty, which is checked to provide an informational message (sent to `System.err`). If a ticket is retrieved, it's added to the `processedTickets` `List` using `list.add()`. A `try-catch` is included for robustness, although `poll()` and `add()` are generally safe operations in this context.
 *     *   **`viewPendingTickets()`:** Iterates through the `pendingTickets` `Queue` using a for-each loop. This allows viewing elements without removing them, which is the desired behavior. It checks if the queue is empty before iterating. Output goes to `System.out`.
 *     *   **`viewProcessedTickets()`:** Iterates through the `processedTickets` `List` using a standard indexed for loop. It checks if the list is empty. Output goes to `System.out`.
 *     *   **`run()`:** This is the main application loop. It repeatedly displays the menu, reads user input using `Scanner`, and dispatches actions using a `switch` statement.
 *     *   **`displayMenu()`:** A private helper method to print the menu options to `System.out`.
 *     *   **`getPriorityInput()`:** A private helper method to prompt the user for priority input (1-3) and convert it to the `Priority` enum. It includes its own `try-catch` block to handle `InputMismatchException` if the user enters non-numeric input for priority, returning `null` to indicate failure.
 *     *   **Class-wide Exception Handling (`run` method):** The core logic within the `while` loop in `run()` is wrapped in a `try-catch` block.
 *         *   `catch (InputMismatchException e)` specifically catches errors when `scanner.nextInt()` receives non-integer input. It prints an error to `System.err` and consumes the invalid input using `scanner.nextLine()` to prevent an infinite loop.
 *         *   `catch (Exception e)` is a general catch-all for any other unexpected exceptions that might occur during the execution of the `switch` cases or input processing. This prevents the program from crashing and prints a generic error message to `System.err`.
 *     *   `System.out` is used for all standard output (menu, prompts, success messages, ticket lists).
 *     *   `System.err` is used for all error conditions (invalid menu choice, invalid input type, ticket creation errors, info about empty queue).
 * 
 * 3.  **`Main` Class:**
 *     *   A simple entry point class containing the `main` method.
 *     *   It creates an instance of `TicketSystem` and calls its `run()` method to start the application.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating good object-oriented design, input validation, and robust error handling.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger; // For unique IDs

// Class representing a support ticket
class Ticket {
    // Use AtomicInteger for thread-safe unique ID generation (good practice, though not strictly needed for single-threaded console app)
    private static final AtomicInteger count = new AtomicInteger(0);
    private final int id;
    private String description;
    private Priority priority;

    // Enum for ticket priority
    public enum Priority {
        HIGH, MEDIUM, LOW
    }

    /**
     * Constructs a new Ticket.
     * @param description The ticket description.
     * @param priority The ticket priority.
     * @throws IllegalArgumentException if description is null/empty or priority is null.
     */
    public Ticket(String description, Priority priority) {
        // Input validation in constructor
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Ticket description cannot be empty.");
        }
        if (priority == null) {
             throw new IllegalArgumentException("Ticket priority cannot be null.");
        }
        this.id = count.incrementAndGet(); // Generate unique ID
        this.description = description.trim();
        this.priority = priority;
    }

    // --- Getters for encapsulation ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public Priority getPriority() {
        return priority;
    }

    /**
     * Provides a string representation of the Ticket.
     */
    @Override
    public String toString() {
        return "Ticket [ID=" + id + ", Priority=" + priority + ", Description='" + description + "']";
    }
}

// Class managing the ticket system operations
class TicketSystem {
    // Use Queue interface, implemented by LinkedList for FIFO behavior
    private Queue<Ticket> pendingTickets;
    // Use List interface, implemented by ArrayList for processed ticket history
    private List<Ticket> processedTickets;
    private Scanner scanner; // Scanner instance for user input

    /**
     * Constructs a new TicketSystem, initializing collections and scanner.
     */
    public TicketSystem() {
        this.pendingTickets = new LinkedList<>(); // LinkedList implements Queue
        this.processedTickets = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in); // Initialize scanner to read from console
    }

    /**
     * Adds a new ticket to the pending queue based on user input.
     */
    public void addTicketFromInput() {
        System.out.print("Enter ticket description: ");
        String description = scanner.nextLine(); // Read the whole line for description

        Ticket.Priority priority = getPriorityInput(); // Get priority using helper method

        if (priority != null) {
            // Use try-catch specifically for the Ticket constructor's validation
            try {
                Ticket newTicket = new Ticket(description, priority);
                // offer() is preferred over add() for queues as it doesn't throw exception if queue is full (LinkedList is unbounded)
                boolean added = pendingTickets.offer(newTicket);
                if (added) {
                    System.out.println(System.lineSeparator() + "SUCCESS: Ticket added to queue: " + newTicket + System.lineSeparator());
                } else {
                    // This case is highly unlikely with LinkedList but demonstrates handling offer() return
                    System.err.println(System.lineSeparator() + "ERROR: Failed to add ticket to queue due to unexpected issue." + System.lineSeparator());
                }
            } catch (IllegalArgumentException e) {
                // Catch validation errors from Ticket constructor
                System.err.println(System.lineSeparator() + "ERROR: " + e.getMessage() + System.lineSeparator());
            } catch (Exception e) {
                // Catch any other unexpected errors during ticket creation/adding
                System.err.println(System.lineSeparator() + "ERROR: An unexpected error occurred while adding ticket: " + e.getMessage() + System.lineSeparator());
            }
        } else {
             System.err.println(System.lineSeparator() + "ERROR: Invalid priority input. Ticket not added." + System.lineSeparator());
        }
    }

    /**
     * Processes the next ticket in the pending queue.
     * Removes it from the queue and adds it to the processed list.
     */
    public void processNextTicket() {
        // Use try-catch block for potential errors during processing, though poll() is safe
        try {
            // poll() removes the head of the queue, returns null if empty
            Ticket processedTicket = pendingTickets.poll();

            if (processedTicket != null) {
                processedTickets.add(processedTicket); // Add to the processed list (ArrayList)
                System.out.println(System.lineSeparator() + "SUCCESS: Processed ticket: " + processedTicket + System.lineSeparator());
            } else {
                // Inform the user if the queue is empty using System.err (as it's an informational message about state, not a success)
                System.err.println(System.lineSeparator() + "INFO: No pending tickets to process." + System.lineSeparator());
            }
        } catch (Exception e) {
            // Catch any unexpected errors during processing (e.g., issues with the list add operation)
            System.err.println(System.lineSeparator() + "ERROR: An unexpected error occurred while processing ticket: " + e.getMessage() + System.lineSeparator());
        }
    }

    /**
     * Displays all pending tickets currently in the queue.
     */
    public void viewPendingTickets() {
        System.out.println(System.lineSeparator() + "--- Pending Tickets ---");
        if (pendingTickets.isEmpty()) {
            System.out.println("No pending tickets.");
        } else {
            // Iterate through the queue without removing elements (e.g., using for-each loop or iterator)
            int index = 1;
            for (Ticket ticket : pendingTickets) {
                System.out.println(index++ + ". " + ticket);
            }
        }
        System.out.println("-----------------------" + System.lineSeparator());
    }

    /**
     * Displays all processed tickets stored in the history list.
     */
    public void viewProcessedTickets() {
        System.out.println(System.lineSeparator() + "--- Processed Tickets ---");
        if (processedTickets.isEmpty()) {
            System.out.println("No processed tickets yet.");
        } else {
            // Iterate through the list using index or for-each loop
            for (int i = 0; i < processedTickets.size(); i++) {
                 System.out.println((i + 1) + ". " + processedTickets.get(i));
            }
        }
         System.out.println("-------------------------" + System.lineSeparator());
    }

    /**
     * Runs the main interactive console loop for the ticket system.
     * Handles menu display, user input, action dispatch, and top-level error handling.
     */
    public void run() {
        System.out.println("--- Welcome to the Customer Support Ticket System ---");

        // Main application loop
        while (true) {
            displayMenu();

            // Use a try-catch block to handle potential input errors (like non-integer)
            // and general exceptions that might occur within the switch cases.
            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt(); // Read integer input
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use a switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addTicketFromInput(); // Call method to handle ticket addition logic
                        break;
                    case 2:
                        processNextTicket(); // Call method to process the next ticket
                        break;
                    case 3:
                        viewPendingTickets(); // Call method to view pending tickets
                        break;
                    case 4:
                        viewProcessedTickets(); // Call method to view processed tickets
                        break;
                    case 5:
                        // Exit option
                        System.out.println(System.lineSeparator() + "Exiting Ticket System. Goodbye!" + System.lineSeparator());
                        scanner.close(); // Close the scanner resource
                        return; // Exit the run method and terminate the program
                    default:
                        // Handle invalid menu choices using System.err
                        System.err.println(System.lineSeparator() + "ERROR: Invalid choice. Please enter a number between 1 and 5." + System.lineSeparator());
                }
            } catch (InputMismatchException e) {
                // Catch non-integer input specifically using System.err
                System.err.println(System.lineSeparator() + "ERROR: Invalid input. Please enter a number." + System.lineSeparator());
                scanner.nextLine(); // Consume the invalid input to prevent an infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during the loop execution using System.err
                System.err.println(System.lineSeparator() + "ERROR: An unexpected error occurred: " + e.getMessage() + System.lineSeparator());
                // Optional: e.printStackTrace(); for debugging during development
            }
        }
    }

    /**
     * Helper method to display the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Menu ---");
        System.out.println("1. Add New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Processed Tickets");
        System.out.println("5. Exit");
        System.out.println("------------");
    }

     /**
      * Helper method to get and validate priority input from the user.
      * @return The selected Priority enum, or null if input is invalid.
      */
    private Ticket.Priority getPriorityInput() {
        System.out.println("Select priority:");
        System.out.println("1. HIGH");
        System.out.println("2. MEDIUM");
        System.out.println("3. LOW");
        System.out.print("Enter priority choice (1-3): ");
        try {
            int priorityChoice = scanner.nextInt();
            scanner.nextLine(); // Consume newline left by nextInt()
            switch (priorityChoice) {
                case 1: return Ticket.Priority.HIGH;
                case 2: return Ticket.Priority.MEDIUM;
                case 3: return Ticket.Priority.LOW;
                default: return null; // Indicate invalid choice
            }
        } catch (InputMismatchException e) {
            scanner.nextLine(); // Consume invalid input to prevent loop
            return null; // Indicate invalid input type
        }
    }

    // Note: No main method here. The entry point will be in a separate Main class.
}

// Main class to start the application
class Main {
    /**
     * The entry point of the Customer Support Ticket System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TicketSystem system = new TicketSystem();
        system.run(); // Start the interactive system loop
    }
}
