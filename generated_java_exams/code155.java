/*
 * Exam Question #155
 * Generated on: 2025-05-11 22:22:48
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam: Task Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line Task Management System for a small team. The system should allow users to add new tasks to a queue, process the next available task, and view the current list of pending and completed tasks.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a class `Task` to represent a single task. It should have a unique integer ID, a String description, and a String status (e.g., "Pending", "Completed"). Use proper encapsulation (private fields, public getters, and a method to mark the task as completed).
 * 2.  **Task Management Logic:** Create a class `TaskManager` that manages the tasks.
 *     *   Maintain a collection of pending tasks using `java.util.Queue`. Tasks should be processed in the order they are added (FIFO).
 *     *   Maintain a collection of completed tasks using `java.util.List`. Store completed tasks in an `java.util.ArrayList`.
 *     *   Use a `java.util.Scanner` to read user input from the console.
 * 3.  **User Interface:** Implement a simple menu-driven interface:
 *     *   Option 1: Add New Task - Prompts the user for a task description and adds it to the pending task queue. Assign a unique, incrementing ID to each new task.
 *     *   Option 2: Process Next Task - Removes the task at the front of the pending queue, marks it as "Completed", and moves it to the completed tasks list. If the queue is empty, display an appropriate error message.
 *     *   Option 3: View All Tasks - Displays all pending tasks (from the queue) and all completed tasks (from the list).
 *     *   Option 4: Exit - Terminates the program.
 * 4.  **Flow Control:** Use a `switch` statement to handle the user's menu selection.
 * 5.  **Output:**
 *     *   Use `System.out` for menu display, prompts, success messages, and displaying task lists.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, attempting to process task when the queue is empty, input errors).
 * 6.  **Error Handling:** Implement class-wide exception handling using `try-catch` blocks within the main program loop to catch potential runtime exceptions (e.g., non-integer input for menu choice). Handle specific errors (like an empty queue) with targeted checks and `System.err`.
 * 7.  **Best Practices:** Adhere to Java best practices:
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments and documentation (Javadocs or inline comments).
 *     *   Input validation where necessary (e.g., handling non-integer input for menu).
 *     *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, and perform the requested actions, displaying status or error messages accordingly.
 * 
 * Example Interaction:
 * 
 * ```
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 1
 * Enter task description: Implement login feature
 * Task added: Task{id=1, description='Implement login feature', status='Pending'}
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 1
 * Enter task description: Write unit tests
 * Task added: Task{id=2, description='Write unit tests', status='Pending'}
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task{id=1, description='Implement login feature', status='Pending'}
 * Task{id=2, description='Write unit tests', status='Pending'}
 * --- Completed Tasks ---
 * No completed tasks yet.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 2
 * Processing task: Task{id=1, description='Implement login feature', status='Pending'}
 * Task completed and moved: Task{id=1, description='Implement login feature', status='Completed'}
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task{id=2, description='Write unit tests', status='Pending'}
 * --- Completed Tasks ---
 * Task{id=1, description='Implement login feature', status='Completed'}
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 1 and 4.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 2
 * Processing task: Task{id=2, description='Write unit tests', status='Pending'}
 * Task completed and moved: Task{id=2, description='Write unit tests', status='Completed'}
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 2
 * No pending tasks to process.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View All Tasks
 * 4. Exit
 * Enter your choice: 4
 * Exiting Task Management System.
 * ```
 * 
 * **Deliverables:**
 * 
 * Provide the complete Java code for the `Task` and `TaskManager` classes in a single code block.
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Task Class:** The `Task` class encapsulates task data (`id`, `description`, `status`) with private fields and public getters. The `complete()` method changes the status, and `toString()` provides a convenient representation for printing. This fulfills Requirement 1 and encapsulation best practices.
 * 
 * 2.  **TaskManager Class:**
 *     *   `pendingTasks`: A `Queue<Task>` implemented using `LinkedList` is used to store tasks waiting to be processed. This ensures tasks are handled in a First-In, First-Out (FIFO) manner, as required for a queue. `offer()` is used for adding, and `poll()` for removing, which are safe methods for queues (they return `false`/`null` instead of throwing exceptions on capacity issues or empty queue, respectively).
 *     *   `completedTasks`: A `List<Task>` implemented using `ArrayList` stores tasks once they are finished. Using the `List` interface for the variable type (`List<Task> completedTasks`) while instantiating it as `new ArrayList<>()` demonstrates programming to an interface.
 *     *   `scanner`: A `Scanner` is used to read user input from `System.in`.
 *     *   `nextTaskId`: An integer counter ensures each task gets a unique ID.
 * 
 * 3.  **User Interface and Flow Control:**
 *     *   The `displayMenu()` method prints the options.
 *     *   The `run()` method contains the main application loop.
 *     *   A `switch` statement inside the loop directs execution based on the user's integer choice, fulfilling Requirement 4.
 * 
 * 4.  **Input and Output:**
 *     *   `System.out` is used for displaying the menu, prompts, success messages, and the task lists (`viewTasks()`). This meets Requirement 5 for normal output.
 *     *   `System.err` is used for displaying error messages, such as invalid menu choices, empty task queue conditions (`processNextTask()`), and input parsing errors. This meets Requirement 5 for error output.
 *     *   `Scanner.nextLine()` is used consistently for reading string inputs (like description) and for reading the menu choice line, which is then parsed to an integer. This avoids common issues when mixing `nextInt()` and `nextLine()`.
 * 
 * 5.  **Error Handling:**
 *     *   A `try-catch (NumberFormatException e)` block is used specifically when parsing the user's menu choice input within the `run()` method. This handles cases where the user enters non-integer text, fulfilling Requirement 6 for input validation and specific error handling using `System.err`.
 *     *   The `processNextTask()` method checks if `pendingTasks.poll()` returns `null` to detect an empty queue, displaying an error message using `System.err` if it is. This is specific error handling for a known condition.
 *     *   A broad `try-catch (Exception e)` block surrounds the main `while` loop in the `run()` method. This serves as the class-wide exception handling mechanism, catching any unexpected runtime exceptions that might occur during the program's execution and printing an error message to `System.err`. This addresses Requirement 6 for class-wide handling.
 *     *   A `finally` block ensures the `Scanner` is closed when the program loop terminates, releasing system resources.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** The `Task` class demonstrates this with private fields and public methods.
 *     *   **Meaningful Names:** Variables (`pendingTasks`, `completedTasks`, `nextTaskId`, `taskToProcess`) and methods (`displayMenu`, `addTask`, `processNextTask`, `viewTasks`, `run`) have clear, descriptive names.
 *     *   **Comments and Documentation:** Javadoc-style comments are used for classes and methods, explaining their purpose. Inline comments clarify specific logic points.
 *     *   **Input Validation:** Basic validation is performed for the menu choice (checking range and format) and for task description (not empty).
 *     *   **Clean Code Structure:** The logic is divided into well-defined methods (`addTask`, `processNextTask`, `viewTasks`), making the code modular and readable.
 * 
 * The solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, menu-driven application while adhering to good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task in the Task Management System.
 */
class Task {
    private int id;
    private String description;
    private String status; // e.g., "Pending", "Completed"

    /**
     * Constructs a new Task with a given ID and description.
     * The initial status is "Pending".
     * @param id The unique identifier for the task.
     * @param description A brief description of the task.
     */
    public Task(int id, String description) {
        this.id = id;
        this.description = description;
        this.status = "Pending";
    }

    // --- Getters ---

    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Marks the task as completed by changing its status.
     */
    public void complete() {
        this.status = "Completed";
    }

    @Override
    public String toString() {
        return "Task{id=" + id + ", description='" + description + "', status='" + status + "'}";
    }
}

/**
 * Manages a collection of pending and completed tasks.
 */
public class TaskManager {

    // Use Queue for pending tasks (FIFO)
    private Queue<Task> pendingTasks;

    // Use List for completed tasks, implemented by ArrayList
    private List<Task> completedTasks;

    // Scanner for user input
    private Scanner scanner;

    // Counter for generating unique task IDs
    private int nextTaskId;

    /**
     * Constructs a new TaskManager, initializing task collections and scanner.
     */
    public TaskManager() {
        // LinkedList implements Queue, providing FIFO behavior
        this.pendingTasks = new LinkedList<>();
        // ArrayList implements List
        this.completedTasks = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.nextTaskId = 1; // Start task IDs from 1
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Management System ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View All Tasks");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task based on user input.
     */
    private void addTask() {
        System.out.print("Enter task description: ");
        // Consume the newline character left by previous nextInt() or similar
        // Although using nextLine() for menu choice avoids this, it's good practice
        // if mixing nextInt() and nextLine(). Using only nextLine() for input reading
        // is generally safer. Let's stick to nextLine() for all string inputs.
        String description = scanner.nextLine();

        if (description == null || description.trim().isEmpty()) {
             System.err.println("Task description cannot be empty.");
             return;
        }

        Task newTask = new Task(nextTaskId++, description);
        pendingTasks.offer(newTask); // offer is generally preferred over add for queues
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task in the pending queue.
     */
    private void processNextTask() {
        // poll() retrieves and removes the head of the queue, or returns null if empty
        Task taskToProcess = pendingTasks.poll();

        if (taskToProcess != null) {
            System.out.println("Processing task: " + taskToProcess);
            taskToProcess.complete();
            completedTasks.add(taskToProcess);
            System.out.println("Task completed and moved: " + taskToProcess);
        } else {
            System.err.println("No pending tasks to process.");
        }
    }

    /**
     * Displays all pending and completed tasks.
     */
    private void viewTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks yet.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : pendingTasks) {
                System.out.println(task);
            }
        }

        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks yet.");
        } else {
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
    }

    /**
     * Runs the main Task Management System loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Class-wide try-catch block for the main loop
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Default invalid choice

                // Specific try-catch for reading integer input
                try {
                    // Read the whole line and parse it to handle non-integer input gracefully
                    String inputLine = scanner.nextLine();
                    choice = Integer.parseInt(inputLine);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop iteration and show menu again
                }

                // Switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        processNextTask();
                        break;
                    case 3:
                        viewTasks();
                        break;
                    case 4:
                        System.out.println("Exiting Task Management System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Optionally print stack trace for debugging in a real scenario,
            // but for an exam, a simple message might suffice depending on instructions.
            // e.printStackTrace();
        } finally {
            // Ensure the scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Task Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run();
    }
}
