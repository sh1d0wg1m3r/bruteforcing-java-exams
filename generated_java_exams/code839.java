/*
 * Exam Question #839
 * Generated on: 2025-05-12 16:48:49
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Outpatient Clinic Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified appointment scheduling system for a hospital's outpatient clinic. The system needs to manage patients arriving for appointments, maintain a waiting list, and call patients when it's their turn.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `name` (String) and `patientId` (int). Include a constructor and public getter methods for these fields.
 * 2.  **Scheduler Class:** Create an `AppointmentScheduler` class that manages the clinic's operations.
 *     *   It must contain a `private Queue<Patient>` to represent the waiting list. Patients should be added to the back and removed from the front (FIFO).
 *     *   It must contain a `private List<Patient>` (using `ArrayList` implementation) to keep a history of all patients who have been registered in the system (including those currently waiting and those who have been called).
 *     *   It must contain a `private Scanner` object for reading user input from the console.
 * 3.  **Main Program Loop:** The `AppointmentScheduler` class should have a `run()` method that implements the main application loop. This loop should:
 *     *   Display a menu of options to the user:
 *         1.  Register New Patient
 *         2.  View Waiting List
 *         3.  Call Next Patient
 *         4.  View Registered Patient History
 *         5.  Exit
 *     *   Read the user's menu choice using the `Scanner`.
 *     *   Use a `switch` statement to process the user's choice.
 *     *   Handle invalid menu choices.
 * 4.  **Functionality Implementation:**
 *     *   **Register New Patient:**
 *         *   Prompt the user for the patient's name and a unique integer `patientId`.
 *         *   Validate that the `patientId` is positive. If not, print an error to `System.err` and do not register the patient.
 *         *   Create a new `Patient` object.
 *         *   Add the new `Patient` object to both the `waitingList` (Queue) and the `registeredPatientsHistory` (List).
 *         *   Print a confirmation message to `System.out`.
 *     *   **View Waiting List:**
 *         *   Display the current patients in the `waitingList` in order (front to back).
 *         *   If the list is empty, print a message to `System.out` indicating that the waiting list is empty.
 *     *   **Call Next Patient:**
 *         *   Remove the patient at the front of the `waitingList`.
 *         *   Print a message to `System.out` indicating which patient is being called.
 *         *   If the `waitingList` is empty when this option is chosen, print an error message to `System.err`.
 *     *   **View Registered Patient History:**
 *         *   Display all patients ever registered in the system from the `registeredPatientsHistory` list.
 *         *   If the history list is empty, print a message to `System.out` indicating that no patients have been registered yet.
 *     *   **Exit:** Terminate the program gracefully.
 * 5.  **Exception Handling:** Implement robust exception handling:
 *     *   Use `try-catch` blocks within the `run()` method to handle potential `InputMismatchException` when reading integer inputs (menu choice, patient ID). If caught, print an error message to `System.err` and clear the invalid input from the scanner.
 *     *   Handle potential issues when trying to call the next patient from an empty queue (check if `poll()` returns null or check `isEmpty()` before polling). Print error messages for these cases to `System.err`.
 *     *   Include a general `try-catch(Exception e)` around the main processing logic within the `run()` method to catch any unexpected errors and print an error message to `System.err`.
 * 6.  **Best Practices:**
 *     *   Use appropriate variable and method names.
 *     *   Add comments to explain complex parts of the code.
 *     *   Ensure proper encapsulation in the `Patient` class.
 *     *   Use `System.out` for normal output and `System.err` for error messages.
 *     *   Close the `Scanner` resource when the program exits.
 * 
 * **Expected Output:**
 * 
 * The program should interact with the user via the console. Examples:
 * 
 * *   **Menu Display:**
 *     ```
 *     --- Clinic Scheduler Menu ---
 *     1. Register New Patient
 *     2. View Waiting List
 *     3. Call Next Patient
 *     4. View Registered Patient History
 *     5. Exit
 *     Enter your choice:
 *     ```
 * *   **Registering:**
 *     ```
 *     Enter patient name: Alice
 *     Enter patient ID: 101
 *     Patient Alice (ID: 101) registered and added to waiting list.
 *     ```
 * *   **Viewing Waiting List:**
 *     ```
 *     --- Waiting List ---
 *     1. Alice (ID: 101)
 *     2. Bob (ID: 102)
 *     --- End of Waiting List ---
 *     ```
 *     or
 *     ```
 *     Waiting list is empty.
 *     ```
 * *   **Calling Next Patient:**
 *     ```
 *     Calling next patient: Alice (ID: 101).
 *     ```
 *     or
 *     ```
 *     Error: Waiting list is empty. No patient to call.
 *     ```
 * *   **Viewing History:**
 *     ```
 *     --- Registered Patient History ---
 *     Alice (ID: 101)
 *     Bob (ID: 102)
 *     Charlie (ID: 103)
 *     --- End of History ---
 *     ```
 *     or
 *     ```
 *     No patients have been registered yet.
 *     ```
 * *   **Error Handling:**
 *     ```
 *     Error: Invalid input. Please enter a number.
 *     ```
 *     ```
 *     Error: Patient ID must be positive.
 *     ```
 *     ```
 *     Error: An unexpected error occurred: [Exception details]
 *     ```
 * 
 * Your solution should consist of the `Patient` class and the `AppointmentScheduler` class within a single file or clearly separated sections.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all required functionalities.
 * *   Proper usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Effective error handling and input validation.
 * *   Adherence to best practices (encapsulation, naming, comments, clean code).
 * *   Program correctness and robustness.
 *
 * EXPLANATION:
 * This solution implements the `Hospital Outpatient Clinic Scheduler` as described in the problem requirements, demonstrating the practical use of the specified Java components and best practices.
 * 
 * **Key Components and Their Usage:**
 * 
 * 1.  **`Queue` (`java.util.Queue`)**: The `waitingList` is declared as a `Queue<Patient>`. We use `java.util.LinkedList` as the concrete implementation because `LinkedList` provides an efficient implementation of the `Queue` interface (specifically for adding to the end and removing from the beginning).
 *     *   `offer(patient)` is used to add a patient to the end of the waiting list (enqueue).
 *     *   `poll()` is used to remove and retrieve the patient from the front of the waiting list (dequeue).
 *     *   Iteration is used in `viewWaitingList` to display elements without removing them.
 * 
 * 2.  **`ArrayList` (`java.util.ArrayList`)**: The `registeredPatientsHistory` is instantiated as an `ArrayList<Patient>`.
 *     *   `add(patient)` is used to add a patient to the end of this list whenever they are registered. This list serves as a historical record of all patients processed by the system.
 * 
 * 3.  **`List` (`java.util.List`)**: The `registeredPatientsHistory` variable is declared using the `List` interface type (`private List<Patient>`). This follows the principle of programming to the interface, allowing flexibility to change the underlying implementation (e.g., to `LinkedList` or `Vector`) later if needed, without changing the code that uses the `List` variable.
 * 
 * 4.  **`Scanner` (`java.util.Scanner`)**: A `private Scanner scanner` is used to read user input from `System.in`.
 *     *   `nextInt()` is used to read the integer menu choice and patient ID.
 *     *   `nextLine()` is used to read the patient's name (which can contain spaces) and also crucially to consume the leftover newline character after `nextInt()` calls, preventing input issues in subsequent `nextLine()` calls.
 * 
 * 5.  **`switch` statement**: The main application loop in the `run()` method uses a `switch` statement based on the user's integer menu choice (`choice`). This provides a clean and readable way to direct the program flow to the appropriate method (`registerNewPatient`, `viewWaitingList`, etc.) based on the user's selection. A `default` case handles invalid integer inputs outside the expected range.
 * 
 * 6.  **`System.err`**: Used specifically for printing error messages.
 *     *   Invalid menu choices.
 *     *   Invalid patient ID (non-positive).
 *     *   Attempting to call a patient when the waiting list is empty.
 *     *   Handling `InputMismatchException` for non-integer input.
 *     *   Handling any other unexpected exceptions caught by the general `catch(Exception e)`.
 * 
 * 7.  **`System.out`**: Used for all normal program output.
 *     *   Displaying the menu.
 *     *   Printing confirmation messages for successful registration.
 *     *   Displaying the contents of the waiting list and history list.
 *     *   Printing messages when lists are empty.
 *     *   Printing the message when a patient is called.
 *     *   Printing the exit message.
 * 
 * 8.  **`try-catch` blocks**: Implemented for robust exception handling.
 *     *   A `try-catch(InputMismatchException e)` block is used specifically when reading integer inputs (`choice` and `patientId`) to catch cases where the user enters non-numeric text. It prints an error to `System.err` and clears the invalid input from the scanner.
 *     *   A general `try-catch(Exception e)` block wraps the core logic within the `run()` loop's `while` loop. This catches any other unexpected runtime exceptions that might occur during the execution of the chosen operation, preventing the program from crashing and providing a general error message via `System.err`.
 *     *   The `callNextPatient()` method explicitly checks if `waitingList.poll()` returns `null` (which happens when the queue is empty) and prints an error to `System.err` if it is. This handles the specific "empty queue" scenario gracefully.
 *     *   A `try-finally` block in `run()` ensures that `scanner.close()` is called before the program terminates, releasing the system resource.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** The `Patient` class has private fields (`name`, `patientId`) and public getter methods (`getName`, `getPatientId`), preventing direct external modification of its state.
 * *   **Meaningful Names:** Variables (`waitingList`, `registeredPatientsHistory`, `menuChoice`, `patientId`), classes (`Patient`, `AppointmentScheduler`), and methods (`registerNewPatient`, `viewWaitingList`, `callNextPatient`, `run`) have names that clearly indicate their purpose.
 * *   **Comments:** Javadoc comments are used for classes and methods, explaining their role and parameters/return values. Inline comments explain specific logic details (like consuming the newline after `nextInt`).
 * *   **Input Validation:** Patient ID is validated to ensure it's positive. `InputMismatchException` handling validates that numeric input is indeed numeric.
 * *   **Error Handling:** Distinct error messages are provided via `System.err` for different failure conditions (invalid input type, invalid data value, operation on empty list, unexpected errors).
 * *   **Clean Code Structure:** The code is organized into two classes with clear responsibilities. Methods are relatively short and focused on a single task. The main `run()` method orchestrates the operations via the menu and switch statement.
 * 
 * This solution effectively combines the required Java components to create a functional, robust, and well-structured program that simulates a real-world scheduling task, making it a suitable challenge for demonstrating advanced Java understanding.
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList is a common implementation for Queue
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the clinic
class Patient {
    private String name;
    private int patientId;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     * @param patientId The unique ID of the patient.
     */
    public Patient(String name, int patientId) {
        this.name = name;
        this.patientId = patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient's ID.
     */
    public int getPatientId() {
        return patientId;
    }

    @Override
    public String toString() {
        return name + " (ID: " + patientId + ")";
    }
}

// Manages patient appointments and waiting list
class AppointmentScheduler {
    // Queue for patients currently waiting for their appointment (FIFO)
    private Queue<Patient> waitingList;
    // List to keep a history of all registered patients
    private List<Patient> registeredPatientsHistory;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs an AppointmentScheduler and initializes data structures and scanner.
     */
    public AppointmentScheduler() {
        // Use LinkedList as an implementation of Queue
        this.waitingList = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.registeredPatientsHistory = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Clinic Scheduler Menu ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. View Waiting List");
        System.out.println("3. Call Next Patient");
        System.out.println("4. View Registered Patient History");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Registers a new patient, adds them to history and the waiting list.
     */
    private void registerNewPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine(); // Read name first

        int patientId = -1; // Default invalid ID
        System.out.print("Enter patient ID: ");
        try {
            patientId = scanner.nextInt();
            // Consume the newline character left by nextInt()
            scanner.nextLine();

            // Validate patient ID
            if (patientId <= 0) {
                System.err.println("Error: Patient ID must be positive.");
                return; // Stop registration process
            }

            // Create and add patient
            Patient newPatient = new Patient(name, patientId);
            waitingList.offer(newPatient); // Add to the end of the queue
            registeredPatientsHistory.add(newPatient); // Add to the history list
            System.out.println("Patient " + newPatient + " registered and added to waiting list.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a number for patient ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    /**
     * Displays the current patients in the waiting list.
     */
    private void viewWaitingList() {
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            System.out.println("--- Waiting List ---");
            // Iterate through the queue without removing elements
            int index = 1;
            for (Patient patient : waitingList) {
                System.out.println(index++ + ". " + patient);
            }
            System.out.println("--- End of Waiting List ---");
        }
    }

    /**
     * Calls the next patient from the waiting list.
     */
    private void callNextPatient() {
        // poll() retrieves and removes the head of the queue, returns null if queue is empty
        Patient nextPatient = waitingList.poll();

        if (nextPatient == null) {
            System.err.println("Error: Waiting list is empty. No patient to call.");
        } else {
            System.out.println("Calling next patient: " + nextPatient + ".");
        }
    }

    /**
     * Displays the history of all registered patients.
     */
    private void viewRegisteredPatientHistory() {
        if (registeredPatientsHistory.isEmpty()) {
            System.out.println("No patients have been registered yet.");
        } else {
            System.out.println("--- Registered Patient History ---");
            for (Patient patient : registeredPatientsHistory) {
                System.out.println(patient);
            }
            System.out.println("--- End of History ---");
        }
    }

    /**
     * Runs the main appointment scheduling application loop.
     */
    public void run() {
        int choice = -1; // Initialize with an invalid choice

        // Use try-finally to ensure scanner is closed
        try {
            while (choice != 5) {
                displayMenu();

                try {
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();

                    // Use switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            registerNewPatient();
                            break;
                        case 2:
                            viewWaitingList();
                            break;
                        case 3:
                            callNextPatient();
                            break;
                        case 4:
                            viewRegisteredPatientHistory();
                            break;
                        case 5:
                            System.out.println("Exiting Clinic Scheduler. Goodbye!");
                            break;
                        default:
                            // Handle invalid menu numbers
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    choice = -1; // Reset choice to continue loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during operation
                    System.err.println("Error: An unexpected error occurred: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for detailed debugging
                }
            }
        } finally {
            // Ensure the scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Main method to start the application
    public static void main(String[] args) {
        AppointmentScheduler scheduler = new AppointmentScheduler();
        scheduler.run();
    }
}
