/*
 * Exam Question #827
 * Generated on: 2025-05-12 16:46:59
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Request System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified console-based system for managing appointment requests at a hospital. The system should allow staff to register new patients, patients to submit appointment requests, and administrators to process these requests in the order they were received.
 * 
 * Your solution must demonstrate a strong understanding of core Java collections, input handling, control flow, and exception management.
 * 
 * **System Requirements:**
 * 
 * 1.  **Patient Management:**
 *     *   The system must maintain a list of registered patients. Each patient should have a unique ID (auto-generated by the system) and a name.
 *     *   Staff should be able to add new patients to the system.
 * 
 * 2.  **Appointment Request Management:**
 *     *   Patients (or staff on their behalf) can submit appointment requests. A request must be associated with an existing patient ID and include a brief reason for the appointment.
 *     *   Requests are processed in a First-In, First-Out (FIFO) manner.
 *     *   Administrators should be able to process the next pending request from the queue. Processing a request removes it from the queue and displays its details.
 * 
 * 3.  **System Interface:**
 *     *   The system must present a menu-driven interface to the user via the console.
 *     *   Menu options should include: Add Patient, Submit Appointment Request, Process Next Request, View All Patients, View Pending Requests, Exit.
 * 
 * 4.  **Required Java Components:**
 *     *   You **must** use `java.util.Queue` (specifically, an implementation like `ArrayDeque`) to manage appointment requests.
 *     *   You **must** use `java.util.ArrayList` as the concrete implementation for storing registered patients.
 *     *   You **must** declare the collection holding patients using the `java.util.List` interface type.
 *     *   You **must** use `java.util.Scanner` to read user input from the console.
 *     *   You **must** use a `switch` statement to handle the main menu selections.
 *     *   You **must** use `System.err` exclusively for displaying error messages (e.g., invalid input, patient not found, empty queue).
 *     *   You **must** use `System.out` for displaying all other output (menu, prompts, success messages, lists, request details).
 *     *   You **must** implement class-wide or method-specific exception handling using `try-catch` blocks to gracefully handle potential issues like invalid numeric input or attempting to process requests when the queue is empty.
 * 
 * 5.  **Best Practices:**
 *     *   Implement proper encapsulation for your data classes (private fields, public methods/constructors).
 *     *   Use meaningful names for classes, variables, and methods.
 *     *   Include appropriate comments or Javadoc to explain complex parts.
 *     *   Validate user input where necessary (e.g., checking if a patient ID exists before submitting a request).
 *     *   Handle edge cases (e.g., viewing empty lists or queues, processing an empty queue).
 *     *   Structure your code logically into appropriate classes and methods.
 * 
 * **Expected Output Structure:**
 * 
 * The system should display a menu, prompt for input based on the selection, and provide feedback. Error messages should go to `System.err`.
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient
 * 2. Submit Appointment Request
 * 3. Process Next Request
 * 4. View All Patients
 * 5. View Pending Requests
 * 6. Exit
 * Enter your choice: 
 * ```
 * 
 * *(Example interaction for adding a patient)*
 * ```
 * Enter patient name: John Doe
 * Patient added successfully! ID: 1
 * ```
 * 
 * *(Example interaction for submitting a request)*
 * ```
 * Enter patient ID for request: 1
 * Enter reason for appointment: Fever and cough
 * Appointment request submitted for Patient ID 1. Request ID: 101
 * ```
 * 
 * *(Example interaction for processing a request)*
 * ```
 * Processing next appointment request...
 * Request ID: 101
 * Patient ID: 1 (John Doe)
 * Reason: Fever and cough
 * Request processed.
 * ```
 * 
 * *(Example error message)*
 * ```
 * Error: Patient with ID 99 not found. Request submission failed. (This should go to System.err)
 * ```
 * 
 * **Task:**
 * 
 * Write the complete Java code for this Hospital Appointment Request System, adhering to all the requirements listed above.
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment Request System using the required Java components and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple class encapsulating patient data (`patientId`, `name`). It uses private fields and public getters, demonstrating encapsulation.
 *     *   `AppointmentRequest`: Encapsulates request data (`requestId`, `patientId`, `reason`). It links a request back to a patient via `patientId`. Private fields and public getters are used.
 *     *   `PatientNotFoundException`: A custom exception created to specifically handle the scenario where a requested patient ID does not exist, making the error handling more specific and readable.
 *     *   `HospitalAppointmentSystem`: The main class containing the system logic, data structures, and user interface.
 * 
 * 2.  **Required Component Usage:**
 *     *   `java.util.Queue`: The `appointmentQueue` field is declared as `Queue<AppointmentRequest>` and instantiated as `new ArrayDeque<>()`. Requests are added using `offer()` and removed using `poll()`, correctly implementing FIFO behavior.
 *     *   `java.util.ArrayList`: The `patients` field is instantiated as `new ArrayList<>()`. Patients are added to this list.
 *     *   `java.util.List interface`: The `patients` field is declared using the `List` interface (`private List<Patient> patients;`), adhering to the principle of programming to interfaces.
 *     *   `java.util.Scanner`: A `Scanner` object is used to read input from `System.in` in the `run()`, `addPatient()`, and `submitAppointmentRequest()` methods. It's closed in a dedicated `closeScanner()` method for resource management.
 *     *   `switch statement`: The `run()` method uses a `switch` statement to direct the program flow based on the user's menu choice.
 *     *   `System.err`: Used exclusively in `catch` blocks and validation checks (`if (name.trim().isEmpty())`, `if (reason.trim().isEmpty())`) to display error messages, separating them from normal output.
 *     *   `System.out`: Used for displaying the menu, prompts, success messages, and the contents of the patient list and request queue.
 *     *   `try-catch blocks`: Exception handling is implemented in several places:
 *         *   Around the `scanner.nextInt()` call in `run()` to catch `InputMismatchException` if the user enters non-numeric input for the menu choice.
 *         *   Around the input reading and patient lookup in `submitAppointmentRequest()` to catch `InputMismatchException` for the patient ID and the custom `PatientNotFoundException`.
 *         *   A general `catch (Exception e)` is included in the `run()` loop and `submitAppointmentRequest`/`processNextRequest` methods as a fallback for any unexpected runtime errors, demonstrating class-wide or method-level handling.
 *         *   The `processNextRequest()` method uses `appointmentQueue.poll()` and checks for a `null` return value, which is a safer way to handle an empty queue than methods that throw `NoSuchElementException` (like `remove()` or `element()`), although a `try-catch` for `NoSuchElementException` would also satisfy the requirement if those methods were used.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Achieved in `Patient` and `AppointmentRequest` classes.
 *     *   **Meaningful Names:** Classes, variables (`patientId`, `appointmentQueue`, `processNextRequest`), and methods clearly indicate their purpose.
 *     *   **Comments/Documentation:** Javadoc-style comments are used for classes and methods, explaining their roles. Inline comments clarify specific points like the use of `poll()` or `offer()`.
 *     *   **Input Validation:** Checks are included for empty names/reasons and, importantly, for the existence of a patient ID before submitting a request.
 *     *   **Error Handling:** Specific exceptions are caught (`InputMismatchException`, `PatientNotFoundException`), and error messages are informative and directed to `System.err`. Edge cases like empty lists/queues are handled gracefully with informative messages to `System.out` or `System.err`.
 *     *   **Clean Code Structure:** The logic is divided into distinct methods based on functionality (add, submit, process, view). Helper methods like `findPatientById` improve code organization and reusability.
 * 
 * This solution effectively demonstrates the required Java concepts within a practical, albeit simplified, application context.
 */

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.ArrayDeque;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException; // For potential queue issues, though isEmpty check is better

// Custom Exception for Patient Not Found
class PatientNotFoundException extends Exception {
    public PatientNotFoundException(String message) {
        super(message);
    }
}

// Represents a Patient
class Patient {
    private int patientId;
    private String name;

    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name;
    }
}

// Represents an Appointment Request
class AppointmentRequest {
    private int requestId;
    private int patientId; // Links to the Patient
    private String reason;

    public AppointmentRequest(int requestId, int patientId, String reason) {
        this.requestId = requestId;
        this.patientId = patientId;
        this.reason = reason;
    }

    public int getRequestId() {
        return requestId;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getReason() {
        return reason;
    }

    @Override
    public String toString() {
        return "Request ID: " + requestId + ", Patient ID: " + patientId + ", Reason: " + reason;
    }
}

// Main System Class
public class HospitalAppointmentSystem {
    // Requirement: Use List interface and ArrayList implementation for patients
    private List<Patient> patients;
    // Requirement: Use Queue interface and ArrayDeque implementation for requests
    private Queue<AppointmentRequest> appointmentQueue;
    // Requirement: Use Scanner for user input
    private Scanner scanner;

    private int nextPatientId = 1; // Auto-generate patient IDs
    private int nextRequestId = 101; // Auto-generate request IDs

    public HospitalAppointmentSystem() {
        this.patients = new ArrayList<>();
        this.appointmentQueue = new ArrayDeque<>();
        this.scanner = new Scanner(System.in);
    }

    // Main method to run the system
    public static void main(String[] args) {
        HospitalAppointmentSystem system = new HospitalAppointmentSystem();
        system.run();
        system.closeScanner(); // Clean up the scanner
    }

    // Main loop for the system menu
    public void run() {
        int choice;
        do {
            printMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                // Requirement: Use switch statement
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        submitAppointmentRequest();
                        break;
                    case 3:
                        processNextRequest();
                        break;
                    case 4:
                        viewAllPatients();
                        break;
                    case 5:
                        viewPendingRequests();
                        break;
                    case 6:
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Requirement: Use System.err for error messages
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                // Requirement: Use System.err for error messages
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = 0; // Reset choice to stay in loop
            } catch (Exception e) {
                 // Requirement: Class-wide exception handling with try-catch blocks
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
                choice = 0; // Reset choice to stay in loop
            }
            System.out.println(); // Add a newline for better readability between operations
        } while (choice != 6);
    }

    private void printMenu() {
        System.out.println("--- Hospital Appointment System ---");
        System.out.println("1. Add Patient");
        System.out.println("2. Submit Appointment Request");
        System.out.println("3. Process Next Request");
        System.out.println("4. View All Patients");
        System.out.println("5. View Pending Requests");
        System.out.println("6. Exit");
    }

    // Adds a new patient to the system
    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();

        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return;
        }

        Patient newPatient = new Patient(nextPatientId++, name.trim());
        patients.add(newPatient);
        System.out.println("Patient added successfully! ID: " + newPatient.getPatientId());
    }

    // Submits a new appointment request
    private void submitAppointmentRequest() {
        try {
            System.out.print("Enter patient ID for request: ");
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Validate patient ID
            Patient patient = findPatientById(patientId);
            if (patient == null) {
                // Requirement: Use System.err for error messages
                throw new PatientNotFoundException("Patient with ID " + patientId + " not found.");
            }

            System.out.print("Enter reason for appointment: ");
            String reason = scanner.nextLine();

             if (reason == null || reason.trim().isEmpty()) {
                 System.err.println("Error: Appointment reason cannot be empty.");
                 return;
            }


            AppointmentRequest newRequest = new AppointmentRequest(nextRequestId++, patientId, reason.trim());
            appointmentQueue.offer(newRequest); // Use offer for queue
            System.out.println("Appointment request submitted for Patient ID " + patientId + ". Request ID: " + newRequest.getRequestId());

        } catch (InputMismatchException e) {
             // Requirement: Use System.err for error messages
            System.err.println("Error: Invalid input for Patient ID. Please enter a number.");
            scanner.nextLine(); // Consume invalid input
        } catch (PatientNotFoundException e) {
            // Requirement: Use System.err for error messages
            System.err.println("Error: " + e.getMessage() + " Request submission failed.");
        } catch (Exception e) {
             // Requirement: Class-wide exception handling with try-catch blocks
            System.err.println("An unexpected error occurred during request submission: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        }
    }

    // Processes the next appointment request from the queue
    private void processNextRequest() {
        System.out.println("Processing next appointment request...");
        try {
            // Use poll() which returns null if queue is empty
            AppointmentRequest processedRequest = appointmentQueue.poll();

            if (processedRequest == null) {
                // Requirement: Use System.err for error messages
                System.err.println("No pending appointment requests in the queue.");
            } else {
                // Find patient name for display (optional but good practice)
                Patient patient = findPatientById(processedRequest.getPatientId());
                String patientName = (patient != null) ? patient.getName() : "Unknown Patient";

                System.out.println("Request ID: " + processedRequest.getRequestId());
                System.out.println("Patient ID: " + processedRequest.getPatientId() + " (" + patientName + ")");
                System.out.println("Reason: " + processedRequest.getReason());
                System.out.println("Request processed.");
            }
        } catch (Exception e) {
             // Requirement: Class-wide exception handling with try-catch blocks
            System.err.println("An unexpected error occurred during request processing: " + e.getMessage());
             // e.printStackTrace(); // Uncomment for debugging
        }
    }

    // Views all registered patients
    private void viewAllPatients() {
        System.out.println("--- Registered Patients ---");
        if (patients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient patient : patients) {
                System.out.println(patient); // Uses Patient's toString()
            }
        }
        System.out.println("-------------------------");
    }

    // Views all pending appointment requests in the queue
    private void viewPendingRequests() {
        System.out.println("--- Pending Appointment Requests ---");
        if (appointmentQueue.isEmpty()) {
            System.out.println("No pending appointment requests.");
        } else {
            // Iterate without removing elements
            for (AppointmentRequest request : appointmentQueue) {
                System.out.println(request); // Uses AppointmentRequest's toString()
            }
        }
        System.out.println("----------------------------------");
    }

    // Helper method to find a patient by ID
    private Patient findPatientById(int patientId) {
        for (Patient patient : patients) {
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    // Clean up the scanner resource
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
        }
    }
}
