/*
 * Exam Question #147
 * Generated on: 2025-05-11 22:21:27
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Clinic Waiting Room Management System**
 * 
 * You are tasked with developing a simple console-based application to manage a clinic's waiting room. Patients arrive and are added to a waiting list. When a doctor is available, the next patient in line is called. The system should also keep a record of patients who have already been processed.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Core Functionality:**
 *     *   **Add Patient:** Prompt the user for a patient's name and add them to the end of the waiting list.
 *     *   **Process Next Patient:** Remove the patient at the front of the waiting list and move them to a list of processed patients. Report which patient was processed. Handle the case where the waiting list is empty.
 *     *   **List Waiting Patients:** Display all patients currently in the waiting list, in the order they will be processed.
 *     *   **List Processed Patients:** Display all patients who have been processed.
 *     *   **Exit:** Terminate the application.
 * 
 * 2.  **Required Java Components:** Your solution MUST use ALL of the following:
 *     *   `java.util.Queue` (specifically, an implementation like `LinkedList`) for the waiting list.
 *     *   `java.util.ArrayList` for storing processed patients.
 *     *   `java.util.List` interface (declare your processed patients list using this interface type).
 *     *   `java.util.Scanner` for reading user input from the console.
 *     *   `switch` statement for handling the main menu options.
 *     *   `System.err` for displaying error messages (e.g., invalid input, trying to process an empty queue).
 *     *   `System.out` for displaying normal output (menu, prompts, success messages, lists).
 *     *   Class-wide exception handling using `try-catch` blocks. The main operational logic of the application should be wrapped in a `try-catch` block to handle potential unexpected errors gracefully. Specific anticipated errors (like invalid input type) should also be handled appropriately.
 * 
 * 3.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments or Javadoc where necessary to explain complex logic or class/method purpose.
 *     *   Implement basic input validation (e.g., check if patient name is empty).
 *     *   Ensure proper error handling as described above.
 *     *   Structure your code logically within a class.
 * 
 * **Execution:**
 * The program should present a menu to the user and repeatedly accept commands until the user chooses to exit.
 * 
 * **Example Interaction:**
 * 
 * ```
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice added to waiting list.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient Bob added to waiting list.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 3
 * --- Waiting List ---
 * 1. Alice
 * 2. Bob
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 2
 * Processing patient: Alice
 * Patient Alice moved to processed list.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 3
 * --- Waiting List ---
 * 1. Bob
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 4
 * --- Processed Patients ---
 * 1. Alice
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 2
 * Processing patient: Bob
 * Patient Bob moved to processed list.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 2
 * Error: Waiting list is empty. Cannot process patient.
 * 
 * --- Clinic Management Menu ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. List Waiting Patients
 * 4. List Processed Patients
 * 5. Exit
 * Enter your choice: 5
 * Exiting Clinic Management System.
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic Clinic Waiting Room Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Queue` (`LinkedList`)**: The `waitingList` is declared as a `Queue<String>` and instantiated as a `LinkedList`. This correctly models a waiting line where patients are processed in a First-In, First-Out (FIFO) order. `offer()` is used to add patients to the end of the queue, and `poll()` is used to remove and retrieve the patient from the front. `poll()` is preferred over `remove()` as it returns `null` if the queue is empty, allowing for graceful error handling without throwing an exception in the `processNextPatient` method. Iteration for listing uses the enhanced for loop, which works correctly with `LinkedList` acting as a `Queue`.
 * 
 * 2.  **`ArrayList` and `List`**: The `processedPatients` is declared as a `List<String>` and instantiated as an `ArrayList`. This is suitable for storing a dynamic collection of patients who have been processed, where order of processing is maintained, and elements can be easily added and iterated over. `add()` is used to add patients to this list.
 * 
 * 3.  **`Scanner`**: A `Scanner` object is used to read user input from `System.in` for menu choices and patient names. It's initialized once and used throughout the application's lifetime. Note the use of `scanner.nextLine()` after `scanner.nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls.
 * 
 * 4.  **`switch` statement**: The `processChoice` method uses a `switch` statement to direct the program flow based on the integer menu choice provided by the user. This provides a clear and readable way to handle multiple distinct options.
 * 
 * 5.  **`System.err`**: `System.err.println()` is used specifically for displaying error messages to the standard error stream, such as when the user enters invalid input (non-numeric, or an out-of-range choice) or when an operation fails (like trying to process a patient from an empty queue).
 * 
 * 6.  **`System.out`**: `System.out.println()` is used for all normal output, including displaying the menu, prompts for input, success messages, and the lists of waiting and processed patients.
 * 
 * 7.  **Class-wide `try-catch`**: The `run()` method, which contains the main application loop, is wrapped in a `try-catch(Exception e)` block. This fulfills the requirement for class-wide exception handling. While specific input errors (`InputMismatchException`) are handled more directly within `getUserChoice`, this outer catch block serves as a safety net for any other unexpected runtime exceptions that might occur during the application's execution, preventing the program from crashing abruptly and providing basic error information. A `finally` block is used to ensure the `Scanner` is closed.
 * 
 * 8.  **Best Practices**:
 *     *   **Meaningful Names**: Variables like `waitingList`, `processedPatients`, `patientName`, `menuChoice`, and methods like `addPatient`, `processNextPatient`, `listWaitingPatients` are descriptive.
 *     *   **Comments/Documentation**: Basic Javadoc comments are provided for the class and key methods, explaining their purpose.
 *     *   **Input Validation**: The `addPatient` method checks if the entered patient name is empty. The `getUserChoice` method handles `InputMismatchException` to validate that the input is an integer. The `processChoice` method implicitly validates the choice range via the `default` case in the `switch`.
 *     *   **Error Handling**: Errors like empty name, invalid input type, and attempting to process an empty queue are explicitly checked and reported using `System.err`. The main loop's `try-catch` provides a layer for unexpected errors.
 *     *   **Clean Structure**: The logic is organized within the `ClinicSystem` class, with separate private methods for different operations (displaying menu, getting choice, processing choice, adding, processing, listing). The `main` method serves as the entry point, creating an instance and calling the `run` method.
 * 
 * This solution effectively integrates all the required components into a practical, well-structured application that demonstrates core Java concepts, data structures, and error handling techniques suitable for an advanced programming exam.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Manages a clinic's waiting room using a Queue and a list of processed patients.
 */
public class ClinicSystem {

    private Queue<String> waitingList;
    private List<String> processedPatients;
    private Scanner scanner;
    private boolean running;

    /**
     * Constructs a new ClinicSystem.
     */
    public ClinicSystem() {
        waitingList = new LinkedList<>(); // Using LinkedList as a Queue implementation
        processedPatients = new ArrayList<>(); // Using ArrayList as a List implementation
        scanner = new Scanner(System.in);
        running = true;
    }

    /**
     * Runs the main clinic management loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        // Class-wide exception handling for the main operational loop
        try {
            while (running) {
                displayMenu();
                int choice = getUserChoice();
                processChoice(choice);
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed when the system stops running
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("Clinic Management System terminated.");
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Clinic Management Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Process Next Patient");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Gets the user's menu choice, handling invalid input type.
     * @return The valid integer choice entered by the user.
     */
    private int getUserChoice() {
        int choice = -1;
        try {
            choice = scanner.nextInt();
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.next(); // Consume the invalid input to prevent infinite loop
        }
        return choice;
    }

    /**
     * Processes the user's menu choice using a switch statement.
     * @param choice The integer choice made by the user.
     */
    private void processChoice(int choice) {
        switch (choice) {
            case 1:
                addPatient();
                break;
            case 2:
                processNextPatient();
                break;
            case 3:
                listWaitingPatients();
                break;
            case 4:
                listProcessedPatients();
                break;
            case 5:
                running = false;
                System.out.println("Exiting Clinic Management System.");
                break;
            default:
                System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
        }
    }

    /**
     * Adds a new patient to the waiting list.
     * Prompts for patient name and performs basic validation.
     */
    private void addPatient() {
        System.out.print("Enter patient name: ");
        scanner.nextLine(); // Consume the leftover newline character after reading int choice
        String patientName = scanner.nextLine().trim();

        if (patientName.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
        } else {
            waitingList.offer(patientName); // offer() is preferred over add() for queues as it doesn't throw exception if capacity restricted
            System.out.println("Patient " + patientName + " added to waiting list.");
        }
    }

    /**
     * Processes the next patient in the waiting list.
     * Removes the patient from the queue and adds them to the processed list.
     * Handles the case where the waiting list is empty.
     */
    private void processNextPatient() {
        String nextPatient = waitingList.poll(); // poll() retrieves and removes the head, returns null if queue is empty

        if (nextPatient != null) {
            processedPatients.add(nextPatient);
            System.out.println("Processing patient: " + nextPatient);
            System.out.println("Patient " + nextPatient + " moved to processed list.");
        } else {
            System.err.println("Error: Waiting list is empty. Cannot process patient.");
        }
    }

    /**
     * Displays all patients currently in the waiting list.
     */
    private void listWaitingPatients() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue for display without removing elements
            int index = 1;
            for (String patient : waitingList) {
                System.out.println(index + ". " + patient);
                index++;
            }
        }
    }

    /**
     * Displays all patients who have been processed.
     */
    private void listProcessedPatients() {
        System.out.println("--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            // Iterate through the list
            int index = 1;
            for (String patient : processedPatients) {
                System.out.println(index + ". " + patient);
                index++;
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicSystem clinic = new ClinicSystem();
        clinic.run();
    }
}
