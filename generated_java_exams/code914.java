/*
 * Exam Question #914
 * Generated on: 2025-05-12 16:58:58
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Scheduling system. The system needs to manage patients waiting for appointments and keep track of currently booked appointments for a set of predefined time slots.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following technical requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage patients who are waiting to be scheduled for an appointment. Patients are added to the end and scheduled from the front of the queue (First-Come, First-Served).
 *     *   Use a `java.util.List` (specifically, an `ArrayList` implementation) to store the currently booked appointments.
 *     *   Maintain a separate `List` (using `ArrayList`) of all possible time slots available for booking.
 * 
 * 2.  **Classes:**
 *     *   Create a `Patient` class with a private field for the patient's name and appropriate constructor and getter methods.
 *     *   Create an `Appointment` class with private fields for the `Patient` object and the booked `String timeSlot`, with appropriate constructor and getter methods.
 *     *   Create a `HospitalScheduler` class that encapsulates the `Queue` of waiting patients, the `List` of booked appointments, and the `List` of all possible time slots. This class should contain the core logic for managing the system.
 *     *   Create a main class (e.g., `HospitalApp`) containing the `main` method to run the application, handle user interaction, and instantiate the `HospitalScheduler`.
 * 
 * 3.  **Functionality (via a menu in `HospitalApp`):**
 *     *   **Add Patient to Waiting List:** Prompt the user for a patient name and add them to the waiting queue.
 *     *   **View Waiting List:** Display the names of all patients currently in the waiting queue, in order.
 *     *   **View Available Slots:** Display all predefined time slots, indicating which ones are currently available (not booked).
 *     *   **Schedule Appointment:**
 *         *   Attempt to take the next patient from the waiting queue.
 *         *   Prompt the user for a desired time slot.
 *         *   Validate that the entered time slot is one of the predefined possible slots.
 *         *   Check if the selected time slot is currently available.
 *         *   If a patient is available from the queue, the slot is valid, and the slot is available, create an `Appointment` object and add it to the list of booked appointments. Use `System.out` for success messages.
 *         *   If the waiting queue is empty, the slot is invalid, or the slot is already booked, display an appropriate error message using `System.err`.
 *     *   **Cancel Appointment:**
 *         *   Prompt the user for the time slot of the appointment to cancel.
 *         *   Validate that the entered time slot is one of the predefined possible slots.
 *         *   Find the appointment in the list of booked appointments that matches the time slot.
 *         *   If found, remove the appointment from the list. Use `System.out` for success messages.
 *         *   If not found (either invalid slot or no appointment exists for that slot), display an error message using `System.err`.
 *     *   **View Booked Appointments:** Display all currently booked appointments, showing the time slot and the patient's name.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **Control Flow and Error Handling:**
 *     *   Use a `switch` statement in the main application loop to handle the user's menu choices.
 *     *   Implement robust input validation. For menu choices, ensure the input is an integer and within the valid range. For time slots, ensure they match one of the predefined slots.
 *     *   Use `System.err` to output all error messages (e.g., invalid input, queue empty, slot booked, appointment not found).
 *     *   Use `System.out` for all normal output (menu, lists, success messages, prompts).
 *     *   Implement class-wide exception handling using `try-catch` blocks in the `main` method to gracefully handle potential issues like invalid input from the `Scanner` or unexpected errors during operations.
 * 
 * 5.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public getters/methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure and formatting.
 * 
 * **Predefined Time Slots:** Use the following slots: "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM".
 * 
 * **Expected Output:** The program should present a menu, accept user input, perform the requested operations, and display results or errors using `System.out` and `System.err` as specified. The output format for lists should be clear and readable.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Hospital Appointment Scheduler ---
 * 1. Add Patient to Waiting List
 * 2. View Waiting List
 * 3. View Available Slots
 * 4. Schedule Appointment
 * 5. Cancel Appointment
 * 6. View Booked Appointments
 * 0. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * 
 * Patient Alice added to waiting list.
 * 
 * Enter your choice: 1
 * Enter patient name: Bob
 * 
 * Patient Bob added to waiting list.
 * 
 * Enter your choice: 2
 * Waiting List:
 * 1. Alice
 * 2. Bob
 * 
 * Enter your choice: 3
 * Available Slots:
 * 9:00 AM (Available)
 * 9:30 AM (Available)
 * 10:00 AM (Available)
 * 10:30 AM (Available)
 * 11:00 AM (Available)
 * 
 * Enter your choice: 4
 * Enter time slot to schedule (e.g., 9:00 AM): 9:30 AM
 * 
 * Appointment scheduled for Bob at 9:30 AM.
 * 
 * Enter your choice: 4
 * Enter time slot to schedule (e.g., 9:00 AM): 9:30 AM
 * 
 * Error: Slot 9:30 AM is already booked.
 * Error: No patient was scheduled.
 * 
 * Enter your choice: 6
 * Booked Appointments:
 * Slot: 9:30 AM, Patient: Bob
 * 
 * Enter your choice: 4
 * Enter time slot to schedule (e.g., 9:00 AM): 10:00 AM
 * 
 * Appointment scheduled for Alice at 10:00 AM.
 * 
 * Enter your choice: 2
 * Waiting List: (Empty)
 * 
 * Enter your choice: 6
 * Booked Appointments:
 * Slot: 9:30 AM, Patient: Bob
 * Slot: 10:00 AM, Patient: Alice
 * 
 * Enter your choice: 5
 * Enter time slot to cancel (e.g., 9:00 AM): 9:30 AM
 * 
 * Appointment at 9:30 AM cancelled.
 * 
 * Enter your choice: 6
 * Booked Appointments:
 * Slot: 10:00 AM, Patient: Alice
 * 
 * Enter your choice: 0
 * Exiting system.
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Scheduler demonstrating the required Java concepts.
 * 
 * **Key Components and Concepts:**
 * 
 * 1.  **`Queue<Patient> waitingList`:** A `LinkedList` is used, which implements the `Queue` interface. This correctly models a waiting list where patients are added to the end (`offer`) and processed from the front (`poll`) following a First-Come, First-Served (FCFS) principle.
 * 2.  **`List<Appointment> bookedAppointments`:** An `ArrayList` is used, implementing the `List` interface. This is suitable for storing booked appointments, allowing easy iteration (`for` loop) and removal (`remove`). The use of `List` as the type demonstrates programming to the interface.
 * 3.  **`List<String> allPossibleSlots`:** An `ArrayList` holds the fixed set of time slots the hospital offers. This list is used for validating user input for time slots and determining availability.
 * 4.  **`Patient` Class:** A simple POJO (Plain Old Java Object) with a private `name` field, a constructor, and a getter. Basic input validation is included in the constructor.
 * 5.  **`Appointment` Class:** Another simple POJO linking a `Patient` object to a `timeSlot` string. It also has private fields, a constructor (with basic validation), and getters. The `toString()` method provides a convenient way to print appointment details.
 * 6.  **`HospitalScheduler` Class:** This class encapsulates the core logic and data (`waitingList`, `bookedAppointments`, `allPossibleSlots`). Its methods (`addPatient`, `viewWaitingList`, `scheduleAppointment`, `cancelAppointment`, `viewBookedAppointments`, `viewAvailableSlots`) operate on these internal data structures, demonstrating encapsulation. Helper method `isSlotBooked` keeps the scheduling logic clean.
 * 7.  **`Scanner`:** Used in the `main` method (`HospitalApp`) to read user input from the console for menu choices, patient names, and time slots. `scanner.nextLine()` is used after `scanner.nextInt()` to consume the leftover newline character, preventing input issues in subsequent `nextLine()` calls.
 * 8.  **`Switch Statement`:** The `main` method uses a `switch` statement to process the integer menu choice entered by the user, directing the program flow to the appropriate `HospitalScheduler` method or action.
 * 9.  **`System.err`:** Used specifically for outputting error messages. This includes invalid menu choices, invalid time slots, attempts to schedule when the queue is empty or the slot is booked, and attempts to cancel a non-existent appointment.
 * 10. **`System.out`:** Used for all normal output, such as the menu, prompts, success messages, and displaying the contents of the waiting list and booked appointments.
 * 11. **`try-catch` Blocks:**
 *     *   A broad `try-catch(Exception e)` block is placed around the main `while` loop's processing logic in `main`. This provides a class-wide safety net to catch unexpected runtime errors and prevent the program from crashing abruptly. It prints the error message using `System.err`.
 *     *   A specific `catch(InputMismatchException e)` is included to handle cases where the user enters non-integer input when a number (the menu choice) is expected by `scanner.nextInt()`. This prevents an infinite loop caused by the invalid input not being consumed.
 *     *   `try-catch` blocks are also used within the `HospitalScheduler` methods (like `addPatient` and `scheduleAppointment`) to catch `IllegalArgumentException` thrown by the `Patient` or `Appointment` constructors for validation errors.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** Data fields in `Patient`, `Appointment`, and `HospitalScheduler` are `private`. Access is provided through public methods (getters and operational methods).
 * *   **Meaningful Names:** Classes (`Patient`, `Appointment`, `HospitalScheduler`), variables (`waitingList`, `bookedAppointments`, `timeSlot`, `patientName`), and methods (`addPatient`, `scheduleAppointment`, `viewWaitingList`) have names that clearly indicate their purpose.
 * *   **Comments and Documentation:** Javadoc comments are included for classes and methods explaining their purpose, parameters, and return values. Inline comments clarify specific logic where needed.
 * *   **Input Validation:** The code checks for null or empty strings for names and time slots. It also validates if a entered time slot exists in `allPossibleSlots` and if a slot is already booked before scheduling. Menu choice input is validated for type and range.
 * *   **Error Handling:** Appropriate error messages are printed using `System.err` for various failure conditions (empty queue, slot taken, invalid input, appointment not found). The `try-catch` blocks provide robust handling for both expected input errors and unexpected runtime exceptions.
 * *   **Clean Code Structure:** The code is divided into logical classes (`Patient`, `Appointment`, `HospitalScheduler`, `HospitalApp`). Methods are focused on single responsibilities. The main loop in `HospitalApp` delegates complex logic to the `HospitalScheduler`.
 * 
 * This solution effectively integrates all required components within a practical scenario, demonstrating competence in using standard Java collections, handling user input, implementing control flow, managing errors, and adhering to object-oriented principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient
class Patient {
    private String name;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be null or empty.");
        }
        this.name = name.trim();
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a booked appointment
class Appointment {
    private Patient patient;
    private String timeSlot;

    /**
     * Constructs a new Appointment.
     * @param patient The patient for this appointment.
     * @param timeSlot The time slot for this appointment.
     */
    public Appointment(Patient patient, String timeSlot) {
        if (patient == null) {
            throw new IllegalArgumentException("Appointment patient cannot be null.");
        }
        if (timeSlot == null || timeSlot.trim().isEmpty()) {
             throw new IllegalArgumentException("Appointment time slot cannot be null or empty.");
        }
        this.patient = patient;
        this.timeSlot = timeSlot.trim();
    }

    /**
     * Gets the patient for this appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the time slot for this appointment.
     * @return The time slot string.
     */
    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Slot: " + timeSlot + ", Patient: " + patient.getName();
    }
}

// Manages the hospital scheduling logic
class HospitalScheduler {
    private Queue<Patient> waitingList;
    private List<Appointment> bookedAppointments;
    private List<String> allPossibleSlots;

    /**
     * Constructs a new HospitalScheduler.
     * Initializes collections and predefined time slots.
     */
    public HospitalScheduler() {
        waitingList = new LinkedList<>(); // LinkedList implements Queue
        bookedAppointments = new ArrayList<>(); // ArrayList implements List
        allPossibleSlots = new ArrayList<>();
        // Populate with predefined slots
        allPossibleSlots.add("9:00 AM");
        allPossibleSlots.add("9:30 AM");
        allPossibleSlots.add("10:00 AM");
        allPossibleSlots.add("10:30 AM");
        allPossibleSlots.add("11:00 AM");
    }

    /**
     * Adds a patient to the waiting list queue.
     * @param name The name of the patient.
     */
    public void addPatient(String name) {
        try {
            Patient patient = new Patient(name);
            waitingList.offer(patient); // offer is preferred over add for queues
            System.out.println("Patient " + patient.getName() + " added to waiting list.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding patient: " + e.getMessage());
        }
    }

    /**
     * Displays the current waiting list.
     */
    public void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("(Empty)");
        } else {
            int i = 1;
            for (Patient patient : waitingList) {
                System.out.println(i++ + ". " + patient.getName());
            }
        }
    }

    /**
     * Displays all predefined time slots and their availability.
     */
    public void viewAvailableSlots() {
        System.out.println("--- Available Slots ---");
        if (allPossibleSlots.isEmpty()) {
             System.out.println("No time slots defined.");
             return;
        }

        for (String slot : allPossibleSlots) {
            boolean isBooked = isSlotBooked(slot);
            System.out.println(slot + (isBooked ? " (Booked)" : " (Available)"));
        }
    }

    /**
     * Schedules an appointment for the next patient in the queue at a specified time slot.
     * @param timeSlot The desired time slot for the appointment.
     */
    public void scheduleAppointment(String timeSlot) {
        if (timeSlot == null || timeSlot.trim().isEmpty()) {
            System.err.println("Error scheduling appointment: Time slot cannot be empty.");
            return;
        }
        String trimmedTimeSlot = timeSlot.trim();

        if (!allPossibleSlots.contains(trimmedTimeSlot)) {
            System.err.println("Error scheduling appointment: Invalid time slot '" + trimmedTimeSlot + "'.");
            System.err.println("No patient was scheduled."); // Indicate failure clearly
            return;
        }

        if (isSlotBooked(trimmedTimeSlot)) {
            System.err.println("Error scheduling appointment: Slot " + trimmedTimeSlot + " is already booked.");
             System.err.println("No patient was scheduled."); // Indicate failure clearly
            return;
        }

        Patient nextPatient = waitingList.poll(); // Retrieve and remove the head of the queue

        if (nextPatient == null) {
            System.err.println("Error scheduling appointment: Waiting list is empty. Cannot schedule.");
            return;
        }

        try {
            Appointment newAppointment = new Appointment(nextPatient, trimmedTimeSlot);
            bookedAppointments.add(newAppointment);
            System.out.println("Appointment scheduled for " + nextPatient.getName() + " at " + trimmedTimeSlot + ".");
        } catch (IllegalArgumentException e) {
             System.err.println("Error creating appointment: " + e.getMessage());
             // If appointment creation fails, put the patient back if possible, or log.
             // For simplicity in this exam, we'll just report the error.
             System.err.println("Scheduling failed after taking patient from queue.");
        }
    }

    /**
     * Cancels an appointment at a specified time slot.
     * @param timeSlot The time slot of the appointment to cancel.
     */
    public void cancelAppointment(String timeSlot) {
         if (timeSlot == null || timeSlot.trim().isEmpty()) {
            System.err.println("Error cancelling appointment: Time slot cannot be empty.");
            return;
        }
        String trimmedTimeSlot = timeSlot.trim();

        if (!allPossibleSlots.contains(trimmedTimeSlot)) {
            System.err.println("Error cancelling appointment: Invalid time slot '" + trimmedTimeSlot + "'.");
            return;
        }

        Appointment appointmentToCancel = null;
        // Iterate through booked appointments to find the one matching the time slot
        for (Appointment appointment : bookedAppointments) {
            if (appointment.getTimeSlot().equals(trimmedTimeSlot)) {
                appointmentToCancel = appointment;
                break; // Found the appointment
            }
        }

        if (appointmentToCancel != null) {
            bookedAppointments.remove(appointmentToCancel);
            System.out.println("Appointment at " + trimmedTimeSlot + " for " + appointmentToCancel.getPatient().getName() + " cancelled.");
        } else {
            System.err.println("Error cancelling appointment: No appointment found for slot " + trimmedTimeSlot + ".");
        }
    }

    /**
     * Displays all currently booked appointments.
     */
    public void viewBookedAppointments() {
        System.out.println("--- Booked Appointments ---");
        if (bookedAppointments.isEmpty()) {
            System.out.println("(Empty)");
        } else {
            for (Appointment appointment : bookedAppointments) {
                System.out.println(appointment); // Uses Appointment's toString()
            }
        }
    }

     /**
     * Checks if a given time slot is currently booked.
     * @param timeSlot The time slot to check.
     * @return true if the slot is booked, false otherwise.
     */
    private boolean isSlotBooked(String timeSlot) {
         if (timeSlot == null) return false; // Should not happen with validation, but good practice
        for (Appointment appointment : bookedAppointments) {
            if (appointment.getTimeSlot().equals(timeSlot.trim())) {
                return true;
            }
        }
        return false;
    }

    // Method to add possible slots - used for initial setup
    // Could be private if only used internally during construction
    public void addPossibleSlot(String slot) {
        if (slot != null && !slot.trim().isEmpty() && !allPossibleSlots.contains(slot.trim())) {
            allPossibleSlots.add(slot.trim());
        }
    }
}

// Main application class
public class HospitalApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalScheduler scheduler = new HospitalScheduler();

        // Initial predefined slots are added in HospitalScheduler constructor
        // scheduler.addPossibleSlot("..."); // Example if we wanted to add more here

        int choice = -1;

        while (choice != 0) {
            printMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline left-over after reading int

                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String patientName = scanner.nextLine();
                        scheduler.addPatient(patientName);
                        break;
                    case 2:
                        scheduler.viewWaitingList();
                        break;
                    case 3:
                        scheduler.viewAvailableSlots();
                        break;
                    case 4:
                        System.out.print("Enter time slot to schedule (e.g., 9:00 AM): ");
                        String scheduleSlot = scanner.nextLine();
                        scheduler.scheduleAppointment(scheduleSlot);
                        break;
                    case 5:
                        System.out.print("Enter time slot to cancel (e.g., 9:00 AM): ");
                        String cancelSlot = scanner.nextLine();
                        scheduler.cancelAppointment(cancelSlot);
                        break;
                    case 6:
                        scheduler.viewBookedAppointments();
                        break;
                    case 0:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 0 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number for your choice.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to prevent exiting or incorrect processing
            } catch (Exception e) {
                 // Catch any other unexpected exceptions
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 // Optionally print stack trace for debugging: e.printStackTrace();
            }
            System.out.println(); // Blank line for readability between operations
        }

        scanner.close(); // Close the scanner when done
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Hospital Appointment Scheduler ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. View Waiting List");
        System.out.println("3. View Available Slots");
        System.out.println("4. Schedule Appointment");
        System.out.println("5. Cancel Appointment");
        System.out.println("6. View Booked Appointments");
        System.out.println("0. Exit");
    }
}
