/*
 * Exam Question #1106
 * Generated on: 2025-05-12 17:25:44
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Help Desk Ticket Management System
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple command-line Help Desk Ticket Management System. The system should allow users to submit new support tickets, process the oldest submitted ticket, and view lists of open and resolved tickets.
 * 
 * Your solution must adhere to the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to manage the incoming (open) tickets. Tickets should be processed in the order they were submitted (FIFO).
 *     *   Use a `java.util.ArrayList` to store tickets once they have been resolved.
 *     *   Utilize the `java.util.List` interface when declaring variables or returning collections where appropriate (e.g., for resolved tickets or when viewing open tickets).
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Submit Ticket, Process Ticket, View Open Tickets, View Resolved Tickets, Exit).
 * 
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options selected by the user.
 * 
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, success messages, and ticket details.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, attempting to process an empty queue).
 * 
 * 5.  **Exception Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential errors during program execution, such as invalid input format or unexpected issues.
 * 
 * 6.  **Object-Oriented Design & Best Practices:**
 *     *   Create a `Ticket` class to represent a single help desk ticket, with appropriate private fields (e.g., ID, description, status) and public methods (getters, setters, `toString`).
 *     *   Create a `HelpDeskSystem` class to manage the collection of open and resolved tickets and implement the core logic (submit, process, view). This class should encapsulate the data structures.
 *     *   Use meaningful variable and method names.
 *     *   Include basic comments and documentation (e.g., Javadoc comments for classes and methods).
 *     *   Implement input validation where necessary (e.g., ensuring ticket description is not empty).
 * 
 * **Functional Requirements:**
 * 
 * *   **Submit Ticket:** Prompts the user for a ticket description. Creates a new `Ticket` object with a unique ID and "Open" status, and adds it to the queue of open tickets. Provides feedback to the user.
 * *   **Process Ticket:** Removes the oldest ticket from the queue of open tickets, changes its status to "Resolved", and adds it to the list of resolved tickets. If the queue is empty, display an error message using `System.err`. Provides feedback to the user.
 * *   **View Open Tickets:** Displays all tickets currently in the open queue. If the queue is empty, indicate that there are no open tickets.
 * *   **View Resolved Tickets:** Displays all tickets currently in the list of resolved tickets. If the list is empty, indicate that there are no resolved tickets.
 * *   **Exit:** Terminates the program.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu, accepting user input, and displaying results or errors to the console (`System.out` or `System.err`). The format of ticket display should include the Ticket ID, Status, and Description.
 * 
 * Example interaction might look like:
 * 
 * ```
 * --- Help Desk System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Resolved Tickets
 * 5. Exit
 * Enter choice: 1
 * Enter ticket description: My printer isn't working.
 * Success: Ticket #1 submitted.
 * 
 * --- Help Desk System ---
 * 1. Submit New Ticket
 * ...
 * Enter choice: 1
 * Enter ticket description: Cannot connect to Wi-Fi.
 * Success: Ticket #2 submitted.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 3
 * 
 * --- Open Tickets ---
 * Ticket #1 [Status: Open] - Description: My printer isn't working.
 * Ticket #2 [Status: Open] - Description: Cannot connect to Wi-Fi.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 2
 * Success: Ticket #1 processed.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 3
 * 
 * --- Open Tickets ---
 * Ticket #2 [Status: Open] - Description: Cannot connect to Wi-Fi.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 4
 * 
 * --- Resolved Tickets ---
 * Ticket #1 [Status: Resolved] - Description: My printer isn't working.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: invalid_input
 * Invalid input. Please enter a number.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Help Desk System ---
 * ...
 * Enter choice: 5
 * Exiting Help Desk System. Goodbye!
 * ```
 * 
 * Your solution should be provided as a single file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Help Desk Ticket Management System adhering to all specified requirements.
 * 
 * 1.  **`Ticket` Class:** Represents a single ticket with encapsulated data (`ticketId`, `description`, `status`) and methods (`getters`, `setStatus`, `toString`). This demonstrates basic object-oriented principles and encapsulation.
 * 
 * 2.  **`HelpDeskSystem` Class:** Manages the core logic and data structures.
 *     *   `private Queue<Ticket> openTickets = new LinkedList<>();`: A `LinkedList` is used as the concrete implementation of the `Queue` interface. This stores tickets in FIFO order, suitable for processing the oldest ticket first.
 *     *   `private List<Ticket> resolvedTickets = new ArrayList<>();`: An `ArrayList` is used as the concrete implementation of the `List` interface. This stores resolved tickets. Using `List` as the declared type promotes flexibility.
 *     *   `submitTicket(String description)`: Adds a new ticket to the `openTickets` queue using `offer()`. Includes basic input validation for the description.
 *     *   `processNextTicket()`: Removes the head of the `openTickets` queue using `poll()`, updates its status, and adds it to the `resolvedTickets` list. Checks if the queue is empty before attempting to process.
 *     *   `getOpenTickets()`: Returns a `List` (specifically, a new `ArrayList` created from the `openTickets` queue). This fulfills the requirement of using `List` and `ArrayList` while providing a view of the queue's contents.
 *     *   `getResolvedTickets()`: Returns the `resolvedTickets` list, demonstrating the use of `List` as a return type.
 * 
 * 3.  **`HelpDeskApp` Class (Main Method):**
 *     *   **`Scanner`:** An instance of `Scanner` is used to read user input from `System.in`.
 *     *   **`try-catch (Exception e)`:** A broad `try-catch` block wraps the main `while` loop. This serves as the "class-wide exception handling," catching any unhandled exceptions that might occur during the program's execution and printing a generic error message to `System.err`.
 *     *   **`while` loop:** Keeps the application running until the user chooses to exit.
 *     *   **Menu and `Scanner` Input:** Displays the menu using `System.out`. Reads the user's choice using `scanner.nextInt()`.
 *     *   **`try-catch (InputMismatchException e)`:** An inner `try-catch` block specifically handles cases where the user enters non-integer input for the menu choice, printing an error to `System.err` and preventing the program from crashing. `scanner.nextLine()` is used to consume the invalid input and the trailing newline.
 *     *   **`switch` Statement:** Controls the program flow based on the user's valid integer choice, calling the appropriate methods in the `HelpDeskSystem` instance.
 *     *   **`System.out` and `System.err`:** Used throughout the `main` method and the `HelpDeskSystem` class for standard output (menu, prompts, success messages, ticket display) and error output (invalid input, empty queue errors, unexpected exceptions).
 *     *   **Viewing Tickets:** When viewing open or resolved tickets, the methods `getOpenTickets()` and `getResolvedTickets()` are called, which return `List<Ticket>`. The code then iterates through these `List` objects to print the ticket details using an enhanced for loop and the `Ticket` class's `toString()` method.
 *     *   **`finally` Block:** Ensures the `Scanner` resource is closed properly when the program exits or encounters an unexpected error, preventing resource leaks.
 * 
 * This solution effectively integrates all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical application, demonstrating understanding of data structures, object-oriented design, input/output, and error handling in Java.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single help desk ticket.
 */
class Ticket {
    private int ticketId;
    private String description;
    private String status; // e.g., "Open", "Resolved"

    /**
     * Constructs a new Ticket.
     *
     * @param ticketId The unique ID for the ticket.
     * @param description The description of the issue.
     */
    public Ticket(int ticketId, String description) {
        this.ticketId = ticketId;
        this.description = description;
        this.status = "Open"; // Newly created tickets are Open by default
    }

    // --- Getters ---
    public int getTicketId() {
        return ticketId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    public void setStatus(String status) {
        // Basic validation could be added here if needed
        this.status = status;
    }

    /**
     * Provides a string representation of the Ticket.
     *
     * @return A formatted string describing the ticket.
     */
    @Override
    public String toString() {
        return "Ticket #" + ticketId +
               " [Status: " + status +
               "] - Description: " + description;
    }
}

/**
 * Manages help desk tickets using a Queue for open tickets
 * and a List (ArrayList) for resolved tickets.
 */
class HelpDeskSystem {
    private Queue<Ticket> openTickets; // Queue for tickets waiting to be processed
    private List<Ticket> resolvedTickets; // List for tickets that have been resolved
    private int nextTicketId; // Counter for unique ticket IDs

    /**
     * Constructs a new HelpDeskSystem.
     */
    public HelpDeskSystem() {
        this.openTickets = new LinkedList<>(); // LinkedList implements Queue
        this.resolvedTickets = new ArrayList<>(); // ArrayList implements List
        this.nextTicketId = 1;
    }

    /**
     * Submits a new ticket to the system.
     * Performs basic validation on the description.
     *
     * @param description The description of the issue.
     */
    public void submitTicket(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return;
        }
        Ticket newTicket = new Ticket(nextTicketId++, description.trim());
        openTickets.offer(newTicket); // offer is preferred for queues
        System.out.println("Success: Ticket #" + newTicket.getTicketId() + " submitted.");
    }

    /**
     * Processes the next ticket in the queue (FIFO).
     * Moves the ticket from the open queue to the resolved list.
     * Prints an error to System.err if the queue is empty.
     */
    public void processNextTicket() {
        if (openTickets.isEmpty()) {
            System.err.println("Error: No open tickets to process.");
            return;
        }
        Ticket ticketToProcess = openTickets.poll(); // poll removes and returns the head
        ticketToProcess.setStatus("Resolved");
        resolvedTickets.add(ticketToProcess);
        System.out.println("Success: Ticket #" + ticketToProcess.getTicketId() + " processed.");
    }

    /**
     * Gets a list of currently open tickets.
     * Note: Returns a new ArrayList containing the elements of the queue
     * to represent the current state of the queue as a List.
     *
     * @return A List of open tickets.
     */
    public List<Ticket> getOpenTickets() {
        // Convert Queue elements to a List for viewing purposes
        return new ArrayList<>(openTickets);
    }

    /**
     * Gets a list of resolved tickets.
     *
     * @return A List of resolved tickets.
     */
    public List<Ticket> getResolvedTickets() {
        // resolvedTickets is already stored as a List (ArrayList)
        return resolvedTickets;
    }
}

/**
 * Main class to run the Help Desk Ticket Management System.
 * Handles user interaction and delegates tasks to HelpDeskSystem.
 * Includes class-wide exception handling.
 */
public class HelpDeskApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HelpDeskSystem helpDesk = new HelpDeskSystem();
        boolean running = true;

        // Class-wide exception handling block
        try {
            while (running) {
                // Display menu
                System.out.println("\n--- Help Desk System ---");
                System.out.println("1. Submit New Ticket");
                System.out.println("2. Process Next Ticket");
                System.out.println("3. View Open Tickets");
                System.out.println("4. View Resolved Tickets");
                System.out.println("5. Exit");
                System.out.print("Enter choice: ");

                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character after reading int
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration and show menu again
                }

                // Process user choice using switch
                switch (choice) {
                    case 1:
                        System.out.print("Enter ticket description: ");
                        String description = scanner.nextLine();
                        helpDesk.submitTicket(description);
                        break;
                    case 2:
                        helpDesk.processNextTicket();
                        break;
                    case 3:
                        System.out.println("\n--- Open Tickets ---");
                        List<Ticket> open = helpDesk.getOpenTickets(); // Get open tickets as a List
                        if (open.isEmpty()) {
                            System.out.println("No open tickets.");
                        } else {
                            // Iterate through the List and print tickets
                            for (Ticket ticket : open) {
                                System.out.println(ticket); // Uses Ticket's toString()
                            }
                        }
                        break;
                    case 4:
                        System.out.println("\n--- Resolved Tickets ---");
                        List<Ticket> resolved = helpDesk.getResolvedTickets(); // Get resolved tickets as a List
                        if (resolved.isEmpty()) {
                            System.out.println("No resolved tickets.");
                        } else {
                            // Iterate through the List and print tickets
                            for (Ticket ticket : resolved) {
                                System.out.println(ticket); // Uses Ticket's toString()
                            }
                        }
                        break;
                    case 5:
                        System.out.println("Exiting Help Desk System. Goodbye!");
                        running = false; // Set flag to exit the loop
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that occur within the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(System.err); // Uncomment for detailed debugging stack trace
        } finally {
            // Ensure the scanner resource is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }
}
