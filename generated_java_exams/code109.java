/*
 * Exam Question #109
 * Generated on: 2025-05-11 22:15:43
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Project Task Management System
 * 
 * **Scenario:**
 * You are tasked with developing a simple console-based application for managing projects and their associated tasks for a small team. Each project has a list of tasks that need to be completed. Tasks within a project are handled on a First-In, First-Out (FIFO) basis, meaning the task added earliest is the next one to be completed.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of `Project` objects using a `java.util.List` implementation (specifically, you must use `java.util.ArrayList`).
 *     *   Each `Project` object must maintain its tasks using a `java.util.Queue` implementation (e.g., `java.util.LinkedList`). Tasks should be processed in FIFO order.
 * 
 * 2.  **Classes:**
 *     *   Create a `Task` class (simple data holder for task description).
 *     *   Create a `Project` class that holds the project name and a `Queue<Task>`. It should have methods to add tasks and retrieve/remove the next task.
 *     *   Create a `TaskManager` class that holds the `List<Project>` and contains the main application logic.
 * 
 * 3.  **Functionality (Menu-Driven):** The application should present a menu to the user with the following options:
 *     *   **1. Add New Project:** Prompt for a project name and add a new `Project` to the list.
 *     *   **2. Add Task to Project:** Prompt for a project name and a task description. Find the project and add the task to its queue.
 *     *   **3. View Tasks in Project:** Prompt for a project name. Find the project and list all tasks currently in its queue (without removing them). Display them in their current order in the queue.
 *     *   **4. Complete Next Task in Project:** Prompt for a project name. Find the project and remove the next task from its queue (FIFO). Report which task was completed.
 *     *   **5. Exit:** Terminate the application.
 * 
 * 4.  **Input Handling:**
 *     *   Use `java.util.Scanner` to read user input (menu choices, project names, task descriptions).
 *     *   Handle potential `InputMismatchException` if the user enters non-integer input for the menu choice.
 *     *   Handle cases where a project name entered by the user does not exist.
 * 
 * 5.  **Output and Error Reporting:**
 *     *   Use `System.out` for displaying the menu, successful operations (project added, task added, task completed), and listing tasks.
 *     *   Use `java.lang.System.err` to report errors (e.g., invalid menu choice, project not found, attempting to complete a task from an empty queue).
 * 
 * 6.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options.
 *     *   Use a loop to keep the application running until the user chooses to exit.
 * 
 * 7.  **Exception Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle errors like invalid input or attempting operations on non-existent projects/empty queues.
 * 
 * 8.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (basic Javadoc or inline comments explaining logic).
 *     *   Ensure code is clean and well-structured.
 * 
 * **Expected Interaction:**
 * 
 * ```
 * --- Task Management System ---
 * 1. Add New Project
 * 2. Add Task to Project
 * 3. View Tasks in Project
 * 4. Complete Next Task in Project
 * 5. Exit
 * Enter your choice: 1
 * Enter project name: Website Redesign
 * Project 'Website Redesign' added.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 1
 * Enter project name: Mobile App Development
 * Project 'Mobile App Development' added.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Enter project name: Website Redesign
 * Enter task description: Design homepage layout
 * Task 'Design homepage layout' added to project 'Website Redesign'.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Enter project name: Website Redesign
 * Enter task description: Implement user authentication
 * Task 'Implement user authentication' added to project 'Website Redesign'.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 3
 * Enter project name: Website Redesign
 * Tasks for project 'Website Redesign':
 * - Design homepage layout
 * - Implement user authentication
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 4
 * Enter project name: Website Redesign
 * Completed task: 'Design homepage layout' from project 'Website Redesign'.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 3
 * Enter project name: Website Redesign
 * Tasks for project 'Website Redesign':
 * - Implement user authentication
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 4
 * Enter project name: Website Redesign
 * Completed task: 'Implement user authentication' from project 'Website Redesign'.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 4
 * Enter project name: Website Redesign
 * Error: No tasks left in project 'Website Redesign'.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 2
 * Enter project name: NonExistentProject
 * Error: Project 'NonExistentProject' not found.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: invalid_input
 * Error: Invalid input. Please enter a number.
 * 
 * --- Task Management System ---
 * ... (menu repeats) ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should provide the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System as requested, demonstrating the use of the specified Java components.
 * 
 * 1.  **`Task` Class:** A basic Plain Old Java Object (POJO) to hold the `description` of a task. It follows encapsulation principles with a private field and a public getter.
 * 
 * 2.  **`Project` Class:** Represents a project.
 *     *   It has a `private String name` for encapsulation.
 *     *   It uses a `private Queue<Task> tasks`. We instantiate this with `new LinkedList<>()` because `LinkedList` is a common implementation of the `Queue` interface and supports the required FIFO behavior efficiently.
 *     *   `addTask(Task task)` uses `tasks.offer(task)` to add a task to the end of the queue. `offer` is generally preferred over `add` in queue implementations when capacity constraints might be a concern (though `LinkedList` is unbounded), as it returns `false` instead of throwing an exception.
 *     *   `completeNextTask()` uses `tasks.poll()` to retrieve and remove the task at the head of the queue (the oldest task, adhering to FIFO). It returns `null` if the queue is empty, which is handled in the `TaskManager`.
 *     *   `getTasks()` provides access to the queue for viewing tasks without removing them. Iterating directly over the `Queue` (as done in `viewTasksInProject`) respects the insertion order for `LinkedList`.
 *     *   `isTaskQueueEmpty()` is a helper method for clarity.
 * 
 * 3.  **`TaskManager` Class:** This is the main class that orchestrates the application.
 *     *   It holds `private List<Project> projects`, specifically instantiated as `new ArrayList<>()`. This demonstrates using the `List` interface with the `ArrayList` implementation.
 *     *   It has a `private Scanner scanner` for handling user input.
 *     *   The `run()` method contains the main application loop (`while(running)`).
 *     *   `displayMenu()` prints the available options using `System.out`.
 *     *   `findProject(String projectName)` is a helper method to search for a project by name in the `projects` list.
 *     *   `addNewProject()`, `addTaskToProject()`, `viewTasksInProject()`, and `completeNextTaskInProject()` implement the core functionalities, interacting with the user via `Scanner` and `System.out`, and manipulating the `projects` list and the tasks within `Project` objects.
 *     *   Input validation (checking for empty names/descriptions) is included.
 *     *   Error conditions (project not found, empty queue) are reported using `System.err`.
 * 
 * 4.  **Control Flow (`switch` and Loop):**
 *     *   The `while(running)` loop keeps the application active until the user chooses option 5.
 *     *   A `switch` statement on the `choice` variable directs execution to the appropriate method based on the user's menu selection.
 *     *   The `default` case in the `switch` handles invalid integer inputs (outside 1-5).
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch (InputMismatchException e)` block is wrapped around the `scanner.nextInt()` call. This specifically catches the error if the user enters text instead of a number for the menu choice.
 *     *   A general `catch (Exception e)` is included as a fallback to catch any other unexpected runtime errors that might occur within the loop, preventing the application from crashing abruptly. Error messages from these catches are printed to `System.err`.
 *     *   The `scanner.nextLine()` calls after reading integers or within catch blocks are crucial to consume the leftover newline character and prevent input issues in subsequent `scanner.nextLine()` calls.
 * 
 * 6.  **System.out and System.err:**
 *     *   `System.out.println()` is used for standard informational messages, menu display, and successful operation confirmations.
 *     *   `System.err.println()` is used exclusively for reporting errors or invalid actions, as required.
 * 
 * 7.  **Best Practices:**
 *     *   Fields (`name`, `tasks`, `projects`, `scanner`) are `private`.
 *     *   Methods that need to be called from outside the class (`addTask`, `completeNextTask`, `run`, `main`) are `public`. Helper methods (`findProject`, `displayMenu`, etc.) are `private`.
 *     *   Variable and method names are descriptive (`projectName`, `addTaskToProject`, `completeNextTask`).
 *     *   Basic comments explain the purpose of classes and key methods.
 *     *   The code is structured into logical classes with clear responsibilities.
 *     *   The `Scanner` is closed when the application exits to release system resources.
 * 
 * This solution effectively combines the required Java components to build a functional, albeit simple, real-world-simulating application, demonstrating understanding of data structures, object-oriented programming, user input handling, control flow, and robust error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single task with a description.
class Task {
    private String description;

    /**
     * Constructs a Task object.
     * @param description The description of the task.
     */
    public Task(String description) {
        this.description = description;
    }

    /**
     * Gets the task description.
     * @return The description of the task.
     */
    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return description;
    }
}

// Represents a project containing a queue of tasks.
class Project {
    private String name;
    private Queue<Task> tasks; // Use Queue for FIFO task management

    /**
     * Constructs a Project object.
     * @param name The name of the project.
     */
    public Project(String name) {
        this.name = name;
        this.tasks = new LinkedList<>(); // LinkedList implements Queue
    }

    /**
     * Gets the project name.
     * @return The name of the project.
     */
    public String getName() {
        return name;
    }

    /**
     * Adds a task to the project's task queue.
     * @param task The task to add.
     */
    public void addTask(Task task) {
        tasks.offer(task); // offer is preferred over add for queues (returns false instead of throwing exception on capacity constraint, though LinkedList is unbounded)
    }

    /**
     * Retrieves and removes the next task from the queue (FIFO).
     * @return The next task, or null if the queue is empty.
     */
    public Task completeNextTask() {
        return tasks.poll(); // poll retrieves and removes the head of the queue, returns null if empty
    }

    /**
     * Gets the queue of tasks.
     * Note: Returning the queue allows viewing tasks without removing.
     * @return The queue of tasks.
     */
    public Queue<Task> getTasks() {
        return tasks;
    }

    /**
     * Checks if the project has any tasks.
     * @return true if the task queue is empty, false otherwise.
     */
    public boolean isTaskQueueEmpty() {
        return tasks.isEmpty();
    }
}

// Manages the list of projects and handles user interaction.
public class TaskManager {
    // Use List interface with ArrayList implementation for projects
    private List<Project> projects;
    private Scanner scanner;

    /**
     * Constructs a TaskManager object.
     * Initializes the project list and scanner.
     */
    public TaskManager() {
        this.projects = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Finds a project by name in the project list.
     * @param projectName The name of the project to find.
     * @return The Project object if found, null otherwise.
     */
    private Project findProject(String projectName) {
        for (Project project : projects) {
            if (project.getName().equalsIgnoreCase(projectName.trim())) {
                return project;
            }
        }
        return null;
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Management System ---");
        System.out.println("1. Add New Project");
        System.out.println("2. Add Task to Project");
        System.out.println("3. View Tasks in Project");
        System.out.println("4. Complete Next Task in Project");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new project based on user input.
     */
    private void addNewProject() {
        System.out.print("Enter project name: ");
        String projectName = scanner.nextLine().trim();
        if (projectName.isEmpty()) {
            System.err.println("Error: Project name cannot be empty.");
            return;
        }
        if (findProject(projectName) != null) {
             System.err.println("Error: Project '" + projectName + "' already exists.");
             return;
        }
        Project newProject = new Project(projectName);
        projects.add(newProject);
        System.out.println("Project '" + projectName + "' added.");
    }

    /**
     * Adds a task to an existing project based on user input.
     */
    private void addTaskToProject() {
        System.out.print("Enter project name: ");
        String projectName = scanner.nextLine().trim();
        Project project = findProject(projectName);

        if (project == null) {
            System.err.println("Error: Project '" + projectName + "' not found.");
            return;
        }

        System.out.print("Enter task description: ");
        String taskDescription = scanner.nextLine().trim();
         if (taskDescription.isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }

        Task newTask = new Task(taskDescription);
        project.addTask(newTask);
        System.out.println("Task '" + taskDescription + "' added to project '" + projectName + "'.");
    }

    /**
     * Views all tasks in a project's queue without removing them.
     */
    private void viewTasksInProject() {
        System.out.print("Enter project name: ");
        String projectName = scanner.nextLine().trim();
        Project project = findProject(projectName);

        if (project == null) {
            System.err.println("Error: Project '" + projectName + "' not found.");
            return;
        }

        System.out.println("Tasks for project '" + projectName + "':");
        Queue<Task> tasks = project.getTasks();
        if (tasks.isEmpty()) {
            System.out.println("(No tasks)");
        } else {
            // Iterate through the queue to display tasks
            for (Task task : tasks) {
                System.out.println("- " + task.getDescription());
            }
        }
    }

    /**
     * Completes (removes) the next task from a project's queue.
     */
    private void completeNextTaskInProject() {
        System.out.print("Enter project name: ");
        String projectName = scanner.nextLine().trim();
        Project project = findProject(projectName);

        if (project == null) {
            System.err.println("Error: Project '" + projectName + "' not found.");
            return;
        }

        Task completedTask = project.completeNextTask(); // Uses poll()

        if (completedTask == null) {
            System.err.println("Error: No tasks left in project '" + projectName + "'.");
        } else {
            System.out.println("Completed task: '" + completedTask.getDescription() + "' from project '" + projectName + "'.");
        }
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            int choice = -1; // Default to an invalid choice

            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        addNewProject();
                        break;
                    case 2:
                        addTaskToProject();
                        break;
                    case 3:
                        viewTasksInProject();
                        break;
                    case 4:
                        completeNextTaskInProject();
                        break;
                    case 5:
                        System.out.println("Exiting Task Management System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Catch non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }
        scanner.close(); // Close the scanner when the application exits
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run();
    }
}
