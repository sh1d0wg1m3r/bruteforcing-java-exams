/*
 * Exam Question #345
 * Generated on: 2025-05-11 22:58:12
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based application for a hospital to manage patient registrations and appointment requests. The system should allow users to register new patients, submit appointment requests for existing patients, and view a patient's basic information. The system should handle user input, manage patient data, and maintain a queue of pending appointment requests.
 * 
 * **Requirements:**
 * 
 * Implement a Java console application that fulfills the following requirements:
 * 
 * 1.  **Patient Management:**
 *     *   Maintain a list of registered patients. Each patient should have a unique ID (String), name (String), and age (int).
 *     *   Implement a mechanism to register new patients, ensuring the ID is unique.
 * 2.  **Appointment Requests:**
 *     *   Allow users to submit an appointment request for a registered patient.
 *     *   Maintain a queue of pending appointment requests. Each request should be associated with a patient ID and a brief description (e.g., "General Checkup", "Consultation with Dr. Smith").
 * 3.  **Patient Status View:**
 *     *   Allow users to look up a patient by their ID and display their registered information.
 * 4.  **User Interface:**
 *     *   Provide a simple text-based menu with options:
 *         1.  Register Patient
 *         2.  Book Appointment Request
 *         3.  View Patient Status
 *         4.  Exit
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient/appointment details.
 *     *   Use a `switch` statement to handle the different menu options.
 * 5.  **Data Structures:**
 *     *   Use `java.util.ArrayList` to store the list of `Patient` objects. Declare the variable using the `java.util.List` interface.
 *     *   Use `java.util.Queue` (specifically, an implementation like `java.util.LinkedList`) to store `AppointmentRequest` objects.
 * 6.  **Error Handling:**
 *     *   Implement input validation (e.g., ensuring age is positive, patient ID exists).
 *     *   Use `System.err` to print error messages (e.g., invalid menu choice, patient not found, duplicate patient ID).
 *     *   Use `System.out` for all normal output (menu, prompts, successful actions, patient details).
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, especially related to input processing.
 * 7.  **Object-Oriented Design:**
 *     *   Create separate classes for `Patient` and `AppointmentRequest` with appropriate private fields, public getters, and potentially a constructor.
 *     *   Create a main application class (e.g., `HospitalSystem`) to manage the patient list, appointment queue, and user interaction logic.
 *     *   Apply principles of encapsulation.
 * 8.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments or JavaDocs.
 *     *   Structure the code cleanly.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu, accepting input, performing actions, and providing feedback or error messages via `System.out` or `System.err` as appropriate.
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * --- Hospital System Menu ---
 * 1. Register Patient
 * 2. Book Appointment Request
 * 3. View Patient Status
 * 4. Exit
 * Enter your choice: 1
 * Enter Patient ID: P001
 * Enter Patient Name: Alice Smith
 * Enter Patient Age: 30
 * Patient P001 registered successfully.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter Patient ID for appointment: P001
 * Enter Appointment Description: General Checkup
 * Appointment request for P001 added to queue.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Enter Patient ID to view: P001
 * Patient ID: P001
 * Name: Alice Smith
 * Age: 30
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Enter Patient ID to view: P999
 * Error: Patient with ID P999 not found.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 5
 * Error: Invalid menu choice. Please enter a number between 1 and 4.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 4
 * Exiting Hospital System.
 * ```
 * 
 * **Constraint:** You MUST use `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and class-wide `try-catch` blocks as specified.
 *
 * EXPLANATION:
 * This solution implements a basic hospital appointment management system demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` class encapsulates patient data (`id`, `name`, `age`) with private fields and public getters, adhering to encapsulation.
 *     *   `AppointmentRequest` class encapsulates appointment request data (`patientId`, `description`).
 *     *   `HospitalSystem` class acts as the main application controller, holding the data structures (`patientList`, `appointmentQueue`) and managing the application logic (menu, user interaction, operations).
 * 
 * 2.  **Data Structures:**
 *     *   `List<Patient> patientList = new ArrayList<>();`: An `ArrayList` is used to store `Patient` objects, allowing dynamic resizing and efficient access/iteration. The variable is declared using the `List` interface, which is good practice as it allows flexibility to change the underlying implementation (e.g., to `LinkedList` if different performance characteristics were needed) without changing the code that uses the `List` methods.
 *     *   `Queue<AppointmentRequest> appointmentQueue = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface. This is suitable for managing a queue of requests where elements are added to the end (`offer`) and would typically be processed from the front (`poll`, though processing isn't fully implemented in this basic example, the structure is there). The variable is declared using the `Queue` interface.
 * 
 * 3.  **User Interaction (`Scanner`, `Switch`, `System.out`, `System.err`):**
 *     *   `Scanner scanner = new Scanner(System.in);`: A `Scanner` is used to read input from the console (`System.in`).
 *     *   `System.out.println(...)`: Used for printing the menu, prompts, successful operation messages, and patient details.
 *     *   `System.err.println(...)`: Used specifically for printing error messages, such as invalid menu choices, validation failures, and patient not found errors. This distinguishes error output from normal output.
 *     *   `switch (choice)`: Controls the flow of the application based on the user's menu selection, directing execution to the appropriate method (`registerPatient`, `bookAppointment`, `viewPatientStatus`, or exit). The `default` case handles invalid numerical input within the menu range.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   Input validation is performed within methods (`registerPatient`, `bookAppointment`) to check for empty strings, non-positive age, and duplicate patient IDs.
 *     *   `System.err` is used to report these validation errors.
 *     *   `try-catch` blocks are used in `getUserChoice` and `registerPatient` to catch `InputMismatchException` if the user enters non-integer input where a number is expected. The invalid input is consumed (`scanner.next()`) to prevent infinite loops.
 *     *   **Class-wide Exception Handling:** A large `try-catch (Exception e)` block wraps the main `while` loop in the `run()` method. This demonstrates a form of class-wide handling for unexpected exceptions that might occur during the execution of the main program loop, preventing the application from crashing abruptly. A `finally` block ensures the `Scanner` is closed resources are released.
 * 
 * 5.  **Methods and Logic:**
 *     *   `run()`: Contains the main application loop, prints the menu, gets user input, and uses the `switch` statement. It also houses the main `try-catch` block.
 *     *   `registerPatient()`: Prompts for patient details, performs input validation (empty fields, positive age, duplicate ID), creates a `Patient` object, and adds it to the `patientList` (an `ArrayList` used as a `List`).
 *     *   `bookAppointment()`: Prompts for patient ID, uses `findPatientById` to locate the patient, prompts for description, performs validation, creates an `AppointmentRequest` object, and adds it to the `appointmentQueue` (a `LinkedList` used as a `Queue`).
 *     *   `viewPatientStatus()`: Prompts for patient ID, uses `findPatientById` to locate the patient, and prints the patient's details using `System.out`. It also includes an optional check to see if the patient has a request currently in the queue using the `stream().anyMatch()` method.
 *     *   `findPatientById()`: A helper method to search the `patientList` (using iteration over the `List` interface) for a patient with a matching ID.
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names (`patientList`, `appointmentQueue`, `registerPatient`, `findPatientById`, `Patient`, `AppointmentRequest`).
 *     *   Encapsulation via private fields and public getters.
 *     *   Comments explain the purpose of classes and key methods/sections.
 *     *   Code is structured logically into methods corresponding to menu actions.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrating understanding of data structures, control flow, object-oriented principles, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient
class Patient {
    private String id;
    private String name;
    private int age;

    // Constructor
    public Patient(String id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    // Getters
    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    // Optional: Override toString for easy printing
    @Override
    public String toString() {
        return "Patient ID: " + id + "\nName: " + name + "\nAge: " + age;
    }
}

// Represents a request for an appointment
class AppointmentRequest {
    private String patientId;
    private String description;

    // Constructor
    public AppointmentRequest(String patientId, String description) {
        this.patientId = patientId;
        this.description = description;
    }

    // Getters
    public String getPatientId() {
        return patientId;
    }

    public String getDescription() {
        return description;
    }

    // Optional: Override toString for easy printing
    @Override
    public String toString() {
        return "Appointment Request for Patient ID: " + patientId + ", Description: " + description;
    }
}

// Main class to manage the hospital system
public class HospitalSystem {

    // Use List interface, implemented by ArrayList
    private List<Patient> patientList;
    // Use Queue interface, implemented by LinkedList
    private Queue<AppointmentRequest> appointmentQueue;
    private Scanner scanner;

    // Constructor
    public HospitalSystem() {
        patientList = new ArrayList<>(); // Use ArrayList for patient storage
        appointmentQueue = new LinkedList<>(); // Use LinkedList as a Queue for requests
        scanner = new Scanner(System.in); // Initialize Scanner for input
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run(); // Start the main application loop
    }

    // Main application loop and menu handling
    public void run() {
        boolean running = true;
        // Class-wide try-catch block to handle exceptions during the main loop
        try {
            while (running) {
                printMenu();
                int choice = getUserChoice();

                // Use switch statement for flow control
                switch (choice) {
                    case 1:
                        registerPatient();
                        break;
                    case 2:
                        bookAppointment();
                        break;
                    case 3:
                        viewPatientStatus();
                        break;
                    case 4:
                        running = false; // Exit the loop
                        System.out.println("Exiting Hospital System.");
                        break;
                    default:
                        // Use System.err for invalid input errors
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 4.");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Prints the main menu
    private void printMenu() {
        System.out.println("--- Hospital System Menu ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Book Appointment Request");
        System.out.println("3. View Patient Status");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    // Gets user's menu choice with input validation
    private int getUserChoice() {
        int choice = -1;
        try {
            choice = scanner.nextInt();
        } catch (InputMismatchException e) {
            // Handle non-integer input
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.next(); // Consume the invalid input to prevent infinite loop
        }
        return choice;
    }

    // Registers a new patient
    private void registerPatient() {
        System.out.println("\n--- Register Patient ---");
        System.out.print("Enter Patient ID: ");
        String id = scanner.next(); // Read ID

        // Input validation: Check if ID is empty
        if (id == null || id.trim().isEmpty()) {
            System.err.println("Error: Patient ID cannot be empty.");
            return;
        }

        // Check for duplicate ID
        if (findPatientById(id) != null) {
            System.err.println("Error: Patient with ID " + id + " already exists.");
            return;
        }

        System.out.print("Enter Patient Name: ");
        scanner.nextLine(); // Consume the newline character left by next()
        String name = scanner.nextLine(); // Read full name

        // Input validation: Check if name is empty
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        System.out.print("Enter Patient Age: ");
        int age = -1;
        try {
            age = scanner.nextInt();
            // Input validation: Check if age is positive
            if (age <= 0) {
                System.err.println("Error: Patient age must be a positive number.");
                return;
            }
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for age. Please enter a number.");
            scanner.next(); // Consume the invalid input
            return;
        }

        // Create and add the new patient
        Patient newPatient = new Patient(id.trim(), name.trim(), age);
        patientList.add(newPatient); // Add to the ArrayList (which is a List)
        System.out.println("Patient " + id.trim() + " registered successfully.");
    }

    // Books an appointment request for an existing patient
    private void bookAppointment() {
        System.out.println("\n--- Book Appointment Request ---");
        System.out.print("Enter Patient ID for appointment: ");
        String id = scanner.next(); // Read ID

        // Find the patient first
        Patient patient = findPatientById(id);

        if (patient == null) {
            // Use System.err for patient not found error
            System.err.println("Error: Patient with ID " + id + " not found.");
            return;
        }

        System.out.print("Enter Appointment Description: ");
        scanner.nextLine(); // Consume newline
        String description = scanner.nextLine(); // Read description

         // Input validation: Check if description is empty
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Appointment description cannot be empty.");
            return;
        }


        // Create and add the appointment request to the queue
        AppointmentRequest request = new AppointmentRequest(patient.getId(), description.trim());
        appointmentQueue.offer(request); // Add to the Queue
        System.out.println("Appointment request for " + patient.getName() + " (ID: " + patient.getId() + ") added to queue.");
    }

    // Views the status (details) of a patient
    private void viewPatientStatus() {
        System.out.println("\n--- View Patient Status ---");
        System.out.print("Enter Patient ID to view: ");
        String id = scanner.next(); // Read ID

        // Find the patient
        Patient patient = findPatientById(id);

        if (patient == null) {
            // Use System.err for patient not found error
            System.err.println("Error: Patient with ID " + id + " not found.");
            return;
        }

        // Display patient details using System.out
        System.out.println(patient);

        // Optional: Indicate if they have a pending request in the queue
        boolean hasPendingRequest = appointmentQueue.stream()
                                     .anyMatch(req -> req.getPatientId().equals(patient.getId()));
        if (hasPendingRequest) {
             System.out.println("Status: Has a pending appointment request in the queue.");
        } else {
             System.out.println("Status: No pending appointment requests in the queue.");
        }
    }

    // Helper method to find a patient by ID in the patientList
    private Patient findPatientById(String id) {
        if (id == null) return null;
        for (Patient patient : patientList) { // Iterate through the List (ArrayList)
            if (patient.getId().equals(id.trim())) {
                return patient;
            }
        }
        return null; // Patient not found
    }
}
