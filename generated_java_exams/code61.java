/*
 * Exam Question #61
 * Generated on: 2025-05-11 22:07:07
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Event Management System - Check-in Module
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a core module for an event management system responsible for attendee check-in. The system needs to manage a list of registered attendees and process arriving attendees through a check-in queue.
 * 
 * Your program should simulate the following workflow:
 * 1.  The system starts with a pre-defined list of registered attendees. Each attendee has a unique ID (integer) and a name.
 * 2.  Attendees arrive and are added to a waiting queue for check-in.
 * 3.  An operator processes attendees one by one from the front of the check-in queue.
 * 4.  Upon successful check-in, the attendee is marked as checked-in (or moved to a separate checked-in list).
 * 5.  The system should allow the operator to view the list of registered attendees, the current check-in queue, and the list of successfully checked-in attendees.
 * 
 * **Technical Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  Create an `Attendee` class with private fields for `id` (int) and `name` (String), and public getter methods. Ensure a proper constructor exists.
 * 2.  Create an `Event` class that manages the event's state. This class should contain:
 *     *   A private `List<Attendee>` (implemented using `ArrayList`) to store all registered attendees.
 *     *   A private `Queue<Attendee>` (implemented using a suitable `Queue` implementation like `LinkedList` or `ArrayDeque`) to store attendees waiting to check in.
 *     *   A private `List<Attendee>` (implemented using `ArrayList`) to store attendees who have successfully checked in.
 *     *   Methods to:
 *         *   Add a pre-defined list of registered attendees during initialization.
 *         *   Add an attendee to the check-in queue based on their registered ID.
 *         *   Process the next attendee from the check-in queue (move from queue to checked-in list).
 *         *   Retrieve the list of all registered attendees.
 *         *   Retrieve the current check-in queue (without removing elements).
 *         *   Retrieve the list of checked-in attendees.
 * 3.  Implement the main application logic in a class with a `main` method.
 * 4.  Use `java.util.Scanner` to get user input for selecting actions (e.g., add to queue, process queue, list attendees, exit).
 * 5.  Use a `switch` statement in the main loop to handle different user commands.
 * 6.  Display menu options and program output using `System.out`.
 * 7.  Display error messages (e.g., invalid attendee ID, queue is empty, invalid menu option) using `System.err`.
 * 8.  Implement comprehensive exception handling using `try-catch` blocks to manage potential issues like invalid input types or custom errors (e.g., attendee not found when trying to add to queue). This exception handling should cover the main operational loop.
 * 9.  Include appropriate comments and documentation (Javadocs where applicable).
 * 10. Use meaningful variable and method names.
 * 11. Ensure proper encapsulation within the `Attendee` and `Event` classes.
 * 12. Validate user input where necessary (e.g., checking if an attendee ID exists before adding to the queue).
 * 
 * **User Interaction:**
 * 
 * The program should present a menu like this:
 * 
 * ```
 * Event Check-in System Menu:
 * 1. List All Registered Attendees
 * 2. Add Attendee to Check-in Queue (by ID)
 * 3. Process Next Attendee from Queue
 * 4. List Current Check-in Queue
 * 5. List Checked-in Attendees
 * 6. Exit
 * Enter your choice:
 * ```
 * 
 * The program should loop, accepting user input and performing the selected action until the user chooses to exit.
 * 
 * **Expected Output Examples:**
 * 
 * *   Listing registered attendees: Print ID and Name for each.
 * *   Adding to queue: "Attendee [ID] - [Name] added to check-in queue." or "Error: Attendee with ID [ID] not found." (to `System.err`).
 * *   Processing queue: "Successfully checked in Attendee [ID] - [Name]." or "Error: Check-in queue is empty." (to `System.err`).
 * *   Listing queues/checked-in: Print ID and Name for each attendee in the respective list/queue.
 * *   Invalid input: "Error: Invalid input. Please enter a number." (to `System.err`).
 * *   Invalid choice: "Error: Invalid menu choice. Please enter a number between 1 and 6." (to `System.err`).
 * 
 * **Pre-defined Registered Attendees (for initialization):**
 * *   ID: 101, Name: Alice Wonderland
 * *   ID: 102, Name: Bob The Builder
 * *   ID: 103, Name: Charlie Chaplin
 * *   ID: 104, Name: Diana Prince
 * *   ID: 105, Name: Ethan Hunt
 * 
 * **Evaluation Criteria:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness and completeness of the implementation according to the requirements.
 * *   Effective and appropriate use of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Adherence to object-oriented principles (encapsulation).
 * *   Code clarity, readability, comments, and naming conventions.
 * *   Robustness through input validation and error handling.
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * The provided solution implements a simple Event Check-in System that demonstrates the required Java concepts in a practical scenario.
 * 
 * **Core Components and Their Usage:**
 * 
 * 1.  **`Attendee` Class:** A simple class encapsulating attendee data (`id` and `name`). It follows encapsulation principles with private fields and public getters. The `toString()` method is overridden for easy printing.
 * 2.  **`Event` Class:** This is the central class managing the state of the event check-in.
 *     *   `List<Attendee> registeredAttendees`: An `ArrayList` is used to store the initial, fixed list of registered attendees. `ArrayList` is suitable here for efficient storage and retrieval by iterating. Declared as `List` interface for better programming practice.
 *     *   `Queue<Attendee> checkInQueue`: A `LinkedList` is used to implement the `Queue` interface. `LinkedList` is a common choice for queues as it provides efficient add/remove operations at both ends. Attendees are added (`offer`) when they "arrive" and removed (`poll`) when they are "processed".
 *     *   `List<Attendee> checkedInAttendees`: Another `ArrayList` is used to store attendees who have successfully checked in. Declared as `List` interface.
 *     *   Methods like `addAttendeeToCheckInQueue` and `processNextAttendeeFromQueue` encapsulate the logic for modifying the queue and lists.
 * 3.  **`EventCheckInSystem` Class (Main):** This class contains the `main` method where the application execution begins.
 *     *   `Scanner`: An instance of `Scanner` is used to read user input from the console (`System.in`).
 *     *   `switch` statement: Used in the main `while` loop to control the program flow based on the user's menu choice, directing execution to different helper methods or `Event` class methods.
 *     *   `System.out`: Used for displaying the menu, success messages, and lists of attendees/queues.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid input, attendee not found, or queue empty conditions.
 *     *   `try-catch`: A comprehensive `try-catch` block wraps the core logic within the main loop.
 *         *   It specifically catches `InputMismatchException` which can occur if the user enters non-integer input when an integer is expected by `scanner.nextInt()`.
 *         *   It catches `IllegalArgumentException` and `IllegalStateException` which are custom exceptions thrown by the `Event` class methods (`addAttendeeToCheckInQueue` and `processNextAttendeeFromQueue` respectively) to signal specific business rule violations (attendee not registered, queue is empty).
 *         *   A general `Exception` catch is included as a fallback for any other unexpected runtime errors, printing the error message and stack trace to `System.err`.
 * 4.  **Input Validation and Error Handling:**
 *     *   When adding an attendee to the queue, the `Event` class's `findRegisteredAttendeeById` method validates if the ID exists. If not, `addAttendeeToCheckInQueue` throws an `IllegalArgumentException`.
 *     *   When processing the queue, `processNextAttendeeFromQueue` checks if the queue is empty using the result of `poll()`. If it's null, it throws an `IllegalStateException`.
 *     *   The `main` method's `try-catch` handles these exceptions and prints informative messages to `System.err`.
 *     *   The `main` method also handles `InputMismatchException` for invalid integer input from the user.
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** `Attendee` and `Event` classes hide their internal state and expose functionality through public methods.
 *     *   **Meaningful Names:** Class names (`Attendee`, `Event`, `EventCheckInSystem`), variable names (`registeredAttendees`, `checkInQueue`, `checkedInAttendees`, `attendeeId`, `choice`), and method names (`addAttendeeToCheckInQueue`, `processNextAttendeeFromQueue`, `listAttendees`) are descriptive.
 *     *   **Comments/Documentation:** Javadoc comments explain the purpose of classes and methods, while inline comments clarify specific code sections.
 *     *   **Clean Structure:** The logic is separated into distinct classes and methods, making the code organized and easier to understand. The `main` method focuses on the main loop and delegation. Helper methods like `printMenu` and `listAttendees` improve readability.
 * 
 * This solution effectively integrates the required Java components to build a functional, albeit simple, simulation of an event check-in process, demonstrating key object-oriented design principles and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents an attendee for an event.
 */
class Attendee {
    private final int id;
    private final String name;

    /**
     * Constructs an Attendee object.
     * @param id The unique ID of the attendee.
     * @param name The name of the attendee.
     */
    public Attendee(int id, String name) {
        this.id = id;
        this.name = name;
    }

    /**
     * Gets the attendee's ID.
     * @return The attendee ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the attendee's name.
     * @return The attendee name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name;
    }

    // Optional: hashCode and equals if needed for Set or Map operations,
    // but not strictly required by the problem description for List/Queue usage.
}

/**
 * Manages the state and operations for an event's check-in process.
 */
class Event {
    private final List<Attendee> registeredAttendees; // All registered attendees
    private final Queue<Attendee> checkInQueue;      // Attendees waiting to check in
    private final List<Attendee> checkedInAttendees;  // Attendees who have checked in

    /**
     * Constructs an Event object and initializes with registered attendees.
     */
    public Event() {
        this.registeredAttendees = new ArrayList<>();
        this.checkInQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.checkedInAttendees = new ArrayList<>();

        // Add pre-defined registered attendees
        registeredAttendees.add(new Attendee(101, "Alice Wonderland"));
        registeredAttendees.add(new Attendee(102, "Bob The Builder"));
        registeredAttendees.add(new Attendee(103, "Charlie Chaplin"));
        registeredAttendees.add(new Attendee(104, "Diana Prince"));
        registeredAttendees.add(new Attendee(105, "Ethan Hunt"));
    }

    /**
     * Finds a registered attendee by their ID.
     * @param id The ID of the attendee to find.
     * @return The Attendee object if found, null otherwise.
     */
    private Attendee findRegisteredAttendeeById(int id) {
        for (Attendee attendee : registeredAttendees) {
            if (attendee.getId() == id) {
                return attendee;
            }
        }
        return null; // Attendee not found
    }

    /**
     * Adds a registered attendee to the check-in queue based on their ID.
     * @param attendeeId The ID of the attendee to add to the queue.
     * @throws IllegalArgumentException if the attendee ID is not found in the registered list.
     */
    public void addAttendeeToCheckInQueue(int attendeeId) {
        Attendee attendee = findRegisteredAttendeeById(attendeeId);
        if (attendee != null) {
            // Optional: Could add a check here to prevent adding someone already in queue or checked in
            checkInQueue.offer(attendee); // offer is generally preferred over add for queues
            System.out.println("Attendee " + attendee.getId() + " - " + attendee.getName() + " added to check-in queue.");
        } else {
            throw new IllegalArgumentException("Attendee with ID " + attendeeId + " not found in registered list.");
        }
    }

    /**
     * Processes the next attendee from the check-in queue, moving them to the checked-in list.
     * @throws IllegalStateException if the check-in queue is empty.
     */
    public void processNextAttendeeFromQueue() {
        Attendee nextAttendee = checkInQueue.poll(); // poll retrieves and removes the head
        if (nextAttendee != null) {
            checkedInAttendees.add(nextAttendee);
            System.out.println("Successfully checked in Attendee " + nextAttendee.getId() + " - " + nextAttendee.getName() + ".");
        } else {
            throw new IllegalStateException("Check-in queue is empty. No one to process.");
        }
    }

    /**
     * Gets the list of all registered attendees.
     * @return An unmodifiable view of the registered attendees list.
     */
    public List<Attendee> getAllRegisteredAttendees() {
        // Return a copy or unmodifiable list to prevent external modification
        return new ArrayList<>(registeredAttendees);
    }

    /**
     * Gets the current check-in queue.
     * @return An unmodifiable view of the check-in queue.
     */
    public List<Attendee> getCheckInQueue() {
        // Convert queue to list for easy viewing without modifying the queue
        return new ArrayList<>(checkInQueue);
    }

    /**
     * Gets the list of checked-in attendees.
     * @return An unmodifiable view of the checked-in attendees list.
     */
    public List<Attendee> getCheckedInAttendees() {
        // Return a copy or unmodifiable list
        return new ArrayList<>(checkedInAttendees);
    }
}

/**
 * Main application class for the Event Check-in System.
 */
public class EventCheckInSystem {

    private static final Scanner scanner = new Scanner(System.in);
    private static final Event event = new Event();

    public static void main(String[] args) {
        System.out.println("--- Event Check-in System ---");

        boolean running = true;
        while (running) {
            printMenu();

            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Class-wide exception handling for the main loop operations
                try {
                    switch (choice) {
                        case 1:
                            listAttendees(event.getAllRegisteredAttendees(), "Registered Attendees");
                            break;
                        case 2:
                            addAttendeeToQueue();
                            break;
                        case 3:
                            processNextInQueue();
                            break;
                        case 4:
                            listAttendees(event.getCheckInQueue(), "Current Check-in Queue");
                            break;
                        case 5:
                            listAttendees(event.getCheckedInAttendees(), "Checked-in Attendees");
                            break;
                        case 6:
                            System.out.println("Exiting system. Goodbye!");
                            running = false;
                            break;
                        default:
                            System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 6.");
                    }
                } catch (IllegalArgumentException | IllegalStateException e) {
                    // Catch specific exceptions thrown by Event methods
                    System.err.println("Operation failed: " + e.getMessage());
                }

            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace for debugging
            }
            System.out.println(); // Add a newline for better readability between interactions
        }

        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Event Check-in System Menu:");
        System.out.println("1. List All Registered Attendees");
        System.out.println("2. Add Attendee to Check-in Queue (by ID)");
        System.println("3. Process Next Attendee from Queue");
        System.out.println("4. List Current Check-in Queue");
        System.out.println("5. List Checked-in Attendees");
        System.out.println("6. Exit");
    }

    /**
     * Prompts user for attendee ID and adds the attendee to the check-in queue.
     */
    private static void addAttendeeToQueue() {
        System.out.print("Enter Attendee ID to add to queue: ");
        try {
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            event.addAttendeeToCheckInQueue(id);
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a valid integer ID.");
            scanner.nextLine(); // Consume invalid input
        }
        // IllegalArgumentException from event.addAttendeeToCheckInQueue is caught in the main loop's try-catch
    }

    /**
     * Processes the next attendee waiting in the check-in queue.
     */
    private static void processNextInQueue() {
        // IllegalStateException from event.processNextAttendeeFromQueue is caught in the main loop's try-catch
        event.processNextAttendeeFromQueue();
    }

    /**
     * Prints a list of attendees with a given title.
     * @param attendees The list of attendees to print.
     * @param title The title for the list.
     */
    private static void listAttendees(List<Attendee> attendees, String title) {
        System.out.println("--- " + title + " ---");
        if (attendees.isEmpty()) {
            System.out.println("No attendees in this list.");
        } else {
            for (Attendee attendee : attendees) {
                System.out.println(attendee);
            }
        }
        System.out.println("-----------------------");
    }
}
