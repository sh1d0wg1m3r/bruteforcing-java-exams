/*
 * Exam Question #1068
 * Generated on: 2025-05-12 17:20:24
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Help Desk Ticket Management System
 * 
 * **Problem Description:**
 * 
 * Design and implement a console-based Help Desk Ticket Management system. The system should allow users to submit new support tickets, process the next available ticket, view currently active tickets, and view archived (completed) tickets.
 * 
 * The system must manage active tickets in a queue, processing them in the order they were submitted. Completed tickets are moved to an archive list.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store active support tickets.
 *     *   Use an `ArrayList` to store archived (completed) tickets.
 *     *   Declare the variable holding the archived tickets using the `List` interface type.
 * 2.  **User Interaction:**
 *     *   Use `Scanner` to get user input from the console.
 *     *   Provide a menu with the following options:
 *         *   Submit New Ticket
 *         *   Process Next Ticket
 *         *   List Active Tickets
 *         *   List Archived Tickets
 *         *   Exit
 * 3.  **Flow Control:**
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, ticket information, and confirmation messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, trying to process a ticket when none are available).
 * 5.  **Error Handling:**
 *     *   Implement class-wide or method-specific exception handling using `try-catch` blocks, particularly around input operations and operations that might fail (like processing from an empty queue).
 *     *   Validate user input where appropriate (e.g., ensuring ticket description is not empty, handling non-integer input for menu choice).
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Ticket` class to represent a single support ticket. It should store at least a description and completion status. Use proper encapsulation (private fields, public getters/setters or methods).
 *     *   Create a `HelpDesk` class that manages the `Queue` of active tickets and the `List` of archived tickets. This class should contain methods for submitting, processing, and listing tickets. Use proper encapsulation.
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Ensure resources like `Scanner` are closed properly.
 * 
 * **Expected Output:**
 * 
 * The program should run in a loop, presenting the menu, accepting input, performing the requested action, and displaying results or errors until the user chooses to exit.
 * 
 * Example Interaction:
 * 
 * ```
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: Printer not working
 * Ticket submitted: Printer not working
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description:
 * Error: Ticket description cannot be empty.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Active Tickets ---
 * 1. Printer not working
 * ----------------------
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 2
 * Processing ticket: Printer not working
 * Ticket archived.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Active Tickets ---
 * (No active tickets)
 * ----------------------
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 4
 * --- Archived Tickets ---
 * 1. Printer not working (Completed)
 * ----------------------
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 2
 * Error: No active tickets to process.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Help Desk Menu ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. List Active Tickets
 * 4. List Archived Tickets
 * 5. Exit
 * Enter your choice: 5
 * Exiting Help Desk System. Goodbye!
 * ```
 * 
 * Your solution should consist of the necessary Java classes (`Ticket`, `HelpDesk`, and a main class for the application entry point) in a single code block.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Proper implementation of the Help Desk logic (submitting, processing, listing).
 * *   Adherence to object-oriented principles (encapsulation).
 * *   Effective error handling and input validation.
 * *   Code readability, comments, and adherence to best practices.
 *
 * EXPLANATION:
 * This solution implements a simple Help Desk Ticket Management system using the required Java components and best practices.
 * 
 * 1.  **`Ticket` Class:**
 *     *   Represents a single ticket with a `description` and a `completed` status.
 *     *   Uses private fields (`description`, `completed`) and public methods (`getDescription`, `isCompleted`, `markCompleted`), demonstrating **encapsulation**.
 *     *   The constructor includes basic **input validation** for the description.
 *     *   The `toString()` method is overridden for convenient printing.
 * 
 * 2.  **`HelpDesk` Class:**
 *     *   Manages the core logic and data structures.
 *     *   `ticketQueue`: A `Queue<Ticket>` (implemented using `LinkedList`) stores active tickets in FIFO order, fulfilling the `Queue` requirement.
 *     *   `archivedTickets`: A `List<Ticket>` (implemented using `ArrayList`) stores completed tickets, fulfilling the `ArrayList` and `List` interface requirements.
 *     *   `submitTicket(String description)`: Adds a new `Ticket` to the `ticketQueue` using `offer()`.
 *     *   `processNextTicket()`: Retrieves and removes the head of the `ticketQueue` using `poll()`. If a ticket is retrieved, it's marked completed and added to `archivedTickets`. It handles the case where the queue is empty, printing an error using `System.err`.
 *     *   `getActiveTickets()`: Returns a *new* `ArrayList` containing the current elements of the queue. This is a good practice to prevent external code from modifying the internal queue directly.
 *     *   `getArchivedTickets()`: Returns the `archivedTickets` list.
 * 
 * 3.  **`HelpDeskApp` Class (Main):**
 *     *   Contains the `main` method, which is the application entry point.
 *     *   Creates instances of `HelpDesk` and `Scanner`.
 *     *   Implements a main application loop (`while(running)`).
 *     *   **Class-wide exception handling:** A `try-catch` block wraps the main loop to catch unexpected `Exception`s.
 *     *   **Input Handling and Validation:**
 *         *   A nested `try-catch` specifically handles `InputMismatchException` when reading the menu choice, ensuring the program doesn't crash on non-integer input and informs the user using `System.err`.
 *         *   `scanner.nextLine()` is used after `scanner.nextInt()` to consume the remaining newline character.
 *         *   Ticket description validation is done in the `Ticket` constructor, and the `main` method catches the `IllegalArgumentException` and prints the error via `System.err`.
 *     *   **Flow Control:** A `switch` statement processes the user's `choice`, directing execution to the appropriate `HelpDesk` method or application logic.
 *     *   **Output:**
 *         *   `System.out.println()` is used for displaying the menu, ticket lists, and success messages.
 *         *   `System.err.println()` is used for displaying all error messages as required.
 *     *   **Resource Management:** The `Scanner` is closed in a `finally` block to ensure it's released regardless of whether an exception occurred.
 *     *   Helper method `printMenu()` keeps the `main` method cleaner.
 * 
 * This solution effectively demonstrates the required components within a practical scenario, incorporating essential programming practices like encapsulation, error handling, input validation, and clear code structure.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single support ticket.
 */
class Ticket {
    private String description;
    private boolean completed;

    /**
     * Constructs a new Ticket.
     * @param description The description of the issue.
     */
    public Ticket(String description) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Ticket description cannot be empty.");
        }
        this.description = description.trim();
        this.completed = false;
    }

    /**
     * Gets the description of the ticket.
     * @return The ticket description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Checks if the ticket is completed.
     * @return true if completed, false otherwise.
     */
    public boolean isCompleted() {
        return completed;
    }

    /**
     * Marks the ticket as completed.
     */
    public void markCompleted() {
        this.completed = true;
    }

    @Override
    public String toString() {
        return description + (completed ? " (Completed)" : "");
    }
}

/**
 * Manages the queue of active tickets and list of archived tickets.
 */
class HelpDesk {
    // Active tickets are processed in FIFO order
    private Queue<Ticket> ticketQueue;
    // Archived tickets are stored in a list
    private List<Ticket> archivedTickets;

    /**
     * Constructs a new HelpDesk system.
     */
    public HelpDesk() {
        this.ticketQueue = new LinkedList<>(); // LinkedList implements Queue
        this.archivedTickets = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Submits a new ticket to the queue.
     * @param description The description of the new ticket.
     * @throws IllegalArgumentException if the description is invalid.
     */
    public void submitTicket(String description) {
        Ticket newTicket = new Ticket(description); // Validation handled by Ticket constructor
        ticketQueue.offer(newTicket); // Add to the end of the queue
        System.out.println("Ticket submitted: " + newTicket.getDescription());
    }

    /**
     * Processes the next available ticket from the queue.
     * Marks the ticket as completed and moves it to the archive.
     * @return The processed ticket, or null if the queue was empty.
     */
    public Ticket processNextTicket() {
        Ticket nextTicket = ticketQueue.poll(); // Retrieve and remove the head of the queue
        if (nextTicket != null) {
            nextTicket.markCompleted();
            archivedTickets.add(nextTicket); // Add to the end of the archive list
            System.out.println("Processing ticket: " + nextTicket.getDescription());
            System.out.println("Ticket archived.");
        } else {
            System.err.println("Error: No active tickets to process.");
        }
        return nextTicket;
    }

    /**
     * Returns a list of currently active tickets (in the queue).
     * @return A new List containing active tickets.
     */
    public List<Ticket> getActiveTickets() {
        // Return a new list to avoid external modification of the internal queue
        return new ArrayList<>(ticketQueue);
    }

    /**
     * Returns the list of archived tickets.
     * @return The List of archived tickets.
     */
    public List<Ticket> getArchivedTickets() {
        return archivedTickets; // Returning the list directly is acceptable for this simple case
    }
}

/**
 * Main application class for the Help Desk Ticket Management System.
 * Handles user interaction and menu logic.
 */
public class HelpDeskApp {

    public static void main(String[] args) {
        HelpDesk helpDesk = new HelpDesk();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide try-catch block for general runtime exceptions
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Try-catch for reading integer input
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline character

                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip to the next loop iteration
                }

                // Switch statement for menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter ticket description: ");
                        String description = scanner.nextLine();
                        try {
                            helpDesk.submitTicket(description);
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;
                    case 2:
                        helpDesk.processNextTicket();
                        break;
                    case 3:
                        List<Ticket> active = helpDesk.getActiveTickets();
                        System.out.println("--- Active Tickets ---");
                        if (active.isEmpty()) {
                            System.out.println("(No active tickets)");
                        } else {
                            for (int i = 0; i < active.size(); i++) {
                                System.out.println((i + 1) + ". " + active.get(i).getDescription());
                            }
                        }
                        System.out.println("----------------------");
                        break;
                    case 4:
                        List<Ticket> archived = helpDesk.getArchivedTickets();
                        System.out.println("--- Archived Tickets ---");
                        if (archived.isEmpty()) {
                            System.out.println("(No archived tickets)");
                        } else {
                            for (int i = 0; i < archived.size(); i++) {
                                System.out.println((i + 1) + ". " + archived.get(i).toString()); // Use toString for completed status
                            }
                        }
                        System.out.println("----------------------");
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Help Desk System. Goodbye!");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Help Desk Menu ---");
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. List Active Tickets");
        System.out.println("4. List Archived Tickets");
        System.out.println("5. Exit");
    }
}
