/*
 * Exam Question #1025
 * Generated on: 2025-05-12 17:14:37
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam: Hospital Patient Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified patient management system for a small hospital clinic. The system needs to manage a waiting queue of patients and assign them to available doctors.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following:
 * 
 * 1.  **Core Functionality:**
 *     *   Patients arrive and are added to a waiting queue (First-In, First-Out).
 *     *   Doctors become available to see patients.
 *     *   When a doctor is available, the next patient from the waiting queue is called and assigned to that doctor.
 *     *   Doctors can finish seeing a patient, becoming available again.
 *     *   The system should allow listing the current waiting queue and the status of all doctors.
 * 
 * 2.  **Required Java Components:** Your solution *must* explicitly use and demonstrate understanding of the following:
 *     *   `java.util.Queue` (for the patient waiting list)
 *     *   `java.util.ArrayList` (to store the list of doctors)
 *     *   `java.util.List` interface (declare the list of doctors using the `List` interface type)
 *     *   `java.util.Scanner` (for all user input)
 *     *   `switch` statement (for the main menu navigation)
 *     *   `System.err` (for displaying error messages, e.g., invalid input, queue empty when trying to call patient, doctor not busy when trying to free them)
 *     *   `System.out` (for displaying normal output, e.g., menu, success messages, lists)
 *     *   Class-wide exception handling using `try-catch` blocks (specifically handling potential issues like invalid numeric input from Scanner and general runtime errors).
 * 
 * 3.  **Object-Oriented Design & Best Practices:**
 *     *   Create separate classes for `Patient`, `Doctor`, and the main `HospitalSystem`.
 *     *   Use proper encapsulation (private fields, public getter/setter methods where necessary).
 *     *   Use meaningful variable and method names.
 *     *   Include basic comments explaining the purpose of classes and key methods.
 *     *   Implement input validation for user choices (e.g., menu options, doctor selection).
 *     *   Handle errors gracefully using `System.err`.
 *     *   Ensure clean code structure.
 * 
 * **Implementation Details:**
 * 
 * *   **Patient:** Should have a unique ID and a name. The ID can be a simple auto-incrementing integer.
 * *   **Doctor:** Should have a name and a status (e.g., boolean `isBusy`). It should also potentially hold a reference to the `Patient` they are currently seeing (or null if free).
 * *   **HospitalSystem:** Should contain the `Queue` of waiting patients, the `List` of doctors, and methods for the system operations (add patient, call next patient, list doctors, free doctor, list waiting queue).
 * *   The main program loop should present a menu to the user:
 *     1.  Add Patient to Queue
 *     2.  Call Next Patient
 *     3.  List Doctors
 *     4.  Free Doctor
 *     5.  List Waiting Queue
 *     6.  Exit
 * *   Initialize the system with a few doctors.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input, and showing results or error messages based on user actions. Output should be clear and formatted using `System.out` for normal operations and `System.err` for errors.
 * 
 * For example:
 * 
 * ```
 * --- Hospital Management System ---
 * 1. Add Patient to Queue
 * 2. Call Next Patient
 * 3. List Doctors
 * 4. Free Doctor
 * 5. List Waiting Queue
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice (ID: 1) added to the waiting queue.
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 3
 * --- Doctor Status ---
 * Dr. Smith: Free
 * Dr. Jones: Free
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 2
 * Checking for available doctors...
 * Assigning Patient Alice (ID: 1) to Dr. Smith.
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 3
 * --- Doctor Status ---
 * Dr. Smith: Busy with Patient Alice (ID: 1)
 * Dr. Jones: Free
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 4
 * Select doctor to free:
 * 1. Dr. Smith (Busy)
 * 2. Dr. Jones (Free)
 * Enter doctor number: 1
 * Dr. Smith is now free.
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 5
 * --- Waiting Queue ---
 * Queue is empty.
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 7
 * Error: Invalid menu choice. Please enter a number between 1 and 6.
 * 
 * --- Hospital Management System ---
 * ... (menu again) ...
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Your task is to write the complete, well-structured Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a `HospitalPatientManagementApp` using a `HospitalSystem` class that orchestrates the interactions between `Patient` and `Doctor` objects. It effectively utilizes all the required Java components and follows best practices.
 * 
 * 1.  **`Patient` Class:** A simple class holding patient details (`id` and `name`). It includes a static counter (`nextId`) to ensure unique IDs are generated for each new patient, demonstrating a basic class-level concern. Encapsulation is used with private fields and public getters.
 * 
 * 2.  **`Doctor` Class:** Represents a doctor with a name, a boolean `isBusy` status, and a reference to the `currentPatient` they are seeing. Methods `assignPatient` and `freeDoctor` manage the doctor's state and the association with a patient. This class encapsulates the state and behavior of a doctor.
 * 
 * 3.  **`HospitalSystem` Class:** This is the central class managing the system's state and logic.
 *     *   **`Queue<Patient> waitingQueue`**: A `Queue` is used for the waiting list, specifically a `LinkedList` which implements the `Queue` interface. This correctly models the FIFO (First-In, First-Out) nature of a waiting line. `offer()` is used to add patients (safer than `add()`) and `poll()` is used to remove the next patient (safer than `remove()`).
 *     *   **`List<Doctor> doctors`**: An `ArrayList` is used to store the collection of doctors. It is declared using the `List` interface type (`List<Doctor> doctors = new ArrayList<>();`), fulfilling the requirement to use the `List` interface. `ArrayList` is suitable here as we need to access doctors by index (for freeing a specific doctor) and iterate through them.
 *     *   **`Scanner scanner`**: An instance of `Scanner` is passed into the `HospitalSystem` constructor and used within its methods to handle all user input related to hospital operations (adding patient names, selecting doctors).
 *     *   **Methods:** The class contains methods for each menu option (`addPatient`, `callNextPatient`, `listDoctors`, `freeDoctor`, `listWaitingQueue`), encapsulating the logic for each operation.
 * 
 * 4.  **`HospitalManagementApp` (Main Class):**
 *     *   **`main` method:** Contains the primary application loop.
 *     *   **`Scanner`:** An instance is created to read input from `System.in`.
 *     *   **`HospitalSystem`:** An instance is created, passing the `Scanner` to it.
 *     *   **Main Loop (`while(running)`):** Continuously displays the menu and processes user input until the 'Exit' option is chosen.
 *     *   **`switch` statement:** Used to control the flow of the program based on the user's numeric menu choice, directing execution to the appropriate `HospitalSystem` method.
 *     *   **Input Handling:** `scanner.nextInt()` is used for the menu choice and doctor selection, while `scanner.nextLine()` is used for reading the patient's name. Crucially, `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing input issues in subsequent `nextLine()` calls.
 *     *   **`System.out`:** Used extensively to print the menu, success messages, and list contents (doctors, waiting queue).
 *     *   **`System.err`:** Used specifically for displaying error messages, such as invalid menu options, trying to call a patient when the queue is empty, providing an invalid doctor number, or trying to free a doctor who is not busy.
 *     *   **`try-catch` blocks:**
 *         *   An inner `try-catch (InputMismatchException e)` block within the main loop handles cases where the user enters non-integer input when a number is expected (for menu choice or doctor selection). It prints an error to `System.err` and consumes the invalid input using `scanner.nextLine()` to recover.
 *         *   The `freeDoctor` method also has a specific `try-catch (InputMismatchException e)` block for the doctor selection input validation.
 *         *   A broader `try-catch (Exception e)` block wraps the entire main `while` loop in the `main` method. This provides class-wide exception handling, catching any unexpected runtime errors that might occur during the execution of the system's logic, printing the error to `System.err`, and ensuring the `scanner` is closed in the `finally` block before the application exits.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Achieved through private fields and public methods in `Patient`, `Doctor`, and `HospitalSystem`.
 *     *   **Meaningful Names:** Variables (`waitingQueue`, `doctors`, `currentPatient`), methods (`addPatient`, `callNextPatient`, `findAvailableDoctor`), and classes are clearly named.
 *     *   **Comments:** Basic comments explain the purpose of classes and key data structures.
 *     *   **Input Validation:** Checks are performed for empty patient names, valid menu ranges, and valid doctor numbers.
 *     *   **Error Handling:** Specific error messages are printed to `System.err` for user errors, and `try-catch` blocks handle runtime exceptions.
 *     *   **Clean Structure:** The code is organized into logical classes, and the `main` method serves as the application entry point and loop controller. The `printMenu` method is a good example of separating concerns.
 * 
 * This solution demonstrates a solid understanding of object-oriented design, data structures (`Queue`, `List`/`ArrayList`), control flow (`switch`, loops), input/output (`Scanner`, `System.out`, `System.err`), and robust error handling (`try-catch`, input validation), fulfilling all the requirements of the complex exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue and List
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient
class Patient {
    private static int nextId = 1;
    private int patientId;
    private String name;

    public Patient(String name) {
        this.patientId = nextId++;
        this.name = name;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient " + name + " (ID: " + patientId + ")";
    }
}

// Represents a doctor
class Doctor {
    private String name;
    private boolean isBusy;
    private Patient currentPatient;

    public Doctor(String name) {
        this.name = name;
        this.isBusy = false;
        this.currentPatient = null;
    }

    public String getName() {
        return name;
    }

    public boolean isBusy() {
        return isBusy;
    }

    public Patient getCurrentPatient() {
        return currentPatient;
    }

    // Assign a patient to this doctor
    public void assignPatient(Patient patient) {
        if (!this.isBusy) {
            this.currentPatient = patient;
            this.isBusy = true;
            System.out.println("Assigning " + patient.toString() + " to Dr. " + this.name + ".");
        } else {
            // This shouldn't happen if logic checks before calling
            System.err.println("Error: Dr. " + this.name + " is already busy.");
        }
    }

    // Mark doctor as free
    public void freeDoctor() {
        if (this.isBusy) {
            System.out.println("Dr. " + this.name + " is now free after seeing " + this.currentPatient.toString() + ".");
            this.currentPatient = null;
            this.isBusy = false;
        } else {
            System.err.println("Error: Dr. " + this.name + " is already free.");
        }
    }

    @Override
    public String toString() {
        if (isBusy) {
            return "Dr. " + name + ": Busy with " + currentPatient.toString();
        } else {
            return "Dr. " + name + ": Free";
        }
    }
}

// Manages the hospital operations
class HospitalSystem {
    // Queue for patients waiting to be seen
    private Queue<Patient> waitingQueue;
    // List of doctors in the hospital
    private List<Doctor> doctors;
    private Scanner scanner;

    public HospitalSystem(Scanner scanner) {
        this.waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        this.doctors = new ArrayList<>();      // ArrayList implements List
        this.scanner = scanner;

        // Initialize with some doctors
        doctors.add(new Doctor("Smith"));
        doctors.add(new Doctor("Jones"));
        doctors.add(new Doctor("Garcia"));
    }

    // Add a new patient to the waiting queue
    public void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return;
        }
        Patient newPatient = new Patient(name);
        waitingQueue.offer(newPatient); // Use offer for Queue
        System.out.println(newPatient.toString() + " added to the waiting queue.");
    }

    // Call the next patient from the queue and assign to an available doctor
    public void callNextPatient() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty. No patients to call.");
            return;
        }

        Doctor availableDoctor = findAvailableDoctor();

        if (availableDoctor == null) {
            System.out.println("No doctors currently available. Please wait.");
        } else {
            Patient nextPatient = waitingQueue.poll(); // Use poll for Queue
            if (nextPatient != null) { // Should not be null based on isEmpty check, but good practice
                availableDoctor.assignPatient(nextPatient);
            }
        }
    }

    // Find the first available doctor
    private Doctor findAvailableDoctor() {
        for (Doctor doctor : doctors) {
            if (!doctor.isBusy()) {
                return doctor;
            }
        }
        return null; // No available doctor found
    }

    // List all doctors and their current status
    public void listDoctors() {
        System.out.println("--- Doctor Status ---");
        if (doctors.isEmpty()) {
             System.out.println("No doctors registered in the system.");
             return;
        }
        for (int i = 0; i < doctors.size(); i++) {
             System.out.println((i + 1) + ". " + doctors.get(i).toString());
        }
    }

    // Mark a specific doctor as free
    public void freeDoctor() {
        if (doctors.isEmpty()) {
             System.out.println("No doctors registered to free.");
             return;
        }
        listDoctors(); // Show numbered list of doctors
        System.out.print("Select doctor number to free: ");

        try {
            int doctorNumber = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            if (doctorNumber < 1 || doctorNumber > doctors.size()) {
                System.err.println("Error: Invalid doctor number.");
                return;
            }

            Doctor doctorToFree = doctors.get(doctorNumber - 1);

            if (!doctorToFree.isBusy()) {
                System.err.println("Error: Dr. " + doctorToFree.getName() + " is already free.");
            } else {
                doctorToFree.freeDoctor();
            }
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // In a real app, log the full stack trace
        }
    }

    // List all patients currently in the waiting queue
    public void listWaitingQueue() {
        System.out.println("--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(index++ + ". " + patient.toString());
            }
        }
    }
}

public class HospitalManagementApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalSystem hospital = new HospitalSystem(scanner);
        boolean running = true;

        // Class-wide exception handling (wrapping the main loop)
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                try {
                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character after reading int

                    switch (choice) {
                        case 1:
                            hospital.addPatient();
                            break;
                        case 2:
                            hospital.callNextPatient();
                            break;
                        case 3:
                            hospital.listDoctors();
                            break;
                        case 4:
                            hospital.freeDoctor();
                            break;
                        case 5:
                            hospital.listWaitingQueue();
                            break;
                        case 6:
                            System.out.println("Exiting system.");
                            running = false;
                            break;
                        default:
                            System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number for the menu choice.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                }
                 System.out.println(); // Add a newline for better formatting between operations
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during execution
            System.err.println("An unrecoverable error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            scanner.close();
            System.out.println("System shut down.");
        }
    }

    // Helper method to print the main menu
    private static void printMenu() {
        System.out.println("--- Hospital Management System ---");
        System.out.println("1. Add Patient to Queue");
        System.out.println("2. Call Next Patient");
        System.out.println("3. List Doctors");
        System.out.println("4. Free Doctor");
        System.out.println("5. List Waiting Queue");
        System.out.println("6. Exit");
    }
}
