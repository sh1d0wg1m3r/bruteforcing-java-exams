/*
 * Exam Question #1074
 * Generated on: 2025-05-12 17:21:25
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified console-based system for a hospital to manage patient registrations and appointment requests. The system needs to handle patient information, accept appointment booking requests, process these requests into confirmed appointments, and allow viewing/canceling appointments.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following:
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of registered patients.
 *     *   Maintain a list of confirmed appointments.
 *     *   Maintain a queue of pending appointment *requests*.
 * 2.  **Functionality:**
 *     *   **Register Patient:** Allow adding a new patient with a unique ID, name, and age.
 *     *   **Book Appointment Request:** Allow a registered patient to request an appointment for a specific doctor and time. This request should be added to a queue.
 *     *   **Process Appointment Requests:** Process requests from the queue one by one. For each request, create a confirmed appointment and add it to the list of confirmed appointments.
 *     *   **View Patient's Appointments:** Display all confirmed appointments for a given patient ID.
 *     *   **Cancel Appointment:** Allow canceling a confirmed appointment using its unique appointment ID.
 *     *   **Exit:** Terminate the program.
 * 3.  **User Interface:**
 *     *   Provide a menu-driven console interface using `Scanner` for user input.
 *     *   Use a `switch` statement to handle the main menu options.
 *     *   Display menu options and prompts using `System.out`.
 *     *   Display successful operations and information using `System.out`.
 *     *   Display error messages (invalid input, patient not found, appointment not found, queue empty, etc.) using `System.err`.
 * 4.  **Java Concepts:**
 *     *   Utilize `java.util.Queue` for the appointment request queue.
 *     *   Utilize `java.util.ArrayList` for storing patients and confirmed appointments.
 *     *   Utilize the `java.util.List` interface for declaring variables or method return types where appropriate (e.g., `List<Patient>`, `List<Appointment>`).
 *     *   Utilize `java.util.Scanner` for reading user input.
 *     *   Utilize a `switch` statement for menu navigation.
 *     *   Utilize `System.err` for outputting error messages.
 *     *   Utilize `System.out` for outputting normal information and prompts.
 *     *   Implement class-wide exception handling (e.g., wrapping the main application loop in a `try-catch` block to catch unexpected errors). Also, include specific error handling for expected issues like invalid input or non-existent IDs.
 * 5.  **Best Practices:**
 *     *   Implement proper encapsulation (private fields, public getters/setters where needed).
 *     *   Use meaningful variable, method, and class names.
 *     *   Include appropriate comments (e.g., Javadoc for classes/methods, inline comments for complex logic).
 *     *   Perform input validation (e.g., check if patient exists before booking, validate numeric input).
 *     *   Ensure proper error handling and user feedback.
 *     *   Structure the code into appropriate classes (`Patient`, `Appointment`, `AppointmentRequest`, and a main `HospitalSystem` class).
 * 
 * **Data Structure Details:**
 * 
 * *   `Patient` class: `patientId` (int, unique), `name` (String), `age` (int).
 * *   `Appointment` class: `appointmentId` (int, unique), `patientId` (int), `doctorName` (String), `appointmentTime` (String - simplify time representation).
 * *   `AppointmentRequest` class: `patientId` (int), `doctorName` (String), `requestedTime` (String).
 * 
 * **Implementation Details:**
 * 
 * *   Generate unique IDs for patients and appointments using simple counters.
 * *   Assume doctor names and times are simple strings for this task.
 * *   When processing requests, remove them from the queue and add a new `Appointment` object to the confirmed list.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, and display appropriate messages based on the chosen action. Error messages should clearly indicate the problem.
 * 
 * ```
 * --- Hospital Appointment System Menu ---
 * 1. Register Patient
 * 2. Book Appointment Request
 * 3. Process Appointment Requests
 * 4. View Patient's Appointments
 * 5. Cancel Appointment
 * 6. Exit
 * Enter your choice: 
 * ```
 * 
 * Example output for operations:
 * 
 * *   **Registration:** `Patient registered successfully with ID: [ID]`
 * *   **Booking Request:** `Appointment request added to queue for patient ID: [ID]`
 * *   **Processing:** `Processing appointment requests...` followed by `Appointment confirmed: ID [ApptID], Patient [PatientID], Doctor [DoctorName], Time [Time]` for each processed request, or `No pending appointment requests.`
 * *   **Viewing:** `Appointments for Patient ID [ID]:` followed by a list of appointments or `No appointments found for Patient ID [ID].`
 * *   **Cancellation:** `Appointment with ID [ApptID] cancelled successfully.` or `Appointment with ID [ApptID] not found.`
 * *   **Errors:** `Error: Patient with ID [ID] not found.` or `Invalid input. Please enter a number.` or `An unexpected error occurred: [error details]`
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Appointment Management System using the specified Java components and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`, `Appointment`, and `AppointmentRequest` classes encapsulate the data for each entity with private fields and public getters, demonstrating encapsulation.
 *     *   `HospitalSystem` is the main class that orchestrates the application logic and holds the collections.
 * 
 * 2.  **Data Structures:**
 *     *   `List<Patient> patients`: An `ArrayList` is used to store `Patient` objects, allowing easy addition and iteration. Declared using the `List` interface.
 *     *   `List<Appointment> confirmedAppointments`: An `ArrayList` stores `Appointment` objects, suitable for iterating and removing elements by ID. Declared using the `List` interface.
 *     *   `Queue<AppointmentRequest> appointmentRequests`: A `LinkedList` is used as the implementation for the `Queue` interface. This structure is ideal for handling requests in a First-In, First-Out (FIFO) manner. Requests are added to the tail (`offer`) and removed from the head (`poll`).
 * 
 * 3.  **Functionality Implementation:**
 *     *   Each menu option (Register, Book, Process, View, Cancel, Exit) is implemented as a separate private method within the `HospitalSystem` class, promoting modularity.
 *     *   `registerPatient()`: Reads input, creates a `Patient` object with a unique ID generated by a counter, and adds it to the `patients` list.
 *     *   `bookAppointmentRequest()`: Reads input, validates the patient ID using the `findPatientById` helper, creates an `AppointmentRequest`, and adds it to the `appointmentRequests` queue using `offer()`.
 *     *   `processAppointmentRequests()`: Uses a `while` loop and `poll()` to process all current requests in the queue. For each request, it creates a `Appointment` object with a unique ID and adds it to the `confirmedAppointments` list. It checks if the queue is empty before processing.
 *     *   `viewPatientAppointments()`: Reads patient ID, validates the patient, and iterates through `confirmedAppointments` to find and print appointments matching the patient ID.
 *     *   `cancelAppointment()`: Reads appointment ID and uses the `removeIf()` method on the `confirmedAppointments` list to efficiently find and remove the appointment by ID.
 * 
 * 4.  **User Interface and Flow Control:**
 *     *   The `run()` method contains the main application loop.
 *     *   `Scanner` is used to read all user input. It's important to handle the newline character after reading numbers (`scanner.nextLine();`).
 *     *   A `switch` statement in the `run()` method directs execution to the appropriate method based on the user's menu choice.
 *     *   `System.out` is used for displaying the menu, prompts, and successful operation messages.
 *     *   `System.err` is used specifically for outputting error messages, making them distinct from normal output.
 * 
 * 5.  **Error Handling and Validation:**
 *     *   **Input Validation:** Methods like `registerPatient`, `bookAppointmentRequest`, `viewPatientAppointments`, and `cancelAppointment` include checks for valid input (e.g., positive age, patient existence) and print error messages using `System.err`.
 *     *   **`InputMismatchException`:** Specific `try-catch` blocks are used around `scanner.nextInt()` calls to catch non-integer input, print an error using `System.err`, and consume the invalid input (`scanner.next()`) to prevent an infinite loop.
 *     *   **Class-wide Exception Handling:** The entire `while` loop in the `run()` method is wrapped in a `try-catch(Exception e)` block. This serves as a safety net to catch any unhandled exceptions that might occur during the program's execution and print a general error message using `System.err`, demonstrating robust error handling.
 *     *   The `finally` block ensures the `Scanner` is closed when the `run` method finishes (either by exiting the loop or catching an exception).
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names are used for classes (`Patient`, `Appointment`, `HospitalSystem`), methods (`registerPatient`, `bookAppointmentRequest`, `findPatientById`), and variables (`patientId`, `doctorName`, `appointmentRequests`).
 *     *   Private fields and public getters enforce encapsulation.
 *     *   Basic comments explain the purpose of classes and methods.
 *     *   The code is structured logically into classes and methods, improving readability and maintainability.
 * 
 * This solution effectively demonstrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) in a cohesive, practical application while adhering to good programming practices like encapsulation, validation, and error handling. The use of the `Queue` for pending requests adds a realistic layer of complexity to the appointment booking process.
 */

import java.util.*;

// Class representing a Patient
class Patient {
    private int patientId;
    private String name;
    private int age;

    public Patient(int patientId, String name, int age) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
    }

    // Getters
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Patient [ID=" + patientId + ", Name=" + name + ", Age=" + age + "]";
    }
}

// Class representing a confirmed Appointment
class Appointment {
    private int appointmentId;
    private int patientId;
    private String doctorName;
    private String appointmentTime;

    public Appointment(int appointmentId, int patientId, String doctorName, String appointmentTime) {
        this.appointmentId = appointmentId;
        this.patientId = patientId;
        this.doctorName = doctorName;
        this.appointmentTime = appointmentTime;
    }

    // Getters
    public int getAppointmentId() {
        return appointmentId;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getDoctorName() {
        return doctorName;
    }

    public String getAppointmentTime() {
        return appointmentTime;
    }

    @Override
    public String toString() {
        return "Appointment [ID=" + appointmentId + ", PatientID=" + patientId + ", Doctor=" + doctorName + ", Time=" + appointmentTime + "]";
    }
}

// Class representing an Appointment Request before confirmation
class AppointmentRequest {
    private int patientId;
    private String doctorName;
    private String requestedTime;

    public AppointmentRequest(int patientId, String doctorName, String requestedTime) {
        this.patientId = patientId;
        this.doctorName = doctorName;
        this.requestedTime = requestedTime;
    }

    // Getters
    public int getPatientId() {
        return patientId;
    }

    public String getDoctorName() {
        return doctorName;
    }

    public String getRequestedTime() {
        return requestedTime;
    }
}

// Main class managing the hospital system
public class HospitalSystem {

    // Using List interface with ArrayList implementation
    private List<Patient> patients;
    private List<Appointment> confirmedAppointments;
    // Using Queue interface with LinkedList implementation (common for queues)
    private Queue<AppointmentRequest> appointmentRequests;

    private int patientIdCounter = 1;
    private int appointmentIdCounter = 1;

    // Scanner for input, declared as a class member
    private Scanner scanner;

    public HospitalSystem() {
        // Initialize the collections
        this.patients = new ArrayList<>();
        this.confirmedAppointments = new ArrayList<>();
        this.appointmentRequests = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.scanner = new Scanner(System.in);
    }

    // Main application loop
    public void run() {
        int choice = -1;

        // Class-wide exception handling wrapping the main loop
        try {
            while (choice != 6) {
                printMenu();
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            registerPatient();
                            break;
                        case 2:
                            bookAppointmentRequest();
                            break;
                        case 3:
                            processAppointmentRequests();
                            break;
                        case 4:
                            viewPatientAppointments();
                            break;
                        case 5:
                            cancelAppointment();
                            break;
                        case 6:
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    // Specific error handling for non-integer input
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Displays the main menu
    private void printMenu() {
        System.out.println("--- Hospital Appointment System Menu ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Book Appointment Request");
        System.out.println("3. Process Appointment Requests");
        System.out.println("4. View Patient's Appointments");
        System.out.println("5. Cancel Appointment");
        System.out.println("6. Exit");
    }

    // Handles patient registration
    private void registerPatient() {
        System.out.println("\n--- Register New Patient ---");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();

        int age = -1;
        while (age <= 0) {
            try {
                System.out.print("Enter patient age: ");
                age = scanner.nextInt();
                if (age <= 0) {
                    System.err.println("Age must be a positive number.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number for age.");
                scanner.next(); // Consume invalid input
            } finally {
                 scanner.nextLine(); // Consume newline after reading age (whether successful or not)
            }
        }


        int newPatientId = patientIdCounter++;
        Patient newPatient = new Patient(newPatientId, name, age);
        patients.add(newPatient);

        System.out.println("Patient registered successfully with ID: " + newPatientId);
    }

    // Handles booking an appointment request
    private void bookAppointmentRequest() {
        System.out.println("\n--- Book Appointment Request ---");
        System.out.print("Enter patient ID: ");
        try {
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Validate if patient exists
            Patient patient = findPatientById(patientId);
            if (patient == null) {
                System.err.println("Error: Patient with ID " + patientId + " not found.");
                return; // Exit method if patient not found
            }

            System.out.print("Enter doctor's name: ");
            String doctorName = scanner.nextLine();

            System.out.print("Enter requested time (e.g., 10:00 AM): ");
            String requestedTime = scanner.nextLine();

            // Create request and add to queue
            AppointmentRequest request = new AppointmentRequest(patientId, doctorName, requestedTime);
            appointmentRequests.offer(request); // offer is generally preferred over add for queues

            System.out.println("Appointment request added to queue for patient ID: " + patientId);

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a number for patient ID.");
            scanner.nextLine(); // Consume invalid input
        }
    }

    // Processes pending appointment requests from the queue
    private void processAppointmentRequests() {
        System.out.println("\n--- Processing Appointment Requests ---");

        if (appointmentRequests.isEmpty()) {
            System.out.println("No pending appointment requests.");
            return;
        }

        System.out.println("Processing appointment requests...");
        // Process all requests currently in the queue
        while (!appointmentRequests.isEmpty()) {
            AppointmentRequest request = appointmentRequests.poll(); // Retrieve and remove the head of the queue

            // Find the patient to ensure they still exist (optional but good practice)
            Patient patient = findPatientById(request.getPatientId());
            if (patient == null) {
                System.err.println("Warning: Patient with ID " + request.getPatientId() + " not found. Skipping appointment request.");
                continue; // Skip this request
            }

            int newAppointmentId = appointmentIdCounter++;
            Appointment confirmedAppointment = new Appointment(
                    newAppointmentId,
                    request.getPatientId(),
                    request.getDoctorName(),
                    request.getRequestedTime()
            );

            confirmedAppointments.add(confirmedAppointment);
            System.out.println("Appointment confirmed: " + confirmedAppointment);
        }
        System.out.println("Finished processing requests.");
    }

    // Views appointments for a specific patient
    private void viewPatientAppointments() {
        System.out.println("\n--- View Patient's Appointments ---");
        System.out.print("Enter patient ID: ");
         try {
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Validate if patient exists
            Patient patient = findPatientById(patientId);
            if (patient == null) {
                System.err.println("Error: Patient with ID " + patientId + " not found.");
                return; // Exit method if patient not found
            }

            System.out.println("Appointments for Patient ID " + patientId + ":");
            boolean found = false;
            for (Appointment appt : confirmedAppointments) {
                if (appt.getPatientId() == patientId) {
                    System.out.println(appt);
                    found = true;
                }
            }

            if (!found) {
                System.out.println("No appointments found for Patient ID " + patientId + ".");
            }

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a number for patient ID.");
            scanner.nextLine(); // Consume invalid input
        }
    }

    // Cancels a confirmed appointment
    private void cancelAppointment() {
        System.out.println("\n--- Cancel Appointment ---");
        System.out.print("Enter appointment ID to cancel: ");
         try {
            int appointmentId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Find and remove the appointment
            boolean removed = confirmedAppointments.removeIf(appt -> appt.getAppointmentId() == appointmentId);

            if (removed) {
                System.out.println("Appointment with ID " + appointmentId + " cancelled successfully.");
            } else {
                System.err.println("Appointment with ID " + appointmentId + " not found.");
            }

        } catch (InputMismatchException e) {
            System.err.println("Invalid input. Please enter a number for appointment ID.");
            scanner.nextLine(); // Consume invalid input
        }
    }

    // Helper method to find a patient by ID
    private Patient findPatientById(int patientId) {
        for (Patient p : patients) {
            if (p.getPatientId() == patientId) {
                return p;
            }
        }
        return null; // Patient not found
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
