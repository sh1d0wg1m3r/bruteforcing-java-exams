/*
 * Exam Question #283
 * Generated on: 2025-05-11 22:49:17
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Logistics Hub Parcel Management**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based application to manage parcels in a logistics hub. Parcels arrive and are placed in a queue waiting for processing. A worker processes parcels one by one from the front of the queue. Once processed, the parcels are moved to a list of completed parcels.
 * 
 * Your application should allow the user to perform the following actions via a command-line interface:
 * 1.  **Add Parcel:** Add a new parcel to the pending queue. Each parcel is identified by a unique string ID.
 * 2.  **Process Next Parcel:** Take the parcel at the front of the pending queue, mark it as processed, and move it to the list of processed parcels.
 * 3.  **View Pending Parcels:** Display the IDs of all parcels currently in the pending queue, in order.
 * 4.  **View Processed Parcels:** Display the IDs of all parcels that have been processed.
 * 5.  **Exit:** Terminate the application.
 * 
 * **Requirements:**
 * 
 * Your solution must be implemented in Java and demonstrate a strong understanding of core Java concepts. Specifically, your code must:
 * 
 * 1.  Utilize a `java.util.Queue` to manage the pending parcels.
 * 2.  Utilize a `java.util.ArrayList` to store the processed parcels.
 * 3.  Use the `java.util.List` interface type where appropriate (e.g., for method return types or variable declarations where the specific implementation `ArrayList` is not strictly required).
 * 4.  Use `java.util.Scanner` to read user commands and parcel IDs from the console.
 * 5.  Employ a `switch` statement to handle the different user commands.
 * 6.  Use `System.err.println()` to output error messages (e.g., invalid command, invalid input, trying to process an empty queue).
 * 7.  Use `System.out.println()` to output normal messages (prompts, successful actions, list contents).
 * 8.  Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues such as invalid user input (e.g., non-integer input for menu choice) or operational errors (e.g., attempting to process from an empty queue). You should define and use at least one custom exception class for a specific business logic error (e.g., trying to process an empty queue).
 * 
 * **Best Practices:**
 * 
 * *   Implement proper encapsulation (private fields, public methods).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and documentation (Javadocs are a plus).
 * *   Perform input validation (e.g., ensure parcel ID is not empty, validate command input).
 * *   Handle errors gracefully and inform the user using `System.err`.
 * *   Structure your code cleanly into logical classes.
 * 
 * **Expected Output:**
 * 
 * The application should run in a loop, prompting the user for a command.
 * *   Adding a parcel should confirm the addition.
 * *   Processing a parcel should confirm which parcel was processed.
 * *   Viewing queues should print the contents clearly labeled.
 * *   Errors should be printed to `System.err`.
 * *   Invalid commands or input should result in an error message.
 * *   Selecting 'Exit' should terminate the program.
 * 
 * **Example Interaction (User input in `>`):**
 * 
 * ```
 * Logistics Hub Management System
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 1
 * Enter Parcel ID:
 * > P101
 * Parcel P101 added to the pending queue.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 1
 * Enter Parcel ID:
 * > P102
 * Parcel P102 added to the pending queue.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 3
 * Pending Parcels: [P101, P102]
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 2
 * Processing parcel P101...
 * Parcel P101 processed and moved to completed list.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 3
 * Pending Parcels: [P102]
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 4
 * Processed Parcels: [P101]
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 2
 * Processing parcel P102...
 * Parcel P102 processed and moved to completed list.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 2
 * Error: Cannot process parcel. The pending queue is empty.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 99
 * Error: Invalid command. Please enter a number between 1 and 5.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > exit
 * Error: Invalid command. Please enter a number between 1 and 5.
 * Enter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):
 * > 5
 * Exiting Logistics Hub Management System.
 * ```
 *
 * EXPLANATION:
 * 
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList is a common implementation for Queue
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

// Custom exception for business logic errors
class ProcessingQueueEmptyException extends Exception {
    public ProcessingQueueEmptyException(String message) {
        super(message);
    }
}

// Represents a parcel with its ID and status
class Parcel {
    private String id;
    private String status; // e.g., "PENDING", "PROCESSED"

    /**
     * Constructs a new Parcel.
     *
     * @param id The unique identifier for the parcel.
     */
    public Parcel(String id) {
        if (id == null || id.trim().isEmpty()) {
            throw new IllegalArgumentException("Parcel ID cannot be null or empty.");
        }
        this.id = id;
        this.status = "PENDING"; // Default status
    }

    // Getters
    public String getId() {
        return id;
    }

    public String getStatus() {
        return status;
    }

    // Setter for status (used internally by the hub)
    void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return id; // Represent Parcel by its ID in output
    }

    // Basic equals and hashCode based on ID for potential future use (not strictly required by prompt but good practice)
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Parcel parcel = (Parcel) o;
        return id.equals(parcel.id);
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }
}

// Manages the flow of parcels through the hub
class LogisticsHub {
    // Using Queue interface with LinkedList implementation for pending parcels (FIFO)
    private Queue<Parcel> pendingParcels;
    // Using List interface with ArrayList implementation for processed parcels
    private List<Parcel> processedParcels;
    private Scanner scanner;

    /**
     * Constructs a LogisticsHub.
     */
    public LogisticsHub() {
        this.pendingParcels = new LinkedList<>(); // LinkedList implements Queue
        this.processedParcels = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new parcel to the pending queue.
     *
     * @param parcelId The ID of the parcel to add.
     * @throws IllegalArgumentException if the parcel ID is null or empty.
     */
    public void addParcel(String parcelId) {
        // Input validation handled by Parcel constructor
        Parcel newParcel = new Parcel(parcelId);
        pendingParcels.add(newParcel);
        System.out.println("Parcel " + parcelId + " added to the pending queue.");
    }

    /**
     * Processes the next parcel from the pending queue.
     *
     * @throws ProcessingQueueEmptyException if the pending queue is empty.
     */
    public void processNextParcel() throws ProcessingQueueEmptyException {
        // Check if the queue is empty before attempting to poll
        if (pendingParcels.isEmpty()) {
            throw new ProcessingQueueEmptyException("Cannot process parcel. The pending queue is empty.");
        }

        Parcel parcelToProcess = pendingParcels.poll(); // Get and remove the head of the queue
        System.out.println("Processing parcel " + parcelToProcess.getId() + "...");
        parcelToProcess.setStatus("PROCESSED"); // Update status
        processedParcels.add(parcelToProcess); // Add to the processed list
        System.out.println("Parcel " + parcelToProcess.getId() + " processed and moved to completed list.");
    }

    /**
     * Gets the list of pending parcel IDs.
     *
     * @return A List of pending parcel IDs. Returns an empty list if none are pending.
     */
    public List<String> getPendingParcelIds() {
        // Return a new list containing only the IDs to maintain encapsulation
        List<String> ids = new ArrayList<>();
        for (Parcel parcel : pendingParcels) {
            ids.add(parcel.getId());
        }
        return ids; // Return as List interface type
    }

    /**
     * Gets the list of processed parcel IDs.
     *
     * @return A List of processed parcel IDs. Returns an empty list if none are processed.
     */
    public List<String> getProcessedParcelIds() {
        // Return a new list containing only the IDs to maintain encapsulation
        List<String> ids = new ArrayList<>();
        for (Parcel parcel : processedParcels) {
            ids.add(parcel.getId());
        }
        return ids; // Return as List interface type
    }

    /**
     * Runs the main interactive loop for the logistics hub management system.
     * Includes command handling, input validation, and exception handling.
     */
    public void runSystem() {
        System.out.println("Logistics Hub Management System");
        boolean running = true;

        // Class-wide try-catch block for the main operational loop
        try {
            while (running) {
                printMenu();
                int command = -1;
                try {
                    System.out.print("> ");
                    command = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 5.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                }

                // Use switch statement for command handling
                switch (command) {
                    case 1: // Add Parcel
                        System.out.println("Enter Parcel ID:");
                        System.out.print("> ");
                        String parcelId = scanner.nextLine().trim();
                        try {
                            addParcel(parcelId);
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;

                    case 2: // Process Next Parcel
                        try {
                            processNextParcel();
                        } catch (ProcessingQueueEmptyException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;

                    case 3: // View Pending Parcels
                        List<String> pending = getPendingParcelIds(); // Use List interface
                        System.out.println("Pending Parcels: " + pending);
                        break;

                    case 4: // View Processed Parcels
                        List<String> processed = getProcessedParcelIds(); // Use List interface
                        System.out.println("Processed Parcels: " + processed);
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Logistics Hub Management System.");
                        running = false;
                        break;

                    default:
                        System.err.println("Error: Invalid command. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("Scanner closed."); // Indicate clean shutdown
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("\nEnter command (1: Add Parcel, 2: Process, 3: View Pending, 4: View Processed, 5: Exit):");
    }

    // Main method to start the application
    public static void main(String[] args) {
        LogisticsHub hub = new LogisticsHub();
        hub.runSystem();
    }
}
