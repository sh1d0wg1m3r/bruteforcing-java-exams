/*
 * Exam Question #1137
 * Generated on: 2025-05-12 17:29:55
 * Generated by: Account 4
 * 
 * QUESTION:
 * Subject: Advanced Java Programming
 * Task: Warehouse Order Processing System
 * 
 * You are tasked with developing a simplified Warehouse Order Processing System in Java. The system should manage product inventory and process customer orders using a queue-based approach. This task requires you to demonstrate your understanding of core Java collections, input/output, control flow, and exception handling within a practical scenario.
 * 
 * **Requirements:**
 * 
 * 1.  **Product Management:** The system maintains a fixed inventory of products. Each product has a unique ID (String), a name (String), and a stock quantity (int). Initialize the system with a few sample products and their initial stock levels upon startup.
 * 2.  **Order Management:** Customer orders arrive and are placed into a processing queue. Each order has a unique Order ID (auto-generated integer, starting from 1), the ID of the product requested (String), and the quantity (int).
 * 3.  **Order Processing:** Orders are processed one by one from the front of the queue. Processing an order involves checking if the requested product quantity is available in stock for the specified product ID.
 *     *   If the product ID in the order does not exist in the inventory, the order is marked as "FAILED\_INVALID\_PRODUCT".
 *     *   If sufficient stock is available for the existing product, the stock is decreased by the order quantity, and the order is marked as "PROCESSED".
 *     *   If stock is insufficient for the existing product, the order is marked as "FAILED\_INSUFFICIENT\_STOCK".
 *     *   Processed or failed orders are removed from the front of the queue after their status is updated.
 * 4.  **User Interface:** Provide a text-based menu allowing the user (a warehouse operator) to perform the following actions:
 *     *   **1. Add New Order:** Prompt the user for Product ID and Quantity, create a new Order object, assign it the next available Order ID, and add it to the order queue. Perform input validation (e.g., quantity must be a positive integer, product ID format).
 *     *   **2. Process Next Order:** Take the order at the front of the queue, attempt to process it according to the rules above, and update inventory/order status. Handle the case where the queue is empty.
 *     *   **3. View Order Queue:** Display all orders currently waiting in the processing queue, in the order they will be processed.
 *     *   **4. View Inventory:** Display the current stock levels for all products in the inventory.
 *     *   **5. Exit:** Terminate the program.
 * 5.  **Mandatory Java Component Usage:** Your solution MUST utilize ALL of the following Java components:
 *     *   `java.util.Queue` (specifically, an implementation like `LinkedList` used as a `Queue`) for the order queue.
 *     *   `java.util.ArrayList` (used as the concrete implementation) for storing the product inventory.
 *     *   `java.util.List` interface (used for declaring the type of the inventory collection).
 *     *   `java.util.Scanner` for reading user input from the console (`System.in`).
 *     *   `switch` statement for handling menu choices.
 *     *   `System.err` for printing error messages (e.g., invalid input, product not found, insufficient stock).
 *     *   `System.out` for printing normal output (e.g., menu, prompts, success messages, list contents).
 *     *   Class-wide exception handling using `try-catch` blocks. This means wrapping the main operational loop or method (like a `run` method) to catch unexpected runtime exceptions that might occur during the program's execution.
 * 
 * 6.  **Best Practices:** Implement your solution demonstrating good programming practices:
 *     *   Proper encapsulation (private fields, public methods/getters where necessary).
 *     *   Meaningful names for classes, variables, and methods.
 *     *   Appropriate comments and basic documentation explaining key parts of the code.
 *     *   Robust input validation and specific error handling for various scenarios (e.g., non-numeric input, empty queue, product not found, insufficient stock).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, and display appropriate messages or data based on the chosen action. Error messages should be clearly distinguishable by being printed to `System.err`.
 * 
 * Example interaction flow (not exhaustive):
 * ```
 * --- Initial Inventory ---
 * Product [ID=P001, Name=Laptop, Stock=10]
 * Product [ID=P002, Name=Mouse, Stock=50]
 * Product [ID=P003, Name=Keyboard, Stock=30]
 * 
 * --- Warehouse System Menu ---
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Order Queue
 * 4. View Inventory
 * 5. Exit
 * Enter your choice: 1
 * --- Add New Order ---
 * Enter Product ID: P001
 * Enter Quantity: 5
 * Order 1 added to the queue.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 1
 * --- Add New Order ---
 * Enter Product ID: P004
 * Error: Product with ID 'P004' not found.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 3
 * --- Current Order Queue ---
 * [Order [ID=1, Product=P001, Qty=5, Status=WAITING]]
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 2
 * --- Processing Next Order ---
 * Order 1 processed successfully. Stock updated for Laptop.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 4
 * --- Current Inventory ---
 * Product [ID=P001, Name=Laptop, Stock=5]
 * Product [ID=P002, Name=Mouse, Stock=50]
 * Product [ID=P003, Name=Keyboard, Stock=30]
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 2
 * --- Processing Next Order ---
 * Order queue is empty. Nothing to process.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: abc
 * Invalid input. Please enter a number between 1 and 5.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Warehouse System. Goodbye!
 * ```
 * 
 * Your solution should be provided as a single file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simplified Warehouse Order Processing System, fulfilling all the requirements of the exam question.
 * 
 * 1.  **Problem Structure:** The system is designed with three main classes: `Product` (representing items in inventory), `Order` (representing customer requests), and `WarehouseSystem` (managing the overall logic, inventory, and order queue). This structure promotes modularity and encapsulation.
 * 
 * 2.  **Mandatory Component Usage:**
 *     *   `java.util.Queue`: A `LinkedList` instance (`orderQueue`) is declared using the `Queue` interface (`Queue<Order>`). This enforces the First-In, First-Out (FIFO) processing order required for handling orders as they arrive. Methods like `offer()` (to add) and `peek()`/`poll()` (to inspect/remove from the front) are used.
 *     *   `java.util.ArrayList`: An `ArrayList` instance is used as the concrete implementation for storing the `Product` objects (`inventory`).
 *     *   `java.util.List interface`: The `inventory` variable is declared using the `List` interface (`List<Product> inventory = new ArrayList<>();`), demonstrating the use of the interface rather than the concrete implementation type in the declaration, which is a best practice for flexibility.
 *     *   `java.util.Scanner`: A `Scanner` object (`scanner`) is used to read user input from `System.in` for menu choices and order details.
 *     *   `switch` statement: A `switch` statement is used in the `run()` method to navigate between different menu options based on the user's integer input.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid menu choices, non-numeric input, product not found, or insufficient stock during order processing. This distinguishes error output from normal program output.
 *     *   `System.out`: Used for all standard output, including the menu display, prompts, success messages, and displaying the contents of the inventory and order queue.
 *     *   Class-wide exception handling with `try-catch`: The main execution loop within the `run()` method is wrapped in a `try-catch(Exception e)` block. This serves as a class-wide handler for any unexpected runtime exceptions that might occur during the program's operation, printing the error details and stack trace to `System.err` before the program potentially terminates or continues depending on the error type. Additionally, specific `try-catch(NumberFormatException)` blocks are used for handling anticipated input errors when parsing integers.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Product`, `Order`, and `WarehouseSystem` classes are declared as `private`. Public getter methods are provided where necessary to access state, and methods that modify state (like `decreaseStock`, `setStatus`) encapsulate the modification logic.
 *     *   **Meaningful Names:** Classes (`Product`, `Order`, `WarehouseSystem`), variables (`inventory`, `orderQueue`, `nextOrderId`), methods (`initializeInventory`, `findProductById`, `addOrder`, `processNextOrder`, `viewQueue`, `displayMenu`, `run`), and enum constants (`WAITING`, `PROCESSED`, etc.) have names that clearly indicate their purpose.
 *     *   **Comments and Documentation:** Basic inline comments explain specific logic points, and Javadoc-style comments are included for classes and key methods to describe their purpose, parameters, and return values.
 *     *   **Input Validation:** Input for menu choice and order quantity is validated. `NumberFormatException` is caught when parsing input strings to integers. Quantity is checked to ensure it's positive. Product ID existence is checked before creating an order.
 *     *   **Proper Error Handling:** Specific error conditions (empty queue, product not found, insufficient stock, invalid input) are explicitly checked and handled with informative messages printed to `System.err`. The main `try-catch` in `run` provides a fallback for unhandled exceptions.
 *     *   **Clean Code Structure:** The logic is divided into distinct methods within the `WarehouseSystem` class, each responsible for a specific task (adding order, processing order, viewing inventory, etc.), making the code more organized and readable. The `main` method is kept simple, primarily responsible for creating the system instance and starting its execution loop.
 * 
 * 4.  **Practical Scenario:** The warehouse order processing scenario is practical, involving common data management tasks (inventory tracking) and workflow simulation (queue-based order processing).
 * 
 * 5.  **Challenge Level:** The task requires integrating multiple concepts: using different collection types (`List`/`ArrayList`, `Queue`/`LinkedList`), handling user input and menu navigation (`Scanner`, `switch`), implementing business logic (stock management, order status updates), and applying robust error handling (`try-catch`, `System.err`, input validation, specific checks). This combination is challenging but solvable within a typical exam time frame.
 * 
 * The solution demonstrates a solid understanding of how to combine these Java features to build a functional, robust, and well-structured application.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Enum to represent the status of an Order
enum OrderStatus {
    WAITING,
    PROCESSED,
    FAILED_INSUFFICIENT_STOCK,
    FAILED_INVALID_PRODUCT
}

/**
 * Represents a product in the warehouse inventory.
 */
class Product {
    private String productId;
    private String name;
    private int stock;

    /**
     * Constructs a new Product.
     * @param productId Unique identifier for the product.
     * @param name The name of the product.
     * @param stock The initial stock quantity.
     */
    public Product(String productId, String name, int stock) {
        this.productId = productId;
        this.name = name;
        this.stock = stock;
    }

    // --- Getters ---
    public String getProductId() {
        return productId;
    }

    public String getName() {
        return name;
    }

    public int getStock() {
        return stock;
    }

    /**
     * Attempts to decrease the stock by a given quantity.
     * @param quantity The amount to decrease stock by.
     * @return true if stock was successfully decreased, false if insufficient stock.
     */
    public boolean decreaseStock(int quantity) {
        if (this.stock >= quantity) {
            this.stock -= quantity;
            return true;
        }
        return false; // Indicate insufficient stock
    }

    /**
     * Increases the stock by a given quantity (e.g., for receiving new stock).
     * @param quantity The amount to increase stock by.
     */
    public void increaseStock(int quantity) {
        this.stock += quantity;
    }

    @Override
    public String toString() {
        return "Product [ID=" + productId + ", Name=" + name + ", Stock=" + stock + "]";
    }
}

/**
 * Represents a customer order to be processed.
 */
class Order {
    private int orderId;
    private String productId;
    private int quantity;
    private OrderStatus status;

    /**
     * Constructs a new Order.
     * @param orderId Unique identifier for the order.
     * @param productId The ID of the product ordered.
     * @param quantity The quantity of the product ordered.
     */
    public Order(int orderId, String productId, int quantity) {
        this.orderId = orderId;
        this.productId = productId;
        this.quantity = quantity;
        this.status = OrderStatus.WAITING; // Orders start in WAITING status
    }

    // --- Getters ---
    public int getOrderId() {
        return orderId;
    }

    public String getProductId() {
        return productId;
    }

    public int getQuantity() {
        return quantity;
    }

    public OrderStatus getStatus() {
        return status;
    }

    /**
     * Sets the status of the order.
     * @param status The new status for the order.
     */
    public void setStatus(OrderStatus status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Order [ID=" + orderId + ", Product=" + productId + ", Qty=" + quantity + ", Status=" + status + "]";
    }
}

/**
 * The main system class for managing warehouse inventory and order processing.
 */
public class WarehouseSystem { // Made public as it contains the main method
    // Use List interface for flexibility, implemented by ArrayList
    private List<Product> inventory;
    // Use Queue interface for FIFO order processing, implemented by LinkedList
    private Queue<Order> orderQueue;
    private Scanner scanner;
    private int nextOrderId = 1; // Auto-incrementing counter for order IDs

    /**
     * Constructs the WarehouseSystem and initializes inventory.
     */
    public WarehouseSystem() {
        // Use ArrayList for inventory storage
        inventory = new ArrayList<>();
        // Use LinkedList as a Queue implementation for orders
        orderQueue = new LinkedList<>();
        // Initialize Scanner for user input
        scanner = new Scanner(System.in);

        initializeInventory(); // Populate inventory with initial products
    }

    /**
     * Populates the inventory with some initial products.
     */
    private void initializeInventory() {
        System.out.println("--- Initializing Inventory ---");
        inventory.add(new Product("P001", "Laptop", 10));
        inventory.add(new Product("P002", "Mouse", 50));
        inventory.add(new Product("P003", "Keyboard", 30));
        viewInventory(); // Show initial inventory
        System.out.println("------------------------------");
    }

    /**
     * Finds a product in the inventory by its ID.
     * @param productId The ID of the product to find.
     * @return The Product object if found, otherwise null.
     */
    private Product findProductById(String productId) {
        for (Product product : inventory) {
            // Case-insensitive comparison for product ID lookup
            if (product.getProductId().equalsIgnoreCase(productId)) {
                return product;
            }
        }
        return null; // Product not found
    }

    /**
     * Handles the "Add New Order" menu option.
     * Prompts user for details, validates input, and adds order to the queue.
     */
    private void addOrder() {
        System.out.println("\n--- Add New Order ---");
        System.out.print("Enter Product ID: ");
        String productId = scanner.nextLine().trim();

        // Validate product ID existence
        Product product = findProductById(productId);
        if (product == null) {
            System.err.println("Error: Product with ID '" + productId + "' not found in inventory.");
            return; // Exit addOrder method
        }

        System.out.print("Enter Quantity: ");
        int quantity = 0;
        // Input validation for quantity
        try {
            quantity = Integer.parseInt(scanner.nextLine().trim());
            if (quantity <= 0) {
                System.err.println("Error: Quantity must be a positive integer.");
                return; // Exit addOrder method
            }
        } catch (NumberFormatException e) {
            System.err.println("Error: Invalid quantity entered. Please enter a valid number.");
            return; // Exit addOrder method
        }

        // Create and add the new order to the queue
        Order newOrder = new Order(nextOrderId++, productId, quantity);
        orderQueue.offer(newOrder); // offer() is generally preferred over add() for queues as it returns false on failure
        System.out.println("Order " + newOrder.getOrderId() + " added to the queue.");
    }

    /**
     * Handles the "Process Next Order" menu option.
     * Takes the front order from the queue and attempts to process it.
     */
    private void processNextOrder() {
        System.out.println("\n--- Processing Next Order ---");
        // Check if the queue is empty
        if (orderQueue.isEmpty()) {
            System.out.println("Order queue is empty. Nothing to process.");
            return; // Exit method if queue is empty
        }

        // Get the next order without removing it yet
        Order orderToProcess = orderQueue.peek();
        if (orderToProcess == null) {
             // This case should ideally not happen if isEmpty() is checked, but good for robustness
             System.err.println("Internal Error: Could not retrieve order from queue.");
             return;
        }


        Product product = findProductById(orderToProcess.getProductId());

        // Process based on product availability and stock
        if (product == null) {
             System.err.println("Error processing Order " + orderToProcess.getOrderId() + ": Product ID '" + orderToProcess.getProductId() + "' not found in inventory.");
             orderToProcess.setStatus(OrderStatus.FAILED_INVALID_PRODUCT);
             // Remove the order from the queue after processing status
             orderQueue.poll();
             System.out.println("Order " + orderToProcess.getOrderId() + " marked as FAILED_INVALID_PRODUCT and removed from queue.");
        } else if (product.decreaseStock(orderToProcess.getQuantity())) {
            // Stock is sufficient, process the order
            orderToProcess.setStatus(OrderStatus.PROCESSED);
             // Remove the order from the queue after processing status
            orderQueue.poll();
            System.out.println("Order " + orderToProcess.getOrderId() + " processed successfully. Stock updated for " + product.getName() + ".");
        } else {
            // Stock is insufficient
            orderToProcess.setStatus(OrderStatus.FAILED_INSUFFICIENT_STOCK);
            // Remove the order from the queue after processing status
            orderQueue.poll();
            System.err.println("Error processing Order " + orderToProcess.getOrderId() + ": Insufficient stock for " + product.getName() + " (Needed: " + orderToProcess.getQuantity() + ", Available: " + product.getStock() + ").");
            System.out.println("Order " + orderToProcess.getOrderId() + " marked as FAILED_INSUFFICIENT_STOCK and removed from queue.");
        }
    }

    /**
     * Handles the "View Order Queue" menu option.
     * Displays all orders currently waiting in the queue.
     */
    private void viewOrderQueue() {
        System.out.println("\n--- Current Order Queue ---");
        if (orderQueue.isEmpty()) {
            System.out.println("The order queue is empty.");
            return;
        }
        // LinkedList's toString provides a clear representation of the queue contents
        System.out.println(orderQueue);
        // Alternative: Iterate and print manually
        // int position = 1;
        // for (Order order : orderQueue) {
        //     System.out.println(position++ + ". " + order);
        // }
    }

    /**
     * Handles the "View Inventory" menu option.
     * Displays the current stock levels for all products.
     */
    private void viewInventory() {
        System.out.println("\n--- Current Inventory ---");
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
            return;
        }
        // Iterate through the List (ArrayList) and print each product
        for (Product product : inventory) {
            System.out.println(product);
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Warehouse System Menu ---");
        System.out.println("1. Add New Order");
        System.out.println("2. Process Next Order");
        System.out.println("3. View Order Queue");
        System.out.println("4. View Inventory");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and menu navigation.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = 0;
        boolean exit = false;

        // --- Class-wide exception handling ---
        try {
            while (!exit) {
                displayMenu();
                String input = scanner.nextLine().trim(); // Read the whole line

                // Input validation for menu choice
                try {
                    choice = Integer.parseInt(input);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number between 1 and 5.");
                    continue; // Skip to the next iteration of the while loop
                }

                // --- Switch statement for menu navigation ---
                switch (choice) {
                    case 1:
                        addOrder();
                        break;
                    case 2:
                        processNextOrder();
                        break;
                    case 3:
                        viewOrderQueue();
                        break;
                    case 4:
                        viewInventory();
                        break;
                    case 5:
                        exit = true; // Set exit flag to true
                        System.out.println("Exiting Warehouse System. Goodbye!");
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // This catch block handles any unexpected runtime exceptions
            // that might occur within the run method's execution flow.
            System.err.println("\nAn unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream for debugging
        } finally {
            // Ensure the scanner resource is closed properly
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed."); // Optional: confirmation
            }
        }
    }

    /**
     * The main method to start the Warehouse System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        WarehouseSystem system = new WarehouseSystem();
        system.run(); // Start the main application loop
    }
}
