/*
 * Exam Question #922
 * Generated on: 2025-05-12 16:59:54
 * Generated by: Account 5
 * 
 * QUESTION:
 * You are tasked with developing a simplified backend system for a restaurant's order management. The system should allow staff to add new customer orders, process the next order in the queue for the kitchen, and view lists of pending and completed orders.
 * 
 * Your solution must be a single Java application file containing multiple classes as needed to model the system components (e.g., `MenuItem`, `Order`, and the main application class).
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of available menu items. Use `java.util.List` and implement it with `java.util.ArrayList`.
 *     *   Manage pending customer orders using a queue. Use `java.util.Queue` and implement it with a suitable class (like `java.util.LinkedList`).
 *     *   Keep a history of completed orders using a list. Use `java.util.List` and implement it with `java.util.ArrayList`.
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get input from the console.
 *     *   Implement a menu-driven interface with options for adding an order, processing the next order, viewing pending orders, viewing completed orders, and exiting.
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and order details.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, trying to process an empty queue, invalid menu item).
 * 5.  **Error Handling:**
 *     *   Implement robust input validation for user choices and item IDs.
 *     *   Use `try-catch` blocks to handle potential exceptions, such as non-numeric input (`InputMismatchException`) or attempting operations on empty data structures (handle gracefully with `System.err` messages). Include a general `try-catch` in the main interaction loop for unexpected errors (Class-wide handling).
 * 6.  **Object-Oriented Design:**
 *     *   Create separate classes for `MenuItem` and `Order` with appropriate private fields and public methods (getters, adders, etc.) to demonstrate encapsulation.
 *     *   Ensure meaningful variable and method names.
 *     *   Add brief comments explaining the purpose of key classes and methods.
 * 
 * **Functionality Details:**
 * 
 * *   **Add New Order:**
 *     *   Display the menu items with their IDs, names, and prices.
 *     *   Prompt the user to enter item IDs one by one to add to the current order.
 *     *   Allow the user to enter a special value (e.g., 0) to finish adding items to the order.
 *     *   Create a new `Order` object with a unique ID.
 *     *   Add the selected items to the `Order`.
 *     *   If items were added, place the new `Order` at the back of the `pendingOrders` queue.
 *     *   Handle cases where an invalid item ID is entered or non-numeric input is provided.
 * *   **Process Next Order:**
 *     *   Take the order at the front of the `pendingOrders` queue.
 *     *   If the queue is not empty, mark the order as "COMPLETED" and move it to the `completedOrders` list. Display details of the processed order.
 *     *   If the queue is empty, display an error message using `System.err`.
 * *   **View Pending Orders:**
 *     *   Display details of all orders currently in the `pendingOrders` queue, showing their position in the queue.
 *     *   If the queue is empty, display a message using `System.out`.
 * *   **View Completed Orders:**
 *     *   Display details of all orders in the `completedOrders` list.
 *     *   If the list is empty, display a message using `System.out`.
 * *   **Exit:**
 *     *   Terminate the program gracefully.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, displaying a menu, prompting for input, and showing system status or results of operations based on user choices. Error messages should be clearly distinguishable using `System.err`. The format of displaying orders and menu items should be clear and readable, including calculated totals for orders.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- Restaurant Order System ---
 * 1. Add New Order
 * 2. Process Next Order
 * 3. View Pending Orders
 * 4. View Completed Orders
 * 0. Exit
 * -------------------------------
 * Enter your choice: 1
 * 
 * --- Add New Order ---
 * --- Menu ---
 * 1. Burger ($8.99)
 * 2. Fries ($3.49)
 * 3. Soda ($1.99)
 * 4. Pizza ($12.50)
 * ------------
 * Enter item ID to add (or 0 to finish order): 1
 * Burger added to order.
 * Enter item ID to add (or 0 to finish order): 2
 * Fries added to order.
 * Enter item ID to add (or 0 to finish order): 0
 * Order 1 added to pending queue.
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 3
 * 
 * --- Pending Orders ---
 * Order 1 in queue (ID: 1)
 * Items:
 *   - Burger ($8.99)
 *   - Fries ($3.49)
 * Total: $12.48
 * --------------------
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 2
 * 
 * --- Process Next Order ---
 * Order 1 processed and moved to completed.
 * Order ID: 1 (Status: COMPLETED)
 * Items:
 *   - Burger ($8.99)
 *   - Fries ($3.49)
 * Total: $12.48
 * --------------------
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 2
 * No pending orders to process.
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 4
 * 
 * --- Completed Orders ---
 * Order ID: 1 (Status: COMPLETED)
 * Items:
 *   - Burger ($8.99)
 *   - Fries ($3.49)
 * Total: $12.48
 * --------------------
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: abc
 * Invalid input. Please enter a number.
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 0 and 4.
 * 
 * --- Restaurant Order System ---
 * ...menu...
 * Enter your choice: 0
 * Exiting system. Goodbye!
 * ```
 *
 * EXPLANATION:
 * The provided solution implements a simple Restaurant Order System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The code is organized into three classes: `MenuItem`, `Order`, and `RestaurantSystem`.
 *     *   `MenuItem`: A simple class representing a menu item with `id`, `name`, and `price`. It uses private fields and public getters for encapsulation.
 *     *   `Order`: Represents a customer's order. It has a unique `orderId` (managed by a static counter), a `List<MenuItem>` to hold the items in the order (using `ArrayList`), and a `status`. It includes methods to add items and calculate the total price. Private fields and public methods ensure encapsulation.
 *     *   `RestaurantSystem`: The main class that orchestrates the application. It holds the core data structures (`menu`, `pendingOrders`, `completedOrders`) and contains the logic for user interaction and system operations.
 * 
 * 2.  **Data Structures:**
 *     *   `List<MenuItem> menu`: Declared as `List` and instantiated as `ArrayList` to store the fixed list of available menu items. `ArrayList` is suitable for storing and iterating over the menu.
 *     *   `Queue<Order> pendingOrders`: Declared as `Queue` and instantiated as `LinkedList`. `LinkedList` implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior, which is appropriate for orders waiting to be processed in the order they were received. `offer()` is used to add to the tail, and `poll()` is used to retrieve and remove from the head.
 *     *   `List<Order> completedOrders`: Declared as `List` and instantiated as `ArrayList`. `ArrayList` is used to store the history of processed orders, allowing easy iteration or potential future access by index.
 *     *   `List<MenuItem> Order.items`: Each `Order` object uses an `ArrayList` internally to store the specific items included in that order.
 * 
 * 3.  **User Interaction (`Scanner`) and Control Flow (`switch`):**
 *     *   A `Scanner` object is used to read input from `System.in`.
 *     *   The `start()` method contains the main application loop.
 *     *   A `printMenu()` method displays the available options.
 *     *   A `switch` statement inside the loop processes the integer choice entered by the user, directing the flow to the appropriate method (`addOrder`, `processNextOrder`, etc.).
 * 
 * 4.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` and `System.out.print()` are used for all standard output, including displaying the menu, prompts, confirmations, and the details of orders and menu items.
 *     *   `System.err.println()` is used specifically for error messages, such as invalid menu choices, invalid item IDs, or attempting to process an order when the queue is empty. This visually distinguishes errors from normal output.
 * 
 * 5.  **Error Handling (`try-catch`):**
 *     *   **Input Validation:** The code checks if entered menu choices are within the valid range (0-4) and if entered item IDs correspond to existing menu items.
 *     *   **`InputMismatchException`:** `try-catch` blocks are used around `scanner.nextInt()` calls in both the `start()` method (for the main menu choice) and the `addOrder()` method (for item IDs) to catch cases where the user enters non-numeric input. An appropriate error message is printed to `System.err`, and `scanner.nextLine()` is called within the `catch` block to consume the invalid input and prevent an infinite loop.
 *     *   **Operational Errors:** The `processNextOrder()` method checks if `pendingOrders.poll()` returns `null` (indicating an empty queue) before attempting to process. An error message is printed to `System.err` if the queue is empty. Similarly, `findMenuItemById` returns `null` if an item is not found, which is checked in `addOrder`.
 *     *   **Class-wide Handling:** The main `while` loop in the `start()` method is wrapped in a `try-catch (Exception e)`. This provides a safety net to catch any unexpected runtime exceptions that might occur during the execution of the menu options, printing an error to `System.err` and preventing the program from crashing immediately. This fulfills the "Class-wide exception handling" requirement by providing a top-level catch for the class's primary operation loop.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** Private fields and public methods (`getters`, `addItem`, `setStatus`) are used in `MenuItem` and `Order` classes.
 *     *   **Meaningful Names:** Variables (`pendingOrders`, `completedOrders`, `newOrder`), methods (`addOrder`, `processNextOrder`, `viewPendingOrders`), and classes (`MenuItem`, `Order`, `RestaurantSystem`) have descriptive names.
 *     *   **Comments:** Brief comments explain the purpose of classes, key methods, and data structures.
 *     *   **Clean Structure:** The code is divided into logical methods, each responsible for a specific task (e.g., `addOrder`, `processNextOrder`, `printMenu`).
 * 
 * The solution effectively integrates the required Java components into a functional, interactive system that demonstrates understanding of object-oriented design, data structures, user input handling, and robust error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents an item on the restaurant menu
class MenuItem {
    private int id;
    private String name;
    private double price;

    /**
     * Constructs a new MenuItem.
     * @param id The unique ID of the menu item.
     * @param name The name of the menu item.
     * @param price The price of the menu item.
     */
    public MenuItem(int id, String name, double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    /**
     * Returns a string representation of the menu item.
     * @return Formatted string with ID, name, and price.
     */
    @Override
    public String toString() {
        return id + ". " + name + " ($" + String.format("%.2f", price) + ")";
    }
}

// Represents a customer order
class Order {
    private static int nextOrderId = 1; // Static counter for unique order IDs
    private int orderId;
    private List<MenuItem> items;
    private String status; // e.g., "PENDING", "COMPLETED"

    /**
     * Constructs a new Order with a unique ID and initial status "PENDING".
     */
    public Order() {
        this.orderId = nextOrderId++; // Assign unique ID and increment counter
        this.items = new ArrayList<>(); // Use ArrayList to store items in this specific order
        this.status = "PENDING";
    }

    // --- Getters ---
    public int getOrderId() {
        return orderId;
    }

    public List<MenuItem> getItems() {
        return items;
    }

    public String getStatus() {
        return status;
    }

    // --- Setters / Mutators ---
    /**
     * Sets the status of the order.
     * @param status The new status (e.g., "COMPLETED").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Adds a menu item to the order.
     * @param item The MenuItem to add.
     */
    public void addItem(MenuItem item) {
        this.items.add(item);
    }

    /**
     * Calculates the total price of the order.
     * @return The total price.
     */
    public double calculateTotal() {
        double total = 0;
        for (MenuItem item : items) {
            total += item.getPrice();
        }
        return total;
    }

    /**
     * Returns a detailed string representation of the order.
     * @return Formatted string including ID, status, items, and total.
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order ID: ").append(orderId).append(" (Status: ").append(status).append(")\n");
        sb.append("Items:\n");
        for (MenuItem item : items) {
            sb.append("  - ").append(item.getName()).append(" ($").append(String.format("%.2f", item.getPrice())).append(")\n");
        }
        sb.append("Total: $").append(String.format("%.2f", calculateTotal())).append("\n");
        return sb.toString();
    }
}

/**
 * Main class for the Restaurant Order System. Manages menu, pending orders,
 * completed orders, and user interaction.
 */
public class RestaurantSystem {
    // --- Data Structures ---
    private List<MenuItem> menu; // List of available menu items
    private Queue<Order> pendingOrders; // Queue of orders waiting for processing
    private List<Order> completedOrders; // List of completed orders
    private Scanner scanner; // Scanner for user input

    /**
     * Constructs the RestaurantSystem, initializing data structures and menu.
     */
    public RestaurantSystem() {
        // Use ArrayList for menu and completed orders as they are lists
        menu = new ArrayList<>();
        completedOrders = new ArrayList<>();
        // Use LinkedList as a concrete implementation of Queue for pending orders
        pendingOrders = new LinkedList<>();
        scanner = new Scanner(System.in);

        initializeMenu(); // Populate the menu with sample items
    }

    /**
     * Populates the initial menu with sample items.
     */
    private void initializeMenu() {
        menu.add(new MenuItem(1, "Burger", 8.99));
        menu.add(new MenuItem(2, "Fries", 3.49));
        menu.add(new MenuItem(3, "Soda", 1.99));
        menu.add(new MenuItem(4, "Pizza", 12.50));
        System.out.println("Menu initialized with " + menu.size() + " items.");
    }

    /**
     * Starts the main application loop, handling user interaction.
     * Includes class-wide exception handling.
     */
    public void start() {
        int choice = -1;
        // Main loop continues until user chooses to exit (choice 0)
        while (choice != 0) {
            printMenu(); // Display the main menu

            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt(); // Read integer input
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch for menu options
                switch (choice) {
                    case 1:
                        addOrder(); // Call method to add a new order
                        break;
                    case 2:
                        processNextOrder(); // Call method to process the next order in queue
                        break;
                    case 3:
                        viewPendingOrders(); // Call method to view pending orders
                        break;
                    case 4:
                        viewCompletedOrders(); // Call method to view completed orders
                        break;
                    case 0:
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Handle invalid integer choices using System.err
                        System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input using System.err
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to ensure loop continues
            } catch (Exception e) {
                 // Class-wide catch for any other unexpected exceptions using System.err
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 // Optionally, print stack trace for debugging
                 // e.printStackTrace(System.err);
                 choice = -1; // Reset choice, but the loop will continue
            }
            System.out.println(); // Add a newline for better readability between interactions
        }
        scanner.close(); // Close the scanner when the application exits
    }

    /**
     * Prints the main menu options to System.out.
     */
    private void printMenu() {
        System.out.println("--- Restaurant Order System ---");
        System.out.println("1. Add New Order");
        System.out.println("2. Process Next Order");
        System.out.println("3. View Pending Orders");
        System.out.println("4. View Completed Orders");
        System.out.println("0. Exit");
        System.out.println("-------------------------------");
    }

    /**
     * Handles the process of adding a new order based on user input.
     */
    private void addOrder() {
        System.out.println("\n--- Add New Order ---");
        Order newOrder = new Order(); // Create a new order object
        boolean addingItems = true;

        while(addingItems) {
            displayMenuItems(); // Show the available menu items
            System.out.print("Enter item ID to add (or 0 to finish order): ");
            try {
                int itemId = scanner.nextInt(); // Read item ID input
                scanner.nextLine(); // Consume newline

                if (itemId == 0) {
                    addingItems = false; // Stop adding items
                    if (newOrder.getItems().isEmpty()) {
                        System.out.println("Order cancelled: No items added.");
                        // Don't add the empty order to the queue
                    } else {
                         // Add the completed order to the end of the pending queue
                         pendingOrders.offer(newOrder);
                         System.out.println("Order " + newOrder.getOrderId() + " added to pending queue.");
                    }
                } else {
                    // Find the menu item by ID
                    MenuItem item = findMenuItemById(itemId);
                    if (item != null) {
                        newOrder.addItem(item); // Add item to the current order
                        System.out.println(item.getName() + " added to order.");
                    } else {
                        // Handle invalid item ID using System.err
                        System.err.println("Invalid item ID. Please try again.");
                    }
                }
            } catch (InputMismatchException e) {
                 // Handle non-integer input for item ID using System.err
                 System.err.println("Invalid input. Please enter a number for the item ID.");
                 scanner.nextLine(); // Consume invalid input
            }
        }
    }

    /**
     * Displays the available menu items to System.out.
     */
    private void displayMenuItems() {
        System.out.println("\n--- Menu ---");
        if (menu.isEmpty()) {
             System.out.println("Menu is empty.");
        } else {
            for (MenuItem item : menu) {
                System.out.println(item); // Uses MenuItem's toString()
            }
        }
        System.out.println("------------");
    }

     /**
      * Finds a MenuItem by its ID in the menu list.
      * @param id The ID to search for.
      * @return The MenuItem object if found, otherwise null.
      */
     private MenuItem findMenuItemById(int id) {
        for (MenuItem item : menu) {
            if (item.getId() == id) {
                return item;
            }
        }
        return null; // Item not found
    }


    /**
     * Processes the next order from the pending queue.
     */
    private void processNextOrder() {
        System.out.println("\n--- Process Next Order ---");
        // Retrieve and remove the head of the queue. Returns null if queue is empty.
        Order nextOrder = pendingOrders.poll();

        if (nextOrder != null) {
            nextOrder.setStatus("COMPLETED"); // Update order status
            completedOrders.add(nextOrder); // Add the processed order to the completed list
            System.out.println("Order " + nextOrder.getOrderId() + " processed and moved to completed.");
            displayOrderDetails(nextOrder); // Display details of the processed order
        } else {
            // Handle empty queue scenario using System.err
            System.err.println("No pending orders to process.");
        }
    }

    /**
     * Displays details of all orders currently in the pending queue.
     */
    private void viewPendingOrders() {
        System.out.println("\n--- Pending Orders ---");
        if (pendingOrders.isEmpty()) {
            System.out.println("No orders currently pending."); // Use System.out for informational message
        } else {
            int count = 1;
            // Iterate through the queue without removing elements
            for (Order order : pendingOrders) {
                 System.out.println("Order " + count + " in queue (ID: " + order.getOrderId() + ")");
                 displayOrderDetails(order); // Display details for each order
                 count++;
            }
        }
    }

    /**
     * Displays details of all orders in the completed list.
     */
    private void viewCompletedOrders() {
        System.out.println("\n--- Completed Orders ---");
        if (completedOrders.isEmpty()) {
            System.out.println("No orders have been completed yet."); // Use System.out for informational message
        } else {
            // Iterate through the completed list
            for (Order order : completedOrders) {
                displayOrderDetails(order); // Display details for each order
            }
        }
    }

    /**
     * Helper method to display the details of a single order.
     * @param order The Order object to display.
     */
    private void displayOrderDetails(Order order) {
        // Use Order's toString() method for detailed output
        System.out.print(order);
        System.out.println("--------------------"); // Separator for clarity
    }

    /**
     * Main method to start the Restaurant Order System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RestaurantSystem system = new RestaurantSystem();
        system.start(); // Begin the application flow
    }
}
