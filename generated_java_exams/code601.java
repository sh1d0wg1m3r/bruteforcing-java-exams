/*
 * Exam Question #601
 * Generated on: 2025-05-12 16:13:17
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Logistics Package Processing System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified command-line Logistics Package Processing System. The system needs to manage packages awaiting processing in a queue and maintain a history of packages that have been successfully processed. Users will interact with the system through a menu-driven interface.
 * 
 * The system should support the following operations:
 * 1.  **Add New Package:** Allow the user to input details for a new package (Tracking Number, Destination Zone, Weight) and add it to the processing queue.
 * 2.  **Process Next Package:** Take the next package from the front of the processing queue, simulate processing, and move it to a history list.
 * 3.  **View Processed History:** Display all packages that have been moved to the history list.
 * 4.  **View Processing Queue:** Display all packages currently waiting in the processing queue.
 * 5.  **Exit:** Terminate the application.
 * 
 * Each package should be represented by a `Package` object containing its tracking number (String), destination zone (String), and weight (double).
 * 
 * Your solution must demonstrate a strong understanding of fundamental and advanced Java concepts, adhere to good object-oriented design principles, and implement robust error handling.
 * 
 * **Specific Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Utilize `java.util.Queue` to manage packages waiting for processing, ensuring a First-In, First-Out (FIFO) order.
 *     *   Utilize `java.util.ArrayList` to store the history of processed packages.
 *     *   Where appropriate (e.g., method return types), use the `java.util.List` interface.
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console for menu choices and package details.
 *     *   Present a clear, numbered menu to the user.
 * 3.  **Control Flow:**
 *     *   Employ a `switch` statement to direct the program flow based on the user's menu selection.
 *     *   Use a loop to keep the application running until the user chooses to exit.
 * 4.  **Output Streams:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation confirmations, and listing package details from the queue or history.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid user input, logic errors like processing an empty queue).
 * 5.  **Exception Handling:**
 *     *   Implement comprehensive error handling using `try-catch` blocks.
 *     *   Include **class-wide exception handling** by wrapping the main application logic (e.g., the main loop) in a `try-catch` block to catch unexpected runtime errors.
 *     *   Implement specific error handling for:
 *         *   Invalid user input type (e.g., non-numeric input when expecting a number).
 *         *   Invalid package data (e.g., non-positive weight, empty tracking number/zone).
 *         *   Attempting to process a package when the queue is empty.
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Package` class with private fields for its attributes, a constructor, and public getter methods. Override the `toString()` method for easy display.
 *     *   Create a `LogisticsSystem` class responsible for managing the `Queue` and `List`. This class should contain the methods for adding, processing, and retrieving package information. Ensure fields are private and methods are public (encapsulation).
 * 7.  **Best Practices:**
 *     *   Use descriptive names for classes, variables, and methods.
 *     *   Add comments where necessary to explain complex logic or design choices.
 *     *   Maintain a clean and readable code structure.
 * 
 * **Expected Interaction Example:**
 * 
 * ```
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 1
 * Enter Tracking Number: PKG001
 * Enter Destination Zone: Zone A
 * Enter Weight (kg): 15.75
 * Package PKG001 added to the queue.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 4
 * --- Current Processing Queue ---
 * [PKG001, Zone A, 15.75kg]
 * -----------------------------
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 2
 * Processing package: [PKG001, Zone A, 15.75kg]
 * Package PKG001 processed successfully.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 3
 * --- Processed Package History ---
 * [PKG001, Zone A, 15.75kg]
 * -----------------------------
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 2
 * System.err: Error: Processing queue is empty. No packages to process.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: invalid_input
 * System.err: Error: Invalid input. Please enter a number.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 1
 * Enter Tracking Number: PKG002
 * Enter Destination Zone: Zone B
 * Enter Weight (kg): -5
 * System.err: Error: Weight must be positive.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 6
 * System.err: Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Logistics System Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Processed History
 * 4. View Processing Queue
 * 5. Exit
 * Enter your choice: 5
 * Exiting Logistics System. Goodbye!
 * ```
 * *(Note: The exact appearance of System.err output may vary slightly depending on the execution environment.)*
 * 
 * Provide the complete Java code for this system in a single file.
 *
 * EXPLANATION:
 * The provided solution implements the Logistics Package Processing System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The solution is organized into three classes:
 *     *   `Package`: A simple Plain Old Java Object (POJO) representing a package with encapsulated data (private fields) and public getters. The constructor includes basic validation for its data. The `toString()` method provides a convenient way to display package information.
 *     *   `LogisticsSystem`: This class acts as the core logic handler. It manages the two main data structures: a `Queue` for packages awaiting processing and a `List` for processed packages. It provides public methods (`addPackage`, `processNextPackage`, `getProcessedHistory`, `getProcessingQueue`) to interact with these structures, adhering to encapsulation principles.
 *     *   `LogisticsApp`: This class contains the `main` method and handles the user interface logic. It displays the menu, reads user input using `Scanner`, uses a `switch` statement to process commands, and calls the appropriate methods in the `LogisticsSystem`.
 * 
 * 2.  **Data Structures (`Queue`, `ArrayList`, `List`):**
 *     *   `java.util.Queue`: The `LogisticsSystem` uses a `Queue<Package>` (implemented by `java.util.LinkedList`) to store packages waiting to be processed. The `addPackage` method uses `offer()` to add packages to the tail, and `processNextPackage` uses `poll()` to retrieve and remove packages from the head, ensuring FIFO order.
 *     *   `java.util.ArrayList`: The `processedHistory` is implemented using `java.util.ArrayList` to store packages after they have been processed. This provides dynamic resizing and easy iteration.
 *     *   `java.util.List`: The `getProcessedHistory()` and `getProcessingQueue()` methods in `LogisticsSystem` return `List<Package>`. This demonstrates programming to the interface, which is a good practice, although in this specific single-threaded case, returning `ArrayList` directly might also be acceptable. Returning a *new* `ArrayList` created from the internal collections (`new ArrayList<>(collection)`) is done to prevent external code from directly modifying the system's internal state, upholding encapsulation.
 * 
 * 3.  **User Interaction (`Scanner`, `Switch`):**
 *     *   `java.util.Scanner`: Used in the `LogisticsApp.main` method to read integer choices and string/double package details from `System.in`. Careful handling of the newline character left by `nextInt()` and `nextDouble()` is implemented using `scanner.nextLine()` after reading numeric input to prevent issues with subsequent `nextLine()` calls.
 *     *   `switch` statement: The main loop in `LogisticsApp.main` uses a `switch` statement on the user's menu choice (`int choice`) to direct execution to the corresponding logic block (add, process, view history, view queue, exit, or invalid choice).
 * 
 * 4.  **Output Streams (`System.out`, `System.err`):**
 *     *   `System.out`: Used for displaying the menu, prompts for input, success messages (e.g., "Package added"), and the contents of the history and queue lists.
 *     *   `System.err`: Used exclusively for printing error messages, such as invalid menu choices, non-numeric input errors, package data validation failures, and the error when trying to process an empty queue.
 * 
 * 5.  **Exception Handling (`try-catch`, Class-wide):**
 *     *   **Class-wide Handling:** A `try-catch (Exception e)` block is placed around the main `while(running)` loop in `LogisticsApp.main`. This provides a top-level handler for any unexpected runtime exceptions that might occur during the program's execution, printing an error message and stack trace to `System.err` before the program potentially terminates.
 *     *   **Specific Input Handling:** A `try-catch (InputMismatchException)` block is used when reading the menu choice and the package weight. This catches non-numeric input, prints an error to `System.err`, and allows the program to continue gracefully.
 *     *   **Specific Logic/Validation Handling:** A `try-catch (IllegalArgumentException)` block is used when creating a `Package` object and adding it to the system. The `Package` constructor throws this exception for invalid data (empty strings, non-positive weight), and `LogisticsSystem.addPackage` could also throw it (though less likely with constructor validation). This catches validation errors and prints the specific error message to `System.err`.
 *     *   **Empty Queue Handling:** The `LogisticsSystem.processNextPackage()` method explicitly checks if `processingQueue.poll()` returns `null` (indicating the queue was empty) and prints an informative error message to `System.err` in that case, fulfilling this specific requirement without throwing an exception from the method itself (which simplifies the calling code in `LogisticsApp`).
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names (`LogisticsSystem`, `processNextPackage`, `processedHistory`, `trackingNumber`) are used throughout the code.
 *     *   Comments are included to explain the purpose of classes, methods, and key logic blocks (like exception handling sections).
 *     *   The code is structured logically into classes with clear responsibilities, enhancing readability and maintainability. Encapsulation is maintained by keeping fields private and using public methods for access and modification. Input validation is performed early (in the `Package` constructor) to ensure data integrity.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating proper object-oriented design, robust error handling, and adherence to Java best practices, making it a suitable challenging exam task.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package in the logistics system.
 */
class Package {
    private String trackingNumber;
    private String destinationZone;
    private double weight; // in kg

    /**
     * Constructs a new Package object.
     *
     * @param trackingNumber The unique tracking number.
     * @param destinationZone The destination zone for the package.
     * @param weight The weight of the package in kilograms.
     * @throws IllegalArgumentException if tracking number or zone is null/empty, or weight is non-positive.
     */
    public Package(String trackingNumber, String destinationZone, double weight) {
        // Input validation within the constructor
        if (trackingNumber == null || trackingNumber.trim().isEmpty()) {
            throw new IllegalArgumentException("Tracking number cannot be null or empty.");
        }
        if (destinationZone == null || destinationZone.trim().isEmpty()) {
            throw new IllegalArgumentException("Destination zone cannot be null or empty.");
        }
        if (weight <= 0) {
            throw new IllegalArgumentException("Weight must be positive.");
        }

        this.trackingNumber = trackingNumber.trim();
        this.destinationZone = destinationZone.trim();
        this.weight = weight;
    }

    // Public getter methods for accessing package attributes
    public String getTrackingNumber() {
        return trackingNumber;
    }

    public String getDestinationZone() {
        return destinationZone;
    }

    public double getWeight() {
        return weight;
    }

    /**
     * Provides a string representation of the package.
     * @return A formatted string including tracking number, zone, and weight.
     */
    @Override
    public String toString() {
        return "[" + trackingNumber + ", " + destinationZone + ", " + weight + "kg]";
    }
}

/**
 * Manages the logistics operations, including the processing queue and history.
 */
class LogisticsSystem {
    // Queue for packages waiting to be processed (FIFO)
    private Queue<Package> processingQueue;
    // List for packages that have been processed
    private List<Package> processedHistory;

    /**
     * Constructs a new LogisticsSystem, initializing the queue and history list.
     */
    public LogisticsSystem() {
        // LinkedList is a common implementation for the Queue interface
        this.processingQueue = new LinkedList<>();
        // ArrayList is a common implementation for the List interface
        this.processedHistory = new ArrayList<>();
    }

    /**
     * Adds a package to the end of the processing queue.
     *
     * @param pkg The package to add.
     * @throws IllegalArgumentException if the package object is null.
     *         (Package constructor handles validation of pkg contents).
     */
    public void addPackage(Package pkg) {
        if (pkg == null) {
             throw new IllegalArgumentException("Cannot add a null package.");
        }
        // offer() is generally preferred over add() for queues as it doesn't throw exceptions
        // in capacity-constrained queues (though LinkedList is not capacity-constrained)
        processingQueue.offer(pkg);
        System.out.println("Package " + pkg.getTrackingNumber() + " added to the queue.");
    }

    /**
     * Processes the next package from the front of the queue.
     * Removes the package from the queue and adds it to the processed history.
     *
     * @return The package that was processed, or null if the queue was empty.
     */
    public Package processNextPackage() {
        // poll() retrieves and removes the head of this queue, or returns null if this queue is empty.
        Package pkg = processingQueue.poll();
        if (pkg != null) {
            processedHistory.add(pkg);
            System.out.println("Processing package: " + pkg.toString());
            System.out.println("Package " + pkg.getTrackingNumber() + " processed successfully.");
        } else {
            // Use System.err for error messages as required
            System.err.println("Error: Processing queue is empty. No packages to process.");
        }
        return pkg;
    }

    /**
     * Gets a list of all packages that have been processed.
     * Returns a new ArrayList to prevent external modification of the internal list.
     *
     * @return A List of processed packages.
     */
    public List<Package> getProcessedHistory() {
        // Return a copy to maintain encapsulation
        return new ArrayList<>(processedHistory);
    }

    /**
     * Gets a list representation of the packages currently in the processing queue.
     * Returns a new ArrayList containing the queue elements.
     *
     * @return A List of packages in the processing queue.
     */
    public List<Package> getProcessingQueue() {
        // Convert the queue elements to a list for easy display.
        // Note: This is a snapshot; the queue might change after this list is created.
        return new ArrayList<>(processingQueue);
    }
}

/**
 * Main application class to run the Logistics Package Processing System.
 * Handles user interaction and orchestrates calls to the LogisticsSystem.
 */
public class LogisticsApp {

    private static void displayMenu() {
        System.out.println("\n--- Logistics System Menu ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Processed History");
        System.out.println("4. View Processing Queue");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LogisticsSystem system = new LogisticsSystem();
        boolean running = true;

        // Class-wide exception handling around the main application loop
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Initialize with an invalid choice

                // --- Input Handling for Menu Choice ---
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    // Catch non-integer input specifically
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid token from the scanner buffer
                    continue; // Skip the rest of the loop body and display menu again
                } finally {
                     // Always consume the rest of the line after reading the number
                     // This prevents issues with subsequent nextLine() calls
                    scanner.nextLine();
                }
                // --- End Input Handling for Menu Choice ---


                // --- Switch Statement for Menu Navigation ---
                switch (choice) {
                    case 1: // Add New Package
                        System.out.print("Enter Tracking Number: ");
                        String trackingNumber = scanner.nextLine();
                        System.out.print("Enter Destination Zone: ");
                        String destinationZone = scanner.nextLine();
                        double weight = -1; // Initialize weight

                        System.out.print("Enter Weight (kg): ");
                        // --- Input Handling for Package Weight ---
                        try {
                            weight = scanner.nextDouble();
                            // Consume newline left-over by nextDouble()
                            scanner.nextLine();

                            // Create Package object - constructor validates data
                            Package newPackage = new Package(trackingNumber, destinationZone, weight);
                            // Add package to the system
                            system.addPackage(newPackage);

                        } catch (InputMismatchException e) {
                            // Catch non-numeric input for weight
                            System.err.println("Error: Invalid weight input. Please enter a number.");
                            // Consume the invalid input token
                            scanner.nextLine();
                        } catch (IllegalArgumentException e) {
                            // Catch validation errors from Package constructor or addPackage method
                            System.err.println("Error: " + e.getMessage());
                        }
                        // --- End Input Handling for Package Weight ---
                        break;

                    case 2: // Process Next Package
                        // The LogisticsSystem method handles printing success/error messages
                        system.processNextPackage();
                        break;

                    case 3: // View Processed History
                        List<Package> history = system.getProcessedHistory();
                        System.out.println("--- Processed Package History ---");
                        if (history.isEmpty()) {
                            System.out.println("No packages have been processed yet.");
                        } else {
                            // Iterate and print each package using its toString() method
                            for (Package pkg : history) {
                                System.out.println(pkg);
                            }
                        }
                        System.out.println("-----------------------------");
                        break;

                    case 4: // View Processing Queue
                        List<Package> queueList = system.getProcessingQueue();
                        System.out.println("--- Current Processing Queue ---");
                        if (queueList.isEmpty()) {
                            System.out.println("Processing queue is empty.");
                        } else {
                             // Iterate and print each package using its toString() method
                            for (Package pkg : queueList) {
                                System.out.println(pkg);
                            }
                        }
                         System.out.println("-----------------------------");
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Logistics System. Goodbye!");
                        break;

                    default: // Handle choices outside the 1-5 range
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                // --- End Switch Statement ---
            }
        } catch (Exception e) {
            // This catches any unexpected runtime exceptions that weren't handled specifically
            System.err.println("\nAn unexpected system error occurred: " + e.getMessage());
            // Print stack trace to stderr for debugging purposes
            e.printStackTrace(System.err);
        } finally {
            // Ensure the scanner resource is closed when the application exits or crashes
            if (scanner != null) {
                scanner.close();
            }
        }
    }
}
