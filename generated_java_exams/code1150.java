/*
 * Exam Question #1150
 * Generated on: 2025-05-12 17:31:44
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Workflow Automation System
 * 
 * **Problem Description:**
 * 
 * Design and implement a simplified Workflow Automation System using Java. This system will manage a queue of pending tasks and maintain a history of completed tasks. Users will interact with the system via a command-line interface to add new tasks, process the next available task, view the current task queue, or view the history of completed tasks.
 * 
 * Your solution must demonstrate a strong understanding of core Java data structures, control flow, input/output, exception handling, and object-oriented principles.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a class named `Task` with the following private attributes:
 *     *   `taskId` (an integer, unique identifier)
 *     *   `description` (a String)
 *     *   `status` (a String, e.g., "PENDING", "COMPLETED")
 *     *   Include a constructor and public getter methods for these attributes.
 * 
 * 2.  **Workflow Manager:** Create a class named `WorkflowManager` that encapsulates the task management logic. It must have:
 *     *   A private `Queue<Task>` to store tasks that are waiting to be processed. Use a concrete implementation like `java.util.LinkedList` which implements `Queue`.
 *     *   A private `List<Task>` (declared using the `List` interface) to store tasks after they are completed. Use `java.util.ArrayList` as the concrete implementation.
 *     *   A private integer counter to generate unique `taskId` values.
 *     *   Public methods for the following operations:
 *         *   `addTask(String description)`: Creates a new `Task` with a unique ID and "PENDING" status, and adds it to the task queue.
 *         *   `processNextTask()`: Removes the task from the front of the queue, updates its status to "COMPLETED", and adds it to the history list. It should handle the case where the queue is empty.
 *         *   `viewTaskQueue()`: Prints the details (ID, description, status) of all tasks currently in the queue.
 *         *   `viewTaskHistory()`: Prints the details (ID, description, status) of all tasks in the history list.
 * 
 * 3.  **User Interface:** Implement a command-line interface in the `main` method of a separate class (e.g., `WorkflowApp`).
 *     *   Use `java.util.Scanner` to read user input.
 *     *   Present a menu of options to the user:
 *         1.  Add New Task
 *         2.  Process Next Task
 *         3.  View Task Queue
 *         4.  View Task History
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's choice.
 *     *   The program should loop until the user chooses to exit.
 * 
 * 4.  **Error Handling and Validation:**
 *     *   Implement input validation for the user's menu choice. If the input is not a valid integer or is outside the range of options, display an error message using `System.err`.
 *     *   In `processNextTask()`, if the queue is empty, print an informative error message using `System.err` and do not throw an exception.
 *     *   Implement **class-wide exception handling** using `try-catch` blocks. A general `try-catch` around the main application loop in the `main` method is acceptable for catching unexpected runtime errors and printing them to `System.err`.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for all normal output (menu, prompts, task details, history).
 *     *   Use `System.err` for all error messages.
 * 
 * 6.  **Best Practices:**
 *     *   Ensure proper encapsulation (`private` fields, `public` methods).
 *     *   Use meaningful variable, method, and class names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Follow clean code structure.
 * 
 * **Expected Output:**
 * 
 * The output should be interactive, prompting the user for input and displaying results or errors based on their actions.
 * 
 * *   Menu options should be clearly displayed.
 * *   Adding a task should prompt for description.
 * *   Processing a task should confirm which task was processed or indicate if the queue was empty.
 * *   Viewing queues/history should list tasks with ID, description, and status.
 * *   Invalid input should result in an error message on `System.err`.
 * *   Unexpected errors should be caught and reported on `System.err`.
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Complete Exam Question
 * Task added: ID 1 - Complete Exam Question
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Prepare for next lecture
 * Task added: ID 2 - Prepare for next lecture
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 3
 * --- Current Task Queue ---
 * ID: 1, Description: Complete Exam Question, Status: PENDING
 * ID: 2, Description: Prepare for next lecture, Status: PENDING
 * --------------------------
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 2
 * Processing task: ID 1 - Complete Exam Question
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 3
 * --- Current Task Queue ---
 * ID: 2, Description: Prepare for next lecture, Status: PENDING
 * --------------------------
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: 4
 * --- Task History ---
 * ID: 1, Description: Complete Exam Question, Status: COMPLETED
 * --------------------
 * 
 * Workflow Automation System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Task History
 * 5. Exit
 * Enter your choice: invalid
 * Invalid input. Please enter a number between 1 and 5.
 * 
 * Workflow Automation System Menu:
 * ... (menu continues)
 * Enter your choice: 2
 * Processing task: ID 2 - Prepare for next lecture
 * 
 * Workflow Automation System Menu:
 * ...
 * Enter your choice: 2
 * Error: The task queue is currently empty.
 * 
 * Workflow Automation System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Workflow Automation System.
 * ```
 * 
 * This task requires you to integrate various Java concepts into a functional system, demonstrating your ability to use data structures, control flow, input/output, and error handling effectively.
 *
 * EXPLANATION:
 * This solution implements the requested Workflow Automation System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents a single task with `taskId`, `description`, and `status`.
 *     *   Fields are `private` for encapsulation.
 *     *   Public getter methods provide access to the task's attributes.
 *     *   A `markAsCompleted()` method changes the status, adhering to the object's responsibility.
 *     *   `toString()` method provides a convenient way to print task details.
 * 
 * 2.  **`WorkflowManager` Class:**
 *     *   Encapsulates the core logic of managing tasks.
 *     *   `private Queue<Task> taskQueue`: A `LinkedList` is used to implement the `Queue` interface. This structure is suitable for a waiting line where tasks are added to the end (`offer`) and removed from the front (`poll`).
 *     *   `private List<Task> taskHistory`: An `ArrayList` is used to implement the `List` interface. This structure is suitable for storing completed tasks in order, allowing easy iteration. The variable is declared as `List` to program to the interface, promoting flexibility.
 *     *   `nextTaskId`: A private counter ensures each new task gets a unique ID.
 *     *   `addTask(String description)`: Creates a new `Task` and adds it to the `taskQueue` using `offer()`, which is the standard `Queue` method for adding elements. Includes basic validation for the description.
 *     *   `processNextTask()`: Uses `poll()` to retrieve and remove the head of the `taskQueue`. `poll()` returns `null` if the queue is empty, which is handled gracefully with a `System.err` message, fulfilling the requirement. If a task is retrieved, its status is updated, and it's added to the `taskHistory` `ArrayList`.
 *     *   `viewTaskQueue()` and `viewTaskHistory()`: Iterate through the respective collections and print task details. They check for emptiness and print appropriate messages. Iterating the `Queue` is done safely using a for-each loop, which does not remove elements.
 * 
 * 3.  **`WorkflowApp` Class (`main` method):**
 *     *   This class serves as the entry point and handles the user interface.
 *     *   A `Scanner` is used for reading input from `System.in`. A `try-with-resources` block is used to ensure the scanner is closed automatically.
 *     *   A `while(running)` loop keeps the application active until the user chooses to exit.
 *     *   Inside the loop:
 *         *   The menu is printed.
 *         *   User input is read.
 *         *   **Input Validation:** A `try-catch (InputMismatchException)` block handles cases where the user enters non-integer input. Additional `if` statements validate if the integer input is within the valid range (1-5). Error messages for invalid input are printed to `System.err`.
 *         *   **`switch` Statement:** The validated integer choice is used in a `switch` statement to call the appropriate method on the `WorkflowManager` instance. This effectively controls the program flow based on user commands.
 *     *   **Class-wide Exception Handling (`try-catch` in `main`):** A broad `try-catch (Exception e)` block wraps the main `while` loop. This catches any unexpected runtime exceptions that might occur during the execution of the loop's logic (though specific handling for input and empty queue is already in place). If an exception is caught, an error message including the exception's message is printed to `System.err`, and the stack trace is also printed to `System.err` for debugging. This fulfills the requirement for class-wide handling by preventing the program from crashing abruptly due to unhandled exceptions in the core application logic.
 * 
 * 4.  **Output Streams:**
 *     *   `System.out.println()` is used for displaying the menu, prompts, task details, and success messages.
 *     *   `System.err.println()` is used exclusively for displaying error messages, such as invalid input or attempting to process an empty queue.
 * 
 * 5.  **Best Practices:**
 *     *   Encapsulation is used in both `Task` and `WorkflowManager`.
 *     *   Variable and method names are descriptive (`taskQueue`, `processNextTask`, `viewTaskHistory`).
 *     *   Basic Javadoc comments are included for classes and methods.
 *     *   The code is structured into logical classes (`Task`, `WorkflowManager`, `WorkflowApp`), separating concerns.
 *     *   Input validation and specific error handling (empty queue) are implemented.
 *     *   General exception handling is included in the main loop.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, well-structured program that demonstrates key advanced Java concepts.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task in the workflow system.
 */
class Task {
    private int taskId;
    private String description;
    private String status; // e.g., "PENDING", "COMPLETED"

    /**
     * Constructs a new Task.
     * @param taskId The unique identifier for the task.
     * @param description A brief description of the task.
     */
    public Task(int taskId, String description) {
        this.taskId = taskId;
        this.description = description;
        this.status = "PENDING"; // Tasks start as PENDING
    }

    // --- Getters ---
    public int getTaskId() {
        return taskId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Marks the task as completed.
     */
    public void markAsCompleted() {
        this.status = "COMPLETED";
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Description: %s, Status: %s", taskId, description, status);
    }
}

/**
 * Manages the task queue and history.
 */
class WorkflowManager {
    private Queue<Task> taskQueue;
    private List<Task> taskHistory; // Declared as List, implemented as ArrayList
    private int nextTaskId; // Counter for unique task IDs

    /**
     * Constructs a new WorkflowManager.
     */
    public WorkflowManager() {
        this.taskQueue = new LinkedList<>(); // Implementation of Queue
        this.taskHistory = new ArrayList<>(); // Implementation of List
        this.nextTaskId = 1; // Start task IDs from 1
    }

    /**
     * Adds a new task to the queue.
     * @param description The description of the task.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
             System.err.println("Error: Task description cannot be empty.");
             return;
        }
        Task newTask = new Task(nextTaskId++, description.trim());
        taskQueue.offer(newTask); // offer is generally preferred over add for queues
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task from the queue.
     * Removes it from the queue, marks it as completed, and adds it to history.
     */
    public void processNextTask() {
        Task taskToProcess = taskQueue.poll(); // poll returns null if queue is empty
        if (taskToProcess == null) {
            System.err.println("Error: The task queue is currently empty. No tasks to process.");
        } else {
            taskToProcess.markAsCompleted();
            taskHistory.add(taskToProcess);
            System.out.println("Processing task: " + taskToProcess);
        }
    }

    /**
     * Displays all tasks currently in the queue.
     */
    public void viewTaskQueue() {
        System.out.println("--- Current Task Queue ---");
        if (taskQueue.isEmpty()) {
            System.out.println("The task queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : taskQueue) {
                System.out.println(task);
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Displays all tasks in the history list.
     */
    public void viewTaskHistory() {
        System.out.println("--- Task History ---");
        if (taskHistory.isEmpty()) {
            System.out.println("The task history is empty.");
        } else {
            for (Task task : taskHistory) {
                System.out.println(task);
            }
        }
        System.out.println("--------------------");
    }
}

/**
 * Main application class for the Workflow Automation System.
 * Handles user interaction and coordinates with the WorkflowManager.
 */
public class WorkflowApp {

    public static void main(String[] args) {
        WorkflowManager manager = new WorkflowManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling (specifically for the main loop)
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default to an invalid choice

                System.out.print("Enter your choice: ");
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number between 1 and 5.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration
                }

                // Input validation for choice range
                if (choice < 1 || choice > 5) {
                    System.err.println("Invalid input. Please enter a number between 1 and 5.");
                    continue; // Skip to the next iteration
                }

                // Use switch statement for flow control
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        manager.addTask(description);
                        break;
                    case 2:
                        manager.processNextTask();
                        break;
                    case 3:
                        manager.viewTaskQueue();
                        break;
                    case 4:
                        manager.viewTaskHistory();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Workflow Automation System.");
                        break;
                    default:
                        // This case should theoretically not be reached due to the validation above,
                        // but included for completeness in switch.
                        System.err.println("An unexpected option was selected.");
                }
                System.out.println(); // Add a blank line for better readability
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime errors in the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Workflow Automation System Menu:");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Task Queue");
        System.out.println("4. View Task History");
        System.out.println("5. Exit");
    }
}
