/*
 * Exam Question #537
 * Generated on: 2025-05-11 23:26:19
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Simple Team Task Manager
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple command-line application to manage tasks for a small team. The system should allow users to add new tasks, process the next pending task, and view both pending and completed tasks. Tasks are processed in the order they are added (First-In, First-Out).
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:**
 *     *   Create a class named `Task` to represent a single task.
 *     *   It must have a private `String` field for the task `description`.
 *     *   It must have a private `String` field for the task `status` (e.g., "PENDING", "COMPLETED").
 *     *   Include a constructor `Task(String description)` that initializes the description and sets the initial status to "PENDING".
 *     *   Provide public getter methods for both `description` and `status`.
 *     *   Include a public method `markAsCompleted()` that changes the task's status to "COMPLETED".
 *     *   Override the `toString()` method to provide a user-friendly representation of the task (e.g., "[STATUS] Description").
 * 
 * 2.  **Task Management Logic:**
 *     *   Create a class named `TaskManager`.
 *     *   It must have a private field to store **pending** tasks using a `java.util.Queue`. Use `java.util.LinkedList` as the concrete implementation.
 *     *   It must have a private field to store **completed** tasks using a `java.util.List`. Use `java.util.ArrayList` as the concrete implementation.
 *     *   Include a constructor that initializes these collections.
 *     *   Implement a public method `addTask(String description)`:
 *         *   Takes a task description as input.
 *         *   Validates that the description is not null or empty after trimming whitespace. If invalid, print an error message to `System.err` and do not add the task.
 *         *   If valid, creates a new `Task` object and adds it to the pending tasks queue. Print a success message to `System.out`.
 *     *   Implement a public method `processNextTask()`:
 *         *   Retrieves the next task from the pending tasks queue using a method that returns `null` if the queue is empty (e.g., `poll()`).
 *         *   If the queue was empty, print an error message to `System.err`.
 *         *   If a task is retrieved, call its `markAsCompleted()` method and add it to the completed tasks list. Print a success message to `System.out` indicating which task was processed.
 *     *   Implement a public method `getPendingTasks()` that returns the `Queue<Task>` of pending tasks.
 *     *   Implement a public method `getCompletedTasks()` that returns the `List<Task>` of completed tasks.
 * 
 * 3.  **User Interface (Main Application):**
 *     *   Create a class with a `main` method to run the application.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Implement a loop that presents a menu to the user with the following options:
 *         1.  Add New Task
 *         2.  Process Next Pending Task
 *         3.  View Pending Tasks
 *         4.  View Completed Tasks
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   For option 1: Prompt the user for the task description, read the input, and call `taskManager.addTask()`.
 *     *   For option 2: Call `taskManager.processNextTask()`.
 *     *   For option 3: Call `taskManager.getPendingTasks()`, iterate through the returned queue, and print each task using its `toString()` method to `System.out`. If the list is empty, print a message indicating that.
 *     *   For option 4: Call `taskManager.getCompletedTasks()`, iterate through the returned list, and print each task using its `toString()` method to `System.out`. If the list is empty, print a message indicating that.
 *     *   For option 5: Exit the loop and terminate the program.
 *     *   For any invalid menu choice (e.g., a number outside the range 1-5), print an error message to `System.err`.
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle non-integer input when reading the menu choice. Print an error message to `System.err` and consume the invalid input line before continuing the loop.
 * 
 * 4.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for classes, methods, and variables.
 *     *   Include appropriate comments explaining the purpose of classes, complex methods, and important logic sections.
 *     *   Validate user input where necessary (task description, menu choice).
 *     *   Use `System.out` for normal output and `System.err` for error messages.
 *     *   Structure the code clearly.
 * 
 * **Expected Output Example:**
 * 
 * ```
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write report
 * Task added: [PENDING] Write report
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Prepare presentation
 * Task added: [PENDING] Prepare presentation
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * [PENDING] Write report
 * [PENDING] Prepare presentation
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: [COMPLETED] Write report
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * [PENDING] Prepare presentation
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * [COMPLETED] Write report
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: [COMPLETED] Prepare presentation
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Error: No pending tasks to process.
 * 
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Process Next Pending Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting Task Manager.
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **`Task` Class:**
 *     *   Represents the fundamental data unit (a task).
 *     *   Uses `private` fields (`description`, `status`) for encapsulation.
 *     *   Provides `public` getters and a method (`markAsCompleted`) to control access and modification of its state.
 *     *   Overrides `toString()` for clear representation, adhering to the requested format `[STATUS] Description`.
 * 
 * 2.  **`TaskManager` Class:**
 *     *   Manages the collections of tasks.
 *     *   Uses a `private Queue<Task> pendingTasks` (`LinkedList` implementation) to store tasks waiting to be processed. The `Queue` interface and its FIFO nature are suitable for processing tasks in the order they are added. `LinkedList` is a common `Queue` implementation.
 *     *   Uses a `private List<Task> completedTasks` (`ArrayList` implementation) to store tasks that have been processed. The `List` interface and `ArrayList` provide an ordered collection suitable for viewing completed tasks.
 *     *   **`addTask(String description)`:** Demonstrates adding elements to the `Queue` using `offer()`. Includes input validation for the description, printing errors to `System.err`.
 *     *   **`processNextTask()`:** Demonstrates retrieving and removing the head of the `Queue` using `poll()`. `poll()` is used because it gracefully returns `null` if the queue is empty, which is handled by printing an error to `System.err`, fulfilling the requirement. It then adds the processed task to the `completedTasks` `List`.
 *     *   **`getPendingTasks()` and `getCompletedTasks()`:** Provide access to the task collections for viewing in the main application. (Note: In a more robust system, returning immutable views or copies would be preferred to prevent external modification, but for this exam context, returning the references is acceptable).
 * 
 * 3.  **`TaskManagerApp` Class (Main Application):**
 *     *   Contains the `main` method, serving as the application entry point and user interface.
 *     *   **`Scanner`:** An instance is created to read user input from `System.in`.
 *     *   **Main Loop:** A `while` loop keeps the application running until the user chooses to exit.
 *     *   **`try-catch` for Exception Handling:**
 *         *   A `try` block encloses the code that reads the menu choice (`scanner.nextInt()`) and the `switch` statement.
 *         *   A `catch (InputMismatchException e)` block specifically handles cases where the user enters non-integer input. It prints an error message to `System.err` and crucially calls `scanner.nextLine()` to consume the invalid input, preventing an infinite loop caused by the scanner repeatedly trying to read the same invalid token.
 *         *   A general `catch (Exception e)` block is included as a safety net to catch any other unexpected runtime exceptions, demonstrating broader exception handling and printing an error to `System.err`.
 *     *   **`switch` Statement:** Controls the flow of execution based on the user's integer menu choice, directing the program to the appropriate action (add, process, view, exit).
 *     *   **`System.out` and `System.err`:** Used distinctly as required. `System.out` is used for displaying the menu, successful operations, and task lists. `System.err` is used exclusively for printing error messages (invalid input, empty queue, empty description, invalid menu choice).
 *     *   **Input Validation:** Besides the `InputMismatchException` handling, the `addTask` method in `TaskManager` validates that the task description is not empty, using `System.err` for feedback. The `switch` statement's `default` case handles invalid *numeric* choices, also using `System.err`.
 *     *   **Iteration:** Loops are used to iterate through the `Queue` (for pending tasks) and the `List` (for completed tasks) to print their contents. Note that iterating a `Queue` using a `for-each` loop does not remove elements, which is the desired behavior for viewing.
 * 
 * **Best Practices Implementation:**
 * 
 * *   **Encapsulation:** Achieved through the use of `private` fields and `public` methods in `Task` and `TaskManager`.
 * *   **Meaningful Names:** Classes (`Task`, `TaskManager`, `TaskManagerApp`), methods (`addTask`, `processNextTask`, `getPendingTasks`, `markAsCompleted`), and variables (`description`, `status`, `pendingTasks`, `completedTasks`, `choice`) are clearly named.
 * *   **Comments:** Javadoc-style comments explain the purpose of classes, constructors, and key methods. Inline comments clarify specific logic points (e.g., using `poll()`, consuming newline).
 * *   **Clean Code Structure:** The logic is separated into three classes (`Task`, `TaskManager`, `TaskManagerApp`) based on responsibility, making the code modular and easier to understand. The `main` method focuses on user interaction and delegating tasks to the `TaskManager`.
 * 
 * This solution effectively integrates all specified Java components within a practical, albeit simple, application structure, demonstrating core object-oriented principles, collection usage, input handling, and error management.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single task with a description and status
class Task {
    private String description;
    private String status; // e.g., "PENDING", "COMPLETED"

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     */
    public Task(String description) {
        this.description = description;
        this.status = "PENDING"; // Initial status
    }

    // --- Getters ---
    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Marks the task's status as "COMPLETED".
     */
    public void markAsCompleted() {
        this.status = "COMPLETED";
    }

    /**
     * Provides a user-friendly string representation of the task.
     * @return String representation of the task.
     */
    @Override
    public String toString() {
        return "[" + status + "] " + description;
    }
}

// Manages collections of pending and completed tasks
class TaskManager {
    // Queue for pending tasks (FIFO processing)
    private Queue<Task> pendingTasks;
    // List for completed tasks (ordered history)
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskManager and initializes the task collections.
     */
    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new task to the pending tasks queue.
     * Validates the description before adding.
     * @param description The description of the new task.
     */
    public void addTask(String description) {
        // Input validation for description
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return; // Do not add task if description is invalid
        }

        Task newTask = new Task(description.trim()); // Trim whitespace
        pendingTasks.offer(newTask); // Use offer for adding to queue
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task from the pending queue.
     * Moves the task to the completed list.
     */
    public void processNextTask() {
        // Retrieve and remove the head of the queue
        Task nextTask = pendingTasks.poll(); // poll() returns null if queue is empty

        if (nextTask == null) {
            System.err.println("Error: No pending tasks to process.");
        } else {
            nextTask.markAsCompleted();
            completedTasks.add(nextTask);
            System.out.println("Processed task: " + nextTask);
        }
    }

    /**
     * Returns the queue of pending tasks.
     * @return The Queue of pending tasks.
     */
    public Queue<Task> getPendingTasks() {
        return pendingTasks;
    }

    /**
     * Returns the list of completed tasks.
     * @return The List of completed tasks.
     */
    public List<Task> getCompletedTasks() {
        return completedTasks;
    }
}

// Main class for user interaction
public class TaskManagerApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskManager taskManager = new TaskManager();
        boolean running = true;

        // Main application loop
        while (running) {
            printMenu();

            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt(); // Read integer choice
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch for menu control
                switch (choice) {
                    case 1: // Add New Task
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        taskManager.addTask(description); // TaskManager handles validation and System.err
                        break;
                    case 2: // Process Next Pending Task
                        taskManager.processNextTask(); // TaskManager handles System.err for empty queue
                        break;
                    case 3: // View Pending Tasks
                        System.out.println("\n--- Pending Tasks ---");
                        Queue<Task> pending = taskManager.getPendingTasks();
                        if (pending.isEmpty()) {
                            System.out.println("No pending tasks.");
                        } else {
                            // Iterate through the queue (note: iterating a Queue doesn't remove elements)
                            for (Task task : pending) {
                                System.out.println(task);
                            }
                        }
                        break;
                    case 4: // View Completed Tasks
                        System.out.println("\n--- Completed Tasks ---");
                        List<Task> completed = taskManager.getCompletedTasks();
                        if (completed.isEmpty()) {
                            System.out.println("No completed tasks.");
                        } else {
                            // Iterate through the list
                            for (Task task : completed) {
                                System.out.println(task);
                            }
                        }
                        break;
                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Task Manager.");
                        break;
                    default: // Invalid number choice
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Catch non-integer input specifically
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input line to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging purposes
            }
            System.out.println(); // Add a blank line for better readability between menu loops
        }

        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Task Manager Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Pending Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
