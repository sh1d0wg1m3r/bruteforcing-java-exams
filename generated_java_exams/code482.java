/*
 * Exam Question #482
 * Generated on: 2025-05-11 23:17:36
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Resource-Based Task Queue System**
 * 
 * **Scenario:**
 * You are tasked with building a simple system to manage tasks that require specific resources for processing. Tasks are submitted and processed in a First-In, First-Out (FIFO) manner. The system needs to handle user input, manage a queue of tasks, maintain a list of available resource types, and provide feedback to the user, including error handling.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a class named `Task` with private fields: `name` (String) and `requiredResourceType` (String). Provide a constructor and public getter methods for these fields.
 * 2.  **System Core:** Create a class named `TaskManagementSystem`.
 *     *   It must have a private field `taskQueue` of type `Queue<Task>` to store tasks waiting for processing.
 *     *   It must have a private field `availableResources` of type `List<String>` to store the types of resources the system can handle. Initialize this list in the constructor with a predefined set of resource types (e.g., "CPU", "GPU", "Network", "Disk"). Use `ArrayList` for the implementation.
 *     *   Implement the following public methods:
 *         *   `addTask(String name, String resourceType)`: Adds a new `Task` to the queue. Before adding, validate if the `resourceType` is present in the `availableResources` list. If not, print an error message to `System.err` and do not add the task.
 *         *   `processNextTask()`: Removes and returns the next task from the queue. If the queue is empty, print an error message to `System.err` and return `null`. Otherwise, print a success message to `System.out` indicating the task being processed.
 *         *   `viewTaskQueue()`: Prints the details of all tasks currently in the queue to `System.out` without removing them. If the queue is empty, print a message indicating that.
 *         *   `viewAvailableResources()`: Prints the list of available resource types to `System.out`.
 *         *   `isValidResourceType(String resourceType)`: A helper method (can be private) that checks if a given resource type is in the `availableResources` list.
 * 3.  **User Interface:** Implement a `main` method (preferably in a separate class, e.g., `Main`) that interacts with the `TaskManagementSystem`.
 *     *   Use a `Scanner` to get user input from the console.
 *     *   Present a menu to the user with the following options:
 *         1.  Add New Task
 *         2.  Process Next Task
 *         3.  View Task Queue
 *         4.  View Available Resources
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement input validation. If the user enters non-integer input for the menu choice, handle it gracefully and prompt again.
 *     *   Use `System.out` for menu display, prompts, and successful operation output.
 *     *   Use `System.err` for all error messages (invalid menu choice, invalid resource type, empty queue processing).
 * 4.  **Exception Handling:** Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential `InputMismatchException` when reading integer input from the `Scanner` and potentially other runtime exceptions that might occur during the execution flow, printing error details to `System.err`.
 * 5.  **Best Practices:** Ensure your code follows good practices:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments and basic JavaDocs.
 *     *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu. Based on user input, it should perform the requested operation, print relevant information to `System.out`, or print error messages to `System.err`.
 * 
 * Example interaction flow:
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Available Resources
 * 5. Exit
 * Enter your choice: 1
 * Enter task name: MyTask1
 * Enter required resource type: CPU
 * Task 'MyTask1' requiring 'CPU' added to the queue.
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 1
 * Enter task name: MyTask2
 * Enter required resource type: Database
 * Error: Invalid resource type: Database. Task not added.
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Task Queue ---
 * Task: MyTask1, Resource: CPU
 * ------------------
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 2
 * Processing task: Task: MyTask1, Resource: CPU
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 2
 * Error: The task queue is empty. No task to process.
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should consist of the `Task` class, the `TaskManagementSystem` class, and the `Main` class.
 *
 * EXPLANATION:
 * This solution implements a simple Resource-Based Task Queue System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:** A simple Plain Old Java Object (POJO) representing a task. It encapsulates the task's `name` and `requiredResourceType` using private fields and provides public getter methods. The `toString()` method is overridden for easy printing of task details.
 * 
 * 2.  **`TaskManagementSystem` Class:**
 *     *   **`Queue<Task> taskQueue`:** A `LinkedList` is used to implement the `Queue` interface. `LinkedList` is a common choice for a queue due to its efficient add/remove operations at both ends.
 *     *   **`List<String> availableResources`:** An `ArrayList` is used to implement the `List` interface. `ArrayList` is suitable here as we primarily need to store and iterate over a list of resource types.
 *     *   **Constructor:** Initializes both the queue and the list of available resources.
 *     *   **`isValidResourceType(String resourceType)`:** A private helper method using the `List.contains()` method (or stream with `anyMatch` for case-insensitivity, as implemented) to check if the requested resource type is valid.
 *     *   **`addTask(String name, String resourceType)`:** Takes task details, validates the resource type using `isValidResourceType`, and adds the task to the `taskQueue` using `offer()`. `offer()` is generally preferred over `add()` for queues as it returns `false` if the element cannot be added (though for `LinkedList`, it behaves like `add()`). Error messages for invalid resource types are printed to `System.err`. Basic validation for empty name/type is also included.
 *     *   **`processNextTask()`:** Uses `taskQueue.poll()` to retrieve and remove the head of the queue. `poll()` is used instead of `remove()` because `poll()` returns `null` if the queue is empty, allowing for graceful handling without throwing a `NoSuchElementException`. A message is printed to `System.out` upon successful processing, and an error is printed to `System.err` if the queue is empty.
 *     *   **`viewTaskQueue()`:** Iterates through the queue to print its contents without removing elements. A safe way to do this is to create a temporary `ArrayList` from the queue (`new ArrayList<>(taskQueue)`) and iterate over the list. This provides a snapshot of the queue's current state. Output goes to `System.out`.
 *     *   **`viewAvailableResources()`:** Iterates through the `availableResources` list and prints each resource type to `System.out`.
 * 
 * 3.  **`Main` Class:**
 *     *   **`main` method:** This is the entry point of the application.
 *     *   An instance of `TaskManagementSystem` is created.
 *     *   A `Scanner` is initialized for user input.
 *     *   A `boolean running` flag controls the main application loop.
 *     *   **Class-wide Exception Handling:** The entire main loop and the `switch` statement are wrapped in a `try-catch(Exception e)` block. This demonstrates catching any unexpected runtime exceptions that might occur during the program's execution, printing the error to `System.err`.
 *     *   **Input Handling:** Inside the loop, there's a nested `try-catch(InputMismatchException e)` specifically for reading the menu choice. This handles cases where the user enters non-integer input, prints an error to `System.err`, consumes the invalid input using `scanner.nextLine()`, and continues the loop to re-prompt.
 *     *   **`switch` Statement:** Handles the user's valid integer choice, calling the appropriate method in the `TaskManagementSystem` instance. A `default` case handles invalid integer choices, printing an error to `System.err`.
 *     *   **`System.out` and `System.err`:** Used correctly throughout for normal output (`System.out`) and error messages (`System.err`).
 *     *   **`finally` block:** Ensures the `Scanner` is closed when the `try` block is exited, regardless of whether an exception occurred or the loop finished normally.
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is used in the `Task` and `TaskManagementSystem` classes.
 *     *   Variable and method names are descriptive (e.g., `taskQueue`, `processNextTask`, `isValidResourceType`).
 *     *   Basic JavaDocs and comments are included.
 *     *   Input validation is performed for resource types and menu choices.
 *     *   Error handling is implemented using `try-catch` and checking return values (`poll()`, `isEmpty()`).
 *     *   The code is structured into separate classes with clear responsibilities.
 * 
 * This solution effectively utilizes all the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) in a practical scenario, demonstrating core Java concepts and best practices suitable for a challenging exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

/**
 * Represents a single task with a name and a required resource type.
 */
class Task {
    private String name;
    private String requiredResourceType;

    /**
     * Constructs a new Task.
     *
     * @param name The name of the task.
     * @param requiredResourceType The type of resource required for the task.
     */
    public Task(String name, String requiredResourceType) {
        this.name = name;
        this.requiredResourceType = requiredResourceType;
    }

    /**
     * Gets the name of the task.
     * @return The task name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the required resource type for the task.
     * @return The required resource type.
     */
    public String getRequiredResourceType() {
        return requiredResourceType;
    }

    @Override
    public String toString() {
        return "Task: " + name + ", Resource: " + requiredResourceType;
    }
}

/**
 * Manages a queue of tasks and a list of available resources.
 */
class TaskManagementSystem {
    private Queue<Task> taskQueue;
    private List<String> availableResources;

    /**
     * Constructs a new TaskManagementSystem, initializing resources and the task queue.
     */
    public TaskManagementSystem() {
        // Use LinkedList as an implementation of Queue
        taskQueue = new LinkedList<>();
        // Use ArrayList as an implementation of List
        availableResources = new ArrayList<>();
        // Initialize with some predefined resource types
        availableResources.add("CPU");
        availableResources.add("GPU");
        availableResources.add("Network");
        availableResources.add("Disk");
    }

    /**
     * Checks if a given resource type is valid (exists in the available resources list).
     * @param resourceType The resource type to check.
     * @return true if the resource type is valid, false otherwise.
     */
    private boolean isValidResourceType(String resourceType) {
        // Case-insensitive check for flexibility
        return availableResources.stream()
                                 .anyMatch(res -> res.equalsIgnoreCase(resourceType.trim()));
    }

    /**
     * Adds a new task to the queue if the required resource type is valid.
     * @param name The name of the task.
     * @param resourceType The required resource type.
     */
    public void addTask(String name, String resourceType) {
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Task name cannot be empty.");
             return;
        }
        if (resourceType == null || resourceType.trim().isEmpty()) {
             System.err.println("Error: Resource type cannot be empty.");
             return;
        }

        String trimmedResourceType = resourceType.trim();

        if (isValidResourceType(trimmedResourceType)) {
            Task newTask = new Task(name.trim(), trimmedResourceType);
            taskQueue.offer(newTask); // offer is generally preferred over add for queues
            System.out.println("Task '" + newTask.getName() + "' requiring '" + newTask.getRequiredResourceType() + "' added to the queue.");
        } else {
            System.err.println("Error: Invalid resource type: " + resourceType + ". Task not added.");
            System.err.println("Available resource types are: " + availableResources);
        }
    }

    /**
     * Processes the next task in the queue (removes and returns it).
     * @return The processed Task, or null if the queue was empty.
     */
    public Task processNextTask() {
        // Use poll() as it returns null if the queue is empty, avoiding NoSuchElementException
        Task nextTask = taskQueue.poll();
        if (nextTask != null) {
            System.out.println("Processing task: " + nextTask);
            // In a real system, resource allocation/processing logic would go here
            return nextTask;
        } else {
            System.err.println("Error: The task queue is empty. No task to process.");
            return null;
        }
    }

    /**
     * Prints all tasks currently in the queue without removing them.
     */
    public void viewTaskQueue() {
        if (taskQueue.isEmpty()) {
            System.out.println("The task queue is empty.");
            return;
        }
        System.out.println("--- Task Queue ---");
        // Iterate through the queue without removing elements
        // Converting to a List is a common way to iterate over Queue contents safely
        List<Task> tasksInQueue = new ArrayList<>(taskQueue);
        for (int i = 0; i < tasksInQueue.size(); i++) {
            System.out.println((i + 1) + ". " + tasksInQueue.get(i));
        }
        System.out.println("------------------");
    }

    /**
     * Prints the list of available resource types.
     */
    public void viewAvailableResources() {
        System.out.println("--- Available Resource Types ---");
        if (availableResources.isEmpty()) {
             System.out.println("No resource types defined.");
        } else {
            for (String resource : availableResources) {
                System.out.println("- " + resource);
            }
        }
        System.out.println("------------------------------");
    }
}

/**
 * Main class to run the Task Management System.
 * Handles user interaction and the main application loop.
 */
public class Main {

    public static void main(String[] args) {
        TaskManagementSystem system = new TaskManagementSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Main application loop with class-wide exception handling
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Input handling for menu choice
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Restart loop to show menu again
                }

                // Switch statement for menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter task name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter required resource type: ");
                        String resourceType = scanner.nextLine();
                        system.addTask(name, resourceType);
                        break;
                    case 2:
                        system.processNextTask();
                        break;
                    case 3:
                        system.viewTaskQueue();
                        break;
                    case 4:
                        system.viewAvailableResources();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a newline for better readability between operations

            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("System terminated."); // Indicate final state
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Task Queue");
        System.out.println("4. View Available Resources");
        System.out.println("5. Exit");
    }
}
