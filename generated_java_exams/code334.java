/*
 * Exam Question #334
 * Generated on: 2025-05-11 22:56:41
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Queue System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified hospital appointment scheduling system. Patients arrive and are placed in a waiting queue. When a doctor becomes available, the next patient from the queue is called. The system needs to manage this queue, provide information about the waiting list, and handle basic user interactions and errors.
 * 
 * **Requirements:**
 * 
 * 1.  **System Class:** Create a Java class named `HospitalScheduler` that encapsulates the scheduling logic.
 * 2.  **Data Structures:**
 *     *   Use a `java.util.Queue<String>` to manage the waiting list of patient names.
 *     *   Use a `java.util.List<String>` (instantiated as `java.util.ArrayList`) to store a predefined list of available doctor names.
 * 3.  **Functionality:** Implement the following operations via a text-based menu driven by user input:
 *     *   **Add Patient:** Prompt the user for a patient's name and add them to the waiting queue.
 *     *   **Process Next Patient:** Remove the patient at the front of the queue, simulate assigning them to a doctor (you don't need complex doctor assignment logic, just indicate which patient was called), and display the patient's name. Handle the case where the queue is empty.
 *     *   **View Waiting Queue:** Display the names of all patients currently in the waiting queue, in order. Indicate if the queue is empty.
 *     *   **List Doctors:** Display the names of all available doctors.
 *     *   **Exit:** Terminate the program.
 * 4.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input for menu choices and patient names.
 *     *   Display a menu of options clearly using `System.out`.
 *     *   Use `System.out` for all normal output (menu, confirmations, queue status, etc.).
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, attempting to process an empty queue).
 * 5.  **Control Flow:** Use a `switch` statement to handle the different menu options.
 * 6.  **Error Handling:**
 *     *   Implement input validation for the menu choice (ensure it's an integer within the valid range).
 *     *   Handle the specific case of attempting to process a patient when the queue is empty.
 *     *   Implement class-wide exception handling using `try-catch` blocks in the main application loop to catch unexpected errors during user interaction or operations and report them using `System.err`.
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation within the `HospitalScheduler` class (private fields, public methods).
 *     *   Use meaningful names for classes, methods, and variables.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for the class and methods).
 *     *   Structure the code cleanly.
 * 
 * **Initial State:**
 * 
 * *   The system should start with an empty waiting queue.
 * *   Initialize the `availableDoctors` list with at least 3 doctor names.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, perform the requested action, and provide appropriate output or error messages. The output should be clear and informative.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice added to the queue.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient Bob added to the queue.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * 1. Alice
 * 2. Bob
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 2
 * Processing patient: Alice. Please proceed to see a doctor.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 3
 * Waiting Queue:
 * 1. Bob
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 2
 * Processing patient: Bob. Please proceed to see a doctor.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 2
 * Error: The waiting queue is empty.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: exit
 * Error: Invalid input. Please enter a number.
 * 
 * Hospital Scheduling System Menu:
 * 1. Add Patient
 * 2. Process Next Patient
 * 3. View Waiting Queue
 * 4. List Doctors
 * 5. Exit
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * **Constraints:**
 * 
 * *   Must use all specified Java components as required.
 * *   Adhere to best practices.
 * *   The solution should be contained within a single `.java` file.
 * 
 * **Submission:**
 * 
 * Provide the complete Java source code for the `HospitalScheduler` class and the main application logic.
 *
 * EXPLANATION:
 * This solution implements the `HospitalScheduler` class to manage a simplified hospital appointment queue system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`HospitalScheduler` Class:** Encapsulates the state (`waitingPatients`, `availableDoctors`) and behavior (add, process, view, list) of the scheduling system. Fields are `private`, and methods interacting with them are `public`, adhering to encapsulation principles.
 * 2.  **`Queue`:** The `waitingPatients` field is declared as `Queue<String>` and instantiated as `LinkedList<String>`. `LinkedList` is a common implementation of the `Queue` interface. It's used to maintain the order of patients waiting (FIFO - First-In, First-Out).
 *     *   `offer()` is used in `addPatient` to add an element to the end of the queue. It's generally preferred over `add()` in queues as it doesn't throw an exception if the queue is capacity-constrained (though `LinkedList` is not).
 *     *   `poll()` is used in `processNextPatient` to retrieve and remove the element at the front of the queue. It's preferred over `remove()` as it returns `null` if the queue is empty, allowing for graceful handling rather than throwing `NoSuchElementException`.
 *     *   Iteration (`for (String patient : waitingPatients)`) is used in `viewWaitingQueue` to display elements without removing them.
 * 3.  **`List` and `ArrayList`:** The `availableDoctors` field is declared as `List<String>` and instantiated as `ArrayList<String>`. This demonstrates programming to the interface (`List`). `ArrayList` is used as a dynamic array to store a fixed or growing list of doctor names.
 * 4.  **`Scanner`:** Used in the `main` method to read user input from `System.in` for menu choices and patient names. `scanner.nextInt()` reads the integer choice, and `scanner.nextLine()` is used appropriately after `nextInt()` to consume the remaining newline character and then to read the full patient name string.
 * 5.  **`Switch` Statement:** The `switch` statement in the `main` method handles the user's menu choice, directing the program flow to the corresponding functionality (`addPatient`, `processNextPatient`, etc.).
 * 6.  **`System.out` and `System.err`:** `System.out.println()` is used for displaying the menu, confirmations, queue contents, and doctor lists â€“ all normal program output. `System.err.println()` is specifically used for displaying error messages, such as invalid input or attempting an operation on an empty queue.
 * 7.  **`try-catch` Blocks:**
 *     *   A main `try-catch` block in the `main` method surrounds the user input reading and the `switch` statement. This block catches `InputMismatchException` if the user enters non-integer input for the menu choice, preventing the program from crashing and allowing the loop to continue after reporting the error via `System.err`.
 *     *   A general `catch (Exception e)` is included to catch any other unexpected runtime exceptions, providing a basic error message.
 *     *   A specific `try-catch` is used around the `scheduler.addPatient` call in case the `IllegalArgumentException` is thrown due to an empty patient name.
 *     *   The `processNextPatient` method itself checks for a `null` return from `poll()` and prints an error message using `System.err` internally, handling the empty queue case specifically within the method.
 * 8.  **Best Practices:**
 *     *   **Encapsulation:** `waitingPatients` and `availableDoctors` are `private`. Public methods provide controlled access.
 *     *   **Meaningful Names:** Class, variable, and method names (e.g., `HospitalScheduler`, `waitingPatients`, `addPatient`, `processNextPatient`) clearly indicate their purpose.
 *     *   **Comments/Documentation:** Javadoc comments explain the purpose of the class and key methods. Inline comments clarify specific logic.
 *     *   **Input Validation:** Checks for empty patient names and valid menu range are performed. The `try-catch` for `InputMismatchException` is also a form of input validation/handling.
 *     *   **Error Handling:** Specific errors (empty queue, invalid input) are handled and reported appropriately using `System.err`.
 *     *   **Clean Code Structure:** The code is organized logically within the class, with the `main` method handling the application loop and user interaction separate from the core scheduling logic in the `HospitalScheduler` instance.
 * 
 * This solution effectively integrates the required Java components into a practical scenario, demonstrating an understanding of data structures, control flow, object-oriented principles, and robust error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.NoSuchElementException; // Though poll() avoids this, good to know

/**
 * A simple Hospital Appointment Scheduling System.
 * Manages a waiting queue of patients and a list of available doctors.
 */
public class HospitalScheduler {

    private Queue<String> waitingPatients;
    private List<String> availableDoctors;

    /**
     * Constructs a new HospitalScheduler with an empty patient queue
     * and a predefined list of doctors.
     */
    public HospitalScheduler() {
        this.waitingPatients = new LinkedList<>(); // LinkedList implements Queue
        this.availableDoctors = new ArrayList<>();
        // Initialize with some doctors
        availableDoctors.add("Dr. Smith");
        availableDoctors.add("Dr. Jones");
        availableDoctors.add("Dr. Williams");
    }

    /**
     * Adds a patient to the end of the waiting queue.
     *
     * @param patientName The name of the patient to add.
     * @throws IllegalArgumentException if the patient name is null or empty.
     */
    public void addPatient(String patientName) {
        if (patientName == null || patientName.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be empty.");
        }
        waitingPatients.offer(patientName.trim()); // offer is safer than add in queues
        System.out.println("Patient " + patientName.trim() + " added to the queue.");
    }

    /**
     * Removes and returns the patient at the front of the waiting queue.
     * Simulates processing the next patient.
     *
     * @return The name of the patient who was processed.
     * @throws NoSuchElementException if the waiting queue is empty.
     */
    public String processNextPatient() {
        String nextPatient = waitingPatients.poll(); // poll is safer, returns null if empty
        if (nextPatient == null) {
            // Instead of throwing NoSuchElementException which poll avoids,
            // we'll use a specific message or custom exception, or handle null.
            // For this problem, we'll indicate it's empty and let the caller handle the null.
             System.err.println("Error: The waiting queue is empty.");
             return null; // Indicate no patient was processed
        } else {
            System.out.println("Processing patient: " + nextPatient + ". Please proceed to see a doctor.");
            return nextPatient;
        }
    }

    /**
     * Displays the current list of patients in the waiting queue.
     * Prints a message if the queue is empty.
     */
    public void viewWaitingQueue() {
        if (waitingPatients.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            System.out.println("Waiting Queue:");
            int i = 1;
            // Iterating over a Queue doesn't remove elements
            for (String patient : waitingPatients) {
                System.out.println(i++ + ". " + patient);
            }
        }
    }

    /**
     * Displays the list of available doctors.
     */
    public void listDoctors() {
        if (availableDoctors.isEmpty()) {
            System.out.println("No doctors available.");
        } else {
            System.out.println("Available Doctors:");
            for (int i = 0; i < availableDoctors.size(); i++) {
                System.out.println((i + 1) + ". " + availableDoctors.get(i));
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nHospital Scheduling System Menu:");
        System.out.println("1. Add Patient");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. List Doctors");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Main method to run the Hospital Scheduling System.
     * Handles user input and calls appropriate scheduler methods.
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            scheduler.displayMenu();

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character

                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String patientName = scanner.nextLine();
                        try {
                             scheduler.addPatient(patientName);
                        } catch (IllegalArgumentException e) {
                             System.err.println("Error: " + e.getMessage());
                        }
                        break;
                    case 2:
                        // processNextPatient handles the empty queue message internally
                        scheduler.processNextPatient();
                        break;
                    case 3:
                        scheduler.viewWaitingQueue();
                        break;
                    case 4:
                        scheduler.listDoctors();
                        break;
                    case 5:
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            } catch (java.util.InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging details
            }
        }

        scanner.close(); // Close the scanner when exiting
    }
}
