/*
 * Exam Question #560
 * Generated on: 2025-05-11 23:29:32
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Workshop Registration System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line application to manage attendee registration for a popular workshop. The workshop has a limited capacity, and once the capacity is reached, subsequent registrants are placed on a waiting list. The system needs to handle new registrations, display current lists, and manage spots that open up due to cancellations.
 * 
 * **Requirements:**
 * 
 * Implement a Java program named `WorkshopManager` that fulfills the following requirements:
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of attendees who are successfully registered for the workshop. This list must use `java.util.List` and be implemented using `java.util.ArrayList`.
 *     *   Maintain a waiting list for attendees who register after the workshop reaches capacity. This list must use `java.util.Queue` and be implemented using `java.util.LinkedList`.
 *     *   Define a fixed capacity for the workshop (e.g., 5 attendees).
 * 
 * 2.  **User Interface:**
 *     *   Provide a command-line menu using `System.out` with the following options:
 *         1.  Register Attendee
 *         2.  View Registered Attendees
 *         3.  View Waiting List
 *         4.  Process Cancellation (Move from Waiting List)
 *         5.  Exit
 *     *   Use `java.util.Scanner` to read the user's menu choice and attendee names from the console.
 * 
 * 3.  **Functionality:**
 *     *   **Register Attendee:**
 *         *   Prompt the user to enter the attendee's name.
 *         *   Validate that the entered name is not empty or just whitespace. If invalid, print an error message to `System.err` and do not register.
 *         *   If the number of registered attendees is less than the workshop capacity, add the attendee to the registered list and print a success message to `System.out`.
 *         *   If the registered list is full, add the attendee to the waiting list and print a message to `System.out` indicating they are on the waiting list.
 *     *   **View Registered Attendees:**
 *         *   Print a heading "Registered Attendees:" to `System.out`.
 *         *   List all attendees currently in the registered list, one name per line, to `System.out`. If the list is empty, print a message indicating that.
 *     *   **View Waiting List:**
 *         *   Print a heading "Waiting List:" to `System.out`.
 *         *   List all attendees currently in the waiting list, one name per line, to `System.out`. If the list is empty, print a message indicating that.
 *     *   **Process Cancellation:**
 *         *   Simulate a spot opening up in the workshop.
 *         *   Check if the waiting list is not empty AND the registered list is not full.
 *         *   If both conditions are true, remove the next attendee from the waiting list (using `Queue` methods) and add them to the registered list. Print a message to `System.out` indicating which attendee was moved.
 *         *   If the waiting list is empty, print a message to `System.err` indicating that no one is on the waiting list.
 *         *   (Optional but good practice) If the registered list is already full (this case shouldn't happen if a spot opened up, but handle defensively), print a message to `System.err`.
 *     *   **Exit:** Terminate the program gracefully.
 * 
 * 4.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options selected by the user.
 *     *   The program should run in a loop until the user chooses the Exit option.
 * 
 * 5.  **Error Handling:**
 *     *   Use `System.err.println` for all error messages (e.g., invalid input, waiting list empty when trying to process cancellation, workshop full message could also go here or `System.out` - choose one consistently).
 *     *   Implement class-wide exception handling using a `try-catch` block that wraps the main application loop. This block should catch a general `Exception` and print an error message to `System.err` if an unexpected error occurs. Handle specific input errors (like non-integer menu input) gracefully within the loop before the `switch`.
 * 
 * 6.  **Best Practices:**
 *     *   Use appropriate access modifiers (`private` for fields, `public` for main methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain complex logic or sections of code.
 *     *   Ensure proper resource management (e.g., closing the `Scanner`).
 *     *   Maintain a clean and readable code structure.
 * 
 * **Expected Output:**
 * 
 * The program should interact with the user via the console, displaying menus, prompts, success messages, lists, and error messages as described above. Error messages must go to `System.err`.
 * 
 * Your solution should be a single `.java` file containing the `WorkshopManager` class.
 *
 * EXPLANATION:
 * 
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Manages attendee registration for a workshop with limited capacity and a waiting list.
 * Demonstrates use of List, Queue, Scanner, switch, System.out/err, and exception handling.
 */
public class WorkshopManager {

    // Workshop configuration
    private static final int WORKSHOP_CAPACITY = 5;

    // Data structures for attendees
    private List<String> registeredAttendees;
    private Queue<String> waitingList;

    // Input scanner
    private Scanner scanner;

    /**
     * Constructor to initialize the workshop manager.
     */
    public WorkshopManager() {
        this.registeredAttendees = new ArrayList<>(); // Use ArrayList for registered list
        this.waitingList = new LinkedList<>(); // Use LinkedList as a Queue for waiting list
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Workshop Registration Menu ---");
        System.out.println("1. Register Attendee");
        System.out.println("2. View Registered Attendees");
        System.out.println("3. View Waiting List");
        System.out.println("4. Process Cancellation (Move from Waiting List)");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Handles the registration process for a new attendee.
     */
    private void registerAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine().trim(); // Read name and trim whitespace

        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
            return; // Exit the method if name is invalid
        }

        // Check if capacity is reached
        if (registeredAttendees.size() < WORKSHOP_CAPACITY) {
            registeredAttendees.add(name);
            System.out.println(name + " successfully registered for the workshop.");
        } else {
            waitingList.offer(name); // Add to the end of the waiting list
            System.out.println("Workshop is full. " + name + " added to the waiting list.");
        }
    }

    /**
     * Displays the list of attendees currently registered.
     */
    private void viewRegisteredAttendees() {
        System.out.println("\n--- Registered Attendees ---");
        if (registeredAttendees.isEmpty()) {
            System.out.println("No attendees currently registered.");
        } else {
            // Iterate and print using List interface methods
            for (int i = 0; i < registeredAttendees.size(); i++) {
                 System.out.println((i + 1) + ". " + registeredAttendees.get(i));
            }
        }
    }

    /**
     * Displays the list of attendees on the waiting list.
     */
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate and print using Queue interface methods (or just iterate)
            int i = 1;
            for (String attendee : waitingList) {
                System.out.println(i++ + ". " + attendee);
            }
        }
    }

    /**
     * Simulates a cancellation by moving the next person from the waiting list
     * to the registered list if a spot is available.
     */
    private void processCancellation() {
        System.out.println("\n--- Processing Cancellation ---");

        if (registeredAttendees.size() >= WORKSHOP_CAPACITY) {
             // This case shouldn't typically happen if a spot opened up,
             // but handling defensively.
             System.err.println("Error: Registered list is already full. Cannot move anyone from waiting list.");
             return;
        }

        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. No one to move to the registered list.");
            return;
        }

        // Poll the next person from the waiting list (removes and returns)
        String attendeeMoved = waitingList.poll();

        // Add the person to the registered list
        registeredAttendees.add(attendeeMoved);

        System.out.println(attendeeMoved + " has been moved from the waiting list to the registered list.");
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        boolean running = true;

        // Class-wide exception handling wrapping the main loop
        try {
            while (running) {
                displayMenu();

                // Read user input for menu choice
                int choice = -1; // Default invalid choice
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                } else {
                    // Consume the invalid input line to prevent infinite loop
                    String invalidInput = scanner.next();
                    System.err.println("Invalid input: '" + invalidInput + "'. Please enter a number.");
                    scanner.nextLine(); // Consume the rest of the line
                    continue; // Skip to the next iteration of the loop
                }
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        registerAttendee();
                        break;
                    case 2:
                        viewRegisteredAttendees();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        processCancellation();
                        break;
                    case 5:
                        System.out.println("Exiting Workshop Registration System. Goodbye!");
                        running = false; // Set flag to exit loop
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        WorkshopManager manager = new WorkshopManager();
        manager.run(); // Start the application loop
    }
}
