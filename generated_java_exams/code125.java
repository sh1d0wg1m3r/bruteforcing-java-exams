/*
 * Exam Question #125
 * Generated on: 2025-05-11 22:18:05
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Task Management System**
 * 
 * Design and implement a console-based Task Management System in Java. This system will simulate managing a queue of tasks that are waiting to be processed and maintaining a history of tasks that have been completed. The system interacts with the user through a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:**
 *     *   Create a class named `Task` to represent individual tasks.
 *     *   Each `Task` must have a unique integer `taskId` and a `String description`.
 *     *   Implement proper encapsulation: fields should be `private`, and access/modification should be via `public` constructors and/or methods (e.g., getters).
 *     *   Include a meaningful `toString()` method for easy display of task information.
 * 
 * 2.  **Task Management System:**
 *     *   Create a class named `TaskManagementSystem` which will contain the main logic and data structures.
 *     *   This class must manage two collections:
 *         *   A collection for tasks awaiting processing: Use `java.util.Queue`.
 *         *   A collection for tasks that have been completed: Use `java.util.List`, specifically implemented using `java.util.ArrayList`.
 *     *   Implement the following methods within `TaskManagementSystem`:
 *         *   `addTask(String description)`: Creates a new `Task` with a sequentially generated unique ID and adds it to the pending task queue.
 *         *   `processNextTask()`: Removes the next task from the pending queue and adds it to the completed tasks list. If the queue is empty, it should indicate this condition.
 *         *   `viewPendingTasks()`: Displays all tasks currently in the pending queue.
 *         *   `viewCompletedTasks()`: Displays all tasks in the completed tasks list.
 *         *   `runSystem()`: Contains the main application loop, displaying the menu and handling user input.
 * 
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a clear menu of options to the user:
 *         1.  Add New Task
 *         2.  Process Next Task
 *         3.  View Pending Tasks
 *         4.  View Completed Tasks
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 
 * 4.  **Error Handling and Output:**
 *     *   Use `System.out` for displaying the menu, task lists, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu input, attempting to process when the queue is empty).
 *     *   Implement robust exception handling: Use `try-catch` blocks to handle potential runtime errors. Specifically, wrap the main loop or critical input reading sections in `TaskManagementSystem.runSystem()` with a `try-catch` block to demonstrate class-wide exception handling. Handle potential `InputMismatchException` when reading integer input.
 * 
 * 5.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc comments for classes and public methods).
 *     *   Perform basic input validation (e.g., ensuring menu choice is an integer within the valid range).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should start by displaying the menu. It should then continuously prompt the user for input until 'Exit' is selected. Based on the input, it should perform the requested action, display results or errors, and return to the menu. Error messages (like invalid input or empty queue processing) must be printed to `System.err`. All other output should go to `System.out`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Task Management System Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write report
 * Task added: Task{id=1, description='Write report'}
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 1
 * Enter task description: Prepare presentation
 * Task added: Task{id=2, description='Prepare presentation'}
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 3
 * Pending Tasks:
 * Task{id=1, description='Write report'}
 * Task{id=2, description='Prepare presentation'}
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 2
 * Processing task: Task{id=1, description='Write report'}
 * Task completed.
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 3
 * Pending Tasks:
 * Task{id=2, description='Prepare presentation'}
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 4
 * Completed Tasks:
 * Task{id=1, description='Write report'}
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 2
 * Processing task: Task{id=2, description='Prepare presentation'}
 * Task completed.
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 2
 * Error: The pending task queue is empty. Nothing to process.
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number between 1 and 5.
 * 
 * --- Task Management System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * This task requires you to integrate various core Java concepts including data structures (`Queue`, `List`, `ArrayList`), input/output (`Scanner`, `System.out`, `System.err`), control flow (`switch`, loops), object-oriented principles (classes, encapsulation), and exception handling (`try-catch`).
 *
 * EXPLANATION:
 * The provided solution implements a simple console-based Task Management System as required by the exam task. It demonstrates the use of all specified Java components and adheres to best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   This class serves as a simple data structure for a task.
 *     *   It has `private` fields (`taskId`, `description`) ensuring encapsulation.
 *     *   The `public` constructor allows creating `Task` objects.
 *     *   `public` getter methods (`getTaskId`, `getDescription`) provide read access to the fields.
 *     *   The `toString()` method is overridden to provide a clear, readable representation of a `Task` object, useful for printing.
 * 
 * 2.  **`TaskManagementSystem` Class:**
 *     *   This is the main class containing the system's logic and data structures.
 *     *   **`Queue<Task> pendingTasksQueue`**: A `Queue` is used here because tasks are processed in the order they are added (FIFO - First-In, First-Out), which is the natural behavior for a task queue. `java.util.LinkedList` is used as a concrete implementation of the `Queue` interface.
 *     *   **`List<Task> completedTasksList`**: A `List` is used to store completed tasks. The order of completion is maintained, and random access isn't strictly necessary, but `ArrayList` is a common and efficient implementation for general-purpose lists.
 *     *   **`Scanner scanner`**: Used to read input from `System.in`. It's initialized once in the constructor and closed in the `finally` block of the `runSystem` method to release system resources.
 *     *   **`nextTaskId`**: A `static` variable is used to generate unique, sequential IDs for new tasks. This is a simple way to ensure uniqueness within this single-instance system.
 *     *   **Methods (`addTask`, `processNextTask`, `viewPendingTasks`, `viewCompletedTasks`)**: These methods encapsulate the core operations of the system, interacting with the `Queue` and `List` collections.
 *         *   `addTask` uses `offer()` to add to the queue.
 *         *   `processNextTask` uses `poll()` to remove from the queue (safely returns `null` if empty) and `add()` to add to the list.
 *         *   `viewPendingTasks` iterates through the queue using a for-each loop, which uses an iterator internally, allowing traversal without removing elements.
 *         *   `viewCompletedTasks` iterates through the list.
 *     *   **`displayMenu()`**: A helper method to print the menu options to `System.out`.
 *     *   **`runSystem()`**: This method contains the main loop (`while(running)`).
 *         *   It displays the menu.
 *         *   It attempts to read the user's integer choice using `scanner.nextInt()`.
 *         *   A `try-catch (InputMismatchException e)` block is specifically used around `scanner.nextInt()` to catch non-integer input. If caught, an error message is printed to `System.err`, the invalid token is consumed using `scanner.next()`, and the loop continues.
 *         *   `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls (e.g., when reading the task description).
 *         *   A `switch` statement handles the valid integer choices, calling the appropriate system method or setting `running` to `false` for the exit option. The `default` case handles integer inputs that are outside the valid range (1-5), printing an error to `System.err`.
 *         *   **Class-wide `try-catch (Exception e)`**: The entire `while` loop within `runSystem` is wrapped in a broader `try-catch(Exception e)` block. This demonstrates a form of class-wide exception handling for the main execution flow. Any unhandled exception that occurs within the loop (beyond the specific `InputMismatchException` handled internally) will be caught here, an error message printed to `System.err`, and the stack trace printed to `System.err`, preventing the program from crashing unexpectedly.
 *         *   **`finally` block**: Ensures that the `scanner.close()` method is called regardless of whether an exception occurred or the loop exited normally, releasing the input stream resource.
 * 
 * 3.  **Input/Output and Error Streams:**
 *     *   `System.out.println()` is used for normal program output: menu display, task additions, processing messages, and list contents.
 *     *   `System.err.println()` is used exclusively for error messages: invalid menu input, attempting to process an empty queue, task description validation, and unexpected exceptions caught by the main `try-catch`.
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is used in the `Task` class.
 *     *   Variable names like `pendingTasksQueue`, `completedTasksList`, `processNextTask` are descriptive.
 *     *   Javadoc comments are included for classes and public methods.
 *     *   Input validation is present for menu choices (type check and range check) and task descriptions (empty check).
 *     *   Error handling is implemented using `try-catch` blocks, directing errors to `System.err`.
 *     *   The code is structured into logical methods within the `TaskManagementSystem` class.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating advanced understanding of their usage and interaction, along with core Java programming principles and best practices.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with an ID and description.
 */
class Task {
    private int taskId;
    private String description;

    /**
     * Constructs a new Task.
     * @param taskId The unique identifier for the task.
     * @param description The description of the task.
     */
    public Task(int taskId, String description) {
        this.taskId = taskId;
        this.description = description;
    }

    /**
     * Gets the task ID.
     * @return The task ID.
     */
    public int getTaskId() {
        return taskId;
    }

    /**
     * Gets the task description.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return "Task{id=" + taskId + ", description='" + description + "'}";
    }
}

/**
 * Manages a queue of pending tasks and a list of completed tasks.
 * Provides a console interface for interaction.
 */
public class TaskManagementSystem {

    // Queue to hold tasks waiting to be processed
    private Queue<Task> pendingTasksQueue;

    // List to hold tasks that have been completed
    private List<Task> completedTasksList;

    // Scanner for reading user input
    private Scanner scanner;

    // Counter for generating unique task IDs
    private static int nextTaskId = 1;

    /**
     * Constructs a new TaskManagementSystem.
     * Initializes the collections and the scanner.
     */
    public TaskManagementSystem() {
        this.pendingTasksQueue = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasksList = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new task to the pending queue.
     * @param description The description for the new task.
     */
    public void addTask(String description) {
        Task newTask = new Task(nextTaskId++, description);
        pendingTasksQueue.offer(newTask); // offer is generally preferred over add for queues
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task in the pending queue.
     * Moves the task from pending to completed list.
     */
    public void processNextTask() {
        Task taskToProcess = pendingTasksQueue.poll(); // poll returns null if queue is empty
        if (taskToProcess != null) {
            System.out.println("Processing task: " + taskToProcess);
            completedTasksList.add(taskToProcess);
            System.out.println("Task completed.");
        } else {
            System.err.println("Error: The pending task queue is empty. Nothing to process.");
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    public void viewPendingTasks() {
        System.out.println("Pending Tasks:");
        if (pendingTasksQueue.isEmpty()) {
            System.out.println("No tasks in the pending queue.");
        } else {
            // Iterate without removing elements
            for (Task task : pendingTasksQueue) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays all tasks currently in the completed tasks list.
     */
    public void viewCompletedTasks() {
        System.out.println("Completed Tasks:");
        if (completedTasksList.isEmpty()) {
            System.out.println("No tasks have been completed yet.");
        } else {
            for (Task task : completedTasksList) {
                System.out.println(task);
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Management System Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user interaction.
     * Includes class-wide exception handling.
     */
    public void runSystem() {
        boolean running = true;

        // Class-wide try-catch block for general error handling
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Default invalid choice

                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 5.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration
                }

                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Switch statement for handling menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        if (description == null || description.trim().isEmpty()) {
                            System.err.println("Error: Task description cannot be empty.");
                        } else {
                            addTask(description.trim());
                        }
                        break;
                    case 2:
                        processNextTask();
                        break;
                    case 3:
                        viewPendingTasks();
                        break;
                    case 4:
                        viewCompletedTasks();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exception that wasn't handled elsewhere
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Task Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManagementSystem system = new TaskManagementSystem();
        system.runSystem();
    }
}
