/*
 * Exam Question #494
 * Generated on: 2025-05-11 23:19:36
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Scheduler**
 * 
 * **Problem Description:**
 * 
 * Design and implement a simple console-based application for a hospital to manage patient records and schedule appointments. The system should allow staff to add new patients, schedule appointments for registered patients, view the upcoming appointments, and process the next appointment in the queue.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Management:**
 *     *   Maintain a list of registered patients. Each patient should have a unique integer ID, a name, and a brief description of their medical condition.
 *     *   Provide functionality to add a new patient, automatically assigning a unique ID.
 * 
 * 2.  **Appointment Scheduling:**
 *     *   Maintain a queue of appointments. Each appointment should be linked to a registered patient and include a brief description (e.g., "General Checkup", "Follow-up").
 *     *   Provide functionality to schedule an appointment for an *existing* patient. If the patient ID is not found, display an error message.
 * 
 * 3.  **Appointment Processing:**
 *     *   Provide functionality to view the list of upcoming appointments in the order they were scheduled (the queue).
 *     *   Provide functionality to "process" the next appointment, which means removing it from the queue and displaying its details. If the queue is empty, display an error message.
 * 
 * 4.  **User Interface:**
 *     *   Implement a simple menu-driven console interface using `java.util.Scanner` for input.
 *     *   The menu options should include:
 *         1.  Add New Patient
 *         2.  Schedule Appointment
 *         3.  View Appointment Queue
 *         4.  Process Next Appointment
 *         5.  Exit
 *     *   Use a `switch` statement to handle menu choices.
 * 
 * 5.  **Data Structures:**
 *     *   Use a `java.util.List` (specifically, `java.util.ArrayList`) to store patient records.
 *     *   Use a `java.util.Queue` (specifically, `java.util.LinkedList` or `java.util.ArrayDeque`, but declare as `Queue`) to manage the appointment waiting list.
 * 
 * 6.  **Error Handling and Output:**
 *     *   Use `System.out` for all normal output (menu, successful operations, data display).
 *     *   Use `System.err` for all error messages (e.g., invalid menu choice, patient not found, queue empty, invalid input format).
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around user input that might cause exceptions (like non-integer input).
 * 
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public getters/methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (e.g., Javadoc for classes/methods).
 *     *   Validate user input where necessary (e.g., patient ID existence, valid menu options).
 *     *   Structure the code cleanly with separate classes for `Patient`, `Appointment`, and the main `HospitalScheduler` logic.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, perform the requested action, and display appropriate messages or data. Error messages should be clearly distinguishable using `System.err`.
 * 
 * Example interaction flow:
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1. Add New Patient
 * 2. Schedule Appointment
 * 3. View Appointment Queue
 * 4. Process Next Appointment
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient condition: Fever
 * 
 * Patient added: ID 1, Name: Alice, Condition: Fever
 * 
 * --- Hospital Scheduler Menu ---
 * 1. Add New Patient
 * 2. Schedule Appointment
 * 3. View Appointment Queue
 * 4. Process Next Appointment
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Enter patient condition: Sprained Ankle
 * 
 * Patient added: ID 2, Name: Bob, Condition: Sprained Ankle
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Enter patient ID to schedule appointment: 1
 * Enter appointment description: General Checkup
 * 
 * Appointment scheduled for Patient ID 1: General Checkup
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Enter patient ID to schedule appointment: 99
 * Enter appointment description: Follow-up
 * Error: Patient with ID 99 not found. Appointment not scheduled. // This line should go to System.err
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Upcoming Appointments ---
 * Appointment for Patient ID 1 (Alice): General Checkup
 * -----------------------------
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * 
 * Processing next appointment...
 * Appointment Processed: Patient ID 1 (Alice) - General Checkup
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * Error: Appointment queue is empty. // This line should go to System.err
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Hospital Scheduler.
 * ```
 * 
 * Your solution must be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements the Hospital Appointment Scheduler application, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:** The code is organized into three classes: `Patient`, `Appointment`, and `HospitalScheduler`. This follows good object-oriented design principles by separating concerns. `Patient` and `Appointment` are simple data classes with private fields and public getters (encapsulation).
 * 
 * 2.  **Data Structures (`List` and `Queue`):**
 *     *   `List<Patient> patients = new ArrayList<>();`: An `ArrayList` is used to store patient objects. It's declared using the `List` interface type, demonstrating polymorphism and good practice (program to interfaces, not implementations). `ArrayList` provides dynamic resizing and efficient random access, suitable for looking up patients by ID (though a linear search `findPatientById` is used here for simplicity, a `HashMap` could be used for O(1) lookup in a more complex system).
 *     *   `Queue<Appointment> appointmentQueue = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface for managing appointments. A `Queue` is a perfect fit because appointments are processed in the order they are scheduled (First-In, First-Out - FIFO). `LinkedList` efficiently handles additions (`offer`) and removals (`poll`) from the ends, which are the primary queue operations.
 * 
 * 3.  **User Input (`Scanner`) and Menu (`Switch`):**
 *     *   `Scanner scanner = new Scanner(System.in);` is used to read input from the console.
 *     *   The `main` method contains a `while` loop that keeps the application running until the user chooses to exit.
 *     *   Inside the loop, `displayMenu()` prints the options.
 *     *   A `switch` statement is used to direct the program flow based on the user's integer input, calling the appropriate methods (`addPatient`, `scheduleAppointment`, etc.).
 * 
 * 4.  **Error Handling (`try-catch`, `System.err`):**
 *     *   **Input Validation:** The code attempts to handle potential `InputMismatchException` if the user enters non-integer input when a number is expected (like the menu choice or patient ID). This is done with specific `try-catch` blocks around `scanner.nextInt()`.
 *     *   **Logic Errors:** Checks are performed before attempting operations that could fail:
 *         *   Checking if a patient ID exists before scheduling an appointment (`findPatientById` returning `null`).
 *         *   Checking if the `appointmentQueue` is empty before viewing or processing (`isEmpty()` or checking `poll()` return value).
 *     *   **`System.err`:** All messages indicating an error condition (invalid input, patient not found, queue empty, unexpected exceptions) are printed to `System.err`, making them distinct from normal program output (`System.out`).
 *     *   **Class-wide Exception Handling:** A `try-catch (Exception e)` block is wrapped around the main `while` loop in the `main` method. This provides a safety net for any unexpected runtime exceptions that might occur anywhere within the application's core logic, preventing the program from crashing abruptly. The `finally` block ensures the `Scanner` is closed, releasing system resources.
 * 
 * 5.  **Encapsulation and Best Practices:**
 *     *   Fields in `Patient`, `Appointment`, and `HospitalScheduler` are `private`. Access is controlled via public methods (constructors, getters, and action methods like `addPatient`, `scheduleAppointment`).
 *     *   Method and variable names are descriptive (e.g., `appointmentQueue`, `processNextAppointment`, `findPatientById`).
 *     *   Basic Javadoc comments explain the purpose of classes and methods.
 *     *   The code is structured logically with methods performing specific tasks.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, control flow, user interaction, and robust error handling, fulfilling the requirements of a challenging exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList; // Using LinkedList for Queue implementation
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner input

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int id;
    private String name;
    private String condition;

    /**
     * Constructs a new Patient.
     * @param id The unique patient ID.
     * @param name The patient's name.
     * @param condition The patient's medical condition description.
     */
    public Patient(int id, String name, String condition) {
        this.id = id;
        this.name = name;
        this.condition = condition;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    /**
     * Provides a string representation of the Patient.
     * @return A formatted string describing the patient.
     */
    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Condition: " + condition;
    }
}

/**
 * Represents an appointment for a patient.
 */
class Appointment {
    private Patient patient;
    private String description;

    /**
     * Constructs a new Appointment.
     * @param patient The patient for whom the appointment is scheduled.
     * @param description A description of the appointment.
     */
    public Appointment(Patient patient, String description) {
        this.patient = patient;
        this.description = description;
    }

    // --- Getters ---
    public Patient getPatient() {
        return patient;
    }

    public String getDescription() {
        return description;
    }

    /**
     * Provides a string representation of the Appointment.
     * @return A formatted string describing the appointment.
     */
    @Override
    public String toString() {
        return "Appointment for Patient ID " + patient.getId() + " (" + patient.getName() + "): " + description;
    }
}

/**
 * Manages patient records and appointment scheduling using Lists and Queues.
 */
public class HospitalScheduler {

    // Using List interface, implemented by ArrayList
    private List<Patient> patients;
    // Using Queue interface, implemented by LinkedList
    private Queue<Appointment> appointmentQueue;
    private int nextPatientId; // Counter for assigning unique patient IDs

    /**
     * Constructs a new HospitalScheduler.
     * Initializes the patient list, appointment queue, and patient ID counter.
     */
    public HospitalScheduler() {
        patients = new ArrayList<>(); // Instantiate List with ArrayList
        appointmentQueue = new LinkedList<>(); // Instantiate Queue with LinkedList
        nextPatientId = 1; // Start patient IDs from 1
    }

    /**
     * Adds a new patient to the system.
     * @param name The name of the patient.
     * @param condition The medical condition of the patient.
     */
    public void addPatient(String name, String condition) {
        Patient newPatient = new Patient(nextPatientId++, name, condition);
        patients.add(newPatient);
        System.out.println("\nPatient added: " + newPatient);
    }

    /**
     * Finds a patient by their ID.
     * @param id The ID of the patient to find.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findPatientById(int id) {
        for (Patient patient : patients) {
            if (patient.getId() == id) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Schedules an appointment for an existing patient.
     * @param patientId The ID of the patient.
     * @param description The description of the appointment.
     */
    public void scheduleAppointment(int patientId, String description) {
        Patient patient = findPatientById(patientId);
        if (patient != null) {
            Appointment newAppointment = new Appointment(patient, description);
            appointmentQueue.offer(newAppointment); // Add to the end of the queue
            System.out.println("\nAppointment scheduled for Patient ID " + patientId + ": " + description);
        } else {
            System.err.println("\nError: Patient with ID " + patientId + " not found. Appointment not scheduled.");
        }
    }

    /**
     * Displays all appointments currently in the queue.
     */
    public void viewAppointmentQueue() {
        if (appointmentQueue.isEmpty()) {
            System.out.println("\n--- Upcoming Appointments ---");
            System.out.println("No appointments in the queue.");
            System.out.println("-----------------------------");
        } else {
            System.out.println("\n--- Upcoming Appointments ---");
            // Iterate through the queue without removing elements
            for (Appointment appointment : appointmentQueue) {
                System.out.println(appointment);
            }
            System.out.println("-----------------------------");
        }
    }

    /**
     * Processes the next appointment in the queue (removes and displays it).
     */
    public void processNextAppointment() {
        Appointment nextAppointment = appointmentQueue.poll(); // Retrieve and remove the head of the queue
        if (nextAppointment != null) {
            System.out.println("\nProcessing next appointment...");
            System.out.println("Appointment Processed: " + nextAppointment);
        } else {
            System.err.println("\nError: Appointment queue is empty. No appointment to process.");
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Scheduler Menu ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. View Appointment Queue");
        System.out.println("4. Process Next Appointment");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * The main entry point for the Hospital Scheduler application.
     * Handles user interaction and menu navigation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalScheduler scheduler = new HospitalScheduler();
        boolean running = true;

        // Class-wide exception handling around the main application loop
        try {
            while (running) {
                scheduler.displayMenu();
                int choice = -1; // Default invalid choice

                // Try-catch specifically for reading integer input
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over after reading int
                } catch (InputMismatchException e) {
                    System.err.println("\nError: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input line
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement for menu control
                switch (choice) {
                    case 1: // Add New Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter patient condition: ");
                        String condition = scanner.nextLine();
                        scheduler.addPatient(name, condition);
                        break;

                    case 2: // Schedule Appointment
                        System.out.print("Enter patient ID to schedule appointment: ");
                        int patientIdToSchedule = -1;
                        try {
                            patientIdToSchedule = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } catch (InputMismatchException e) {
                             System.err.println("\nError: Invalid patient ID format. Please enter a number.");
                             scanner.nextLine(); // Consume invalid input
                             break; // Skip scheduling
                        }
                        System.out.print("Enter appointment description: ");
                        String description = scanner.nextLine();
                        scheduler.scheduleAppointment(patientIdToSchedule, description);
                        break;

                    case 3: // View Appointment Queue
                        scheduler.viewAppointmentQueue();
                        break;

                    case 4: // Process Next Appointment
                        scheduler.processNextAppointment();
                        break;

                    case 5: // Exit
                        System.out.println("\nExiting Hospital Scheduler.");
                        running = false;
                        break;

                    default: // Invalid choice
                        System.err.println("\nError: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Generic catch for any unexpected runtime errors
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed regardless of exceptions
            scanner.close();
            System.out.println("Scanner closed."); // Optional confirmation
        }
    }
}
