/*
 * Exam Question #499
 * Generated on: 2025-05-11 23:20:12
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam: Customer Support Queue System
 * 
 * **Objective:** Design and implement a command-line application for a simplified customer support system. The system should manage incoming support requests using a queue and store completed requests in a list.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to store incoming support requests (FIFO).
 *     *   Use `java.util.ArrayList` to store completed support requests.
 *     *   Declare variables using the `java.util.List` interface where appropriate (e.g., for the completed requests list or when returning collections).
 * 
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (e.g., Add Request, Process Next Request, View Pending, View Completed, Exit).
 *     *   Use a `switch` statement to handle the different menu options selected by the user.
 * 
 * 3.  **Core Functionality:**
 *     *   **Add Request:** Allow the user to add a new support request by providing a description and customer name. Each request should have a unique ID generated by the system. New requests are added to the queue.
 *     *   **Process Next Request:** Remove the oldest request from the queue and move it to the list of completed requests.
 *     *   **View Pending Requests:** Display all requests currently in the queue.
 *     *   **View Completed Requests:** Display all requests that have been processed.
 *     *   **Exit:** Terminate the application.
 * 
 * 4.  **Error Handling & Output:**
 *     *   Use `System.out` for displaying the menu, prompts, request details, and success messages.
 *     *   Use `System.err` to display error messages, such as invalid menu options or attempting to process a request when the queue is empty.
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main application logic to gracefully handle potential issues like invalid user input (non-integer where an integer is expected) or attempting operations on empty collections.
 * 
 * 5.  **Best Practices:**
 *     *   Create a separate class (`SupportRequest`) to represent a support request object with private fields (ID, description, customer name) and public getter methods.
 *     *   Create a main class (`SupportSystemApp` or similar) containing the `main` method and the core application loop.
 *     *   Create a class (`CustomerServiceSystem` or similar) to encapsulate the queue, completed list, and methods for managing requests (add, process, view). This class should have private fields for its data structures and public methods for operations.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Validate user input where necessary (e.g., checking if a menu option is valid, handling non-integer input).
 * 
 * **Expected Output Structure:**
 * 
 * The program should run in a loop, displaying a menu, accepting user input, and performing the requested action. Error messages should go to standard error, and normal output to standard output.
 * 
 * ```
 * --- Customer Support System ---
 * 1. Add Support Request
 * 2. Process Next Request
 * 3. View Pending Requests
 * 4. View Completed Requests
 * 5. Exit
 * Enter your choice: 1
 * Enter request description: My printer is broken
 * Enter customer name: Alice
 * Request #1 added.
 * 
 * --- Customer Support System ---
 * ...
 * Enter your choice: 2
 * Processing request #1: My printer is broken (Customer: Alice)
 * Request processed.
 * 
 * --- Customer Support System ---
 * ...
 * Enter your choice: 3
 * Pending Requests:
 * Queue is empty.
 * 
 * --- Customer Support System ---
 * ...
 * Enter your choice: 2
 * Error: No pending requests to process.
 * 
 * --- Customer Support System ---
 * ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Customer Support System ---
 * ...
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * Your solution should provide the complete Java code for this application, including the `SupportRequest`, `CustomerServiceSystem`, and main application classes.
 * 
 * **Evaluation Criteria:**
 * *   Correct implementation of all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Proper object-oriented design (encapsulation, separation of concerns).
 * *   Correct implementation of the core functionality (add, process, view).
 * *   Robust input validation and error handling.
 * *   Adherence to best practices (naming, comments, code structure).
 * *   Clear and correct output.
 *
 * EXPLANATION:
 * This solution implements a simple customer support ticket system using the required Java components.
 * 
 * 1.  **`SupportRequest` Class:**
 *     *   This class encapsulates the data for a single support request: a unique ID, description, and customer name.
 *     *   It uses `private` fields for proper encapsulation and provides `public` getter methods.
 *     *   The `toString()` method makes printing request details easy.
 * 
 * 2.  **`CustomerServiceSystem` Class:**
 *     *   This class manages the core logic and data structures.
 *     *   It uses a `Queue<SupportRequest>` (`requestQueue`) implemented by `LinkedList` to store incoming requests following a FIFO (First-In, First-Out) order.
 *     *   It uses a `List<SupportRequest>` (`completedRequests`) implemented by `ArrayList` to store requests after they have been processed. The variable is declared using the `List` interface, demonstrating its use.
 *     *   `nextRequestId` is a simple counter to ensure unique IDs for requests.
 *     *   `addRequest()` creates a new `SupportRequest` and adds it to the `requestQueue` using `offer()`.
 *     *   `processNextRequest()` removes the head of the `requestQueue` using `remove()` (which throws `NoSuchElementException` if the queue is empty) and adds it to the `completedRequests` list.
 *     *   `getPendingRequests()` and `getCompletedRequests()` provide access to the underlying data structures (or views of them).
 *     *   `getPendingRequestCount()` shows how to get the size of the queue.
 * 
 * 3.  **`SupportSystemApp` Class:**
 *     *   This is the main application class with the `main` method.
 *     *   It creates instances of `CustomerServiceSystem` and `Scanner`.
 *     *   The main logic runs inside a `while(running)` loop.
 *     *   A `try-catch` block wraps the core loop logic. This is the "class-wide exception handling" requested, catching potential exceptions that might occur during user interaction or system operations within the main flow.
 *     *   Inside the loop:
 *         *   `printMenu()` displays the options.
 *         *   User input is read using `scanner.nextInt()` for the choice and `scanner.nextLine()` for string inputs (handling the newline character left by `nextInt()`).
 *         *   A nested `try-catch` specifically handles `InputMismatchException` if the user enters non-integer input for the menu choice, preventing the program from crashing and informing the user via `System.err`.
 *         *   A `switch` statement dispatches actions based on the user's valid integer choice.
 *         *   Case 1 (`Add Request`) prompts for details and calls `system.addRequest()`.
 *         *   Case 2 (`Process Next Request`) calls `system.processNextRequest()`. It includes a specific `catch (NoSuchElementException e)` block to handle the case where the queue is empty, printing an error message to `System.err`.
 *         *   Case 3 (`View Pending`) retrieves the queue and iterates through it to print pending requests.
 *         *   Case 4 (`View Completed`) retrieves the list of completed requests (declared as `List`) and iterates through it.
 *         *   Case 5 (`Exit`) sets `running` to `false` to exit the loop.
 *         *   The `default` case of the `switch` handles invalid integer choices, printing an error to `System.err`.
 *     *   A `finally` block ensures the `Scanner` is closed when the main `try` block is exited (either normally or due to an uncaught exception).
 *     *   `System.out` is used for all normal messages and output.
 *     *   `System.err` is used specifically for error messages (invalid input, empty queue processing, unexpected errors).
 * 
 * This solution effectively integrates the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, albeit simple, application while adhering to good programming practices like encapsulation, clear naming, and basic error handling. The nested `try-catch` demonstrates handling specific expected errors (input format, empty queue), while the outer `try-catch` provides a fallback for unexpected runtime issues.
 */

import java.util.Queue;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException; // For handling empty queue processing

/**
 * Represents a single customer support request.
 */
class SupportRequest {
    private int id;
    private String description;
    private String customerName;

    /**
     * Constructs a new SupportRequest.
     * @param id The unique ID for the request.
     * @param description A brief description of the issue.
     * @param customerName The name of the customer.
     */
    public SupportRequest(int id, String description, String customerName) {
        this.id = id;
        this.description = description;
        this.customerName = customerName;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getCustomerName() {
        return customerName;
    }

    /**
     * Provides a string representation of the support request.
     * @return A formatted string of the request details.
     */
    @Override
    public String toString() {
        return "Request #" + id + ": " + description + " (Customer: " + customerName + ")";
    }
}

/**
 * Manages the queue of pending support requests and a list of completed requests.
 */
class CustomerServiceSystem {
    private Queue<SupportRequest> requestQueue;
    private List<SupportRequest> completedRequests;
    private int nextRequestId;

    /**
     * Constructs a new CustomerServiceSystem.
     */
    public CustomerServiceSystem() {
        // Using LinkedList as an implementation of Queue
        this.requestQueue = new LinkedList<>();
        // Using ArrayList as an implementation of List
        this.completedRequests = new ArrayList<>();
        this.nextRequestId = 1; // Start request IDs from 1
    }

    /**
     * Adds a new support request to the queue.
     * @param description The description of the request.
     * @param customerName The name of the customer.
     */
    public void addRequest(String description, String customerName) {
        SupportRequest newRequest = new SupportRequest(nextRequestId++, description, customerName);
        requestQueue.offer(newRequest); // offer is preferred over add for queues
        System.out.println("Request #" + newRequest.getId() + " added.");
    }

    /**
     * Processes the next request in the queue.
     * Removes the request from the queue and adds it to the completed list.
     * @return The processed SupportRequest.
     * @throws NoSuchElementException if the queue is empty.
     */
    public SupportRequest processNextRequest() throws NoSuchElementException {
        // poll() returns null if queue is empty, remove() throws NoSuchElementException
        // Using remove() to demonstrate catching NoSuchElementException in the main app
        SupportRequest processedRequest = requestQueue.remove();
        completedRequests.add(processedRequest);
        return processedRequest;
    }

    /**
     * Gets the list of pending requests (the current state of the queue).
     * Note: Returning the queue directly is okay for this simple example,
     * but in more complex systems, you might return a copy or an unmodifiable view.
     * @return The Queue of pending requests.
     */
    public Queue<SupportRequest> getPendingRequests() {
        return requestQueue;
    }

    /**
     * Gets the list of completed requests.
     * @return The List of completed requests.
     */
    public List<SupportRequest> getCompletedRequests() {
        return completedRequests;
    }

    /**
     * Gets the number of pending requests.
     * @return The size of the request queue.
     */
    public int getPendingRequestCount() {
        return requestQueue.size();
    }
}

/**
 * Main application class for the Customer Support System.
 * Handles user interaction and orchestrates the system.
 */
public class SupportSystemApp {

    public static void main(String[] args) {
        CustomerServiceSystem system = new CustomerServiceSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("--- Welcome to the Customer Support System ---");

        // Class-wide try-catch block for handling exceptions during the main loop
        try {
            while (running) {
                printMenu();

                System.out.print("Enter your choice: ");
                int choice = 0;
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Use switch statement for flow control
                    switch (choice) {
                        case 1:
                            System.out.print("Enter request description: ");
                            String description = scanner.nextLine();
                            System.out.print("Enter customer name: ");
                            String customerName = scanner.nextLine();
                            system.addRequest(description, customerName);
                            break;

                        case 2:
                            try {
                                SupportRequest processed = system.processNextRequest();
                                System.out.println("Processing " + processed);
                                System.out.println("Request processed.");
                            } catch (NoSuchElementException e) {
                                // Use System.err for error messages
                                System.err.println("Error: No pending requests to process.");
                            }
                            break;

                        case 3:
                            System.out.println("\n--- Pending Requests ---");
                            Queue<SupportRequest> pending = system.getPendingRequests();
                            if (pending.isEmpty()) {
                                System.out.println("Queue is empty.");
                            } else {
                                // Iterate through the queue (without removing)
                                pending.forEach(System.out::println);
                            }
                            System.out.println("------------------------");
                            break;

                        case 4:
                            System.out.println("\n--- Completed Requests ---");
                            List<SupportRequest> completed = system.getCompletedRequests(); // Using List interface
                            if (completed.isEmpty()) {
                                System.out.println("No requests completed yet.");
                            } else {
                                // Iterate through the list
                                completed.forEach(System.out::println);
                            }
                            System.out.println("--------------------------");
                            break;

                        case 5:
                            running = false;
                            System.out.println("Exiting system. Goodbye!");
                            break;

                        default:
                            // Use System.err for error messages
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Catch non-integer input errors
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                }
                System.out.println(); // Add a newline for better readability
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions at a high level
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure scanner is closed regardless of exceptions
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Customer Support System ---");
        System.out.println("1. Add Support Request");
        System.out.println("2. Process Next Request");
        System.out.println("3. View Pending Requests (" + system.getPendingRequestCount() + ")"); // Show pending count
        System.out.println("4. View Completed Requests");
        System.out.println("5. Exit");
        System.out.println("-------------------------------");
    }
}
