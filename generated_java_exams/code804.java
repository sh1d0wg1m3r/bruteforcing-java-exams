/*
 * Exam Question #804
 * Generated on: 2025-05-12 16:43:05
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Emergency Room Triage System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified simulation of an Emergency Room (ER) patient triage system. The system needs to manage patients arriving, prioritize them based on their condition, and call the next patient based on this priority. It should also maintain a record of all patients who have registered.
 * 
 * **Patient Information:**
 * 
 * Each patient should have:
 * *   A name (String)
 * *   A priority level (representing the severity of their condition)
 * 
 * **Priority Levels:**
 * 
 * The system should support three priority levels:
 * 1.  **CRITICAL** (Highest Priority)
 * 2.  **URGENT** (Medium Priority)
 * 3.  **STANDARD** (Lowest Priority)
 * 
 * When patients have the same priority level, they should be prioritized based on their arrival order (the patient who arrived earlier among those with the same priority should be called first).
 * 
 * **System Functionality:**
 * 
 * The system should present a menu to the user with the following options:
 * 
 * 1.  **Add New Patient:**
 *     *   Prompt the user for the patient's name.
 *     *   Prompt the user to select a priority level (e.g., by entering a number corresponding to the level).
 *     *   Validate the input.
 *     *   Create a new `Patient` object.
 *     *   Add the patient to the waiting list based on their priority.
 *     *   Add the patient to a historical list of all registered patients.
 *     *   Confirm the patient has been added.
 * 
 * 2.  **Call Next Patient:**
 *     *   Identify the patient with the highest priority currently in the waiting list (considering arrival order for ties).
 *     *   Remove this patient from the waiting list.
 *     *   Display the details of the patient being called.
 *     *   If the waiting list is empty, inform the user.
 * 
 * 3.  **View Waiting List:**
 *     *   Display the names and priorities of all patients currently in the waiting list, ordered by their priority (highest priority first, then by arrival order).
 *     *   If the waiting list is empty, inform the user.
 * 
 * 4.  **View All Patients:**
 *     *   Display the names and priorities of all patients who have ever been registered in the system (both waiting and already called), in the order they were registered.
 *     *   If no patients have been registered, inform the user.
 * 
 * 5.  **Exit:**
 *     *   Terminate the program.
 * 
 * **Required Java Components:**
 * 
 * Your solution **must** use ALL of the following Java components from the `java.util` package or standard Java language features:
 * 
 * *   `Queue` (specifically `java.util.Queue` interface, implemented by a suitable class like `PriorityQueue`)
 * *   `ArrayList` (`java.util.ArrayList`)
 * *   `List` interface (`java.util.List`)
 * *   `Scanner` (`java.util.Scanner`) for user input
 * *   `switch` statement for menu control
 * *   `System.err` for displaying error messages (e.g., invalid input, empty queue warnings)
 * *   `System.out` for displaying menu, prompts, and normal output
 * *   Class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime issues, including specific input validation errors.
 * 
 * **Best Practices:**
 * 
 * Your code should demonstrate best practices, including:
 * 
 * *   Proper encapsulation (private fields with public getters where needed).
 * *   Meaningful variable, method, and class names.
 * *   Appropriate comments and documentation (e.g., Javadocs).
 * *   Input validation to handle incorrect user input gracefully.
 * *   Robust error handling using `try-catch`.
 * *   Clean and organized code structure (e.g., separate classes for Patient, TriageSystem, and the main application logic).
 * 
 * **Expected Output:**
 * 
 * The program should provide clear textual output corresponding to the user's actions. Examples:
 * 
 * *   Menu display upon starting and after each action (unless exiting).
 * *   Confirmation messages for adding patients.
 * *   Details of the patient being called.
 * *   Formatted lists when viewing waiting or all patients.
 * *   Error messages on `System.err` for invalid inputs or operations (like calling from an empty queue).
 * *   An exit message upon termination.
 * 
 * **Constraint:** Design the `Patient` class to be comparable so that the `PriorityQueue` can automatically maintain the correct order based on priority and arrival time.
 *
 * EXPLANATION:
 * This solution implements the ER Triage System using the required Java components and best practices.
 * 
 * 1.  **Overall Structure:**
 *     *   `PriorityLevel` Enum: Defines the possible priority states and provides a mapping from integer input to the enum value.
 *     *   `Patient` Class: Represents a patient with a name, priority, and an arrival order counter. It implements the `Comparable<Patient>` interface, which is crucial for the `PriorityQueue` to correctly order patients. The `compareTo` method prioritizes based on the `PriorityLevel` (lower `level` value is higher priority) and uses the `arrivalOrder` as a tie-breaker.
 *     *   `TriageSystem` Class: Contains the core logic and data structures (`waitingQueue` and `allPatients`). It provides methods to add patients, call the next patient, and retrieve lists of patients. It encapsulates the data structures and logic, exposing only necessary operations.
 *     *   `ERSystem` Class: Contains the `main` method, which serves as the application's entry point. It handles user interaction, displays the menu, reads input using `Scanner`, and directs control using a `switch` statement to the appropriate methods in the `TriageSystem`.
 * 
 * 2.  **Required Component Usage:**
 *     *   `Queue`: A `PriorityQueue<Patient>` is used for the `waitingQueue`. `PriorityQueue` is a concrete implementation of the `Queue` interface. It automatically orders elements based on their natural order (defined by the `compareTo` method in the `Patient` class). `offer()` is used to add elements, and `poll()` is used to retrieve and remove the highest-priority element.
 *     *   `ArrayList`: An `ArrayList<Patient>` is used for the `allPatients` list, maintaining a history of all registered patients in their arrival order.
 *     *   `List`: The `allPatients` field is declared as `List<Patient>`, demonstrating programming to the interface. The methods `getWaitingList()` and `getAllPatients()` also return `List<Patient>`, providing a general interface for accessing the collections.
 *     *   `Scanner`: Used in the `main` method of `ERSystem` to read user input from `System.in`.
 *     *   `switch`: Used in the `main` method to process the user's menu choice, directing the program flow to the corresponding action.
 *     *   `System.err`: Used to print error messages, such as invalid menu choices, invalid priority input, or errors caught during patient creation.
 *     *   `System.out`: Used for printing the menu, prompts, success messages, and formatted lists of patients.
 *     *   `try-catch`:
 *         *   A large `try-catch(Exception e)` block wraps the main `while` loop in `ERSystem.main` to provide "class-wide" or application-level exception handling, catching any unexpected runtime errors.
 *         *   Specific `try-catch(InputMismatchException e)` blocks are used when reading integer input (`scanner.nextInt()`) to gracefully handle cases where the user enters non-numeric text, preventing program crashes and allowing the user to try again.
 *         *   A `try-catch(IllegalArgumentException e)` block is used within `TriageSystem.addPatient` to catch validation errors thrown by the `Patient` constructor (e.g., empty name).
 * 
 * 3.  **Priority and Ordering:**
 *     *   The `PriorityQueue` automatically maintains the priority order because the `Patient` class implements `Comparable`.
 *     *   The `compareTo` method in `Patient` first compares priority levels. If they are the same, it compares the `arrivalOrder` to ensure FIFO (First-In, First-Out) within the same priority group.
 *     *   A static `AtomicLong` in `TriageSystem` is used to generate unique, sequential `arrivalOrder` values for each new patient, ensuring correct tie-breaking.
 * 
 * 4.  **Input Validation and Error Handling:**
 *     *   The `Patient` constructor validates that the name is not empty and priority is not null, throwing `IllegalArgumentException`.
 *     *   The `PriorityLevel.fromInt()` method validates the integer input for priority, returning `null` for invalid numbers. The `ERSystem` checks for this `null` and prints an error.
 *     *   `InputMismatchException` is caught when reading integers to handle non-numeric input gracefully.
 *     *   `System.err` is used consistently for error messages to distinguish them from normal output.
 *     *   Checking for an empty queue (`waitingQueue.poll()` returning `null`) before attempting to call a patient prevents errors and informs the user.
 * 
 * 5.  **Best Practices:**
 *     *   Encapsulation is used in `Patient` and `TriageSystem` by making fields private and providing public methods for access and modification.
 *     *   Variable, method, and class names are descriptive (e.g., `waitingQueue`, `callNextPatient`, `PriorityLevel`).
 *     *   Comments explain the purpose of classes, methods, and complex logic (like `compareTo`). Javadoc-style comments are used for public API elements.
 *     *   The code is structured into logical classes, separating concerns (patient data, system logic, user interface).
 *     *   The `Scanner` resource is closed in a `finally` block to ensure it's released regardless of whether an exception occurs.
 * 
 * This solution effectively demonstrates the required Java concepts in a practical, albeit simplified, application, incorporating essential programming best practices.
 */

import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicLong; // Used for robust arrival order counter

// Enum to define priority levels
enum PriorityLevel {
    CRITICAL(1), URGENT(2), STANDARD(3);

    private final int level;

    PriorityLevel(int level) {
        this.level = level;
    }

    public int getLevel() {
        return level;
    }

    // Helper method to get PriorityLevel from integer input
    public static PriorityLevel fromInt(int level) {
        for (PriorityLevel p : values()) {
            if (p.getLevel() == level) {
                return p;
            }
        }
        return null; // Indicates invalid level
    }

    @Override
    public String toString() {
        return name(); // Prints the enum constant name (e.g., CRITICAL)
    }
}

/**
 * Represents a patient in the ER Triage System.
 * Implements Comparable to allow sorting in a PriorityQueue based on priority and arrival order.
 */
class Patient implements Comparable<Patient> {
    private String name;
    private PriorityLevel priority;
    private long arrivalOrder; // Used for tie-breaking: lower number means earlier arrival

    /**
     * Constructs a new Patient.
     * @param name The patient's name. Must not be null or empty.
     * @param priority The patient's priority level. Must not be null.
     * @param arrivalOrder A unique, increasing number indicating the patient's arrival sequence.
     * @throws IllegalArgumentException if name or priority is invalid.
     */
    public Patient(String name, PriorityLevel priority, long arrivalOrder) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be empty.");
        }
        if (priority == null) {
             throw new IllegalArgumentException("Patient priority cannot be null.");
        }
        this.name = name;
        this.priority = priority;
        this.arrivalOrder = arrivalOrder;
    }

    // --- Getters ---
    public String getName() {
        return name;
    }

    public PriorityLevel getPriority() {
        return priority;
    }

    public long getArrivalOrder() {
        return arrivalOrder;
    }

    /**
     * Compares this patient to another based on priority and arrival order.
     * Used by PriorityQueue to determine the order.
     * Higher priority (lower PriorityLevel.level) comes first.
     * For equal priority, earlier arrival (lower arrivalOrder) comes first.
     * @param other The patient to compare to.
     * @return A negative integer if this patient is higher priority,
     *         a positive integer if the other patient is higher priority,
     *         or zero if they are considered equal for ordering (shouldn't happen with unique arrivalOrder).
     */
    @Override
    public int compareTo(Patient other) {
        // Compare by priority level (lower int value is higher priority)
        int priorityComparison = Integer.compare(this.priority.getLevel(), other.priority.getLevel());
        if (priorityComparison != 0) {
            return priorityComparison;
        }
        // If priorities are equal, compare by arrival order (lower arrivalOrder is earlier)
        return Long.compare(this.arrivalOrder, other.arrivalOrder);
    }

    /**
     * Returns a string representation of the patient.
     */
    @Override
    public String toString() {
        return "Name: " + name + ", Priority: " + priority + ", Arrival Order: " + arrivalOrder;
    }
}

/**
 * Manages the ER Triage System logic, including patient queues and records.
 */
class TriageSystem {
    // Queue to hold patients waiting to be called, ordered by priority
    private Queue<Patient> waitingQueue; // Implemented by PriorityQueue

    // List to hold all patients ever registered (history)
    private List<Patient> allPatients; // Implemented by ArrayList

    // Counter to assign unique arrival order to patients
    private static AtomicLong globalArrivalCounter = new AtomicLong(0);

    /**
     * Constructs a new TriageSystem.
     */
    public TriageSystem() {
        this.waitingQueue = new PriorityQueue<>(); // PriorityQueue implements Queue
        this.allPatients = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new patient to the system.
     * @param name The name of the patient.
     * @param priority The priority level of the patient.
     */
    public void addPatient(String name, PriorityLevel priority) {
        try {
            // Create patient with a unique arrival order
            Patient patient = new Patient(name, priority, globalArrivalCounter.incrementAndGet());

            allPatients.add(patient); // Add to the history list (ArrayList)
            waitingQueue.offer(patient); // Add to the waiting queue (PriorityQueue)

            System.out.println("Patient '" + name + "' added to the waiting list with priority " + priority + ".");

        } catch (IllegalArgumentException e) {
            // Catch validation errors from Patient constructor
            System.err.println("Error adding patient: " + e.getMessage());
        }
    }

    /**
     * Calls the next patient from the waiting queue based on priority.
     * @return The patient called, or null if the queue was empty.
     */
    public Patient callNextPatient() {
        Patient nextPatient = waitingQueue.poll(); // Retrieves and removes the head (highest priority)

        if (nextPatient == null) {
            System.out.println("No patients currently in the waiting queue.");
            return null;
        } else {
            System.out.println("\n--- Calling Next Patient ---");
            System.out.println(nextPatient); // Uses Patient's toString()
            System.out.println("----------------------------\n");
            // In a real system, you might move this patient to a 'currently serving' list
            return nextPatient;
        }
    }

    /**
     * Gets a list of patients currently in the waiting queue, ordered by priority.
     * @return A List of waiting patients. Returns an empty list if the queue is empty.
     */
    public List<Patient> getWaitingList() {
        // PriorityQueue's iterator does NOT guarantee order.
        // To display in priority order, we copy to a list and sort it.
        List<Patient> waiting = new ArrayList<>(waitingQueue); // Copy elements
        Collections.sort(waiting); // Sort the copy using Patient's compareTo
        return waiting; // Return as a List
    }

    /**
     * Gets a list of all patients ever registered in the system.
     * @return A List of all registered patients in arrival order. Returns an empty list if none registered.
     */
    public List<Patient> getAllPatients() {
        // Return a copy of the list to prevent external modification
        return new ArrayList<>(allPatients); // Return as a List
    }
}

/**
 * Main class for the ER Triage System application.
 * Handles user interaction and menu logic.
 */
public class ERSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TriageSystem triageSystem = new TriageSystem();
        boolean running = true;

        // --- Class-wide exception handling wrapping the main application loop ---
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                int choice = -1;
                try {
                    // Handle non-integer input for the main menu choice
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the leftover newline character
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number for the menu choice.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration and show menu again
                }

                // --- Switch statement for menu navigation ---
                switch (choice) {
                    case 1: // Add Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();

                        System.out.println("Select Priority:");
                        System.out.println("  1. CRITICAL");
                        System.out.println("  2. URGENT");
                        System.out.println("  3. STANDARD");
                        System.out.print("Enter priority number: ");

                        int priorityLevelInt = -1;
                        try {
                            // Handle non-integer input for priority level
                            priorityLevelInt = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                        } catch (InputMismatchException e) {
                             System.err.println("Invalid priority input. Please enter a number (1, 2, or 3).");
                             scanner.nextLine(); // Consume invalid input
                             break; // Exit this case, return to main menu
                        }

                        PriorityLevel priority = PriorityLevel.fromInt(priorityLevelInt);

                        if (priority == null) {
                            System.err.println("Invalid priority level entered. Please choose 1, 2, or 3.");
                        } else {
                            // TriageSystem.addPatient handles potential IllegalArgumentException from Patient constructor
                            triageSystem.addPatient(name, priority);
                        }
                        break;

                    case 2: // Call Next Patient
                        triageSystem.callNextPatient();
                        break;

                    case 3: // View Waiting List
                        List<Patient> waiting = triageSystem.getWaitingList(); // Returns a List
                        if (waiting.isEmpty()) {
                            System.out.println("\nWaiting list is empty.");
                        } else {
                            System.out.println("\n--- Waiting List (Highest Priority First) ---");
                            // Iterate through the List and print patients
                            for (int i = 0; i < waiting.size(); i++) {
                                System.out.println((i + 1) + ". " + waiting.get(i));
                            }
                            System.out.println("--------------------------------------------\n");
                        }
                        break;

                    case 4: // View All Patients
                        List<Patient> all = triageSystem.getAllPatients(); // Returns a List (ArrayList)
                         if (all.isEmpty()) {
                            System.out.println("\nNo patients registered yet.");
                        } else {
                            System.out.println("\n--- All Registered Patients (Arrival Order) ---");
                            // Iterate through the List and print patients
                            for (int i = 0; i < all.size(); i++) {
                                System.out.println((i + 1) + ". " + all.get(i));
                            }
                            System.out.println("-----------------------------------------------\n");
                        }
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting ER Triage System. Goodbye!");
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // --- Catch any unexpected exceptions that occur during the program's execution ---
            System.err.println("\nAn unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print the stack trace for debugging purposes
        } finally {
            // --- Ensure the scanner resource is closed ---
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- ER Triage System Menu ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Call Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View All Patients (History)");
        System.out.println("5. Exit");
        System.out.println("-----------------------------");
    }
}
