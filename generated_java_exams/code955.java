/*
 * Exam Question #955
 * Generated on: 2025-05-12 17:04:45
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam: Advanced Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple command-line based Task Management System. This system should allow users to add new tasks, process the next pending task, view the list of pending tasks, and view the list of completed tasks.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a `Task` class with the following attributes:
 *     *   `taskId` (String): A unique identifier for the task.
 *     *   `description` (String): A brief description of the task.
 *     *   `priority` (int): A numerical value indicating urgency (higher number = higher priority).
 *     *   `status` (String): The current status of the task ("Pending" or "Completed").
 *     *   Implement a constructor, appropriate getters, and a method to mark the task as completed.
 * 
 * 2.  **Task Manager:** Create a `TaskManager` class responsible for managing the tasks.
 *     *   It must internally use a `java.util.Queue` to store tasks that are pending. Tasks should be processed in a First-In, First-Out (FIFO) manner based on when they were added to the queue.
 *     *   It must internally use a `java.util.List` (specifically implemented as a `java.util.ArrayList`) to store tasks that have been completed.
 *     *   Implement the following public methods:
 *         *   `addTask(String description, int priority)`: Creates a new `Task` object, generates a unique ID, validates input (description not empty, priority >= 0), and adds it to the pending queue. Throws an appropriate exception (e.g., `IllegalArgumentException`) for invalid input.
 *         *   `processNextTask()`: Removes the next task from the pending queue, marks it as "Completed", and adds it to the completed tasks list. If the pending queue is empty, it should indicate this gracefully without error (e.g., return a boolean or a specific message).
 *         *   `getPendingTasks()`: Returns the list of pending tasks currently in the queue (you might return a copy or iterate and print within the manager for simplicity in an exam context).
 *         *   `getCompletedTasks()`: Returns the list of completed tasks.
 *     *   Ensure proper encapsulation (private fields, public methods).
 * 
 * 3.  **User Interface:** Create a main class (e.g., `TaskApp`) with a `main` method to interact with the user via the console.
 *     *   Display a menu of options:
 *         1.  Add New Task
 *         2.  Process Next Task
 *         3.  View Pending Tasks
 *         4.  View Completed Tasks
 *         5.  Exit
 *     *   Use `java.util.Scanner` to read the user's menu choice and task details.
 *     *   Use a `switch` statement to handle the user's menu selection.
 *     *   Call the appropriate `TaskManager` methods based on the choice.
 * 
 * 4.  **Error Handling:**
 *     *   Implement input validation for task details (description, priority) within the `addTask` method and handle potential exceptions thrown by it.
 *     *   Use `try-catch` blocks in the `main` method to handle potential exceptions during user input reading (e.g., `java.util.InputMismatchException` if the user enters non-numeric input for a number) and exceptions thrown by `TaskManager` methods.
 *     *   Use `System.err` to display error messages resulting from invalid input or exceptions.
 *     *   Use `System.out` for displaying the menu, prompts, success messages, and task lists.
 * 
 * 5.  **Java Components:** Your solution MUST explicitly use:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (as a type declaration)
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err`
 *     *   `System.out`
 *     *   `try-catch` blocks for exception handling, including catching exceptions from called methods.
 * 
 * 6.  **Best Practices:** Adhere to good programming practices:
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments explaining complex logic.
 *     *   Proper indentation and code formatting.
 *     *   Close the `Scanner` resource when done.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, perform actions, and display results or error messages accordingly.
 * 
 * Example interaction:
 * 
 * ```
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Finish report
 * Enter task priority (0+): 5
 * Task "Finish report" added with ID: task-1
 * 
 * Task Management System Menu:
 * 1. Add New Task
 * ...
 * Enter your choice: 1
 * Enter task description: Prepare presentation
 * Enter task priority (0+): 8
 * Task "Prepare presentation" added with ID: task-2
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Tasks ---
 * ID: task-1, Description: Finish report, Priority: 5, Status: Pending
 * ID: task-2, Description: Prepare presentation, Priority: 8, Status: Pending
 * --------------------
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 2
 * Processing next task...
 * Task "Finish report" (ID: task-1) marked as Completed.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Tasks ---
 * ID: task-2, Description: Prepare presentation, Priority: 8, Status: Pending
 * --------------------
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 4
 * --- Completed Tasks ---
 * ID: task-1, Description: Finish report, Priority: 5, Status: Completed
 * --------------------
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Error handling example:
 * 
 * ```
 * Task Management System Menu:
 * ...
 * Enter your choice: 1
 * Enter task description:
 * Enter task priority (0+): 10
 * Error adding task: Task description cannot be empty.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 1
 * Enter task description: Write code
 * Enter task priority (0+): abc
 * Error reading input: Invalid input. Please enter a number for priority.
 * ```
 * 
 * Your solution should be complete and runnable Java code demonstrating all the requirements.
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents a single task with `taskId`, `description`, `priority`, and `status`.
 *     *   Uses private fields for encapsulation.
 *     *   The constructor includes basic input validation for `description` and `priority`, throwing `IllegalArgumentException` if validation fails. This promotes defensive programming.
 *     *   `markCompleted()` method changes the task's status, demonstrating object state change.
 *     *   `toString()` method provides a convenient string representation for printing.
 * 
 * 2.  **`TaskManager` Class:**
 *     *   Manages collections of `Task` objects.
 *     *   Uses a `java.util.Queue<Task>` named `pendingTasks`. We use `LinkedList` as the concrete implementation because `LinkedList` implements the `Queue` interface and provides FIFO behavior. `offer()` is used for adding to the queue and `poll()` for removing from the head.
 *     *   Uses a `java.util.List<Task>` named `completedTasks`, specifically instantiated as a `new ArrayList<>()`. This demonstrates using the interface type (`List`) while using a concrete implementation (`ArrayList`).
 *     *   `addTask()` generates a simple unique ID, creates a `Task` object (relying on the `Task` constructor for validation), and adds it to the `pendingTasks` queue.
 *     *   `processNextTask()` checks if the queue is empty, and if not, it removes the next task using `poll()`, marks it complete, and adds it to the `completedTasks` list.
 *     *   `displayPendingTasks()` and `displayCompletedTasks()` methods iterate through their respective collections and print task details. `displayPendingTasks` iterates without removing using `forEach`.
 * 
 * 3.  **`TaskApp` (Main Class):**
 *     *   Contains the `main` method, which serves as the application's entry point and user interface.
 *     *   Creates instances of `TaskManager` and `Scanner`.
 *     *   Uses a `while` loop to keep the application running until the user chooses to exit.
 *     *   Inside the loop, it prints the menu using `System.out`.
 *     *   Reads the user's integer choice using `scanner.nextInt()`.
 *     *   Uses a `switch` statement to direct the program flow based on the user's choice. Each case calls the appropriate `TaskManager` method.
 *     *   **Exception Handling:**
 *         *   A broad `try-catch` block wraps the core logic within the `while` loop.
 *         *   It specifically catches `InputMismatchException` to handle cases where the user enters non-numeric input when a number is expected (like for the menu choice or priority). It prints an error message using `System.err` and consumes the invalid input from the scanner (`scanner.nextLine()`) to prevent an infinite loop.
 *         *   It catches `IllegalArgumentException` which is thrown by the `Task` constructor (and propagated via `TaskManager.addTask`) when task input validation fails (empty description, negative priority). It prints the validation error message using `System.err`.
 *         *   A general `Exception` catch is included as a fallback for any other unexpected runtime errors, demonstrating robust error handling. It prints the error message to `System.err` and a stack trace for debugging.
 *     *   `System.out.println()` is used for all normal output (menu, prompts, success messages, task lists).
 *     *   `scanner.nextLine()` is used after reading integers with `nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls.
 *     *   The `Scanner` resource is closed at the end of the `main` method using `scanner.close()`.
 * 
 * This solution effectively integrates all the required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a functional and reasonably practical task management system, demonstrating understanding of object-oriented design, data structures, and error handling in Java.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single task
class Task {
    private String taskId;
    private String description;
    private int priority;
    private String status; // "Pending" or "Completed"

    public Task(String taskId, String description, int priority) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        if (priority < 0) {
            throw new IllegalArgumentException("Task priority cannot be negative.");
        }
        this.taskId = taskId;
        this.description = description.trim();
        this.priority = priority;
        this.status = "Pending";
    }

    public String getTaskId() {
        return taskId;
    }

    public String getDescription() {
        return description;
    }

    public int getPriority() {
        return priority;
    }

    public String getStatus() {
        return status;
    }

    public void markCompleted() {
        this.status = "Completed";
    }

    @Override
    public String toString() {
        return String.format("ID: %s, Description: %s, Priority: %d, Status: %s",
                             taskId, description, priority, status);
    }
}

// Manages the collection of tasks
class TaskManager {
    // Use Queue for pending tasks (FIFO)
    private Queue<Task> pendingTasks;
    // Use List (implemented by ArrayList) for completed tasks
    private List<Task> completedTasks;
    private int nextTaskId = 1; // Simple counter for unique IDs

    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a new task to the pending queue.
     * @param description The task description.
     * @param priority The task priority.
     * @throws IllegalArgumentException if description is empty or priority is negative.
     */
    public void addTask(String description, int priority) {
        // Task constructor performs validation and throws IllegalArgumentException
        String id = "task-" + nextTaskId++;
        Task newTask = new Task(id, description, priority);
        pendingTasks.offer(newTask); // offer is preferred over add for queues
        System.out.println("Task \"" + description + "\" added with ID: " + id);
    }

    /**
     * Processes the next task from the pending queue.
     * @return true if a task was processed, false if the queue was empty.
     */
    public boolean processNextTask() {
        if (pendingTasks.isEmpty()) {
            return false; // No tasks to process
        }

        System.out.println("Processing next task...");
        Task taskToProcess = pendingTasks.poll(); // Remove head of queue
        taskToProcess.markCompleted();
        completedTasks.add(taskToProcess);
        System.out.println("Task \"" + taskToProcess.getDescription() + "\" (ID: " + taskToProcess.getTaskId() + ") marked as Completed.");
        return true;
    }

    /**
     * Displays the list of pending tasks.
     */
    public void displayPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements
            pendingTasks.forEach(System.out::println);
        }
        System.out.println("--------------------");
    }

    /**
     * Displays the list of completed tasks.
     */
    public void displayCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            completedTasks.forEach(System.out::println);
        }
        System.out.println("--------------------");
    }
}

// Main application class
public class TaskApp {

    public static void main(String[] args) {
        TaskManager taskManager = new TaskManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("Welcome to the Task Management System!");

        while (running) {
            printMenu();
            System.out.print("Enter your choice: ");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Add New Task
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter task priority (0+): ");
                        int priority = scanner.nextInt();
                        scanner.nextLine(); // Consume newline

                        // Call TaskManager method, let it handle validation and exceptions
                        taskManager.addTask(description, priority);
                        break;

                    case 2: // Process Next Task
                        boolean processed = taskManager.processNextTask();
                        if (!processed) {
                            System.out.println("No pending tasks to process.");
                        }
                        break;

                    case 3: // View Pending Tasks
                        taskManager.displayPendingTasks();
                        break;

                    case 4: // View Completed Tasks
                        taskManager.displayCompletedTasks();
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;

                    default:
                        System.out.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Catch non-numeric input for menu choice or priority
                System.err.println("Error reading input: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (IllegalArgumentException e) {
                // Catch validation errors from Task or TaskManager
                System.err.println("Error adding task: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected errors
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging in exam context
            }
            System.out.println(); // Add a blank line for readability
        }

        scanner.close(); // Close the scanner resource
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Task Management System Menu:");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
