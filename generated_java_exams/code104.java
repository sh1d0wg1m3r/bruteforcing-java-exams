/*
 * Exam Question #104
 * Generated on: 2025-05-11 22:14:51
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam: Hospital Patient Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified Hospital Patient Management System. This system will manage patients waiting to see a doctor and track patients who have been processed. It needs to handle patient arrivals, process patients in the order they arrived, display waiting and processed lists, and handle basic user interactions and errors.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must adhere to the following:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store patients waiting to be seen. Patients should be processed in a First-In, First-Out (FIFO) manner.
 *     *   Use a `java.util.ArrayList` to store patients who have been processed.
 *     *   Use the `java.util.List` interface where appropriate (e.g., for declaring variables that hold `ArrayList` instances).
 * 
 * 2.  **Patient Representation:**
 *     *   Create a `Patient` class with private fields for `id` (a unique identifier, you can use a simple counter) and `name`.
 *     *   Provide a constructor to initialize a `Patient` object.
 *     *   Include public getter methods for `id` and `name`.
 *     *   Override the `toString()` method to provide a user-friendly string representation of a patient (e.g., "Patient ID: [id], Name: [name]").
 * 
 * 3.  **System Functionality:**
 *     *   Implement a main class (e.g., `HospitalManagementSystem`) with a `main` method to run the program.
 *     *   The system should present a menu of options to the user using `System.out`:
 *         1.  Add New Patient to Waiting List
 *         2.  Process Next Patient
 *         3.  View Waiting List
 *         4.  View Processed Patients
 *         5.  Exit
 *     *   Use a `java.util.Scanner` to read user input from the console.
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   **Option 1 (Add Patient):** Prompt the user for the patient's name. Create a `Patient` object and add it to the waiting queue. Print a confirmation message to `System.out`. Basic validation: Ensure the name is not empty.
 *     *   **Option 2 (Process Patient):** Check if the waiting queue is empty. If empty, print an error message to `System.err`. If not empty, remove the next patient from the queue, simulate processing (e.g., assign them to a doctor - you can just print a message like "Patient [name] is now being seen by Dr. [Doctor Name]"), and add the processed patient to the processed list. Print a success message to `System.out`. You can have a small predefined list of doctor names (e.g., "Smith", "Jones", "Garcia") and cycle through them or just pick one arbitrarily for the message.
 *     *   **Option 3 (View Waiting List):** Display the contents of the waiting queue using `System.out`. If the queue is empty, print a message indicating that.
 *     *   **Option 4 (View Processed Patients):** Display the contents of the processed list using `System.out`. If the list is empty, print a message indicating that.
 *     *   **Option 5 (Exit):** Terminate the program.
 * 
 * 4.  **Error Handling and Best Practices:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues, such as invalid user input (e.g., non-integer input for the menu choice). Print error messages to `System.err`.
 *     *   Use `System.err` specifically for all error output.
 *     *   Use `System.out` for all normal program output (menu, prompts, confirmations, list displays).
 *     *   Apply best practices:
 *         *   Proper encapsulation (private fields, public methods/getters).
 *         *   Meaningful variable and method names.
 *         *   Appropriate comments and documentation (Javadocs for classes/methods are encouraged).
 *         *   Input validation (e.g., checking for empty patient name, handling non-integer menu input).
 *         *   Close the `Scanner` resource properly when the program exits.
 * 
 * **Expected Output Structure:**
 * 
 * ```
 * --- Hospital Management System ---
 * 1. Add New Patient to Waiting List
 * 2. Process Next Patient
 * 3. View Waiting List
 * 4. View Processed Patients
 * 5. Exit
 * Enter your choice: [user input]
 * 
 * // Depending on choice:
 * 
 * // Option 1:
 * Enter patient name: [user input]
 * Patient 'Patient Name' added to the waiting list.
 * 
 * // Option 2 (Success):
 * Patient ID: [id], Name: [name] is now being seen by Dr. [Doctor Name].
 * 
 * // Option 2 (Queue Empty):
 * ERROR: The waiting list is empty. No patients to process.
 * 
 * // Option 3 (NotEmpty):
 * --- Waiting List ---
 * Patient ID: [id1], Name: [name1]
 * Patient ID: [id2], Name: [name2]
 * ...
 * --------------------
 * 
 * // Option 3 (Empty):
 * --- Waiting List ---
 * The waiting list is currently empty.
 * --------------------
 * 
 * // Option 4 (NotEmpty):
 * --- Processed Patients ---
 * Patient ID: [id1], Name: [name1]
 * Patient ID: [id2], Name: [name2]
 * ...
 * --------------------
 * 
 * // Option 4 (Empty):
 * --- Processed Patients ---
 * No patients have been processed yet.
 * --------------------
 * 
 * // Invalid Input (Menu):
 * ERROR: Invalid input. Please enter a number between 1 and 5.
 * 
 * // Invalid Input (Empty Name):
 * ERROR: Patient name cannot be empty.
 * 
 * // Exit:
 * Exiting Hospital Management System. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing the `Patient` class and the `HospitalManagementSystem` class with the `main` method and all required logic.
 *
 * EXPLANATION:
 * This solution implements a `HospitalManagementSystem` that manages a queue of waiting patients and a list of processed patients, fulfilling all the requirements of the exam question.
 * 
 * 1.  **`Patient` Class:**
 *     *   Represents a single patient with a unique `id` and a `name`.
 *     *   A `static int nextId` ensures each new patient gets a unique, sequential ID.
 *     *   Private fields (`id`, `name`) and public getters demonstrate encapsulation.
 *     *   The `toString()` method provides a convenient way to print patient information.
 * 
 * 2.  **`HospitalManagementSystem` Class:**
 *     *   **Data Structures:**
 *         *   `Queue<Patient> waitingPatients`: Declared as a `Queue` interface type but initialized with `LinkedList`. `LinkedList` is a common implementation of `Queue` and provides the necessary FIFO behavior using `offer()` (add to end) and `poll()` (remove from front).
 *         *   `List<Patient> processedPatients`: Declared as a `List` interface type but initialized with `ArrayList`. `ArrayList` is suitable for storing processed patients as we primarily need to add to it and iterate through it. Using the `List` interface for the variable type is good practice, allowing flexibility to change the underlying implementation later if needed.
 *         *   `List<String> availableDoctors`: An `ArrayList` storing simple doctor names, also declared using the `List` interface. Used for the simulation message when processing a patient.
 *     *   **`Scanner`:** A `Scanner` object is initialized to read input from `System.in`. It's managed within a `try-with-resources` block in the `run()` method to ensure it's automatically closed when the program exits or an exception occurs.
 *     *   **`displayMenu()`:** A simple private helper method to print the menu options using `System.out`.
 *     *   **`addPatient()`:**
 *         *   Reads the patient's name using `scanner.nextLine()`.
 *         *   Includes input validation: checks if the trimmed name is empty. If so, prints an error to `System.err` and returns.
 *         *   Creates a new `Patient` object.
 *         *   Adds the patient to the `waitingPatients` queue using `offer()`. `offer()` is preferred over `add()` for queues as it returns `false` if the element cannot be added (though for `LinkedList` it effectively always succeeds unless memory is exhausted).
 *         *   Prints a confirmation message to `System.out`.
 *     *   **`processNextPatient()`:**
 *         *   Checks if the `waitingPatients` queue is empty using `isEmpty()`. If empty, prints an error to `System.err`.
 *         *   If not empty, removes the patient at the front of the queue using `poll()`. `poll()` returns the element and removes it, or returns `null` if the queue is empty (which is already checked).
 *         *   A simple simulation assigns the patient to a doctor by cycling through the `availableDoctors` list based on the current size of the `processedPatients` list.
 *         *   Prints the processing message to `System.out`.
 *         *   Adds the `processedPatient` to the `processedPatients` `ArrayList`.
 *     *   **`viewWaitingList()`:**
 *         *   Prints a header to `System.out`.
 *         *   Checks if the `waitingPatients` queue is empty. If so, prints an empty message to `System.out`.
 *         *   If not empty, iterates through the queue using an enhanced `for` loop (which uses the queue's iterator, not `poll()`, so it doesn doesn't remove elements) and prints each `Patient` object (using its `toString()` method) to `System.out`.
 *     *   **`viewProcessedPatients()`:**
 *         *   Prints a header to `System.out`.
 *         *   Checks if the `processedPatients` `ArrayList` is empty. If so, prints an empty message to `System.out`.
 *         *   If not empty, iterates through the `ArrayList` using an enhanced `for` loop and prints each `Patient` object to `System.out`.
 *     *   **`run()`:**
 *         *   Contains the main application loop (`while (choice != 5)`).
 *         *   Uses a `try-with-resources` block for the `scanner` to ensure proper closing.
 *         *   Inside the loop, it displays the menu and reads the user's entire input line using `scanner.nextLine()`.
 *         *   A nested `try-catch` block is used to handle potential exceptions during input processing and method calls.
 *         *   It attempts to parse the input line into an integer using `Integer.parseInt()`.
 *         *   A `switch` statement directs execution based on the parsed `choice`, calling the appropriate methods (`addPatient`, `processNextPatient`, etc.).
 *         *   The `default` case in the `switch` handles integer inputs that are outside the valid menu range (1-5).
 *         *   The `catch (NumberFormatException e)` block specifically handles cases where the user enters non-integer input, printing an error to `System.err`.
 *         *   A general `catch (Exception e)` is included as a safety net for any other unexpected runtime errors within the loop, printing to `System.err` and providing a stack trace.
 *     *   **`main()`:** The entry point creates an instance of `HospitalManagementSystem` and calls its `run()` method to start the application.
 * 
 * 3.  **Error Handling and System Output:**
 *     *   `System.err` is used exclusively for error messages (e.g., empty queue, invalid menu input, empty patient name).
 *     *   `System.out` is used for all normal output (menu display, prompts, confirmations, list contents).
 *     *   `try-catch` blocks are used: one specifically for `NumberFormatException` around input parsing and a general `Exception` catch within the main loop to handle other potential issues, demonstrating class-wide exception handling within the operational part of the class. The `try-with-resources` for the scanner also contributes to robust resource management.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical, albeit simplified, real-world scenario, following good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private static int nextId = 1; // Static counter for unique IDs
    private int id;
    private String name;

    /**
     * Constructs a new Patient object.
     * Assigns a unique ID and sets the patient's name.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.id = nextId++; // Assign current ID and increment for the next patient
        this.name = name;
    }

    /**
     * Gets the unique ID of the patient.
     * @return The patient's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the patient.
     * @return A formatted string including patient ID and name.
     */
    @Override
    public String toString() {
        return "Patient ID: " + id + ", Name: " + name;
    }
}

/**
 * Manages the hospital's patient waiting list and processed patients.
 */
public class HospitalManagementSystem {

    // Use Queue for FIFO waiting list
    private Queue<Patient> waitingPatients;
    // Use List/ArrayList for storing processed patients
    private List<Patient> processedPatients;
    // Predefined list of doctors for simulation purposes
    private List<String> availableDoctors;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new HospitalManagementSystem.
     * Initializes the waiting queue, processed list, available doctors, and scanner.
     */
    public HospitalManagementSystem() {
        waitingPatients = new LinkedList<>(); // LinkedList implements Queue
        processedPatients = new ArrayList<>(); // ArrayList implements List
        availableDoctors = new ArrayList<>();
        availableDoctors.add("Dr. Smith");
        availableDoctors.add("Dr. Jones");
        availableDoctors.add("Dr. Garcia");
        scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Management System ---");
        System.out.println("1. Add New Patient to Waiting List");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list based on user input.
     * Includes input validation for the patient name.
     */
    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim(); // Read name and remove leading/trailing whitespace

        if (name.isEmpty()) {
            System.err.println("ERROR: Patient name cannot be empty.");
            return; // Exit the method if name is empty
        }

        Patient newPatient = new Patient(name);
        waitingPatients.offer(newPatient); // Add patient to the end of the queue

        System.out.println("Patient '" + name + "' added to the waiting list.");
    }

    /**
     * Processes the next patient in the waiting list (FIFO).
     * Removes the patient from the queue and adds them to the processed list.
     * Handles the case where the waiting list is empty.
     */
    private void processNextPatient() {
        if (waitingPatients.isEmpty()) {
            System.err.println("ERROR: The waiting list is empty. No patients to process.");
            return;
        }

        Patient processedPatient = waitingPatients.poll(); // Remove patient from the front of the queue

        // Simulate assigning to a doctor (simple cycling logic)
        int doctorIndex = processedPatients.size() % availableDoctors.size();
        String assignedDoctor = availableDoctors.get(doctorIndex);

        System.out.println(processedPatient + " is now being seen by " + assignedDoctor + ".");

        processedPatients.add(processedPatient); // Add patient to the processed list
    }

    /**
     * Displays all patients currently in the waiting list.
     */
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingPatients.isEmpty()) {
            System.out.println("The waiting list is currently empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays all patients who have been processed.
     */
    private void viewProcessedPatients() {
        System.out.println("\n--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            // Iterate through the list
            for (Patient patient : processedPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Runs the main loop of the hospital management system.
     * Displays the menu, reads user input, and processes choices.
     * Includes exception handling for invalid input.
     */
    public void run() {
        int choice = -1; // Initialize with a value outside the menu range

        // Use a try-with-resources block to ensure the scanner is closed
        try (scanner) { // Scanner is initialized in the constructor, try-with-resources closes it automatically
            while (choice != 5) {
                displayMenu();
                String inputLine = scanner.nextLine(); // Read the entire line

                try {
                    choice = Integer.parseInt(inputLine); // Attempt to parse input as integer

                    // Use switch statement for menu options
                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            processNextPatient();
                            break;
                        case 3:
                            viewWaitingList();
                            break;
                        case 4:
                            viewProcessedPatients();
                            break;
                        case 5:
                            System.out.println("Exiting Hospital Management System. Goodbye!");
                            break;
                        default:
                            // Handle invalid integer choices
                            System.err.println("ERROR: Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (NumberFormatException e) {
                    // Handle non-integer input
                    System.err.println("ERROR: Invalid input. Please enter a number.");
                    choice = -1; // Reset choice to continue the loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during processing
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    e.printStackTrace(); // Print stack trace for debugging
                    choice = -1; // Reset choice to continue the loop
                }
            }
        } catch (Exception e) {
             // Catch any exceptions during scanner initialization or closing (less likely here)
             System.err.println("A critical error occurred during system startup or shutdown: " + e.getMessage());
             e.printStackTrace();
        }
    }

    /**
     * The main entry point of the program.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalManagementSystem system = new HospitalManagementSystem();
        system.run(); // Start the system's main loop
    }
}
