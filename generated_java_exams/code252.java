/*
 * Exam Question #252
 * Generated on: 2025-05-11 22:39:48
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Production Line Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Production Line Management System for a small manufacturing unit. The system needs to manage items waiting to be processed and keep track of items that have been successfully processed. Items are processed strictly in the order they arrive on the line.
 * 
 * **Requirements:**
 * 
 * 1.  **Item Representation:** Create a class `ProductionItem` with the following private fields:
 *     *   `itemId` (int)
 *     *   `itemName` (String)
 *     *   `isProcessed` (boolean) - initially `false`
 * 
 *     Implement a constructor, public getters for all fields, and a public method `markAsProcessed()` that sets `isProcessed` to `true`. Include a `toString()` method for easy display.
 * 
 * 2.  **Production Line Manager:** Create a class `ProductionLineManager` that encapsulates the logic for managing the production line. It should have:
 *     *   A private field to hold items waiting for processing. This must be a `java.util.Queue` of `ProductionItem` objects.
 *     *   A private field to hold items that have been processed. This must be a `java.util.List` implemented using `java.util.ArrayList` to store `ProductionItem` objects.
 *     *   A public method `addItemToQueue(ProductionItem item)` that adds an item to the processing queue.
 *     *   A public method `processNextItem()` that takes the next item from the processing queue, marks it as processed using the `markAsProcessed()` method, and adds it to the list of processed items. This method must handle the case where the queue is empty.
 *     *   A public method `viewProcessingQueue()` that prints the details of all items currently in the processing queue.
 *     *   A public method `viewProcessedItems()` that prints the details of all items that have been processed.
 * 
 * 3.  **Main Application Logic:** In the `main` method of a separate class (e.g., `ProductionSystemApp`), implement a command-line interface using `java.util.Scanner` to interact with the `ProductionLineManager`. The application should present a menu with the following options:
 *     *   1. Add Item to Queue
 *     *   2. Process Next Item
 *     *   3. View Processing Queue
 *     *   4. View Processed Items
 *     *   5. Exit
 * 
 * 4.  **Control Flow:** Use a `switch` statement in the main loop to handle user menu selections.
 * 
 * 5.  **Input Handling & Validation:**
 *     *   Use `Scanner` to read user input for menu choices and item details.
 *     *   Validate user input for menu choices (ensure it's a valid integer within the menu range).
 *     *   Validate item ID input (ensure it's a positive integer).
 *     *   Validate item name input (ensure it's not empty).
 * 
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main application loop to catch potential runtime errors (e.g., `NumberFormatException` for invalid integer input, or other unexpected issues).
 *     *   If the user attempts to process an item when the queue is empty, display an appropriate error message.
 *     *   Use `System.err.println()` for all error messages.
 *     *   Use `System.out.println()` for all normal output (menu, prompts, successful operations, item details).
 * 
 * 7.  **Best Practices:**
 *     *   Adhere to proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Ensure clean code structure.
 * 
 * **Expected Interaction:**
 * 
 * The program should continuously display the menu, accept user input, perform the requested action, and handle errors gracefully until the user chooses to exit.
 * 
 * Example flow:
 * 1.  App starts, menu displayed.
 * 2.  User enters '1'. Prompts for item ID and name. User enters '101', 'Widget A'. Item added.
 * 3.  User enters '1'. Prompts for item ID and name. User enters '102', 'Gadget B'. Item added.
 * 4.  User enters '3'. Prints items in queue: [ID: 101, Name: Widget A, Processed: false], [ID: 102, Name: Gadget B, Processed: false].
 * 5.  User enters '2'. Processes item 101. Prints confirmation.
 * 6.  User enters '3'. Prints items in queue: [ID: 102, Name: Gadget B, Processed: false].
 * 7.  User enters '4'. Prints processed items: [ID: 101, Name: Widget A, Processed: true].
 * 8.  User enters '2'. Processes item 102. Prints confirmation.
 * 9.  User enters '3'. Prints items in queue: Empty.
 * 10. User enters '4'. Prints processed items: [ID: 101, Name: Widget A, Processed: true], [ID: 102, Name: Gadget B, Processed: true].
 * 11. User enters '2'. Prints error: "Processing queue is empty."
 * 12. User enters '6'. Prints error: "Invalid choice."
 * 13. User enters '5'. Prints exit message, program terminates.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct usage of Queue, ArrayList, List, Scanner, switch, System.err, System.out, try-catch.
 * *   Correct implementation of the `ProductionItem` and `ProductionLineManager` classes.
 * *   Proper menu-driven interaction and input validation.
 * *   Robust error handling, including handling an empty queue and invalid input.
 * *   Adherence to best practices (encapsulation, naming, comments, clean structure).
 *
 * EXPLANATION:
 * This solution implements a simplified Production Line Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`ProductionItem` Class:** This class serves as a blueprint for items on the production line. It encapsulates the item's state (`itemId`, `itemName`, `isProcessed`) using private fields and provides public methods (`getters`, `markAsProcessed`) for controlled access and modification. The `toString()` method provides a convenient way to display item information.
 * 
 * 2.  **`ProductionLineManager` Class:** This class manages the core logic.
 *     *   It uses a `Queue<ProductionItem>` (`processingQueue`) implemented by `LinkedList` to maintain the order of items waiting for processing (FIFO).
 *     *   It uses a `List<ProductionItem>` (`processedItems`) implemented by `ArrayList` to store items after they have been processed. Using the `List` interface for the variable declaration (`List<ProductionItem> processedItems = new ArrayList<>();`) is good practice, allowing flexibility if a different `List` implementation were needed later, while still using `ArrayList` as required.
 *     *   The `addItemToQueue` method uses `queue.offer()`, which is generally preferred over `add()` in queues as it handles capacity-restricted queues more gracefully (though `LinkedList` is not capacity-restricted).
 *     *   The `processNextItem` method uses `queue.poll()`, which retrieves and removes the head of the queue, returning `null` if the queue is empty. It includes an `isEmpty()` check and an error message using `System.err.println()` if the queue is empty, fulfilling that specific error handling requirement. It then marks the item as processed and adds it to the `processedItems` list.
 *     *   `viewProcessingQueue` and `viewProcessedItems` methods iterate through the respective collections and print item details using the `ProductionItem`'s `toString()` method.
 * 
 * 3.  **`ProductionSystemApp` Class (`main` method):** This class provides the user interface.
 *     *   It uses `java.util.Scanner` to get input from the console.
 *     *   The main logic is enclosed in a `while(true)` loop that continues until the user chooses to exit.
 *     *   A `displayMenu()` method is used for cleaner code to show the options.
 *     *   Input reading and the main `switch` statement are wrapped in a `try-catch(Exception e)` block. This demonstrates class-wide exception handling, catching any unexpected runtime errors that might occur within the main interaction loop. Specific input parsing errors (`NumberFormatException`) are also caught *inside* the loop before the `switch` to handle invalid non-numeric input gracefully without crashing the program, allowing the loop to continue.
 *     *   A `switch` statement is used to direct the program flow based on the user's validated numeric choice.
 *     *   Each case corresponds to an action:
 *         *   Case 1 (`Add Item`): Prompts for item details, performs basic input validation (positive ID, non-empty name), creates a `ProductionItem` object, and calls `manager.addItemToQueue()`. Includes nested `try-catch` for `NumberFormatException` specifically during ID parsing.
 *         *   Case 2 (`Process`): Calls `manager.processNextItem()`. The manager handles the empty queue error internally.
 *         *   Case 3 (`View Queue`): Calls `manager.viewProcessingQueue()`.
 *         *   Case 4 (`View Processed`): Calls `manager.viewProcessedItems()`.
 *         *   Case 5 (`Exit`): Prints an exit message and uses `return` to terminate the `main` method, exiting the program.
 *         *   `default`: Handles invalid numeric choices using `System.err.println()`.
 *     *   `System.out.println()` is used for all normal user interaction and output.
 *     *   `System.err.println()` is used specifically for error messages (invalid input, queue empty, unexpected errors).
 *     *   A `finally` block ensures the `Scanner` is closed when the program exits, releasing system resources.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrates proper object-oriented design principles (encapsulation), and includes robust error handling and input validation, fulfilling the requirements of a challenging exam task.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

// Represents an item in the production line
class ProductionItem {
    private int itemId;
    private String itemName;
    private boolean isProcessed;

    // Constructor
    public ProductionItem(int itemId, String itemName) {
        this.itemId = itemId;
        this.itemName = itemName;
        this.isProcessed = false; // Initially not processed
    }

    // Public getters
    public int getItemId() {
        return itemId;
    }

    public String getItemName() {
        return itemName;
    }

    public boolean isProcessed() {
        return isProcessed;
    }

    // Method to mark the item as processed
    public void markAsProcessed() {
        this.isProcessed = true;
    }

    // String representation of the item
    @Override
    public String toString() {
        return "[ID: " + itemId + ", Name: " + itemName + ", Processed: " + isProcessed + "]";
    }
}

// Manages the production line queue and processed items list
class ProductionLineManager {
    // Queue for items waiting processing (FIFO)
    private Queue<ProductionItem> processingQueue;
    // List for items that have been processed
    private List<ProductionItem> processedItems;

    // Constructor
    public ProductionLineManager() {
        // LinkedList is a common implementation of Queue
        this.processingQueue = new LinkedList<>();
        // ArrayList is a common implementation of List
        this.processedItems = new ArrayList<>();
    }

    /**
     * Adds an item to the end of the processing queue.
     * @param item The ProductionItem to add.
     */
    public void addItemToQueue(ProductionItem item) {
        if (item != null) {
            processingQueue.offer(item); // offer is preferred over add for queues (returns false on failure, doesn't throw)
            System.out.println("Item added to queue: " + item.getItemName() + " (ID: " + item.getItemId() + ")");
        } else {
            System.err.println("Error: Cannot add a null item to the queue.");
        }
    }

    /**
     * Processes the next item from the front of the queue.
     * Marks it as processed and moves it to the processed items list.
     * Handles the case where the queue is empty.
     */
    public void processNextItem() {
        if (processingQueue.isEmpty()) {
            System.err.println("Error: Processing queue is empty. No items to process.");
            return;
        }

        // poll() retrieves and removes the head of the queue, returns null if empty
        ProductionItem itemToProcess = processingQueue.poll();

        if (itemToProcess != null) {
            itemToProcess.markAsProcessed();
            processedItems.add(itemToProcess);
            System.out.println("Processed item: " + itemToProcess.getItemName() + " (ID: " + itemToProcess.getItemId() + ")");
        } else {
             // This case should ideally not be reached if isEmpty() check passes,
             // but included for robustness with poll().
            System.err.println("Error: Failed to retrieve item from queue.");
        }
    }

    /**
     * Prints the details of all items currently in the processing queue.
     */
    public void viewProcessingQueue() {
        System.out.println("\n--- Processing Queue ---");
        if (processingQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (ProductionItem item : processingQueue) {
                System.out.println(item);
            }
        }
        System.out.println("------------------------\n");
    }

    /**
     * Prints the details of all items that have been processed.
     */
    public void viewProcessedItems() {
        System.out.println("\n--- Processed Items ---");
        if (processedItems.isEmpty()) {
            System.out.println("No items have been processed yet.");
        } else {
            // Iterate through the list
            for (ProductionItem item : processedItems) {
                System.out.println(item);
            }
        }
        System.out.println("-----------------------\n");
    }
}

// Main application class with the user interface
public class ProductionSystemApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ProductionLineManager manager = new ProductionLineManager();

        System.out.println("--- Production Line Management System ---");

        // Main application loop with class-wide exception handling
        try {
            while (true) {
                displayMenu();
                System.out.print("Enter your choice: ");

                String input = scanner.nextLine();
                int choice = -1; // Default invalid choice

                try {
                    choice = Integer.parseInt(input);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration
                }

                // Switch statement for menu navigation
                switch (choice) {
                    case 1: // Add Item
                        System.out.print("Enter Item ID (positive integer): ");
                        String idInput = scanner.nextLine();
                        int itemId = -1;
                        try {
                            itemId = Integer.parseInt(idInput);
                            if (itemId <= 0) {
                                System.err.println("Invalid Item ID. Must be a positive integer.");
                                continue;
                            }
                        } catch (NumberFormatException e) {
                            System.err.println("Invalid input for Item ID. Please enter an integer.");
                            continue;
                        }

                        System.out.print("Enter Item Name: ");
                        String itemName = scanner.nextLine();
                        if (itemName == null || itemName.trim().isEmpty()) {
                            System.err.println("Invalid Item Name. Cannot be empty.");
                            continue;
                        }

                        ProductionItem newItem = new ProductionItem(itemId, itemName.trim());
                        manager.addItemToQueue(newItem);
                        break;

                    case 2: // Process Next Item
                        manager.processNextItem();
                        break;

                    case 3: // View Processing Queue
                        manager.viewProcessingQueue();
                        break;

                    case 4: // View Processed Items
                        manager.viewProcessedItems();
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Production Line Management System. Goodbye!");
                        return; // Exit the main method

                    default: // Invalid choice
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions in the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Menu ---");
        System.out.println("1. Add Item to Queue");
        System.out.println("2. Process Next Item");
        System.out.println("3. View Processing Queue");
        System.out.println("4. View Processed Items");
        System.out.println("5. Exit");
        System.out.println("------------");
    }
}
