/*
 * Exam Question #658
 * Generated on: 2025-05-12 16:21:06
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Event Registration and Waiting List System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple event registration system for a popular event with limited capacity. Attendees can register, and if the event is full, they are placed on a waiting list. The system should allow users to interact via a command-line interface to perform various actions.
 * 
 * **System Requirements:**
 * 
 * 1.  **Event Capacity:** The event has a fixed maximum capacity (e.g., 5 attendees).
 * 2.  **Attendee Management:**
 *     *   Maintain a list of attendees who are **confirmed** to attend.
 *     *   Maintain a separate list (a waiting line) of attendees who are on the **waiting list** because the event is full.
 * 3.  **Operations:** The system must support the following operations via a menu:
 *     *   **Register Attendee:**
 *         *   Prompt the user for the attendee's name.
 *         *   Validate that the name is not empty.
 *         *   Check if the attendee is already registered (either confirmed or on the waiting list). If so, report an error.
 *         *   If the confirmed attendee list is not full, add the attendee to the confirmed list.
 *         *   If the confirmed attendee list is full, add the attendee to the waiting list.
 *         *   Provide appropriate success or failure messages.
 *     *   **View Confirmed Attendees:** Display the list of confirmed attendees.
 *     *   **View Waiting List:** Display the list of attendees on the waiting list.
 *     *   **Confirm from Waiting List:**
 *         *   If there is space in the confirmed list AND the waiting list is not empty, move the person at the *front* of the waiting list to the confirmed list.
 *         *   Report success or failure (e.g., "No space available" or "Waiting list is empty").
 *     *   **Exit:** Terminate the program.
 * 4.  **User Interface:** A simple text-based menu should be displayed repeatedly until the user chooses to exit.
 * 5.  **Error Handling:**
 *     *   Handle invalid menu input (e.g., non-numeric input, numbers outside the menu range).
 *     *   Handle specific application logic errors (e.g., trying to register an existing attendee, trying to confirm from an empty waiting list or when confirmed list is full).
 *     *   Use `System.err` for all error messages.
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, list displays).
 *     *   Implement class-wide exception handling using `try-catch` blocks to catch potential runtime errors during the main interaction loop (e.g., `InputMismatchException`).
 * 
 * **Required Java Components:**
 * 
 * Your solution *must* use and demonstrate the proper usage of the following Java components:
 * 
 * *   `java.util.Queue`
 * *   `java.util.ArrayList`
 * *   `java.util.List` (as the type for the confirmed attendees variable)
 * *   `java.util.Scanner`
 * *   `switch` statement
 * *   `System.err`
 * *   `System.out`
 * *   Class-wide `try-catch` blocks
 * 
 * **Best Practices:**
 * 
 * Your solution should adhere to the following best practices:
 * 
 * *   Proper encapsulation (private fields, public methods).
 * *   Meaningful variable and method names.
 * *   Appropriate comments and documentation (e.g., explaining the purpose of methods).
 * *   Input validation (checking for empty names, valid menu choices).
 * *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt for input, and display results or errors based on user actions. Examples:
 * 
 * ```
 * --- Event Management Menu ---
 * 1. Register Attendee
 * 2. View Confirmed Attendees
 * 3. View Waiting List
 * 4. Confirm from Waiting List
 * 5. Exit
 * Enter your choice: 1
 * Enter attendee name: Alice
 * Alice registered successfully.
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 1
 * Enter attendee name: Bob
 * Bob registered successfully.
 * ... (continue until capacity is reached)
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 1
 * Enter attendee name: Charlie
 * Event is full. Charlie added to waiting list.
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 2
 * --- Confirmed Attendees ---
 * 1. Alice
 * 2. Bob
 * 3. ... (up to capacity)
 * -------------------------
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * 1. Charlie
 * 2. ...
 * --------------------
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 4
 * Confirmed 1 attendee from waiting list.
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 4
 * Error: No space available in confirmed list or waiting list is empty. (Printed to System.err)
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: invalid_input
 * Error: Invalid input. Please enter a number. (Printed to System.err)
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 99
 * Error: Invalid menu choice. Please enter a number between 1 and 5. (Printed to System.err)
 * 
 * --- Event Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * **Task:**
 * 
 * Write the complete Java code for the `EventManagement` class that fulfills all the requirements, uses the specified components, and follows best practices.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness of implementation for all operations.
 * *   Proper usage of ALL required Java components.
 * *   Adherence to best practices (encapsulation, naming, comments, structure).
 * *   Robust error handling and input validation using `System.err` and `try-catch`.
 *
 * EXPLANATION:
 * This solution implements a simple event registration system demonstrating the required Java concepts and best practices.
 * 
 * **Core Data Structures:**
 * 
 * 1.  `List<String> confirmedAttendees = new ArrayList<>();`: An `ArrayList` is used to store the names of confirmed attendees. `ArrayList` provides dynamic resizing and efficient access by index, which is suitable for displaying a numbered list of confirmed attendees. The variable is declared using the `List` interface, promoting flexibility.
 * 2.  `Queue<String> waitingList = new LinkedList<>();`: A `Queue` is used for the waiting list. The `LinkedList` class implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior, which is ideal for a waiting list where the person who waited longest is the next to be confirmed.
 * 
 * **Required Java Components Usage:**
 * 
 * *   **`java.util.Queue`:** Used for `waitingList`. Methods like `offer()` (to add to the end) and `poll()` (to remove from the front) are used.
 * *   **`java.util.ArrayList`:** Used to instantiate the `confirmedAttendees` list.
 * *   **`java.util.List`:** The `confirmedAttendees` variable is declared as a `List`, adhering to the principle of programming to interfaces.
 * *   **`java.util.Scanner`:** Used in the `runSystem` and `registerAttendee` methods to read user input from the console.
 * *   **`switch` statement:** Used in the `runSystem` method to handle different menu choices provided by the user.
 * *   **`System.err`:** Used throughout the code to print error messages, such as invalid input, duplicate registrations, or system state errors (e.g., waiting list empty, confirmed list full).
 * *   **`System.out`:** Used for all normal output, including the menu, prompts, success messages, and displaying the contents of the confirmed and waiting lists.
 * *   **Class-wide `try-catch`:** A `try-catch` block is wrapped around the main loop logic within the `runSystem` method. This catches potential runtime exceptions that might occur during user interaction, specifically `InputMismatchException` if the user enters non-integer input for the menu choice, and a general `Exception` catch for any other unexpected errors. Error details are printed to `System.err`.
 * 
 * **Logic and Functionality:**
 * 
 * *   **Constructor:** Initializes the `confirmedAttendees` list (as `ArrayList`), the `waitingList` queue (as `LinkedList`), sets the event `capacity`, and initializes the `Scanner`.
 * *   **`displayMenu()`:** Prints the interactive menu options to `System.out`.
 * *   **`registerAttendee()`:** Prompts for a name, validates it (not empty), checks for duplicates in *both* lists, and adds the attendee to either the `confirmedAttendees` list (if space is available) or the `waitingList` queue. Uses `System.out` for success and `System.err` for validation errors.
 * *   **`viewConfirmedAttendees()`:** Iterates through the `confirmedAttendees` list (using a standard for loop with index for numbering) and prints each name to `System.out`.
 * *   **`viewWaitingList()`:** Iterates through the `waitingList` queue (using an enhanced for loop, which views elements without removing them) and prints each name to `System.out`.
 * *   **`confirmFromWaitingList()`:** Checks if there is space in `confirmedAttendees` and if `waitingList` is not empty. If both conditions are true, it uses `waitingList.poll()` to remove the attendee at the front of the queue and `confirmedAttendees.add()` to add them to the confirmed list. Reports success or failure to `System.out` or `System.err` respectively.
 * *   **`runSystem()`:** Contains the main program loop. It repeatedly displays the menu, reads the user's choice using `scanner.nextInt()`, and uses a `switch` statement to call the appropriate method. It includes input validation for the menu choice (within the `switch`'s `default` case) and the `try-catch` block handles non-integer input or other runtime exceptions, printing errors to `System.err`. The `scanner.nextLine()` call after `scanner.nextInt()` is crucial to consume the leftover newline character.
 * *   **`main()`:** The entry point of the program. Creates an instance of `EventManagement` with a specified capacity and calls the `runSystem()` method to start the interaction loop.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** Fields (`confirmedAttendees`, `waitingList`, `capacity`, `scanner`) are declared as `private`, and access is controlled through `public` methods (`registerAttendee`, `viewConfirmedAttendees`, etc.).
 * *   **Meaningful Names:** Variables (`confirmedAttendees`, `waitingList`, `capacity`, `choice`, `name`) and methods (`registerAttendee`, `viewWaitingList`, `confirmFromWaitingList`, `runSystem`) have names that clearly indicate their purpose.
 * *   **Comments and Documentation:** Javadoc-style comments are used for the class and methods to explain their purpose, parameters, and return values. Inline comments are used where necessary to clarify specific logic points (e.g., consuming the newline after `nextInt`).
 * *   **Input Validation:** The `registerAttendee` method checks for empty names and duplicates. The `runSystem` method implicitly handles invalid non-numeric input via the `try-catch` and invalid numeric range via the `switch`'s `default`.
 * *   **Error Handling:** Specific application errors (full list, empty queue, duplicates, empty name) are handled with `if` conditions and reported via `System.err`. General input errors and unexpected runtime exceptions are caught by the `try-catch` block in `runSystem` and reported via `System.err`.
 * *   **Clean Code Structure:** The code is organized into a single class with distinct methods for each operation, making it modular and readable.
 * 
 * This solution effectively integrates all the required components to build a functional, albeit simple, system that demonstrates advanced Java concepts like collections, error handling, and object-oriented principles.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Manages event registration, confirmed attendees, and a waiting list.
 */
public class EventManagement {

    private List<String> confirmedAttendees;
    private Queue<String> waitingList;
    private final int capacity;
    private Scanner scanner;

    /**
     * Constructs an EventManagement system with a specified capacity.
     *
     * @param capacity The maximum number of confirmed attendees.
     */
    public EventManagement(int capacity) {
        if (capacity <= 0) {
            // Although not explicitly required by prompt, good practice
            throw new IllegalArgumentException("Capacity must be positive.");
        }
        this.capacity = capacity;
        this.confirmedAttendees = new ArrayList<>();
        this.waitingList = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Event Management Menu ---");
        System.out.println("1. Register Attendee");
        System.out.println("2. View Confirmed Attendees");
        System.out.println("3. View Waiting List");
        System.out.println("4. Confirm from Waiting List");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Registers a new attendee. Adds to confirmed list if space, otherwise to waiting list.
     * Handles validation for empty names and duplicates.
     */
    public void registerAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
            return;
        }

        // Check for duplicates in both lists
        if (confirmedAttendees.contains(name)) {
            System.err.println("Error: Attendee '" + name + "' is already confirmed.");
            return;
        }
        if (waitingList.contains(name)) {
            System.err.println("Error: Attendee '" + name + "' is already on the waiting list.");
            return;
        }

        // Add to confirmed or waiting list
        if (confirmedAttendees.size() < capacity) {
            confirmedAttendees.add(name);
            System.out.println(name + " registered successfully.");
        } else {
            waitingList.offer(name); // offer is generally preferred for capacity-constrained queues
            System.out.println("Event is full. " + name + " added to waiting list.");
        }
    }

    /**
     * Displays the list of confirmed attendees.
     */
    public void viewConfirmedAttendees() {
        System.out.println("\n--- Confirmed Attendees ---");
        if (confirmedAttendees.isEmpty()) {
            System.out.println("No confirmed attendees yet.");
        } else {
            for (int i = 0; i < confirmedAttendees.size(); i++) {
                System.out.println((i + 1) + ". " + confirmedAttendees.get(i));
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Displays the list of attendees on the waiting list.
     */
    public void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (String attendee : waitingList) {
                System.out.println(index + ". " + attendee);
                index++;
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Moves the first person from the waiting list to the confirmed list, if space is available.
     */
    public void confirmFromWaitingList() {
        if (confirmedAttendees.size() < capacity) {
            if (!waitingList.isEmpty()) {
                String confirmedName = waitingList.poll(); // Remove from front of queue
                confirmedAttendees.add(confirmedName);
                System.out.println("Confirmed '" + confirmedName + "' from waiting list.");
            } else {
                System.err.println("Error: Waiting list is empty.");
            }
        } else {
            System.err.println("Error: Confirmed list is already at full capacity.");
        }
    }

    /**
     * Runs the main event management system loop.
     * Includes class-wide exception handling for the interaction loop.
     */
    public void runSystem() {
        int choice = -1;
        while (choice != 5) {
            displayMenu();
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                switch (choice) {
                    case 1:
                        registerAttendee();
                        break;
                    case 2:
                        viewConfirmedAttendees();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        confirmFromWaitingList();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to continue loop
            } catch (Exception e) {
                // Catch any other unexpected runtime exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace to System.err for debugging
                // Depending on severity, might exit or try to continue
                // For this exam, we'll let it continue after printing error
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the Event Management system.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Set event capacity
        int eventCapacity = 5;
        EventManagement system = new EventManagement(eventCapacity);
        system.runSystem();
    }
}
