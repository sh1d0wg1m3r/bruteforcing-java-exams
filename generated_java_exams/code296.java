/*
 * Exam Question #296
 * Generated on: 2025-05-11 22:51:14
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam: Emergency Room Simulation
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified simulation system for a hospital's emergency room. The system needs to manage patients arriving in a waiting queue and assign them to available medical staff for treatment.
 * 
 * The system should allow users to perform the following actions via a command-line interface:
 * 
 * 1.  **Add New Patient:** Add a patient to the end of the waiting queue. Patients have a unique ID, name, and a severity level (an integer from 1 to 5, where 5 is most severe).
 * 2.  **Add Medical Staff:** Add a medical staff member to the list of available staff. Staff members have a unique ID, name, and specialization.
 * 3.  **Assign Next Patient:** Take the patient at the front of the waiting queue and assign them (conceptually) to an available staff member. The patient is then moved to a list of treated patients. This operation should only proceed if there is at least one patient in the queue AND at least one staff member available.
 * 4.  **List Waiting Patients:** Display all patients currently in the waiting queue in the order they will be treated.
 * 5.  **List Available Staff:** Display all medical staff members who are available.
 * 6.  **List Treated Patients:** Display all patients who have been processed (assigned to staff).
 * 7.  **Exit:** Terminate the application.
 * 
 * **Technical Requirements:**
 * 
 * Your solution must be a single Java application that uses the console for interaction. Specifically, you MUST use the following Java components:
 * 
 * *   `java.util.Queue`: To manage the patient waiting list (FIFO - First-In, First-Out).
 * *   `java.util.ArrayList`: To store the list of available medical staff and the list of treated patients.
 * *   `java.util.List`: Declare the variables holding the medical staff and treated patients using the `List` interface type.
 * *   `java.util.Scanner`: To read user input for menu choices and patient/staff details.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To display error messages (e.g., invalid input, queue empty, no staff available).
 * *   `System.out`: To display prompts, menus, and normal output (lists, success messages).
 * *   Class-wide exception handling: Implement `try-catch` blocks, including one around the main application loop, to handle potential runtime exceptions gracefully (e.g., invalid input format).
 * 
 * **Design and Best Practices Requirements:**
 * 
 * *   **Encapsulation:** Use private fields and public methods for classes (`Patient`, `MedicalStaff`, and the main system class).
 * *   **Meaningful Names:** Use descriptive names for variables, methods, and classes.
 * *   **Comments and Documentation:** Include comments where necessary to explain complex logic and Javadoc for classes and public methods.
 * *   **Input Validation:** Validate user input, especially for numerical values (like severity and menu choice), ensuring they are within expected ranges or formats. Handle invalid input appropriately (e.g., print an error and prompt again or ignore the invalid input for that step).
 * *   **Error Handling:** Implement checks for conditions that prevent operations (e.g., attempting to assign a patient when the queue is empty or no staff is available) and report these errors using `System.err`.
 * *   **Clean Code Structure:** Organize your code into appropriate classes and methods.
 * 
 * **Expected Output:**
 * 
 * *   The program should present a clear menu of options.
 * *   Prompts for input should be user-friendly.
 * *   Lists should display the details of patients/staff clearly.
 * *   Error messages should be informative and printed to `System.err`.
 * *   The system should continue running until the 'Exit' option is selected.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * Emergency Room System Menu:
 * 1. Add New Patient
 * 2. Add Medical Staff
 * 3. Assign Next Patient
 * 4. List Waiting Patients
 * 5. List Available Staff
 * 6. List Treated Patients
 * 7. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Enter Patient Severity (1-5): 4
 * Patient Alice added to the waiting queue.
 * 
 * Enter your choice: 5
 * Available Medical Staff:
 * (No staff available)
 * 
 * Enter your choice: 3
 * Error: Cannot assign patient. Either queue is empty or no staff is available.
 * 
 * Enter your choice: 2
 * Enter Staff ID: 201
 * Enter Staff Name: Dr. Smith
 * Enter Staff Specialization: Cardiology
 * Medical Staff Dr. Smith added.
 * 
 * Enter your choice: 3
 * Assigning patient from queue...
 * Patient 101 (Alice, Severity 4) has been assigned to a staff member and moved to treated list.
 * 
 * Enter your choice: 4
 * Waiting Patients:
 * (Queue is empty)
 * 
 * Enter your choice: 6
 * Treated Patients:
 * [ID: 101, Name: Alice, Severity: 4]
 * 
 * Enter your choice: 7
 * Exiting Emergency Room System.
 * ```
 * 
 * Your solution should implement the described functionality following all requirements.
 *
 * EXPLANATION:
 * This solution simulates a basic Emergency Room system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Scenario Mapping:** The emergency room scenario naturally fits the required data structures. Patients arrive and wait in a **Queue** (`waitingQueue`) to be processed in a First-In, First-Out manner. Available medical staff and treated patients are stored in collections that allow easy iteration and storage, making **List** (implemented by **ArrayList**) suitable (`availableStaff`, `treatedPatients`).
 * 
 * 2.  **Required Components Usage:**
 *     *   `java.util.Queue`: Used specifically for `waitingQueue`. `LinkedList` is used as the concrete implementation because it provides efficient queue operations (`offer` to add, `poll` to remove from head, `peek` to view head).
 *     *   `java.util.ArrayList`: Used as the concrete implementation for `availableStaff` and `treatedPatients`.
 *     *   `java.util.List`: Variables `availableStaff` and `treatedPatients` are declared using the `List` interface type (`List<MedicalStaff> availableStaff = new ArrayList<>();`), adhering to the principle of programming to interfaces.
 *     *   `java.util.Scanner`: An instance is created (`scanner`) and used throughout the `EmergencyRoomSystem` class to read various types of user input from `System.in`.
 *     *   `switch` statement: Used in the `runSystem` method to direct the program flow based on the user's menu choice.
 *     *   `System.err`: Used to print error messages, such as invalid input for severity or menu choice, and operational errors like trying to assign a patient when the queue or staff list is empty.
 *     *   `System.out`: Used for all normal output, including the menu, prompts for input, success messages, and listing the contents of the queues and lists.
 *     *   Class-wide `try-catch`: The main `runSystem` method, which contains the application's primary loop, is wrapped in a `try-catch(Exception e)` block. This catches any unexpected runtime exceptions that might occur during the execution of the system, preventing the program from crashing abruptly and printing an error message to `System.err`. Additionally, smaller `try-catch` blocks are used within methods like `addPatient` and within the main loop's input reading to handle specific anticipated exceptions like `InputMismatchException` caused by incorrect input types.
 * 
 * 3.  **Design and Best Practices:**
 *     *   **Encapsulation:** The `Patient`, `MedicalStaff`, and `EmergencyRoomSystem` classes use private fields (`patientId`, `name`, etc.) and provide public getter methods (`getPatientId`, `getName`, etc.) to access the data. Methods that represent operations (`addPatient`, `assignPatientToStaff`) are public.
 *     *   **Meaningful Names:** Class names (`Patient`, `MedicalStaff`, `EmergencyRoomSystem`), variable names (`waitingQueue`, `availableStaff`, `treatedPatients`, `severity`), and method names (`addPatient`, `listWaitingQueue`, `runSystem`) are descriptive and indicate their purpose.
 *     *   **Comments and Documentation:** Javadoc comments are provided for classes and public methods, explaining their function and parameters. Inline comments clarify specific logic points, such as consuming the newline character after reading numbers with `Scanner`.
 *     *   **Input Validation:** The `addPatient` method includes a loop to ensure the severity level entered by the user is within the valid range (1-5). The main loop handles `InputMismatchException` for both the menu choice and severity input, informing the user of the error and allowing them to try again.
 *     *   **Error Handling:** Specific conditions (empty queue, no available staff) are checked before attempting the `assignPatientToStaff` operation, and informative error messages are printed to `System.err` if the conditions are not met.
 *     *   **Clean Code Structure:** The code is organized into separate classes for data entities (`Patient`, `MedicalStaff`) and a main class (`EmergencyRoomSystem`) that orchestrates the operations. Each distinct operation (add patient, list staff, etc.) is encapsulated in its own method, making the `runSystem` method clean and easy to understand as a flow controller.
 * 
 * This solution effectively demonstrates the required Java components and best practices within a practical, menu-driven application context, suitable for evaluating a student's understanding of these core concepts.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the emergency room
class Patient {
    private int patientId;
    private String name;
    private int severity; // 1 (low) to 5 (high)

    /**
     * Constructs a new Patient object.
     * @param patientId Unique identifier for the patient.
     * @param name The patient's name.
     * @param severity The severity level of the patient's condition (1-5).
     */
    public Patient(int patientId, String name, int severity) {
        this.patientId = patientId;
        this.name = name;
        // Basic validation for severity
        if (severity >= 1 && severity <= 5) {
            this.severity = severity;
        } else {
            // Default to a medium severity or throw an exception in a real system
            // For this exam, we'll assume input is validated before object creation
            this.severity = 3; // Fallback
        }
    }

    // Getters
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getSeverity() {
        return severity;
    }

    /**
     * Returns a string representation of the Patient object.
     * @return String representation including ID, name, and severity.
     */
    @Override
    public String toString() {
        return "[ID: " + patientId + ", Name: " + name + ", Severity: " + severity + "]";
    }
}

// Represents a medical staff member
class MedicalStaff {
    private int staffId;
    private String name;
    private String specialization;

    /**
     * Constructs a new MedicalStaff object.
     * @param staffId Unique identifier for the staff member.
     * @param name The staff member's name.
     * @param specialization The staff member's specialization (e.g., Cardiology, Neurology).
     */
    public MedicalStaff(int staffId, String name, String specialization) {
        this.staffId = staffId;
        this.name = name;
        this.specialization = specialization;
    }

    // Getters
    public int getStaffId() {
        return staffId;
    }

    public String getName() {
        return name;
    }

    public String getSpecialization() {
        return specialization;
    }

    /**
     * Returns a string representation of the MedicalStaff object.
     * @return String representation including ID, name, and specialization.
     */
    @Override
    public String toString() {
        return "[ID: " + staffId + ", Name: " + name + ", Specialization: " + specialization + "]";
    }
}

// Main class managing the emergency room system
public class EmergencyRoomSystem {
    // Using Queue for waiting patients (FIFO)
    private Queue<Patient> waitingQueue;
    // Using List and ArrayList for available staff and treated patients
    private List<MedicalStaff> availableStaff;
    private List<Patient> treatedPatients;
    private Scanner scanner; // Scanner for user input

    /**
     * Constructs a new EmergencyRoomSystem.
     * Initializes the data structures and the scanner.
     */
    public EmergencyRoomSystem() {
        this.waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        this.availableStaff = new ArrayList<>(); // ArrayList implements List
        this.treatedPatients = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the waiting queue.
     */
    public void addPatient() {
        System.out.println("--- Add New Patient ---");
        try {
            System.out.print("Enter Patient ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter Patient Name: ");
            String name = scanner.nextLine();

            int severity = -1;
            while (severity < 1 || severity > 5) {
                System.out.print("Enter Patient Severity (1-5): ");
                try {
                    severity = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    if (severity < 1 || severity > 5) {
                        System.err.println("Error: Severity must be between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number for severity.");
                    scanner.nextLine(); // Consume the invalid input
                }
            }

            Patient newPatient = new Patient(id, name, severity);
            waitingQueue.offer(newPatient); // offer() is preferred over add() for capacity-constrained queues, though LinkedList is not capacity-constrained. Still good practice.
            System.out.println("Patient " + name + " added to the waiting queue.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input format. Please try again.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
            System.err.println("An unexpected error occurred while adding patient: " + e.getMessage());
        }
        System.out.println("-----------------------");
    }

    /**
     * Adds a new medical staff member to the available staff list.
     */
    public void addStaff() {
        System.out.println("--- Add Medical Staff ---");
        try {
            System.out.print("Enter Staff ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            System.out.print("Enter Staff Name: ");
            String name = scanner.nextLine();

            System.out.print("Enter Staff Specialization: ");
            String specialization = scanner.nextLine();

            MedicalStaff newStaff = new MedicalStaff(id, name, specialization);
            availableStaff.add(newStaff); // add() is standard for List/ArrayList
            System.out.println("Medical Staff " + name + " added.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input format. Please try again.");
            scanner.nextLine(); // Consume the invalid input line
        } catch (Exception e) {
            System.err.println("An unexpected error occurred while adding staff: " + e.getMessage());
        }
        System.out.println("-----------------------");
    }

    /**
     * Assigns the next patient from the queue to an available staff member.
     */
    public void assignPatientToStaff() {
        System.out.println("--- Assign Patient ---");
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Cannot assign patient. Waiting queue is empty.");
            System.out.println("----------------------");
            return;
        }
        if (availableStaff.isEmpty()) {
            System.err.println("Error: Cannot assign patient. No medical staff available.");
            System.out.println("----------------------");
            return;
        }

        // Get the next patient from the front of the queue without removing yet
        Patient nextPatient = waitingQueue.peek();
        // In a real system, we'd find the 'best' staff. Here, we just confirm availability.
        MedicalStaff staff = availableStaff.get(0); // Just pick the first available staff conceptually

        System.out.println("Assigning patient from queue...");
        System.out.println("Next Patient: " + nextPatient);
        System.out.println("Assigned to (conceptually): " + staff.getName() + " (" + staff.getSpecialization() + ")");

        // Remove the patient from the queue and add to treated list
        Patient treatedPatient = waitingQueue.poll(); // poll() retrieves and removes the head of the queue
        treatedPatients.add(treatedPatient);

        System.out.println("Patient " + treatedPatient.getName() + " has been assigned to a staff member and moved to treated list.");
        System.out.println("----------------------");
    }

    /**
     * Lists all patients currently in the waiting queue.
     */
    public void listWaitingQueue() {
        System.out.println("--- Waiting Patients ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterating over the queue doesn't remove elements
            for (Patient patient : waitingQueue) {
                System.out.println(patient);
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Lists all available medical staff members.
     */
    public void listAvailableStaff() {
        System.out.println("--- Available Medical Staff ---");
        if (availableStaff.isEmpty()) {
            System.out.println("(No staff available)");
        } else {
            for (MedicalStaff staff : availableStaff) {
                System.out.println(staff);
            }
        }
        System.out.println("-----------------------------");
    }

    /**
     * Lists all patients who have been treated.
     */
    public void listTreatedPatients() {
        System.out.println("--- Treated Patients ---");
        if (treatedPatients.isEmpty()) {
            System.out.println("(No patients treated yet)");
        } else {
            for (Patient patient : treatedPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Displays the main menu and handles user interaction.
     * Contains the main application loop and class-wide exception handling.
     */
    public void runSystem() {
        int choice = -1;

        // Class-wide try-catch block for the main application loop
        try {
            while (choice != 7) {
                printMenu();
                System.out.print("Enter your choice: ");

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    // Switch statement for menu control
                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            addStaff();
                            break;
                        case 3:
                            assignPatientToStaff();
                            break;
                        case 4:
                            listWaitingQueue();
                            break;
                        case 5:
                            listAvailableStaff();
                            break;
                        case 6:
                            listTreatedPatients();
                            break;
                        case 7:
                            System.out.println("Exiting Emergency Room System.");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 7.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number for your choice.");
                    scanner.nextLine(); // Consume the invalid input
                    choice = -1; // Reset choice to continue the loop
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions in the main loop
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed when the system exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("Emergency Room System Menu:");
        System.out.println("1. Add New Patient");
        System.out.println("2. Add Medical Staff");
        System.out.println("3. Assign Next Patient");
        System.out.println("4. List Waiting Patients");
        System.out.println("5. List Available Staff");
        System.out.println("6. List Treated Patients");
        System.out.println("7. Exit");
    }

    /**
     * Main method to start the Emergency Room System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        EmergencyRoomSystem system = new EmergencyRoomSystem();
        system.runSystem();
    }
}
