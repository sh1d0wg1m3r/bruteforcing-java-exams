/*
 * Exam Question #1049
 * Generated on: 2025-05-12 17:18:08
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Restaurant Order Processing System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified backend system for a restaurant to manage customer orders. The system should allow restaurant staff to view the menu, place new orders by selecting items, process the next order waiting in a queue, and check the number of pending orders.
 * 
 * **Requirements:**
 * 
 * 1.  **`MenuItem` Class:**
 *     *   Create a class named `MenuItem`.
 *     *   It must have private fields for `name` (String) and `price` (double).
 *     *   Include a public constructor to initialize these fields.
 *     *   Provide public getter methods for both `name` and `price`.
 * 
 * 2.  **`Order` Class:**
 *     *   Create a class named `Order`.
 *     *   It must have a private field `items` of type `List<String>` to store the names of the ordered items. Use `ArrayList` for the concrete implementation.
 *     *   It must have a private field `totalPrice` of type `double`.
 *     *   Include a public constructor that initializes the `items` list and sets `totalPrice` to 0.0.
 *     *   Provide a public method, e.g., `addItem(String itemName, double itemPrice)`, that adds the item name to the `items` list and updates the `totalPrice`.
 *     *   Provide public getter methods for `items` and `totalPrice`.
 * 
 * 3.  **`RestaurantSystem` Class:**
 *     *   Create a public class named `RestaurantSystem`.
 *     *   It must have a private field `menu` of type `List<MenuItem>`. Use `ArrayList` for the concrete implementation. Initialize this list with at least 3 sample menu items in the constructor or an initialization method.
 *     *   It must have a private field `orderQueue` of type `Queue<Order>`. Use `LinkedList` (which implements `Queue`) for the concrete implementation.
 *     *   It must have a private field `scanner` of type `Scanner` for handling user input. This `Scanner` instance should be passed into the `RestaurantSystem` constructor.
 *     *   Implement a public method `run()` which contains the main application loop.
 *     *   Inside the `run()` method, present the following menu of options to the user using `System.out`:
 *         *   1. Display Menu
 *         *   2. Place New Order
 *         *   3. Process Next Order
 *         *   4. View Order Queue
 *         *   5. Exit
 *     *   Use a `switch` statement based on the user's integer choice to call appropriate private methods for each option.
 *     *   **Implement Option 1 (Display Menu):** Create a private method `displayMenu()` that iterates through the `menu` list and prints each item with its index (starting from 1), name, and price to `System.out`.
 *     *   **Implement Option 2 (Place New Order):** Create a private method `placeOrder()`.
 *         *   Call `displayMenu()` first.
 *         *   Prompt the user to enter the index of an item to add to the order or type 'done' to finish.
 *         *   Use a loop to allow adding multiple items.
 *         *   Inside the loop, read the user's input. If 'done', break the loop.
 *         *   If the input is not 'done', attempt to parse it as an integer index.
 *         *   Use a `try-catch` block to handle `NumberFormatException` if the input is not a valid integer. Print an error message to `System.err`.
 *         *   If parsing is successful, validate the index (must be within the bounds of the menu list, adjusted for 1-based input).
 *         *   If the index is invalid, print an error message to `System.err`.
 *         *   If the index is valid, retrieve the corresponding `MenuItem` from the `menu` list. Create an `Order` object if it's the first item, or use the existing one for the current order. Add the item's name and price to the `Order` using the `addItem` method. Inform the user that the item was added using `System.out`.
 *         *   After the loop finishes, if the order contains at least one item, add the `Order` object to the `orderQueue`. Inform the user that the order was placed using `System.out`.
 *         *   If no items were added, inform the user using `System.out`.
 *     *   **Implement Option 3 (Process Next Order):** Create a private method `processNextOrder()`.
 *         *   Attempt to retrieve and remove the next `Order` from the `orderQueue` using `poll()`.
 *         *   If an `Order` is returned (i.e., the queue was not empty), print the details of the processed order (items and total price) to `System.out`.
 *         *   If `poll()` returns `null` (queue was empty), print a message indicating no orders are waiting to `System.err`.
 *     *   **Implement Option 4 (View Order Queue):** Create a private method `viewOrderQueue()`. Print the current number of orders in the `orderQueue` to `System.out`.
 *     *   **Implement Option 5 (Exit):** Set a flag to terminate the main loop.
 *     *   Implement comprehensive exception handling using `try-catch` blocks. Specifically:
 *         *   Wrap the reading and parsing of the main menu choice within a `try-catch` block to handle potential `NumberFormatException` or `InputMismatchException`. Print errors to `System.err`.
 *         *   Use `try-catch` within `placeOrder` for item index input validation as described above.
 *         *   Consider a general `catch(Exception e)` in the `run()` method's main loop to catch any unexpected runtime errors and print a message to `System.err`.
 *     *   Ensure all standard output (menu, prompts, success messages, order details, queue size) goes to `System.out`.
 *     *   Ensure all error messages (invalid input, empty queue for processing) go to `System.err`.
 *     *   Follow Java best practices: meaningful variable/method names, proper encapsulation (private fields, public methods where needed), and add comments where necessary.
 * 
 * 4.  **`main` Method:**
 *     *   Create a `main` method in the `RestaurantSystem` class.
 *     *   Inside `main`, use a `try-with-resources` block to create and manage the `Scanner` object, ensuring it is closed automatically.
 *     *   Create an instance of `RestaurantSystem`, passing the `Scanner` to its constructor.
 *     *   Call the `run()` method on the `RestaurantSystem` instance to start the application.
 *     *   Include a `catch` block in `main` to handle potential exceptions during system initialization or the main `run` execution if not fully caught within `run`. Print errors to `System.err`.
 * 
 * **Expected Output:**
 * 
 * The program should compile and run, presenting a menu-driven interface. User interaction should proceed as described in the requirements, with output directed to `System.out` for normal operations and `System.err` for errors. The system should handle invalid inputs gracefully without crashing.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 1
 * --- Menu ---
 * 1. Burger - $8.99
 * 2. Fries - $3.49
 * 3. Soda - $1.99
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 2
 * --- Place New Order ---
 * --- Menu ---
 * 1. Burger - $8.99
 * 2. Fries - $3.49
 * 3. Soda - $1.99
 * Enter item index to add (or 'done' to finish): 1
 * Burger added.
 * Enter item index to add (or 'done' to finish): 3
 * Soda added.
 * Enter item index to add (or 'done' to finish): 6
 * Error: Invalid item index. Please enter a number between 1 and 3.
 * Enter item index to add (or 'done' to finish): done
 * Order placed successfully! Items: [Burger, Soda], Total: $10.98
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 4
 * Orders waiting: 1
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 3
 * Processing order:
 * Items: [Burger, Soda]
 * Total: $10.98
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 3
 * Error: No orders waiting to be processed.
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: exit
 * Error: Invalid input. Please enter a number.
 * --- Restaurant Order System ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Order Queue
 * 5. Exit
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 *
 * EXPLANATION:
 * The provided solution implements a simple Restaurant Order Processing System demonstrating the required Java concepts.
 * 
 * 1.  **`MenuItem` Class:** A basic POJO (Plain Old Java Object) representing an item on the menu with encapsulated `name` and `price` fields accessed via public getters.
 * 2.  **`Order` Class:** Represents a customer's order. It uses a `List<String>` (`ArrayList` implementation) to store the names of the items ordered and maintains a `totalPrice`. The `addItem` method provides a way to add items and update the total, adhering to encapsulation.
 * 3.  **`RestaurantSystem` Class:** This is the core class managing the application logic.
 *     *   **Required Components Usage:**
 *         *   `List<MenuItem> menu = new ArrayList<>();`: An `ArrayList` is used to implement the `List` interface for storing menu items.
 *         *   `Queue<Order> orderQueue = new LinkedList<>();`: A `LinkedList` is used to implement the `Queue` interface, naturally modeling a FIFO (First-In, First-Out) queue for processing orders in the order they were placed.
 *         *   `Scanner scanner;`: A `Scanner` object is used to read user input from `System.in`. It's passed into the constructor and managed using `try-with-resources` in the `main` method to ensure closure.
 *         *   `switch (choice)`: A `switch` statement is used in the `run()` method to direct program flow based on the user's main menu selection.
 *         *   `System.err.println(...)`: Used specifically for printing error messages, such as invalid input or attempting to process an empty queue.
 *         *   `System.out.println(...)`: Used for all standard output, including displaying the menu, prompts, success messages, order details, and queue status.
 *         *   `try-catch` blocks: Implemented in multiple places:
 *             *   In the `run()` method around the main menu choice reading and parsing to handle non-numeric input (`NumberFormatException`). A general `catch(Exception e)` is included for robustness against unforeseen errors.
 *             *   In the `placeOrder()` method around the item index input reading and parsing (`NumberFormatException`) and implicit index validation (checking bounds) to handle invalid item selections.
 *             *   In the `main()` method using `try-with-resources` for the `Scanner` and a `catch` block for potential startup issues.
 *     *   **Structure and Best Practices:**
 *         *   **Encapsulation:** Fields in all classes are `private`. Logic is exposed via public methods (`run`) or accessed via public getters/setters (`MenuItem`, `Order`). Helper methods (`displayMenu`, `placeOrder`, etc.) are `private`.
 *         *   **Meaningful Names:** Classes, variables, and methods have descriptive names (e.g., `orderQueue`, `placeOrder`, `totalPrice`).
 *         *   **Comments and Documentation:** Basic Javadoc-style comments explain the purpose of classes, constructors, and public methods. Inline comments explain specific logic points, especially error handling.
 *         *   **Input Validation:** Input is validated at the point of reading (checking if it's numeric, checking if indices are within bounds).
 *         *   **Error Handling:** `try-catch` blocks are used for anticipated errors (invalid number format, out-of-bounds index) and a general catch for unexpected ones. `System.err` is used for error output. Specific error messages guide the user. Processing an empty queue is handled gracefully using `Queue.poll()` which returns `null` instead of throwing an exception, and an appropriate error message is printed to `System.err`.
 *         *   **Clean Code Structure:** The code is divided into logical classes and methods, making it modular and readable. The `run()` method orchestrates the main loop and calls dedicated methods for specific tasks.
 * 
 * The solution effectively combines the required Java components in a practical scenario, demonstrating proper object-oriented design, input handling, error management, and the use of standard library data structures like `List` and `Queue`. The use of `System.out` and `System.err` is correctly differentiated.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // While not strictly needed with String parsing, good to be aware

/**
 * Represents a menu item with a name and price.
 */
class MenuItem {
    private String name;
    private double price;

    /**
     * Constructs a new MenuItem.
     * @param name The name of the menu item.
     * @param price The price of the menu item.
     */
    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    /**
     * Gets the name of the menu item.
     * @return The item name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the price of the menu item.
     * @return The item price.
     */
    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return String.format("%s - $%.2f", name, price);
    }
}

/**
 * Represents a customer order containing a list of item names and the total price.
 */
class Order {
    private List<String> items;
    private double totalPrice;

    /**
     * Constructs a new empty Order.
     */
    public Order() {
        this.items = new ArrayList<>(); // Use ArrayList for the List implementation
        this.totalPrice = 0.0;
    }

    /**
     * Adds an item to the order and updates the total price.
     * @param itemName The name of the item to add.
     * @param itemPrice The price of the item to add.
     */
    public void addItem(String itemName, double itemPrice) {
        this.items.add(itemName);
        this.totalPrice += itemPrice;
    }

    /**
     * Gets the list of item names in the order.
     * @return The list of item names.
     */
    public List<String> getItems() {
        return items;
    }

    /**
     * Gets the total price of the order.
     * @return The total price.
     */
    public double getTotalPrice() {
        return totalPrice;
    }

    @Override
    public String toString() {
        return String.format("Items: %s, Total: $%.2f", items, totalPrice);
    }
}

/**
 * Manages the restaurant's menu and order queue, handling user interaction.
 */
public class RestaurantSystem {
    private List<MenuItem> menu; // Use List interface, implemented by ArrayList
    private Queue<Order> orderQueue; // Use Queue interface, implemented by LinkedList
    private Scanner scanner;

    /**
     * Constructs a new RestaurantSystem.
     * @param scanner The Scanner instance to use for user input.
     */
    public RestaurantSystem(Scanner scanner) {
        this.scanner = scanner;
        this.menu = new ArrayList<>(); // Use ArrayList for the menu list
        this.orderQueue = new LinkedList<>(); // Use LinkedList for the order queue
        initializeMenu();
    }

    /**
     * Initializes the restaurant menu with sample items.
     */
    private void initializeMenu() {
        menu.add(new MenuItem("Burger", 8.99));
        menu.add(new MenuItem("Fries", 3.49));
        menu.add(new MenuItem("Soda", 1.99));
        menu.add(new MenuItem("Pizza Slice", 4.50));
        menu.add(new MenuItem("Salad", 7.00));
    }

    /**
     * Displays the current menu to the console.
     */
    private void displayMenu() {
        System.out.println("--- Menu ---");
        for (int i = 0; i < menu.size(); i++) {
            System.out.println((i + 1) + ". " + menu.get(i));
        }
        System.out.println("------------");
    }

    /**
     * Prompts the user to place a new order by selecting items from the menu.
     * Handles input validation and adds the order to the queue.
     */
    private void placeOrder() {
        System.out.println("--- Place New Order ---");
        displayMenu();

        Order currentOrder = new Order();
        boolean addingItems = true;

        while (addingItems) {
            System.out.print("Enter item index to add (or 'done' to finish): ");
            String inputLine = scanner.nextLine();

            if (inputLine.equalsIgnoreCase("done")) {
                addingItems = false;
            } else {
                try {
                    int itemIndex = Integer.parseInt(inputLine);
                    // Validate index (1-based input)
                    if (itemIndex >= 1 && itemIndex <= menu.size()) {
                        MenuItem selectedItem = menu.get(itemIndex - 1); // Adjust to 0-based index
                        currentOrder.addItem(selectedItem.getName(), selectedItem.getPrice());
                        System.out.println(selectedItem.getName() + " added to order.");
                    } else {
                        // Invalid index error
                        System.err.println("Error: Invalid item index. Please enter a number between 1 and " + menu.size() + ".");
                    }
                } catch (NumberFormatException e) {
                    // Non-integer input error
                    System.err.println("Error: Invalid input. Please enter a number or 'done'.");
                }
            }
        }

        if (currentOrder.getItems().isEmpty()) {
            System.out.println("No items added to the order. Order cancelled.");
        } else {
            orderQueue.offer(currentOrder); // Add order to the end of the queue
            System.out.println("Order placed successfully! " + currentOrder);
        }
        System.out.println("-----------------------");
    }

    /**
     * Processes the next order in the queue.
     * Removes the order from the queue and displays its details.
     */
    private void processNextOrder() {
        System.out.println("--- Process Next Order ---");
        Order nextOrder = orderQueue.poll(); // Retrieve and remove the head of the queue

        if (nextOrder != null) {
            System.out.println("Processing order:");
            System.out.println(nextOrder);
        } else {
            // Queue is empty
            System.err.println("Error: No orders waiting to be processed.");
        }
        System.out.println("--------------------------");
    }

    /**
     * Displays the current number of orders waiting in the queue.
     */
    private void viewOrderQueue() {
        System.out.println("--- Order Queue Status ---");
        System.out.println("Orders waiting: " + orderQueue.size());
        System.out.println("--------------------------");
    }

    /**
     * Displays the main menu options to the console.
     */
    private void displayMainMenuOptions() {
        System.out.println("\n--- Restaurant Order System ---");
        System.out.println("1. Display Menu");
        System.out.println("2. Place New Order");
        System.out.println("3. Process Next Order");
        System.out.println("4. View Order Queue");
        System.out.println("5. Exit");
        System.out.println("-------------------------------");
    }

    /**
     * Runs the main application loop, handling user input and menu navigation.
     * Includes general exception handling.
     */
    public void run() {
        boolean running = true;

        while (running) {
            displayMainMenuOptions();
            System.out.print("Enter your choice: ");

            try {
                // Read input as String to handle non-numeric input gracefully before parsing
                String choiceString = scanner.nextLine();
                int choice = Integer.parseInt(choiceString); // Potential NumberFormatException

                switch (choice) {
                    case 1:
                        displayMenu();
                        break;
                    case 2:
                        placeOrder();
                        break;
                    case 3:
                        processNextOrder();
                        break;
                    case 4:
                        viewOrderQueue();
                        break;
                    case 5:
                        System.out.println("Exiting system. Goodbye!");
                        running = false;
                        break;
                    default:
                        // Invalid menu choice number
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (NumberFormatException e) {
                // Handle non-integer input for the main menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
            } catch (Exception e) {
                // Catch any other unexpected exceptions during execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: e.printStackTrace(System.err); // Uncomment for detailed debugging
            }
        }
    }

    /**
     * Main method to start the Restaurant Order Processing System.
     * Uses try-with-resources for the Scanner.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        // Use try-with-resources to ensure the scanner is closed
        try (Scanner mainScanner = new Scanner(System.in)) {
            RestaurantSystem system = new RestaurantSystem(mainScanner);
            system.run();
        } catch (Exception e) {
            // Catch exceptions that might occur during Scanner setup or system initialization
            System.err.println("System encountered a critical error during startup or execution: " + e.getMessage());
            e.printStackTrace(System.err);
        }
    }
}
