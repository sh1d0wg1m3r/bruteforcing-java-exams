/*
 * Exam Question #1003
 * Generated on: 2025-05-12 17:11:24
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Package Logistics Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simple logistics management system for a small package delivery company. The system needs to handle packages arriving at a sorting facility, place them in a queue for processing, simulate the processing of packages one by one, and keep a record of all packages that have been successfully processed. The system should interact with a user via the console.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a `Package` class with the following private attributes:
 *     *   `packageId` (String)
 *     *   `destination` (String)
 *     *   `weightKg` (double)
 *     *   `packageType` (String - e.g., "STANDARD", "EXPRESS", "HAZARDOUS")
 *     *   Include a constructor, public getter methods for all attributes, and a meaningful `toString()` method.
 * 
 * 2.  **Logistics System Core:** Create a `LogisticsSystem` class that manages the package flow. This class must contain:
 *     *   A `Queue<Package>` to hold packages waiting to be processed (the sorting queue).
 *     *   A `List<Package>` (specifically using `ArrayList` implementation) to store packages that have been successfully processed.
 * 
 * 3.  **User Interaction:** Implement a console-based interface using `java.util.Scanner`. The system should present a menu with the following options:
 *     *   `1: Add New Package` - Prompts the user for package details (ID, destination, weight, type) and adds the package to the sorting queue.
 *     *   `2: Process Next Package` - Takes the next package from the front of the sorting queue, simulates processing (print a message), and moves it to the list of processed packages.
 *     *   `3: View Sorting Queue` - Displays all packages currently in the sorting queue.
 *     *   `4: View Processed Packages` - Displays all packages that have been processed.
 *     *   `5: Exit` - Terminates the program.
 * 
 * 4.  **Required Java Components:** Your solution MUST explicitly use and demonstrate understanding of:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList` (assigned to a `java.util.List` variable)
 *     *   `java.util.List` interface
 *     *   `java.util.Scanner`
 *     *   `switch` statement (for handling user menu choices)
 *     *   `System.err` (for displaying error messages, e.g., invalid input, processing empty queue)
 *     *   `System.out` (for displaying menus, successful operations, package details)
 *     *   Class-wide exception handling using `try-catch` blocks (e.g., wrap the main command processing loop or critical input sections to catch unexpected errors like invalid number formats or other runtime issues).
 * 
 * 5.  **Best Practices:** Adhere to good programming practices:
 *     *   **Encapsulation:** All data fields in classes should be `private`.
 *     *   **Naming:** Use descriptive names for variables, methods, and classes.
 *     *   **Comments/Documentation:** Include brief comments explaining complex parts or Javadoc for classes/methods.
 *     *   **Input Validation:** Validate user input where necessary (e.g., ensure weight is positive, handle empty strings for ID/destination, handle non-numeric input for weight or menu choice).
 *     *   **Error Handling:** Gracefully handle potential errors (e.g., trying to process from an empty queue, invalid menu choices, invalid package data). Print informative error messages using `System.err`.
 *     *   **Clean Code:** Structure your code logically.
 * 
 * **Expected Output:**
 * The program should loop, presenting the menu, accepting user input, and performing the requested action. Output should be clear, using `System.out` for normal information and `System.err` for errors. Example interaction might look like:
 * 
 * ```
 * --- Logistics System Menu ---
 * 1: Add New Package
 * 2: Process Next Package
 * 3: View Sorting Queue
 * 4: View Processed Packages
 * 5: Exit
 * Enter choice: 1
 * Enter Package ID: PKG123
 * Enter Destination: New York
 * Enter Weight (kg): 5.5
 * Enter Package Type: STANDARD
 * Package PKG123 added to sorting queue.
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 2
 * Processing package: [Package ID: PKG123, Destination: New York, Weight: 5.5kg, Type: STANDARD]
 * Package PKG123 processed successfully.
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 3
 * --- Sorting Queue ---
 * (Queue is empty)
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 4
 * --- Processed Packages ---
 * [Package ID: PKG123, Destination: New York, Weight: 5.5kg, Type: STANDARD]
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 2
 * Error: Sorting queue is empty. Cannot process.
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 99
 * Error: Invalid menu choice. Please enter a number between 1 and 5.
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: exit (or non-numeric)
 * Error: Invalid input. Please enter a number.
 * ... (Program continues or exits gracefully based on exception handling)
 * 
 * --- Logistics System Menu ---
 * ...
 * Enter choice: 5
 * Exiting Logistics System.
 * ```
 * 
 * Your solution should be a complete, runnable Java program.
 *
 * EXPLANATION:
 * This solution implements a simple Package Logistics Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Package` Class:**
 *     *   Represents a single package with `private` fields (`packageId`, `destination`, `weightKg`, `packageType`) enforcing encapsulation.
 *     *   The constructor includes basic validation to ensure essential data is provided and valid (e.g., positive weight). If validation fails, it throws an `IllegalArgumentException`.
 *     *   Public getter methods provide controlled access to the package's attributes.
 *     *   The `toString()` method provides a convenient, readable representation of a package for printing.
 * 
 * 2.  **`LogisticsSystem` Class:**
 *     *   Manages the core logic and data structures.
 *     *   `sortingQueue`: Declared as `Queue<Package>` and initialized with `new LinkedList<>()`. This fulfills the requirement of using the `Queue` interface and a common implementation (`LinkedList`). Packages are added to the queue using `offer()` and retrieved/removed from the head using `poll()`.
 *     *   `processedPackages`: Declared as `List<Package>` and initialized with `new ArrayList<>()`. This fulfills the requirement of using both the `List` interface and the `ArrayList` implementation. Processed packages are added using `add()`.
 *     *   `scanner`: An instance of `Scanner` is passed into the constructor, allowing the `LogisticsSystem` to handle its own input reading.
 *     *   **`addPackageFromInput()`:** Handles user input for creating a new package. It prompts for details, performs basic input validation (non-empty strings, positive weight), and uses a `try-catch` block to handle potential `InputMismatchException` if the user enters non-numeric input for weight. If input is valid, it creates a `Package` object (which might throw `IllegalArgumentException`) and adds it to the `sortingQueue`. Error messages for invalid input are printed to `System.err`.
 *     *   **`processNextPackage()`:** Checks if the `sortingQueue` is empty. If so, it prints an error to `System.err`. Otherwise, it removes the next package using `poll()`, prints a message to `System.out` simulating processing, and adds the package to the `processedPackages` list.
 *     *   **`viewSortingQueue()` and `viewProcessedPackages()`:** Iterate through the respective collections (`Queue` and `List`) and print the `toString()` representation of each package to `System.out`. They check if the collections are empty and print a message accordingly.
 *     *   **`displayMenu()`:** A helper method to print the menu options to `System.out`.
 *     *   **`run()`:** Contains the main application loop. It repeatedly displays the menu, reads the user's choice, and uses a `switch` statement to call the appropriate method based on the choice.
 *     *   **`switch` Statement:** Effectively directs the program flow based on the user's integer input, calling methods like `addPackageFromInput`, `processNextPackage`, etc. A `default` case handles invalid integer inputs.
 *     *   **`try-catch` Blocks:**
 *         *   Specific `try-catch(InputMismatchException)` is used within `run()` to catch non-integer input for the menu choice, preventing the program from crashing and informing the user via `System.err`. A similar block is used in `addPackageFromInput()` for weight input.
 *         *   A general `try-catch(Exception e)` block wraps the core logic within the `run()` loop. This serves as the "class-wide" exception handling, catching any other unexpected runtime exceptions that might occur during the processing of a command, printing an error message to `System.err`.
 * 
 * 3.  **`LogisticsSystemApp` (Main Class):**
 *     *   Contains the `main` method, the entry point of the program.
 *     *   It initializes the `Scanner` and the `LogisticsSystem`.
 *     *   Calls the `system.run()` method to start the main application loop.
 *     *   Ensures the `Scanner` is closed when the `run()` method finishes (i.e., when the user chooses to exit).
 * 
 * **Overall Design:**
 * The solution uses object-oriented principles by separating concerns into `Package` and `LogisticsSystem` classes. Encapsulation is maintained. The use of `Queue` correctly models the "first-in, first-out" nature of packages waiting for sorting, while `List`/`ArrayList` is suitable for keeping an ordered record of processed items. `Scanner` and `switch` provide the required user interaction and flow control. `System.out` and `System.err` are used appropriately for different types of output. Robust error handling is implemented for invalid input and system state (like an empty queue), including class-wide exception handling in the main processing loop.
 * 
 * This structure demonstrates a solid understanding of fundamental and intermediate Java concepts, data structures, and error management in a practical context.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package in the logistics system.
 */
class Package {
    private String packageId;
    private String destination;
    private double weightKg;
    private String packageType;

    /**
     * Constructs a new Package.
     * @param packageId The unique ID of the package.
     * @param destination The destination address.
     * @param weightKg The weight of the package in kilograms.
     * @param packageType The type of package (e.g., STANDARD, EXPRESS).
     */
    public Package(String packageId, String destination, double weightKg, String packageType) {
        // Basic validation in constructor
        if (packageId == null || packageId.trim().isEmpty() ||
            destination == null || destination.trim().isEmpty() ||
            weightKg <= 0 || packageType == null || packageType.trim().isEmpty()) {
            throw new IllegalArgumentException("Invalid package data provided.");
        }
        this.packageId = packageId.trim();
        this.destination = destination.trim();
        this.weightKg = weightKg;
        this.packageType = packageType.trim();
    }

    // Getters
    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeightKg() {
        return weightKg;
    }

    public String getPackageType() {
        return packageType;
    }

    /**
     * Returns a string representation of the package.
     */
    @Override
    public String toString() {
        return "[Package ID: " + packageId + ", Destination: " + destination +
               ", Weight: " + weightKg + "kg, Type: " + packageType + "]";
    }
}

/**
 * Manages the sorting queue and processed packages list.
 */
class LogisticsSystem {
    // Use Queue interface, implement with LinkedList
    private Queue<Package> sortingQueue;
    // Use List interface, implement with ArrayList
    private List<Package> processedPackages;
    private Scanner scanner;

    /**
     * Constructs a LogisticsSystem.
     * @param scanner The Scanner object for user input.
     */
    public LogisticsSystem(Scanner scanner) {
        this.sortingQueue = new LinkedList<>(); // Queue implementation
        this.processedPackages = new ArrayList<>(); // List implementation
        this.scanner = scanner;
    }

    /**
     * Adds a new package to the sorting queue based on user input.
     */
    public void addPackageFromInput() {
        System.out.println("--- Add New Package ---");
        String packageId = "";
        String destination = "";
        String packageType = "";
        double weightKg = -1;

        // Input loop with validation for each field
        System.out.print("Enter Package ID: ");
        packageId = scanner.nextLine().trim();
        if (packageId.isEmpty()) {
            System.err.println("Error: Package ID cannot be empty.");
            return;
        }

        System.out.print("Enter Destination: ");
        destination = scanner.nextLine().trim();
        if (destination.isEmpty()) {
            System.err.println("Error: Destination cannot be empty.");
            return;
        }

        System.out.print("Enter Package Type (e.g., STANDARD, EXPRESS): ");
        packageType = scanner.nextLine().trim();
         if (packageType.isEmpty()) {
            System.err.println("Error: Package Type cannot be empty.");
            return;
        }


        System.out.print("Enter Weight (kg): ");
        try {
            weightKg = scanner.nextDouble();
            // Consume the rest of the line after reading double
            scanner.nextLine();
            if (weightKg <= 0) {
                 System.err.println("Error: Weight must be a positive number.");
                 return;
            }
        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for weight. Please enter a number.");
            // Consume the invalid input
            scanner.nextLine();
            return;
        }

        try {
            Package newPackage = new Package(packageId, destination, weightKg, packageType);
            sortingQueue.offer(newPackage); // Add to the end of the queue
            System.out.println("Package " + packageId + " added to sorting queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error creating package: " + e.getMessage());
        }
    }

    /**
     * Processes the next package from the sorting queue.
     */
    public void processNextPackage() {
        System.out.println("--- Process Next Package ---");
        if (sortingQueue.isEmpty()) {
            System.err.println("Error: Sorting queue is empty. Cannot process.");
            return;
        }

        Package packageToProcess = sortingQueue.poll(); // Get and remove head of queue
        System.out.println("Processing package: " + packageToProcess);

        // Simulate processing...
        // In a real system, this would involve complex logic.
        // For this exam, simply moving it to processed list is sufficient.

        processedPackages.add(packageToProcess); // Add to the end of the processed list
        System.out.println("Package " + packageToProcess.getPackageId() + " processed successfully.");
    }

    /**
     * Displays packages currently in the sorting queue.
     */
    public void viewSortingQueue() {
        System.out.println("--- Sorting Queue ---");
        if (sortingQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Package pkg : sortingQueue) {
                System.out.println(index++ + ". " + pkg);
            }
        }
    }

    /**
     * Displays packages that have been processed.
     */
    public void viewProcessedPackages() {
        System.out.println("--- Processed Packages ---");
        if (processedPackages.isEmpty()) {
            System.out.println("(No packages processed yet)");
        } else {
            // Iterate through the list
            int index = 1;
            for (Package pkg : processedPackages) {
                System.out.println(index++ + ". " + pkg);
            }
        }
    }

    /**
     * Displays the main menu.
     */
    private void displayMenu() {
        System.out.println("\n--- Logistics System Menu ---");
        System.out.println("1: Add New Package");
        System.out.println("2: Process Next Package");
        System.out.println("3: View Sorting Queue");
        System.out.println("4: View Processed Packages");
        System.out.println("5: Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Runs the main loop of the logistics system.
     * Includes class-wide exception handling for the main loop.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            int choice = -1;
            try {
                // Read menu choice
                choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                // Use switch statement for flow control
                switch (choice) {
                    case 1:
                        addPackageFromInput();
                        break;
                    case 2:
                        processNextPackage();
                        break;
                    case 3:
                        viewSortingQueue();
                        break;
                    case 4:
                        viewProcessedPackages();
                        break;
                    case 5:
                        System.out.println("Exiting Logistics System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                // Consume the invalid input to prevent infinite loop
                scanner.nextLine();
            } catch (Exception e) {
                // Class-wide exception handling for unexpected errors
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
    }
}

/**
 * Main class to run the Logistics System.
 */
public class LogisticsSystemApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LogisticsSystem system = new LogisticsSystem(scanner);

        // Run the system's main loop
        system.run();

        // Close the scanner when the program exits
        scanner.close();
    }
}
