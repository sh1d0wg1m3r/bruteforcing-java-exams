/*
 * Exam Question #702
 * Generated on: 2025-05-12 16:27:57
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Package Delivery Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simple console-based system for managing packages in a small sorting facility. Packages arrive and are placed in an incoming queue. Workers process packages one by one from the front of the queue. The system needs to track both packages waiting to be processed and those that have already been processed.
 * 
 * **Your Task:**
 * Implement a Java program that simulates this package management system. The system should provide a menu-driven interface allowing users to:
 * 1. Add a new package to the incoming queue.
 * 2. Process the next package from the incoming queue.
 * 3. View all packages currently in the incoming queue.
 * 4. View all packages that have been processed.
 * 5. Exit the application.
 * 
 * **Requirements:**
 * 1.  **Classes:**
 *     *   Create a `Package` class with private fields for `packageId` (int), `destination` (String), and `status` (String, e.g., "WAITING", "PROCESSED"). Include a constructor, public getters for the fields, a public setter for the status, and a meaningful `toString()` method.
 *     *   Create a `PackageManagementSystem` class that encapsulates the system's logic and data.
 * 
 * 2.  **Data Structures:**
 *     *   Use `java.util.Queue` to store packages waiting to be processed. Implement it using `java.util.LinkedList`.
 *     *   Use `java.util.List` to store packages that have been processed. Implement it using `java.util.ArrayList`.
 * 
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get user input for menu choices and package details.
 *     *   Implement a menu loop that continues until the user chooses to exit.
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and the contents of the queue and processed list.
 *     *   Use `System.err` specifically for displaying error messages (e.g., invalid input, attempting to process from an empty queue).
 * 
 * 5.  **Error Handling:**
 *     *   Implement **class-wide exception handling** using `try-catch` blocks within the main application loop (`run` method or equivalent) to catch potential runtime errors, including input mismatches.
 *     *   Handle specific operational errors gracefully, such as attempting to process a package when the incoming queue is empty, using `System.err`.
 *     *   Validate user input where appropriate (at least for the menu choice to ensure it's an integer within the valid range).
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (at least for classes and key methods).
 *     *   Ensure resources like `Scanner` are closed properly.
 *     *   Maintain a clean code structure.
 * 
 * **Expected Output:**
 * The system should present a menu, accept user input, perform the requested action, display relevant information or error messages, and repeat until the user exits.
 * 
 * Example Interaction Flow:
 * ```
 * --- Package Management Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Incoming Queue
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter package destination: New York
 * Package 1 added to incoming queue.
 * 
 * --- Package Management Menu ---
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Incoming Queue
 * 4. View Processed Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter package destination: Los Angeles
 * Package 2 added to incoming queue.
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Incoming Queue ---
 * Package ID: 1, Destination: New York, Status: WAITING
 * Package ID: 2, Destination: Los Angeles, Status: WAITING
 * ----------------------
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 2
 * Processing package 1...
 * Package 1 processed and moved to processed list.
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Incoming Queue ---
 * Package ID: 2, Destination: Los Angeles, Status: WAITING
 * ----------------------
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 4
 * --- Processed Packages ---
 * Package ID: 1, Destination: New York, Status: PROCESSED
 * --------------------------
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 2
 * Processing package 2...
 * Package 2 processed and moved to processed list.
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 2
 * No packages in the incoming queue to process. // Printed to System.err
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 4
 * --- Processed Packages ---
 * Package ID: 1, Destination: New York, Status: PROCESSED
 * Package ID: 2, Destination: Los Angeles, Status: PROCESSED
 * --------------------------
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 6 // Invalid input
 * Invalid choice. // Printed to System.err
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: abc // Invalid input type
 * Invalid input. Please enter a number. // Printed to System.err
 * 
 * --- Package Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Package Management System.
 * ```
 * 
 * Your solution should provide the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the `Package Delivery Management System` as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`Package` Class:** A simple class encapsulating package data (`packageId`, `destination`, `status`) with private fields, public getters/setters, and a `toString()` method for easy printing. This fulfills the encapsulation requirement.
 * 
 * 2.  **`PackageManagementSystem` Class:** This is the main class managing the system's logic.
 *     *   **Data Structures:** It uses a `Queue<Package>` (`incomingPackages`) implemented with `LinkedList` to manage packages waiting in a FIFO (First-In, First-Out) manner, and a `List<Package>` (`processedPackages`) implemented with `ArrayList` to store completed packages, allowing easy iteration and storage. This fulfills the `Queue`, `List`, and `ArrayList` requirements.
 *     *   **Scanner:** A `Scanner` object is used as a private field to read user input from `System.in`. This fulfills the `Scanner` requirement.
 *     *   **Menu and `switch`:** The `run()` method contains a loop that repeatedly displays a menu (`displayMenu()`) and reads the user's choice (`getUserChoice()`). A `switch` statement is used to direct the program flow based on the user's integer input, executing the corresponding method (`addPackage`, `processNextPackage`, etc.). This fulfills the `switch` requirement.
 *     *   **`System.out` and `System.err`:** `System.out.println` is used for displaying the menu, prompts, successful operations, and the contents of the lists/queue. `System.err.println` is strictly used for error messages, such as invalid menu input (non-integer or out of range) or attempting an action on an empty queue. This fulfills the `System.out` and `System.err` requirements.
 *     *   **Exception Handling (`try-catch`):** The core `while` loop in the `run()` method is wrapped in a `try-catch` block.
 *         *   A specific `catch (InputMismatchException e)` block handles cases where the user enters non-integer input for the menu choice, printing an error to `System.err` and consuming the invalid input using `scanner.next()` to prevent an infinite loop.
 *         *   A general `catch (Exception e)` block is included to catch any other unexpected runtime errors that might occur within the execution of the chosen menu option. This provides a basic level of robustness for unforeseen issues. This structure provides the required "class-wide" exception handling around the main interactive process.
 *         *   Specific operational errors, like trying to process a package from an empty queue, are handled within the `processNextPackage()` method itself by checking the result of `incomingPackages.poll()` and printing an error to `System.err` if it's `null`. This is a more localized error condition handled gracefully.
 *     *   **Input Validation:** The `getUserChoice` method relies on the `try-catch` in `run` to validate that the input is an integer. The `switch` statement's `default` case handles integer inputs that are outside the valid menu range (1-5).
 *     *   **Best Practices:**
 *         *   Encapsulation is used in both `Package` and `PackageManagementSystem`.
 *         *   Variable names (`incomingPackages`, `processedPackages`, `nextPackageId`, `destination`, etc.) and method names (`displayMenu`, `addPackage`, `processNextPackage`, `viewIncomingQueue`, `run`) are meaningful.
 *         *   Basic Javadoc comments are included for classes and key methods.
 *         *   The `Scanner` is closed when the application exits (`scanner.close()`).
 *         *   The code is structured logically into methods corresponding to menu actions.
 * 
 * This solution effectively integrates the required Java components to create a functional, albeit simple, system that simulates a real-world scenario while demonstrating key programming concepts and error handling techniques.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single package in the system.
 */
class Package {
    private int packageId;
    private String destination;
    private String status; // e.g., "WAITING", "PROCESSED"

    /**
     * Constructs a new Package.
     * @param packageId The unique ID of the package.
     * @param destination The destination address of the package.
     * @param status The current status of the package.
     */
    public Package(int packageId, String destination, String status) {
        this.packageId = packageId;
        this.destination = destination;
        this.status = status;
    }

    // --- Getters ---
    public int getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Returns a string representation of the Package.
     */
    @Override
    public String toString() {
        return String.format("Package ID: %d, Destination: %s, Status: %s",
                             packageId, destination, status);
    }
}

/**
 * Manages the incoming and processed packages using Queue and List.
 */
public class PackageManagementSystem { // Changed to public for main method access
    private Queue<Package> incomingPackages;
    private List<Package> processedPackages;
    private Scanner scanner;
    private int nextPackageId; // Counter for unique package IDs

    /**
     * Constructs a new PackageManagementSystem.
     * Initializes the data structures, scanner, and package ID counter.
     */
    public PackageManagementSystem() {
        this.incomingPackages = new LinkedList<>(); // Implementation of Queue
        this.processedPackages = new ArrayList<>(); // Implementation of List
        this.scanner = new Scanner(System.in);
        this.nextPackageId = 1; // Start package IDs from 1
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Package Management Menu ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Incoming Queue");
        System.out.println("4. View Processed Packages");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Gets the user's menu choice from input.
     * @return The integer choice entered by the user.
     * @throws InputMismatchException If the input is not a valid integer.
     */
    private int getUserChoice() throws InputMismatchException {
        return scanner.nextInt();
    }

    /**
     * Adds a new package to the incoming queue based on user input.
     */
    private void addPackage() {
        System.out.print("Enter package destination: ");
        scanner.nextLine(); // Consume the newline character left by nextInt()
        String destination = scanner.nextLine();

        Package newPackage = new Package(nextPackageId++, destination, "WAITING");
        incomingPackages.offer(newPackage); // Add to the end of the queue
        System.out.println("Package " + newPackage.getPackageId() + " added to incoming queue.");
    }

    /**
     * Processes the next package from the incoming queue.
     * Removes it from the queue, updates its status, and adds it to the processed list.
     */
    private void processNextPackage() {
        System.out.println("Attempting to process next package...");
        Package packageToProcess = incomingPackages.poll(); // Retrieve and remove head of queue

        if (packageToProcess != null) {
            packageToProcess.setStatus("PROCESSED");
            processedPackages.add(packageToProcess);
            System.out.println("Package " + packageToProcess.getPackageId() + " processed and moved to processed list.");
        } else {
            System.err.println("No packages in the incoming queue to process.");
        }
    }

    /**
     * Displays all packages currently in the incoming queue.
     */
    private void viewIncomingQueue() {
        System.out.println("\n--- Incoming Queue ---");
        if (incomingPackages.isEmpty()) {
            System.out.println("The incoming queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Package pkg : incomingPackages) {
                System.out.println(pkg);
            }
        }
        System.out.println("----------------------");
    }

    /**
     * Displays all packages that have been processed.
     */
    private void viewProcessedPackages() {
        System.out.println("\n--- Processed Packages ---");
        if (processedPackages.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            // Iterate through the list
            for (Package pkg : processedPackages) {
                System.out.println(pkg);
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Runs the main application loop, handling user interaction and exceptions.
     */
    public void run() {
        boolean running = true;
        while (running) {
            try {
                displayMenu();
                int choice = getUserChoice();

                // Class-wide exception handling via try-catch block around switch
                switch (choice) {
                    case 1:
                        addPackage();
                        break;
                    case 2:
                        processNextPackage();
                        break;
                    case 3:
                        viewIncomingQueue();
                        break;
                    case 4:
                        viewProcessedPackages();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Package Management System.");
                        break;
                    default:
                        // Invalid menu choice (but was an integer)
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input specifically
                System.err.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions during processing
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optionally print stack trace for debugging: e.printStackTrace();
            }
        }
        scanner.close(); // Close the scanner when the application exits
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PackageManagementSystem system = new PackageManagementSystem();
        system.run();
    }
}
