/*
 * Exam Question #968
 * Generated on: 2025-05-12 17:06:30
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Java Programming Exam Task: Warehouse Shipment Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Warehouse Shipment Management System in Java. The system needs to manage a list of inventory items and process shipment requests using a queue. Users should be able to interact with the system via a command-line interface.
 * 
 * **System Requirements:**
 * 
 * 1.  **Inventory Management:** Maintain a list of `InventoryItem` objects. Each item should have a unique ID (integer), name (String), current quantity (integer), and price (double).
 * 2.  **Shipment Queue:** Maintain a queue of shipment requests. Each request specifies the ID of the item to ship and the quantity to ship.
 * 3.  **User Interface:** Provide a menu-driven interface allowing the user to perform the following actions:
 *     *   Add a new item to the inventory.
 *     *   Enqueue an existing item for shipment (specify item ID and quantity to ship).
 *     *   Process the next shipment request from the queue.
 *     *   Display current inventory status.
 *     *   Display current shipment queue contents.
 *     *   Exit the application.
 * 4.  **Processing Shipment:** When a shipment request is processed, the corresponding item's quantity in the inventory should be reduced by the requested amount. If the requested quantity is greater than the available quantity in inventory at the time of processing, an error should be reported, and the item should *not* be shipped (quantity not reduced), but the request should still be removed from the queue.
 * 5.  **Input Validation:** Validate user input where necessary (e.g., ensure quantities are positive, item IDs exist, etc.).
 * 6.  **Error Handling:** Implement robust error handling using `try-catch` blocks for potential issues like invalid input format (e.g., non-numeric input when expecting a number) or attempting operations on empty lists/queues. Use `System.err` for all error messages.
 * 7.  **Output:** Use `System.out` for all normal program output, including the menu, status displays, and success messages.
 * 
 * **Mandatory Java Components:**
 * 
 * Your solution *must* use ALL of the following Java components:
 * 
 * *   `java.util.Queue`
 * *   `java.util.ArrayList`
 * *   `java.util.List` (used as the interface type for the inventory)
 * *   `java.util.Scanner`
 * *   `switch` statement
 * *   `System.err`
 * *   `System.out`
 * *   Class-wide `try-catch` blocks (covering the main interaction loop)
 * 
 * **Best Practices:**
 * 
 * *   Use appropriate data structures (`List` for inventory, `Queue` for shipments).
 * *   Implement proper encapsulation for classes (`InventoryItem`, `ShipmentRequest`).
 * *   Use meaningful variable and method names.
 * *   Include comments to explain code logic.
 * *   Structure your code clearly with separate classes/methods where appropriate.
 * 
 * **Classes to Create:**
 * 
 * *   `InventoryItem`: Represents an item in the warehouse.
 * *   `ShipmentRequest`: Represents a request to ship a specific quantity of an item.
 * *   `WarehouseSystem`: Contains the main logic, inventory list, shipment queue, and the main interaction loop.
 * 
 * **Expected Output Structure:**
 * 
 * The output should clearly present the menu, prompt for user input, display inventory/queue status in a readable format, and report errors using `System.err`.
 * 
 * ```
 * --- Warehouse Shipment System ---
 * 1. Add Item to Inventory
 * 2. Enqueue Item for Shipment
 * 3. Process Next Shipment
 * 4. Display Inventory
 * 5. Display Shipment Queue
 * 6. Exit
 * Enter your choice: [user input]
 * 
 * [Based on choice, display output or prompt for more input]
 * 
 * Example Inventory Display:
 * --- Current Inventory ---
 * ID: 101, Name: Laptop, Quantity: 5, Price: 1200.00
 * ID: 102, Name: Mouse, Quantity: 50, Price: 25.50
 * -------------------------
 * 
 * Example Shipment Queue Display:
 * --- Shipment Queue ---
 * Request: Item ID 101, Quantity 2
 * Request: Item ID 102, Quantity 10
 * ----------------------
 * 
 * Example Error Message:
 * ERROR: Invalid input. Please enter a number. (using System.err)
 * ERROR: Item ID 999 not found in inventory. (using System.err)
 * ERROR: Insufficient quantity for shipment of Item ID 101. Requested: 3, Available: 2. (using System.err)
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correctness of implementation based on requirements.
 * *   Proper usage of ALL mandatory Java components.
 * *   Adherence to best practices (encapsulation, naming, comments, clean code).
 * *   Effective input validation and error handling.
 * *   Clarity and structure of the code.
 * 
 * **Good luck!**
 *
 * EXPLANATION:
 * The provided solution implements the Warehouse Shipment Management System as described in the exam question. It demonstrates the required Java concepts and follows best practices.
 * 
 * **Key Components and Their Usage:**
 * 
 * 1.  **`java.util.Queue` and `java.util.LinkedList`:**
 *     *   A `Queue<ShipmentRequest>` named `shipmentQueue` is declared and initialized using `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO (First-In, First-Out) behavior.
 *     *   `shipmentQueue.offer(request)` is used in `enqueueShipment` to add a new request to the end of the queue. `offer` is preferred over `add` for queues as it returns `false` if the element cannot be added (e.g., if the queue has a capacity limit), whereas `add` throws an exception.
 *     *   `shipmentQueue.poll()` is used in `processNextShipment` to retrieve and remove the request at the front of the queue. `poll` returns `null` if the queue is empty, which is handled gracefully.
 * 
 * 2.  **`java.util.ArrayList` and `java.util.List`:**
 *     *   A `List<InventoryItem>` named `inventory` is declared and initialized using `new ArrayList<>()`. `ArrayList` is used as the concrete implementation of the `List` interface, providing a dynamic array to store `InventoryItem` objects.
 *     *   `inventory.add(newItem)` is used in `addItem` to add a new item to the list.
 *     *   The `findItemById` method iterates through the `inventory` list to find an item by its unique ID.
 * 
 * 3.  **`java.util.Scanner`:**
 *     *   A `Scanner` object `scanner` is created to read user input from `System.in`.
 *     *   `scanner.nextInt()`, `scanner.nextDouble()`, and `scanner.nextLine()` are used to read different types of input from the user.
 *     *   `scanner.nextLine()` is called after reading numbers (`nextInt`, `nextDouble`) to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls.
 *     *   `scanner.close()` is called when the program exits to release system resources.
 * 
 * 4.  **`switch` statement:**
 *     *   A `switch` statement in the `run` method is used to handle the user's menu choice, directing the program flow to the appropriate method (`addItem`, `enqueueShipment`, etc.) based on the integer input.
 * 
 * 5.  **`System.err`:**
 *     *   `System.err.println(...)` is used exclusively for printing error messages, such as invalid input, item not found, insufficient quantity, or unexpected exceptions. This separates error output from normal program output (`System.out`).
 * 
 * 6.  **`System.out`:**
 *     *   `System.out.println(...)` is used for all normal program output, including displaying the menu, prompts, success messages, and the contents of the inventory and shipment queue.
 * 
 * 7.  **Class-wide `try-catch` blocks:**
 *     *   The main `while` loop in the `run` method is wrapped in a `try-catch` block. This block catches `InputMismatchException` specifically for issues with `Scanner` when the user enters non-numeric input where a number is expected. It also includes a general `catch (Exception e)` to catch any other unexpected runtime errors that might occur within the command processing loop, printing an error message and the stack trace for debugging.
 *     *   Individual methods like `addItem` and `enqueueShipment` also contain `try-catch` blocks to handle `InputMismatchException` specific to their input operations, allowing the main loop to continue even if input validation fails within a single command.
 * 
 * **Best Practices Implementation:**
 * 
 * *   **Encapsulation:** The `InventoryItem` and `ShipmentRequest` classes have private fields and public getter methods. `InventoryItem` also has a specific setter for `quantity` as this needs to be modified when shipments are processed.
 * *   **Meaningful Names:** Variable names (`inventory`, `shipmentQueue`, `itemId`, `quantityToShip`) and method names (`addItem`, `enqueueShipment`, `processNextShipment`, `findItemById`) are descriptive.
 * *   **Comments:** Javadoc-style comments are used for classes, and inline comments explain specific logic where necessary.
 * *   **Input Validation:** Checks are performed to ensure positive quantities and prices, and that item IDs are unique when adding items. A check is made to see if an item exists before enqueueing a shipment. The core shipment processing logic checks if sufficient quantity is available *at the time of processing*.
 * *   **Error Handling:** `try-catch` blocks are used for input parsing and general exceptions. Error messages are informative and directed to `System.err`.
 * *   **Clean Code Structure:** The logic is divided into separate classes (`InventoryItem`, `ShipmentRequest`, `WarehouseSystem`) and methods (`addItem`, `enqueueShipment`, etc.), making the code modular and easier to understand. The `main` method is kept clean, primarily creating the `WarehouseSystem` object and calling its `run` method.
 * 
 * **Logic Flow:**
 * 
 * The `run` method presents a menu in a loop. The user's integer choice is read and processed by the `switch` statement. Each case calls a dedicated method to perform the requested action. Input validation and error handling are integrated within these methods and the main loop's `try-catch` blocks. The program continues until the user chooses the "Exit" option (choice 6).
 * 
 * This solution effectively uses the required Java components in a practical scenario, demonstrating understanding of data structures, object-oriented principles, user interaction, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents an item in the warehouse inventory
class InventoryItem {
    private int id;
    private String name;
    private int quantity;
    private double price;

    public InventoryItem(int id, String name, int quantity, double price) {
        this.id = id;
        this.name = name;
        this.quantity = quantity;
        this.price = price;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPrice() {
        return price;
    }

    // Setter for quantity (needed for processing shipments)
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Quantity: %d, Price: %.2f",
                             id, name, quantity, price);
    }
}

// Represents a request to ship a specific quantity of an item
class ShipmentRequest {
    private int itemId;
    private int quantityToShip;

    public ShipmentRequest(int itemId, int quantityToShip) {
        this.itemId = itemId;
        this.quantityToShip = quantityToShip;
    }

    // Getters
    public int getItemId() {
        return itemId;
    }

    public int getQuantityToShip() {
        return quantityToShip;
    }

    @Override
    public String toString() {
        return "Request: Item ID " + itemId + ", Quantity " + quantityToShip;
    }
}

// Main class for the Warehouse Shipment System
public class WarehouseSystem {

    // Use List interface, implemented by ArrayList for inventory
    private List<InventoryItem> inventory;
    // Use Queue interface, implemented by LinkedList for shipment requests
    private Queue<ShipmentRequest> shipmentQueue;
    private Scanner scanner;

    public WarehouseSystem() {
        inventory = new ArrayList<>();
        shipmentQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        scanner = new Scanner(System.in);
    }

    // Finds an item in the inventory by its ID
    private InventoryItem findItemById(int id) {
        for (InventoryItem item : inventory) {
            if (item.getId() == id) {
                return item;
            }
        }
        return null; // Item not found
    }

    // Adds a new item to the inventory
    public void addItem() {
        System.out.println("\n--- Add New Item ---");
        try {
            System.out.print("Enter Item ID (integer): ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Check if ID already exists
            if (findItemById(id) != null) {
                System.err.println("ERROR: Item with ID " + id + " already exists.");
                return;
            }

            System.out.print("Enter Item Name: ");
            String name = scanner.nextLine();

            System.out.print("Enter Quantity (integer > 0): ");
            int quantity = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (quantity <= 0) {
                System.err.println("ERROR: Quantity must be positive.");
                return;
            }

            System.out.print("Enter Price (double > 0): ");
            double price = scanner.nextDouble();
            scanner.nextLine(); // Consume newline

            if (price <= 0) {
                System.err.println("ERROR: Price must be positive.");
                return;
            }

            InventoryItem newItem = new InventoryItem(id, name, quantity, price);
            inventory.add(newItem);
            System.out.println("Item added successfully: " + newItem);

        } catch (InputMismatchException e) {
            System.err.println("ERROR: Invalid input format. Please enter the correct data type.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
            System.err.println("ERROR: An unexpected error occurred while adding item: " + e.getMessage());
        }
    }

    // Enqueues an item for shipment
    public void enqueueShipment() {
        System.out.println("\n--- Enqueue Shipment Request ---");
        try {
            System.out.print("Enter Item ID to ship: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            InventoryItem item = findItemById(id);
            if (item == null) {
                System.err.println("ERROR: Item with ID " + id + " not found in inventory.");
                return;
            }

            System.out.print("Enter Quantity to ship (integer > 0): ");
            int quantity = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (quantity <= 0) {
                System.err.println("ERROR: Quantity to ship must be positive.");
                return;
            }

            // Optional: Check if quantity is available *at the time of enqueueing*
            // Requirement says check at time of *processing*, but this is good practice.
            // We'll stick to the requirement and check during processing.

            ShipmentRequest request = new ShipmentRequest(id, quantity);
            shipmentQueue.offer(request); // offer is safer than add for queues
            System.out.println("Shipment request enqueued: " + request);

        } catch (InputMismatchException e) {
            System.err.println("ERROR: Invalid input format. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
        } catch (Exception e) {
            System.err.println("ERROR: An unexpected error occurred while enqueueing shipment: " + e.getMessage());
        }
    }

    // Processes the next shipment request from the queue
    public void processNextShipment() {
        System.out.println("\n--- Processing Next Shipment ---");
        try {
            ShipmentRequest request = shipmentQueue.poll(); // poll retrieves and removes the head

            if (request == null) {
                System.out.println("Shipment queue is empty. Nothing to process.");
                return;
            }

            System.out.println("Processing: " + request);

            InventoryItem item = findItemById(request.getItemId());

            if (item == null) {
                System.err.println("ERROR: Item with ID " + request.getItemId() + " not found in inventory. Cannot process request.");
                // Request is already removed by poll()
            } else {
                int requestedQuantity = request.getQuantityToShip();
                int availableQuantity = item.getQuantity();

                if (availableQuantity >= requestedQuantity) {
                    item.setQuantity(availableQuantity - requestedQuantity);
                    System.out.println("Shipment processed successfully. New quantity for Item ID " + item.getId() + ": " + item.getQuantity());
                } else {
                    System.err.println("ERROR: Insufficient quantity for shipment of Item ID " + item.getId() + ". Requested: " + requestedQuantity + ", Available: " + availableQuantity + ". Shipment not processed.");
                    // Request is already removed by poll()
                }
            }

        } catch (Exception e) {
            System.err.println("ERROR: An unexpected error occurred while processing shipment: " + e.getMessage());
        }
    }

    // Displays the current inventory status
    public void displayInventory() {
        System.out.println("\n--- Current Inventory ---");
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            for (InventoryItem item : inventory) {
                System.out.println(item);
            }
        }
        System.out.println("-------------------------");
    }

    // Displays the current shipment queue contents
    public void displayShipmentQueue() {
        System.out.println("\n--- Shipment Queue ---");
        if (shipmentQueue.isEmpty()) {
            System.out.println("Shipment queue is empty.");
        } else {
            // Iterate without removing elements (using peek/element is also an option)
            // Creating a temporary list for iteration is safer if queue might be modified concurrently (not the case here)
            // Or simply iterate using the Queue's iterator
            for (ShipmentRequest request : shipmentQueue) {
                 System.out.println(request);
            }
        }
        System.out.println("----------------------");
    }

    // Displays the main menu
    private void displayMenu() {
        System.out.println("\n--- Warehouse Shipment System ---");
        System.out.println("1. Add Item to Inventory");
        System.out.println("2. Enqueue Item for Shipment");
        System.out.println("3. Process Next Shipment");
        System.out.println("4. Display Inventory");
        System.out.println("5. Display Shipment Queue");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    // Runs the main application loop
    public void run() {
        int choice = -1;
        while (choice != 6) {
            displayMenu();
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                // Use a switch statement for command handling
                switch (choice) {
                    case 1:
                        addItem();
                        break;
                    case 2:
                        enqueueShipment();
                        break;
                    case 3:
                        processNextShipment();
                        break;
                    case 4:
                        displayInventory();
                        break;
                    case 5:
                        displayShipmentQueue();
                        break;
                    case 6:
                        System.out.println("Exiting Warehouse Shipment System. Goodbye!");
                        break;
                    default:
                        System.err.println("ERROR: Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("ERROR: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input
                choice = -1; // Reset choice to prevent loop exit on invalid input
            } catch (Exception e) {
                 // Catch any other unexpected exceptions during the loop
                 System.err.println("ERROR: An unexpected system error occurred: " + e.getMessage());
                 e.printStackTrace(); // Print stack trace for debugging unexpected errors
                 choice = -1; // Reset choice
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    public static void main(String[] args) {
        WarehouseSystem system = new WarehouseSystem();
        system.run();
    }
}
