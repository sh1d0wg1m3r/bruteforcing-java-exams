/*
 * Exam Question #455
 * Generated on: 2025-05-11 23:13:49
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Package Delivery Route Simulator
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based simulator for a package delivery driver. The simulator should manage a queue of packages waiting to be loaded onto the truck and a list of destinations the driver needs to visit. The driver processes deliveries based on the defined route, attempting to deliver any packages currently on the truck (from the queue) that match the current destination in the route.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` (specifically, an implementation like `LinkedList`) to represent packages waiting to be delivered. Packages are added to the end and processed from the front *if* they match a destination on the route.
 *     *   Use a `List` (specifically, an `ArrayList`) to store the delivery route as a sequence of destination names (Strings).
 * 2.  **Package Class:** Create a simple `Package` class with private fields for `packageId` (String), `destination` (String), and `weightKg` (double). Include a constructor and public getter methods for these fields. Override the `toString()` method to provide a user-friendly representation of a package.
 * 3.  **User Interface:** Implement a console-based menu using `Scanner` for user interaction. The menu should offer the following options:
 *     *   `1. Add Package to Loading Queue`: Prompts the user for package ID, destination, and weight. Adds the package to the queue.
 *     *   `2. View Loading Queue`: Displays the details of all packages currently in the queue.
 *     *   `3. Add Destination to Route`: Prompts the user for a destination name and adds it to the end of the route list.
 *     *   `4. View Delivery Route`: Displays the list of destinations in the current route order.
 *     *   `5. Start Deliveries`: Initiates the delivery process based on the current route and packages in the queue.
 *     *   `6. Exit`: Terminates the program.
 * 4.  **Delivery Process (`Start Deliveries`):**
 *     *   Iterate through the `deliveryRoute` list.
 *     *   For each destination in the route:
 *         *   Announce the current destination being visited.
 *         *   Check the *current* `packagesQueue`. For each package in the queue, if its destination matches the current route destination, "deliver" the package.
 *         *   "Delivering" a package means removing it from the queue and printing a success message (e.g., "Delivered package [package details] at [destination]").
 *         *   **Important:** You must handle concurrent modification issues if you iterate and remove. A common approach is to iterate through the queue using an `Iterator` and use `iterator.remove()`, or process packages into a temporary list of delivered packages and then remove them from the queue after checking. A simpler approach suitable for this exam might be to iterate through the *route*, and for each route destination, repeatedly check the *front* of the queue (`peek()`) or iterate through the *entire* queue (perhaps using a stream or converting to a temporary list) to find matching packages, removing them (`poll()` or `removeIf()`) as they are found and delivered. A robust approach is to iterate through the route, and for each destination, iterate through the queue using an Iterator, checking and removing matching packages.
 *         *   If no packages are delivered at a destination, print a message indicating that.
 *     *   After processing all destinations in the route, report how many packages remain in the queue.
 * 5.  **Error Handling and Input Validation:**
 *     *   Use `try-catch` blocks to handle potential errors, such as invalid numeric input from the user (e.g., non-double for weight).
 *     *   Catch general exceptions that might occur during the process.
 *     *   Use `System.err.println` to display error messages to the user.
 *     *   Validate user input where appropriate (e.g., package ID or destination cannot be empty).
 *     *   Handle cases where the user tries to start deliveries with an empty queue or an empty route, displaying an informative message using `System.out` or `System.err`.
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation in the `Package` class.
 *     *   Use `System.out.println` for normal program output and prompts.
 * 
 * **Expected Output:**
 * 
 * The program should present a clear menu, prompt for input, and provide informative output for each operation, including successful additions, list/queue views, delivery progress messages, and error messages using `System.err` when appropriate.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Package Delivery Simulator Menu ---
 * 1. Add Package to Loading Queue
 * 2. View Loading Queue
 * 3. Add Destination to Route
 * 4. View Delivery Route
 * 5. Start Deliveries
 * 6. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG001
 * Enter Destination: Downtown
 * Enter Weight (kg): 2.5
 * Package PKG001 added to queue.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 1
 * Enter Package ID: PKG002
 * Enter Destination: Uptown
 * Enter Weight (kg): 5.0
 * Package PKG002 added to queue.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 3
 * Enter Destination: Downtown
 * Destination 'Downtown' added to route.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 3
 * Enter Destination: Midtown
 * Destination 'Midtown' added to route.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 3
 * Enter Destination: Uptown
 * Destination 'Uptown' added to route.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 5
 * Starting delivery route...
 * Visiting destination: Downtown
 * Attempting deliveries at Downtown...
 * Delivered package [ID: PKG001, Dest: Downtown, Wt: 2.5kg] at Downtown.
 * Visiting destination: Midtown
 * Attempting deliveries at Midtown...
 * No packages for Midtown in the queue.
 * Visiting destination: Uptown
 * Attempting deliveries at Uptown...
 * Delivered package [ID: PKG002, Dest: Uptown, Wt: 5.0kg] at Uptown.
 * Delivery route finished.
 * 2 packages processed during this run.
 * 0 packages remaining in the queue.
 * 
 * --- Package Delivery Simulator Menu ---
 * ...
 * Enter your choice: 6
 * Exiting simulator.
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Correct implementation of the delivery simulation logic.
 * *   Adherence to best practices (encapsulation, naming, comments, code structure).
 * *   Robustness in handling user input and potential errors.
 *
 * EXPLANATION:
 * This solution implements the `Package Delivery Route Simulator` based on the provided requirements, demonstrating the usage of the specified Java components and adhering to best practices.
 * 
 * 1.  **`Package` Class:**
 *     *   Represents the data for a single package.
 *     *   Uses `private` fields (`packageId`, `destination`, `weightKg`) for encapsulation.
 *     *   Provides public getter methods (`getPackageId`, `getDestination`, `getWeightKg`).
 *     *   Includes a constructor with basic input validation using `IllegalArgumentException`.
 *     *   Overrides `toString()` for easy printing of package details.
 * 
 * 2.  **`DeliverySimulator` Class:**
 *     *   This is the main class containing the application logic.
 *     *   **`packagesQueue`:** Declared as `Queue<Package>` and initialized with `new LinkedList<>()`. This correctly uses the `Queue` interface and an appropriate implementation. Packages are added using `offer()` and processed/removed using an `Iterator` with `remove()` during delivery.
 *     *   **`deliveryRoute`:** Declared as `List<String>` and initialized with `new ArrayList<>()`. This correctly uses the `List` interface and implementation to store destinations in order.
 *     *   **`scanner`:** An instance of `Scanner` is used to read user input from `System.in`. It's initialized in the constructor and closed when the application exits.
 *     *   **`displayMenu()`:** A helper method to print the menu options to `System.out`.
 *     *   **`addPackageToQueue()`:**
 *         *   Prompts the user for package details using `System.out`.
 *         *   Reads input using `scanner.nextLine()` for strings and `scanner.nextDouble()` for the double.
 *         *   Includes a `try-catch(InputMismatchException)` block specifically for the `nextDouble()` call to handle non-numeric input gracefully, printing an error to `System.err` and consuming the invalid input.
 *         *   Includes a general `try-catch(Exception)` block around the `Package` creation and queue addition to catch potential `IllegalArgumentException` from the `Package` constructor or other unexpected errors, reporting them via `System.err`.
 *         *   Adds the valid `Package` object to the `packagesQueue` using `offer()`.
 *     *   **`viewLoadingQueue()`:**
 *         *   Checks if the queue is empty and prints a message if so.
 *         *   If not empty, it iterates through the `packagesQueue` using an enhanced for loop (which does not remove elements) and prints each package's `toString()` representation to `System.out`.
 *     *   **`addDestinationToRoute()`:**
 *         *   Prompts the user for a destination name using `System.out`.
 *         *   Reads input using `scanner.nextLine()`.
 *         *   Performs basic validation to ensure the destination is not empty.
 *         *   Adds the destination string to the `deliveryRoute` list using `add()`.
 *     *   **`viewDeliveryRoute()`:**
 *         *   Checks if the route is empty and prints a message if so.
 *         *   If not empty, it iterates through the `deliveryRoute` list using a standard for loop with index to print each destination to `System.out`.
 *     *   **`startDeliveries()`:**
 *         *   Checks if the route or queue is empty and prints appropriate messages to `System.err` or `System.out`, returning early if deliveries cannot start.
 *         *   Iterates through each `currentDestination` in the `deliveryRoute` list.
 *         *   Inside the loop, it obtains an `Iterator` for the `packagesQueue`. This is crucial for safely removing elements from the queue while iterating over it.
 *         *   It uses a `while (iterator.hasNext())` loop to go through the packages currently in the queue.
 *         *   For each package, it checks if `pkg.getDestination().equalsIgnoreCase(currentDestination)`. Using `equalsIgnoreCase` makes the matching case-insensitive, which is often practical.
 *         *   If a match is found, it prints a delivery success message to `System.out` and uses `iterator.remove()` to remove the package from the `packagesQueue`. A counter tracks delivered packages.
 *         *   After iterating through the queue for the current destination, it reports if any packages were delivered at that stop.
 *         *   Finally, it prints a summary of packages delivered and remaining packages in the queue.
 *     *   **`run()`:**
 *         *   Contains the main application loop (`while (choice != 6)`).
 *         *   Calls `displayMenu()` in each iteration.
 *         *   Reads the user's menu choice using `scanner.nextLine()` and parses it to an integer using `Integer.parseInt()`. Reading the whole line first helps avoid issues when mixing `nextLine()` with `nextInt()` or `nextDouble()`.
 *         *   Uses a `switch` statement to execute the method corresponding to the user's valid choice (1-6).
 *         *   Includes `try-catch` blocks around the `parseInt` call (`NumberFormatException`) and a general `catch(Exception)` to handle invalid menu input or other unexpected errors that might occur within the loop, reporting them via `System.err`.
 *         *   The loop continues until the user chooses option 6.
 *         *   The `scanner.close()` method is called after the loop terminates to release system resources.
 *     *   **`main()`:** The entry point of the application. It creates an instance of `DeliverySimulator` and calls its `run()` method.
 * 
 * This solution effectively integrates all required components within a practical scenario, demonstrates proper error handling, input validation, and follows object-oriented design principles like encapsulation. The delivery logic, while simplified for an exam, showcases how to process elements from a queue based on external criteria (the route) and safely remove them during iteration.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Iterator;

/**
 * Represents a package to be delivered.
 */
class Package {
    private String packageId;
    private String destination;
    private double weightKg;

    /**
     * Constructs a new Package object.
     * @param packageId The unique ID of the package.
     * @param destination The destination address/area for the package.
     * @param weightKg The weight of the package in kilograms.
     */
    public Package(String packageId, String destination, double weightKg) {
        if (packageId == null || packageId.trim().isEmpty()) {
            throw new IllegalArgumentException("Package ID cannot be null or empty.");
        }
        if (destination == null || destination.trim().isEmpty()) {
            throw new IllegalArgumentException("Destination cannot be null or empty.");
        }
        if (weightKg <= 0) {
            throw new IllegalArgumentException("Weight must be positive.");
        }
        this.packageId = packageId.trim();
        this.destination = destination.trim();
        this.weightKg = weightKg;
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeightKg() {
        return weightKg;
    }

    /**
     * Returns a string representation of the package.
     * @return String representation of the package.
     */
    @Override
    public String toString() {
        return "[ID: " + packageId + ", Dest: " + destination + ", Wt: " + weightKg + "kg]";
    }
}

/**
 * Simulates a package delivery route and process.
 */
public class DeliverySimulator {

    // Use Queue for packages waiting to be processed/delivered
    private Queue<Package> packagesQueue;

    // Use List for the delivery route destinations
    private List<String> deliveryRoute;

    private Scanner scanner;

    /**
     * Constructs a new DeliverySimulator.
     * Initializes the queue, route, and scanner.
     */
    public DeliverySimulator() {
        this.packagesQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.deliveryRoute = new ArrayList<>();   // ArrayList is a common List implementation
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Package Delivery Simulator Menu ---");
        System.out.println("1. Add Package to Loading Queue");
        System.out.println("2. View Loading Queue");
        System.out.println("3. Add Destination to Route");
        System.out.println("4. View Delivery Route");
        System.out.println("5. Start Deliveries");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a package to the loading queue based on user input.
     */
    private void addPackageToQueue() {
        System.out.print("Enter Package ID: ");
        String id = scanner.nextLine().trim();

        System.out.print("Enter Destination: ");
        String destination = scanner.nextLine().trim();

        double weight = -1;
        System.out.print("Enter Weight (kg): ");
        try {
            weight = scanner.nextDouble();
        } catch (InputMismatchException e) {
            System.err.println("Invalid input for weight. Please enter a number.");
            scanner.nextLine(); // Consume the invalid input
            return; // Exit method on invalid input
        } finally {
             // Consume the rest of the line after reading double/attempting to read double
             // This is crucial to prevent issues with nextLine() after nextDouble()
             scanner.nextLine();
        }

        try {
            Package newPackage = new Package(id, destination, weight);
            packagesQueue.offer(newPackage); // offer() is generally preferred over add() for queues
            System.out.println("Package " + newPackage.getPackageId() + " added to queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding package: " + e.getMessage());
        } catch (Exception e) {
             System.err.println("An unexpected error occurred while adding package: " + e.getMessage());
        }
    }

    /**
     * Displays the current packages in the loading queue.
     */
    private void viewLoadingQueue() {
        if (packagesQueue.isEmpty()) {
            System.out.println("The loading queue is empty.");
            return;
        }
        System.out.println("\n--- Current Loading Queue ---");
        int index = 1;
        // Iterating over a Queue using enhanced for loop or iterator does not remove elements
        for (Package pkg : packagesQueue) {
            System.out.println(index++ + ". " + pkg);
        }
        System.out.println("-----------------------------");
    }

    /**
     * Adds a destination to the delivery route based on user input.
     */
    private void addDestinationToRoute() {
        System.out.print("Enter Destination: ");
        String destination = scanner.nextLine().trim();

        if (destination.isEmpty()) {
            System.err.println("Destination name cannot be empty.");
            return;
        }

        deliveryRoute.add(destination); // Add to the end of the route
        System.out.println("Destination '" + destination + "' added to route.");
    }

    /**
     * Displays the current delivery route.
     */
    private void viewDeliveryRoute() {
        if (deliveryRoute.isEmpty()) {
            System.out.println("The delivery route is empty.");
            return;
        }
        System.out.println("\n--- Current Delivery Route ---");
        for (int i = 0; i < deliveryRoute.size(); i++) {
            System.out.println((i + 1) + ". " + deliveryRoute.get(i));
        }
        System.out.println("------------------------------");
    }

    /**
     * Initiates the delivery process based on the route and queue.
     */
    private void startDeliveries() {
        if (deliveryRoute.isEmpty()) {
            System.err.println("Cannot start deliveries: The delivery route is empty.");
            return;
        }
        if (packagesQueue.isEmpty()) {
            System.out.println("The loading queue is empty. No packages to deliver.");
            return;
        }

        System.out.println("\nStarting delivery route...");
        int packagesDeliveredCount = 0;

        // Iterate through the route destinations
        for (String currentDestination : deliveryRoute) {
            System.out.println("\nVisiting destination: " + currentDestination);
            System.out.println("Attempting deliveries at " + currentDestination + "...");

            boolean deliveredAtCurrentStop = false;
            // Use an iterator to safely remove elements while iterating
            Iterator<Package> iterator = packagesQueue.iterator();
            while (iterator.hasNext()) {
                Package pkg = iterator.next();
                if (pkg.getDestination().equalsIgnoreCase(currentDestination)) {
                    System.out.println("Delivered package " + pkg + " at " + currentDestination + ".");
                    iterator.remove(); // Safely remove the delivered package from the queue
                    packagesDeliveredCount++;
                    deliveredAtCurrentStop = true;
                }
            }

            if (!deliveredAtCurrentStop) {
                 System.out.println("No packages for " + currentDestination + " in the queue.");
            }
        }

        System.out.println("\nDelivery route finished.");
        System.out.println(packagesDeliveredCount + " packages processed during this run.");
        System.out.println(packagesQueue.size() + " packages remaining in the queue.");
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        int choice = -1;
        while (choice != 6) {
            displayMenu();
            try {
                // Read the entire line first to handle potential issues with nextInt/nextDouble
                String inputLine = scanner.nextLine();
                choice = Integer.parseInt(inputLine);

                switch (choice) {
                    case 1:
                        addPackageToQueue();
                        break;
                    case 2:
                        viewLoadingQueue();
                        break;
                    case 3:
                        addDestinationToRoute();
                        break;
                    case 4:
                        viewDeliveryRoute();
                        break;
                    case 5:
                        startDeliveries();
                        break;
                    case 6:
                        System.out.println("Exiting simulator.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                 System.err.println("Invalid input. Please enter a number.");
                 // The nextLine() after reading the integer already consumed the line
                 // No need for extra scanner.nextLine() here if reading line first
            } catch (NumberFormatException e) {
                 System.err.println("Invalid input. Please enter a number for your choice.");
            }
            catch (Exception e) {
                // Catch any other unexpected exceptions during menu processing
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the Delivery Simulator.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliverySimulator simulator = new DeliverySimulator();
        simulator.run();
    }
}
