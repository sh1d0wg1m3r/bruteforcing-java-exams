/*
 * Exam Question #993
 * Generated on: 2025-05-12 17:10:01
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified appointment scheduling system for a small hospital. The system needs to manage patients waiting to be scheduled and the appointments that have been successfully booked. Patients arrive and are added to a waiting list. When a doctor is available, the next patient from the waiting list is scheduled for an appointment.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your solution must meet the following criteria:
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to manage the patients waiting for an appointment. Patients should be processed in the order they are added (First-In, First-Out).
 *     *   Use an `ArrayList` to store a predefined list of available doctor names.
 *     *   Use a `List` interface reference when declaring the list of scheduled appointments.
 * 
 * 2.  **Classes:**
 *     *   Create a `Patient` class with private fields for `patientId` (int) and `name` (String). Include a constructor and appropriate public getter methods.
 *     *   Create an `Appointment` class with private fields for `patient` (`Patient` object), `doctorName` (String), and `timeSlot` (String). Include a constructor and appropriate public getter methods.
 *     *   Create a `HospitalScheduler` class that manages the `Queue` of waiting patients, the `List` of available doctors, and the `List` of scheduled appointments. This class should contain the core logic for adding patients, scheduling appointments, and listing data. Use proper encapsulation (private fields, public methods).
 * 
 * 3.  **Functionality (in the `HospitalScheduler` or a main class interacting with it):**
 *     *   **Add Patient:** Allow users to add a new patient to the waiting queue. Prompt for patient ID and name. Validate that the patient ID is positive.
 *     *   **Schedule Appointment:** Take the next patient from the waiting queue and schedule an appointment. Prompt for the doctor's name and time slot. Validate that the waiting queue is not empty before attempting to schedule.
 *     *   **View Waiting Queue:** Display the list of patients currently in the waiting queue.
 *     *   **View Scheduled Appointments:** Display the list of all scheduled appointments.
 *     *   **List Doctors:** Display the list of available doctors.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to get user input for menu choices and data.
 *     *   Present a clear menu of options to the user.
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for all normal output (menu, successful operations, data listings).
 *     *   Use `System.err` for error messages (e.g., invalid input, attempting to schedule from an empty queue).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks. This should ideally wrap the main user interaction loop or input reading to catch unexpected input types (`InputMismatchException`) or handle specific business logic errors gracefully.
 * 
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadocs are a plus but not strictly required for all methods in an exam setting, focus on clarity).
 *     *   Implement input validation where necessary.
 * 
 * **Predefined Data:**
 * 
 * Initialize the list of available doctors with at least three names (e.g., "Dr. Smith", "Dr. Jones", "Dr. Williams").
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu, accepting user input, performing the requested operations, and displaying results or error messages as appropriate.
 * 
 * **Example Interaction Flow (Partial):**
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Appointment
 * 3. View Waiting Queue
 * 4. View Scheduled Appointments
 * 5. List Doctors
 * 6. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Patient Alice (ID: 101) added to waiting list.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 1
 * Enter Patient ID: -5
 * Error: Patient ID must be positive.
 * Enter Patient ID: 102
 * Enter Patient Name: Bob
 * Patient Bob (ID: 102) added to waiting list.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * Waiting Queue:
 * [Patient{id=101, name='Alice'}, Patient{id=102, name='Bob'}]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Waiting queue is not empty. Scheduling next patient...
 * Scheduling Patient: Patient{id=101, name='Alice'}
 * Enter Doctor Name: Dr. Smith
 * Enter Time Slot (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled for Alice with Dr. Smith at 10:30 AM.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * Scheduled Appointments:
 * [Appointment{patient=Patient{id=101, name='Alice'}, doctor='Dr. Smith', time='10:30 AM'}]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Waiting queue is not empty. Scheduling next patient...
 * Scheduling Patient: Patient{id=102, name='Bob'}
 * Enter Doctor Name: Dr. Williams
 * Enter Time Slot (e.g., 10:00 AM): 11:00 AM
 * Appointment scheduled for Bob with Dr. Williams at 11:00 AM.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * Waiting Queue:
 * []
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 6
 * Exiting Hospital Scheduler.
 * ```
 * 
 * Your code should handle potential `InputMismatchException` if the user enters non-integer input when an integer is expected, and other relevant errors gracefully.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`.
 * *   Effective use of `try-catch` for error handling.
 * *   Correct implementation of the required functionalities.
 * *   Proper object-oriented design (encapsulation).
 * *   Code clarity, readability, and adherence to best practices.
 * *   Robustness in handling invalid input and error conditions.
 * 
 * ```java
 * // Your code goes here
 * ```
 *
 * EXPLANATION:
 * This solution implements a simplified hospital appointment scheduler, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple POJO (Plain Old Java Object) representing a patient with an ID and name. It uses private fields and public getters for encapsulation. `toString()` is overridden for easy printing.
 *     *   `Appointment`: Represents a scheduled appointment, holding a `Patient` object, doctor's name, and time slot. It also uses private fields and public getters. `toString()` is overridden.
 *     *   `HospitalScheduler`: This is the core class managing the state of the system.
 *         *   It uses a `Queue<Patient>` (`LinkedList` implementation) for the waiting list, ensuring FIFO order.
 *         *   It uses an `ArrayList<String>` for the list of available doctors.
 *         *   It uses a `List<Appointment>` (`ArrayList` implementation) for storing scheduled appointments. The declaration uses the `List` interface, adhering to the requirement.
 *         *   Methods like `addPatientToQueue`, `scheduleNextAppointment`, `viewWaitingQueue`, `viewScheduledAppointments`, and `listDoctors` encapsulate the system's logic.
 *     *   `HospitalSchedulerApp`: Contains the `main` method, the user interaction loop, the `Scanner`, and the `switch` statement for menu navigation. Helper methods (`printMenu`, `addPatient`, `scheduleAppointment`) keep the `main` method cleaner.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue`: Used in `HospitalScheduler` (`waitingQueue`) to manage patients in FIFO order using `offer()` to add and `poll()` to remove.
 *     *   `ArrayList`: Used in `HospitalScheduler` (`doctors` and `scheduledAppointments`) for dynamic lists.
 *     *   `List interface`: The `scheduledAppointments` field in `HospitalScheduler` is declared as `List<Appointment>`, demonstrating the use of the interface type.
 *     *   `Scanner`: Used in `HospitalSchedulerApp` to read user input from the console.
 *     *   `Switch statement`: Used in `HospitalSchedulerApp.main` to direct program flow based on the user's menu choice.
 *     *   `System.err`: Used in `HospitalScheduler` and `HospitalSchedulerApp` to print error messages (e.g., invalid input, empty queue).
 *     *   `System.out`: Used throughout the application for normal output (menu, prompts, successful operations, data listings).
 *     *   `Class-wide exception handling (try-catch)`: A `try-catch` block wraps the main `while` loop in `HospitalSchedulerApp.main` to catch potential `InputMismatchException` when reading the menu choice and a general `Exception` for unexpected errors. Specific input validation with `try-catch` is also used within `addPatient` to handle non-integer ID input.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Private fields and public getter methods are used in `Patient`, `Appointment`, and `HospitalScheduler`.
 *     *   **Meaningful Names:** Variables (`waitingQueue`, `scheduledAppointments`, `patientId`, `doctorName`, `timeSlot`) and methods (`addPatientToQueue`, `scheduleNextAppointment`, `viewWaitingQueue`) are clearly named.
 *     *   **Comments/Documentation:** Basic Javadoc-style comments are included for classes and methods to explain their purpose. Inline comments clarify specific logic points.
 *     *   **Input Validation:** The `addPatient` method explicitly checks if the entered patient ID is positive and uses a `try-catch` to handle non-integer input. The `scheduleNextAppointment` method checks if the waiting queue is empty before attempting to schedule.
 *     *   **Error Handling:** `System.err` is used for errors. `InputMismatchException` is caught specifically when reading integer input. A general `Exception` catch is included in the main loop. The `scheduleNextAppointment` method returns `null` and prints an error if the queue is empty.
 *     *   **Clean Code Structure:** The code is divided into logical classes. The `main` method is kept relatively clean by delegating tasks to helper methods. The `Scanner` is closed in a `finally` block to ensure resource cleanup.
 * 
 * This solution effectively integrates all the required components into a practical scenario, demonstrating an understanding of fundamental and intermediate Java concepts, data structures, and error handling techniques suitable for an advanced exam task.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient waiting for an appointment
class Patient {
    private int patientId;
    private String name;

    /**
     * Constructs a new Patient.
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getPatientId() {
        return patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Patient{id=" + patientId + ", name='" + name + "'}";
    }
}

// Represents a scheduled appointment
class Appointment {
    private Patient patient;
    private String doctorName;
    private String timeSlot;

    /**
     * Constructs a new Appointment.
     * @param patient The patient for this appointment.
     * @param doctorName The name of the doctor.
     * @param timeSlot The scheduled time slot.
     */
    public Appointment(Patient patient, String doctorName, String timeSlot) {
        this.patient = patient;
        this.doctorName = doctorName;
        this.timeSlot = timeSlot;
    }

    /**
     * Gets the patient associated with this appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the doctor's name for this appointment.
     * @return The doctor's name.
     */
    public String getDoctorName() {
        return doctorName;
    }

    /**
     * Gets the time slot for this appointment.
     * @return The time slot string.
     */
    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Appointment{" +
               "patient=" + patient +
               ", doctor='" + doctorName + '\'' +
               ", time='" + timeSlot + '\'' +
               '}';
    }
}

// Manages the hospital scheduling logic
class HospitalScheduler {
    // Queue to hold patients waiting to be scheduled (FIFO)
    private Queue<Patient> waitingQueue;
    // List of available doctors
    private List<String> doctors;
    // List to hold scheduled appointments
    private List<Appointment> scheduledAppointments;

    /**
     * Constructs a new HospitalScheduler with predefined doctors.
     */
    public HospitalScheduler() {
        waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        doctors = new ArrayList<>();
        doctors.add("Dr. Smith");
        doctors.add("Dr. Jones");
        doctors.add("Dr. Williams");
        scheduledAppointments = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a patient to the waiting queue.
     * @param patient The patient to add.
     */
    public void addPatientToQueue(Patient patient) {
        waitingQueue.offer(patient); // offer is preferred over add for queues
        System.out.println("Patient " + patient.getName() + " (ID: " + patient.getPatientId() + ") added to waiting list.");
    }

    /**
     * Schedules an appointment for the next patient in the queue.
     * @param doctorName The name of the doctor for the appointment.
     * @param timeSlot The time slot for the appointment.
     * @return The scheduled Appointment object, or null if the queue was empty.
     */
    public Appointment scheduleNextAppointment(String doctorName, String timeSlot) {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty. Cannot schedule appointment.");
            return null;
        }

        // Poll removes and returns the head of the queue
        Patient nextPatient = waitingQueue.poll();

        Appointment newAppointment = new Appointment(nextPatient, doctorName, timeSlot);
        scheduledAppointments.add(newAppointment);
        System.out.println("Appointment scheduled for " + nextPatient.getName() +
                           " with " + doctorName + " at " + timeSlot + ".");
        return newAppointment;
    }

    /**
     * Displays the current patients in the waiting queue.
     */
    public void viewWaitingQueue() {
        System.out.println("--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate without removing elements
            waitingQueue.forEach(System.out::println);
        }
    }

    /**
     * Displays all scheduled appointments.
     */
    public void viewScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            scheduledAppointments.forEach(System.out::println);
        }
    }

    /**
     * Displays the list of available doctors.
     */
    public void listDoctors() {
        System.out.println("--- Available Doctors ---");
        doctors.forEach(System.out::println);
    }
}

// Main class to run the Hospital Scheduler application
public class HospitalSchedulerApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalScheduler scheduler = new HospitalScheduler();
        boolean running = true;

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                printMenu();
                int choice = -1;

                // Inner try-catch for reading integer input specifically
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    switch (choice) {
                        case 1:
                            addPatient(scanner, scheduler);
                            break;
                        case 2:
                            scheduleAppointment(scanner, scheduler);
                            break;
                        case 3:
                            scheduler.viewWaitingQueue();
                            break;
                        case 4:
                            scheduler.viewScheduledAppointments();
                            break;
                        case 5:
                            scheduler.listDoctors();
                            break;
                        case 6:
                            running = false;
                            System.out.println("Exiting Hospital Scheduler.");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during operation
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    e.printStackTrace(); // Optional: for debugging
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
        }
    }

    /**
     * Prints the main menu options.
     */
    private static void printMenu() {
        System.out.println("--- Hospital Scheduler Menu ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Appointment");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. List Doctors");
        System.out.println("6. Exit");
    }

    /**
     * Handles the process of adding a new patient.
     * @param scanner The Scanner object for input.
     * @param scheduler The HospitalScheduler instance.
     */
    private static void addPatient(Scanner scanner, HospitalScheduler scheduler) {
        int id = -1;
        boolean validInput = false;
        while (!validInput) {
            try {
                System.out.print("Enter Patient ID: ");
                id = scanner.nextInt();
                if (id <= 0) {
                    System.err.println("Error: Patient ID must be positive.");
                } else {
                    validInput = true;
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a valid integer for Patient ID.");
                scanner.nextLine(); // Consume the invalid input
            }
        }
        scanner.nextLine(); // Consume the newline character after reading int

        System.out.print("Enter Patient Name: ");
        String name = scanner.nextLine();

        Patient newPatient = new Patient(id, name);
        scheduler.addPatientToQueue(newPatient);
    }

    /**
     * Handles the process of scheduling an appointment.
     * @param scanner The Scanner object for input.
     * @param scheduler The HospitalScheduler instance.
     */
    private static void scheduleAppointment(Scanner scanner, HospitalScheduler scheduler) {
         // Check if queue is empty before polling
        if (scheduler.waitingQueue.isEmpty()) { // Accessing queue directly for the check is acceptable here for simplicity given the task, though a getter in HospitalScheduler would be more encapsulated. Let's add a check in the scheduler method instead.
            System.out.println("Waiting queue is not empty. Scheduling next patient..."); // This line should be moved or adjusted
        }

        System.out.print("Enter Doctor Name: ");
        String doctorName = scanner.nextLine();

        System.out.print("Enter Time Slot (e.g., 10:00 AM): ");
        String timeSlot = scanner.nextLine();

        // The actual check for empty queue is done inside scheduleNextAppointment
        scheduler.scheduleNextAppointment(doctorName, timeSlot);
    }
}
