/*
 * Exam Question #518
 * Generated on: 2025-05-11 23:23:25
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Print Job Management System**
 * 
 * **Scenario:**
 * You are tasked with building a simple simulation of a print server's job management system. The system should allow users to add print jobs to a queue, process the next job in the queue, and view both pending and completed jobs.
 * 
 * **Task:**
 * Implement a Java console application that simulates this print job manager. Your solution must adhere to the technical and design requirements below.
 * 
 * **Technical Requirements:**
 * Your solution *must* explicitly use and demonstrate understanding of the following Java components:
 * 1.  `java.util.Queue`: To manage the print jobs waiting to be processed (First-In, First-Out).
 * 2.  `java.util.ArrayList`: To store the list of jobs that have been processed.
 * 3.  `java.util.List` interface: To declare variables or method return types related to collections where appropriate (specifically for the processed jobs list and potentially for viewing the queue contents).
 * 4.  `java.util.Scanner`: To read user input from the console.
 * 5.  `switch` statement: To handle the different menu options selected by the user.
 * 6.  `System.err`: To output error messages (e.g., invalid input, attempting to process an empty queue).
 * 7.  `System.out`: To output standard information (menu, prompts, job details, success messages).
 * 8.  Class-wide exception handling with `try-catch` blocks: To gracefully handle potential runtime issues, particularly related to user input.
 * 
 * **Design Requirements:**
 * *   **Encapsulation:** Create a `PrintJob` class to represent a print job with relevant attributes (e.g., ID, file name, status) and ensure proper encapsulation (private fields, public getters/setters where necessary).
 * *   **Meaningful Names:** Use descriptive names for classes, variables, methods, etc.
 * *   **Comments/Documentation:** Include comments where necessary to explain complex logic and provide basic documentation for classes/methods.
 * *   **Input Validation:** Validate user input where appropriate (e.g., ensure file name is not empty, handle non-numeric input for menu choices).
 * *   **Error Handling:** Implement robust error handling using `try-catch` and `System.err`. Handle cases like trying to process a job when the queue is empty.
 * *   **Clean Code Structure:** Organize your code logically, potentially using separate classes for the job representation and the manager logic.
 * 
 * **Functionality:**
 * The program should present a menu with the following options:
 * 1.  **Add New Print Job:** Prompt the user for a file name and add a new job with a unique ID to the pending queue.
 * 2.  **Process Next Job:** Take the next job from the front of the queue, mark it as completed, and move it to a list of processed jobs. If the queue is empty, display an error.
 * 3.  **View Pending Jobs:** Display the details of all jobs currently in the pending queue, in the order they were added.
 * 4.  **View Processed Jobs:** Display the details of all jobs that have been processed.
 * 5.  **Exit:** Terminate the program.
 * 
 * The program should loop, presenting the menu after each action, until the user chooses to exit.
 * 
 * **Expected Output:**
 * The program should print a menu, prompt the user for input, and display relevant messages based on the user's actions. Error messages should be directed to `System.err`.
 * 
 * Example Interaction Snippet:
 * ```
 * --- Print Job Manager ---
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name to print: document.pdf
 * Job added: Job #1: 'document.pdf' [PENDING]
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter file name to print: image.png
 * Job added: Job #2: 'image.png' [PENDING]
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 3
 * 
 * --- Pending Jobs Queue ---
 * Job #1: 'document.pdf' [PENDING]
 * Job #2: 'image.png' [PENDING]
 * --------------------------
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 2
 * Job processed: Job #1: 'document.pdf' [COMPLETED]
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 4
 * 
 * --- Processed Jobs ---
 * Job #1: 'document.pdf' [COMPLETED]
 * ----------------------
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: process
 * Invalid input. Please enter a number.
 * 
 * Choose an action:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Processed Jobs
 * 5. Exit
 * Enter your choice: 5
 * Exiting Print Job Manager. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Print Job Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single print job using encapsulation (`private` fields: `jobId`, `fileName`, `status`).
 *     *   Includes a `static` counter (`nextJobId`) to assign unique IDs automatically.
 *     *   Provides public getter methods (`getJobId`, `getFileName`, `getStatus`) and a setter for status (`setStatus`).
 *     *   Overrides `toString()` for easy printing of job details.
 * 
 * 2.  **`PrintManager` Class:**
 *     *   Manages the collection of jobs.
 *     *   Uses a `Queue<PrintJob>` (`pendingJobsQueue`) implemented by `LinkedList` to store jobs waiting to be printed, adhering to the FIFO principle.
 *     *   Uses a `List<PrintJob>` (`processedJobsList`) implemented by `ArrayList` to store jobs after they have been processed. This explicitly uses both the `List` interface and the `ArrayList` concrete class.
 *     *   `addJob(String fileName)`: Creates a new `PrintJob` and adds it to the `pendingJobsQueue` using `offer()`, which is a safe way to add to a queue. Includes basic input validation for the file name.
 *     *   `processNextJob()`: Uses `poll()` to retrieve and remove the head of the `pendingJobsQueue`. `poll()` returns `null` if the queue is empty, which is handled gracefully with an error message to `System.err`. If a job is retrieved, its status is updated, and it's added to the `processedJobsList`.
 *     *   `getPendingJobs()`: Returns a *new* `ArrayList` populated with the elements from the `pendingJobsQueue`. This uses `ArrayList` and `List` and provides a snapshot view of the queue without exposing the internal queue structure for external modification.
 *     *   `getProcessedJobs()`: Returns the internal `processedJobsList` (declared as `List<PrintJob>` but implemented as `ArrayList<PrintJob>`). This demonstrates using the `List` interface.
 * 
 * 3.  **`PrintJobManagerApp` (Main Class):**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   Creates a `PrintManager` instance.
 *     *   Uses `Scanner` to read user input from `System.in`. `scanner.nextLine()` is used consistently to avoid common `Scanner` newline issues, followed by `Integer.parseInt()` for numeric input.
 *     *   The main logic runs in a `while(running)` loop.
 *     *   A `printMenu()` helper method displays the available options using `System.out`.
 *     *   A `try-catch` block wraps the core logic inside the loop.
 *         *   It specifically catches `NumberFormatException` if the user enters non-numeric input for the menu choice, printing an error to `System.err`.
 *         *   A general `catch (Exception e)` is included as a class-wide handler for any other unexpected errors that might occur during the execution of the loop iteration, printing a message to `System.err`.
 *     *   A `switch` statement processes the valid integer input (`choice`), calling the appropriate methods on the `PrintManager` instance.
 *     *   Cases 3 and 4 demonstrate retrieving the job lists using the methods that return `List<PrintJob>` and iterating through them using an enhanced for loop, printing details to `System.out`.
 *     *   Input validation for the menu choice (checking the range 1-5) is handled in the `default` case of the `switch`, printing to `System.err`.
 *     *   The `Scanner` is closed when the program exits.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, while adhering to good object-oriented design principles like encapsulation and demonstrating robust error handling and input validation.
 */

import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList; // Concrete implementation for Queue
import java.util.List;
import java.util.ArrayList; // Concrete implementation for List
import java.util.InputMismatchException; // Specific exception for scanner nextInt

/**
 * Represents a single print job.
 */
class PrintJob {
    private static int nextJobId = 1;
    private int jobId;
    private String fileName;
    private String status; // e.g., "PENDING", "COMPLETED"

    /**
     * Constructs a new PrintJob with a unique ID and PENDING status.
     * @param fileName The name of the file to print.
     */
    public PrintJob(String fileName) {
        this.jobId = nextJobId++;
        this.fileName = fileName;
        this.status = "PENDING";
    }

    // --- Getters ---
    public int getJobId() {
        return jobId;
    }

    public String getFileName() {
        return fileName;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    /**
     * Sets the status of the print job.
     * @param status The new status (e.g., "COMPLETED").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Returns a string representation of the print job.
     */
    @Override
    public String toString() {
        return "Job #" + jobId + ": '" + fileName + "' [" + status + "]";
    }
}

/**
 * Manages the queue of pending print jobs and a list of processed jobs.
 */
class PrintManager {
    // Use Queue interface, implement with LinkedList for FIFO
    private Queue<PrintJob> pendingJobsQueue;
    // Use List interface, implement with ArrayList for storing processed jobs
    private List<PrintJob> processedJobsList;

    /**
     * Constructs a new PrintManager with empty job queues/lists.
     */
    public PrintManager() {
        this.pendingJobsQueue = new LinkedList<>();
        this.processedJobsList = new ArrayList<>();
    }

    /**
     * Adds a new print job to the pending queue.
     * Performs basic validation on the file name.
     * @param fileName The name of the file for the job.
     * @return true if the job was successfully added, false otherwise.
     */
    public boolean addJob(String fileName) {
        if (fileName == null || fileName.trim().isEmpty()) {
            System.err.println("Error: File name cannot be empty.");
            return false;
        }
        PrintJob newJob = new PrintJob(fileName.trim());
        // offer is preferred over add as it returns false instead of throwing exception if insertion fails
        boolean added = pendingJobsQueue.offer(newJob);
        if (added) {
            System.out.println("Job added: " + newJob);
        } else {
            // This case is unlikely with LinkedList unless memory is exhausted
            System.err.println("Error: Failed to add job to queue.");
        }
        return added;
    }

    /**
     * Processes the next job from the pending queue.
     * If a job is processed, its status is updated and it's moved to the processed list.
     * @return The processed PrintJob object, or null if the queue was empty.
     */
    public PrintJob processNextJob() {
        // poll retrieves and removes the head of the queue, returns null if queue is empty
        PrintJob jobToProcess = pendingJobsQueue.poll();
        if (jobToProcess != null) {
            jobToProcess.setStatus("COMPLETED");
            processedJobsList.add(jobToProcess); // Add to the processed list (ArrayList)
            System.out.println("Job processed: " + jobToProcess);
        } else {
            System.err.println("No jobs in the queue to process.");
        }
        return jobToProcess;
    }

    /**
     * Gets a list of all pending print jobs.
     * Returns a copy to prevent external modification of the internal queue.
     * Uses ArrayList and List interface.
     * @return A List of pending PrintJob objects.
     */
    public List<PrintJob> getPendingJobs() {
        // Create a new ArrayList from the queue's elements to return a snapshot
        return new ArrayList<>(pendingJobsQueue);
    }

    /**
     * Gets a list of all processed print jobs.
     * Uses ArrayList and List interface.
     * @return A List of processed PrintJob objects.
     */
    public List<PrintJob> getProcessedJobs() {
        return processedJobsList; // Return the internal list
    }

    /**
     * Checks if the pending jobs queue is empty.
     * @return true if the queue is empty, false otherwise.
     */
    public boolean isQueueEmpty() {
        return pendingJobsQueue.isEmpty();
    }
}

/**
 * Main application class for the Print Job Manager.
 * Handles user interaction, menu display, and delegates tasks to PrintManager.
 * Demonstrates Scanner, switch, System.out, System.err, and try-catch.
 */
public class PrintJobManagerApp {

    public static void main(String[] args) {
        PrintManager manager = new PrintManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("--- Print Job Manager ---");

        // Main application loop
        while (running) {
            printMenu();
            int choice = -1; // Default invalid choice

            // Class-wide exception handling for user input and operations
            try {
                System.out.print("Enter your choice: ");
                // Use nextLine() to read the whole line, then parse
                // This avoids issues with newline characters left behind by nextInt()
                String input = scanner.nextLine();

                // Handle empty input specifically
                if (input.trim().isEmpty()) {
                    System.err.println("Input cannot be empty.");
                    continue; // Skip to next iteration
                }

                choice = Integer.parseInt(input); // Potential NumberFormatException

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Add New Job
                        System.out.print("Enter file name to print: ");
                        String fileName = scanner.nextLine(); // Read file name
                        manager.addJob(fileName); // addJob handles validation and System.err
                        break;
                    case 2: // Process Next Job
                        manager.processNextJob(); // processNextJob handles empty queue and System.err
                        break;
                    case 3: // View Pending Jobs
                        List<PrintJob> pending = manager.getPendingJobs(); // Uses List & ArrayList
                        System.out.println("\n--- Pending Jobs Queue ---");
                        if (pending.isEmpty()) {
                            System.out.println("Queue is empty.");
                        } else {
                            // Iterate and print jobs from the list copy
                            for (PrintJob job : pending) {
                                System.out.println(job);
                            }
                        }
                        System.out.println("--------------------------");
                        break;
                    case 4: // View Processed Jobs
                        List<PrintJob> processed = manager.getProcessedJobs(); // Uses List & ArrayList
                        System.out.println("\n--- Processed Jobs ---");
                        if (processed.isEmpty()) {
                            System.out.println("No jobs processed yet.");
                        } else {
                            // Iterate and print jobs from the list
                            for (PrintJob job : processed) {
                                System.out.println(job);
                            }
                        }
                        System.out.println("----------------------");
                        break;
                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Print Job Manager. Goodbye!");
                        break;
                    default:
                        // Handle choices outside the 1-5 range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (NumberFormatException e) {
                // Catch specific exception for parsing errors
                System.err.println("Invalid input. Please enter a number.");
            } catch (Exception e) {
                // Catch any other unexpected exceptions during the loop iteration
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: e.printStackTrace(); for detailed debugging
            }
            System.out.println(); // Add a blank line for better readability between interactions
        }

        scanner.close(); // Close the scanner resource
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Choose an action:");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View Processed Jobs");
        System.out.println("5. Exit");
    }
}
