/*
 * Exam Question #465
 * Generated on: 2025-05-11 23:15:19
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System in Java. The system should allow managing patients arriving at the hospital and scheduling their appointments with doctors. Patients first join a waiting list upon arrival, and then appointments are scheduled for them from this waiting list based on their arrival order.
 * 
 * Your system must provide a command-line interface for user interaction and demonstrate proficiency in using various core Java components and best practices.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a waiting list of patients using a `java.util.Queue`. Patients arriving are added to this queue.
 *     *   Maintain a list of scheduled appointments using a `java.util.List`, specifically implemented with `java.util.ArrayList`.
 * 2.  **User Interface:**
 *     *   Implement a text-based menu using `java.util.Scanner` for user input.
 *     *   The menu should offer the following options:
 *         *   Add Patient to Waiting List
 *         *   Schedule Appointment (takes the next patient from the waiting list)
 *         *   List All Scheduled Appointments
 *         *   Exit
 * 3.  **Core Logic:**
 *     *   **Add Patient:** Prompt the user for the patient's name and add them to the waiting list queue.
 *     *   **Schedule Appointment:**
 *         *   Check if the waiting list is empty. If empty, report an error.
 *         *   If not empty, remove the patient at the front of the queue.
 *         *   Prompt the user for the appointment time slot (e.g., "10:00 AM", "2:30 PM").
 *         *   Create an `Appointment` object with the dequeued patient and the specified time slot.
 *         *   Add the created `Appointment` to the list of scheduled appointments.
 *     *   **List Appointments:** Display all scheduled appointments, showing the patient's name and appointment time slot. If no appointments are scheduled, indicate that.
 * 4.  **Control Flow:** Use a `switch` statement to handle the different menu options.
 * 5.  **Input/Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and the list of appointments.
 *     *   Use `System.err` for displaying error messages (e.g., waiting list empty, invalid menu option).
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly to handle potential input errors (like non-integer input for menu choice) and other unexpected issues during program execution.
 *     *   Validate user input where appropriate (e.g., ensuring patient name is not empty).
 * 7.  **Object-Oriented Design:**
 *     *   Create separate classes for `Patient` and `Appointment` with appropriate private fields and public getter methods (and potentially a constructor).
 *     *   Create a main class (`HospitalScheduler`) to contain the main logic, data structures, and the main execution loop.
 *     *   Use private fields for data structures within `HospitalScheduler` and public methods for operations.
 * 8.  **Code Quality:**
 *     *   Use meaningful variable and method names.
 *     *   Include comments and basic documentation (like JavaDocs for classes/methods).
 *     *   Follow Java coding conventions.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu. Based on user input, it should perform the requested action, print results to `System.out`, or error messages to `System.err`.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Appointment
 * 3. List All Scheduled Appointments
 * 4. Exit
 * Enter choice: 1
 * Enter patient name: Alice
 * Alice added to waiting list.
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 1
 * Enter patient name: Bob
 * Bob added to waiting list.
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 2
 * Waiting list: [Alice, Bob]
 * Scheduling appointment for: Alice
 * Enter appointment time (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled for Alice at 10:30 AM.
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 3
 * --- Scheduled Appointments ---
 * Patient: Alice, Time: 10:30 AM
 * ------------------------------
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 2
 * Waiting list: [Bob]
 * Scheduling appointment for: Bob
 * Enter appointment time (e.g., 10:00 AM): 11:00 AM
 * Appointment scheduled for Bob at 11:00 AM.
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 3
 * --- Scheduled Appointments ---
 * Patient: Alice, Time: 10:30 AM
 * Patient: Bob, Time: 11:00 AM
 * ------------------------------
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 4
 * Exiting Hospital Appointment System.
 * ```
 * 
 * Invalid input or operations should result in messages on `System.err`.
 * 
 * ```
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: 2
 * Error: Waiting list is empty. Cannot schedule appointment.
 * --- Hospital Appointment System ---
 * ...
 * Enter choice: abc
 * Error: Invalid input. Please enter a number.
 * --- Hospital Appointment System ---
 * ...
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * The provided solution implements a simple Hospital Appointment Management System as described in the problem statement, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Data Structures (`Queue`, `List`, `ArrayList`):**
 *     *   A `java.util.Queue<Patient>` named `waitingList` is used to hold patients who have arrived but are waiting to be scheduled. The `LinkedList` class is used as a concrete implementation of the `Queue` interface, chosen for its efficient add/remove operations at both ends. Patients are added using `add()` or `offer()` and removed from the front using `poll()`.
 *     *   A `java.util.List<Appointment>` named `scheduledAppointments` is used to store appointments that have been assigned a time slot. `ArrayList` is used as the concrete implementation, providing dynamic resizing and efficient storage/retrieval of scheduled appointments. Appointments are added using `add()`.
 * 
 * 2.  **Classes (`Patient`, `Appointment`, `HospitalScheduler`):**
 *     *   `Patient`: A simple class encapsulating patient data (name). It has a constructor and a getter for the name, demonstrating basic encapsulation. Input validation is included in the constructor.
 *     *   `Appointment`: Represents a scheduled appointment, linking a `Patient` object to a `timeSlot` string. It also uses encapsulation with private fields and getters. Input validation is in the constructor.
 *     *   `HospitalScheduler`: The main class containing the `main` method and the application logic. It holds the `waitingList` and `scheduledAppointments` data structures and methods for menu operations (`addPatientToWaitingList`, `scheduleAppointment`, `listScheduledAppointments`). The `run()` method manages the main application loop.
 * 
 * 3.  **User Interface (`Scanner`, `System.out`, `System.err`):**
 *     *   `java.util.Scanner` is used to read user input from the console (`System.in`).
 *     *   `System.out.println` and `System.out.print` are used for displaying the menu, prompts, and normal output messages (like success messages and appointment lists).
 *     *   `System.err.println` is used exclusively for displaying error messages (e.g., invalid menu choice, waiting list empty, input errors).
 * 
 * 4.  **Control Flow (`Switch statement`):**
 *     *   A `switch` statement in the `run()` method is used to direct the program flow based on the user's integer menu choice, calling the appropriate private method for each option.
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch` block is placed around the `scanner.nextInt()` call within the main loop in the `run()` method. This handles `InputMismatchException` if the user enters non-integer input for the menu choice, preventing the program from crashing and allowing it to prompt the user again.
 *     *   A general `catch (Exception e)` is included as a class-wide handler for any other unexpected runtime exceptions, printing an error message and stack trace to `System.err`.
 *     *   `try-catch` blocks are also used within `addPatientToWaitingList` and `scheduleAppointment` methods to catch `IllegalArgumentException` thrown by the constructors of `Patient` and `Appointment` if input validation fails, reporting the specific error message to `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Patient`, `Appointment`, and `HospitalScheduler` are `private`, accessed via `public` methods (`getters`) or through the class's logic.
 *     *   **Meaningful Names:** Variables (`waitingList`, `scheduledAppointments`, `nextPatient`, `timeSlot`), methods (`addPatientToWaitingList`, `scheduleAppointment`, `listScheduledAppointments`, `displayMenu`), and classes (`Patient`, `Appointment`, `HospitalScheduler`) have descriptive names.
 *     *   **Comments and Documentation:** JavaDocs are provided for classes and methods, explaining their purpose. Inline comments clarify specific logic points (like consuming the newline character after reading an integer).
 *     *   **Input Validation:** Basic validation is performed in the `Patient` and `Appointment` constructors (checking for null or empty names/time slots) and within the main loop (checking if the waiting list is empty before scheduling).
 *     *   **Error Handling:** Specific exceptions (`InputMismatchException`, `IllegalArgumentException`) are caught and handled gracefully, providing informative messages to the user via `System.err`.
 *     *   **Clean Code Structure:** The code is organized into logical methods, and the main loop is kept clean by delegating tasks to these methods. Resource management is shown by closing the `Scanner` when the application exits.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, object-oriented principles, user interaction, and robust error handling.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be null or empty.");
        }
        this.name = name.trim();
    }

    /**
     * Gets the name of the patient.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Represents a scheduled appointment.
 */
class Appointment {
    private Patient patient;
    private String timeSlot;

    /**
     * Constructs a new Appointment object.
     * @param patient The patient for the appointment.
     * @param timeSlot The time slot for the appointment.
     */
    public Appointment(Patient patient, String timeSlot) {
        if (patient == null) {
            throw new IllegalArgumentException("Appointment must have a patient.");
        }
        if (timeSlot == null || timeSlot.trim().isEmpty()) {
             throw new IllegalArgumentException("Appointment time slot cannot be null or empty.");
        }
        this.patient = patient;
        this.timeSlot = timeSlot.trim();
    }

    /**
     * Gets the patient associated with the appointment.
     * @return The Patient object.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the time slot for the appointment.
     * @return The appointment time slot string.
     */
    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Patient: " + patient.getName() + ", Time: " + timeSlot;
    }
}

/**
 * Manages the hospital appointment scheduling process.
 */
public class HospitalScheduler {

    // Using LinkedList as a common implementation for Queue
    private Queue<Patient> waitingList;
    // Using ArrayList as a common implementation for List
    private List<Appointment> scheduledAppointments;
    private Scanner scanner;

    /**
     * Constructs a new HospitalScheduler.
     * Initializes the waiting list, scheduled appointments list, and scanner.
     */
    public HospitalScheduler() {
        this.waitingList = new LinkedList<>(); // Queue implementation
        this.scheduledAppointments = new ArrayList<>(); // List implementation
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. List All Scheduled Appointments");
        System.out.println("4. Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Adds a patient to the waiting list.
     */
    private void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        scanner.nextLine(); // Consume the newline character left by nextInt()
        String name = scanner.nextLine();

        try {
            Patient patient = new Patient(name);
            waitingList.add(patient); // Add to the end of the queue
            System.out.println(patient.getName() + " added to waiting list.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    /**
     * Schedules an appointment for the next patient in the waiting list.
     */
    private void scheduleAppointment() {
        if (waitingList.isEmpty()) {
            System.err.println("Error: Waiting list is empty. Cannot schedule appointment.");
            return;
        }

        Patient nextPatient = waitingList.poll(); // Remove patient from the front of the queue
        System.out.println("Waiting list: " + waitingList); // Optional: show remaining queue
        System.out.println("Scheduling appointment for: " + nextPatient.getName());

        System.out.print("Enter appointment time (e.g., 10:00 AM): ");
        scanner.nextLine(); // Consume newline
        String timeSlot = scanner.nextLine();

        try {
            Appointment appointment = new Appointment(nextPatient, timeSlot);
            scheduledAppointments.add(appointment); // Add to the list of scheduled appointments
            System.out.println("Appointment scheduled for " + nextPatient.getName() + " at " + timeSlot + ".");
        } catch (IllegalArgumentException e) {
             System.err.println("Error scheduling appointment: " + e.getMessage());
             // Optionally, re-add the patient to the queue if scheduling failed due to timeSlot error
             waitingList.offer(nextPatient); // Add back to the end of the queue
             System.err.println("Patient " + nextPatient.getName() + " returned to the waiting list.");
        }
    }

    /**
     * Lists all scheduled appointments.
     */
    private void listScheduledAppointments() {
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
            return;
        }

        System.out.println("\n--- Scheduled Appointments ---");
        for (Appointment app : scheduledAppointments) {
            System.out.println(app); // Uses Appointment's toString()
        }
        System.out.println("------------------------------");
    }

    /**
     * Runs the main application loop.
     * Handles user input and calls appropriate methods.
     */
    public void run() {
        int choice = -1;
        while (choice != 4) {
            displayMenu();
            try {
                choice = scanner.nextInt(); // Potential InputMismatchException here

                // Process the choice using a switch statement
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        scheduleAppointment();
                        break;
                    case 3:
                        listScheduledAppointments();
                        break;
                    case 4:
                        System.out.println("Exiting Hospital Appointment System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to continue the loop
            } catch (Exception e) {
                 // Catch any other unexpected exceptions
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 e.printStackTrace(System.err); // Print stack trace to System.err for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * The main method to start the HospitalScheduler application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run();
    }
}
