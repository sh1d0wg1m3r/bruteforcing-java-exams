/*
 * Exam Question #951
 * Generated on: 2025-05-12 17:04:21
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Technical Support Request Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified system for managing technical support requests. The system should allow users (simulating support staff) to add new support requests, process the oldest pending request, view pending requests, and view completed requests. The system operates on a First-In, First-Out (FIFO) basis for processing pending requests.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `java.util.Queue` to store pending support requests.
 *     *   Use a `java.util.List` (specifically, an `java.util.ArrayList` implementation) to store completed support requests.
 * 2.  **Classes:**
 *     *   Create a class `SupportRequest` to represent a single support request. It should have private fields for `id` (int), `description` (String), `priority` (String - allowed values: "Low", "Medium", "High"), and `status` (String - e.g., "Pending", "Completed"). Include a constructor, appropriate getters, a method to update the status, and a `toString()` method for easy printing.
 *     *   Create a class `SupportSystem` that manages the queues/lists. It should contain the `Queue` for pending requests and the `List` for completed requests. It should have methods for:
 *         *   `addRequest(String description, String priority)`: Creates a new `SupportRequest` with a unique ID and "Pending" status, and adds it to the pending queue.
 *         *   `processNextRequest()`: Removes the request at the front of the pending queue, updates its status to "Completed", and adds it to the completed list. Handle the case where there are no pending requests.
 *         *   `viewPendingRequests()`: Prints details of all requests currently in the pending queue.
 *         *   `viewCompletedRequests()`: Prints details of all requests in the completed list.
 *         *   `runInteractiveSystem()`: Contains the main application loop, interacts with the user via the console, and calls the appropriate `SupportSystem` methods based on user input.
 * 3.  **User Interface (Console):**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Request
 *         2.  Process Next Request
 *         3.  View Pending Requests
 *         4.  View Completed Requests
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Prompt the user for necessary details (e.g., description, priority) when adding a request.
 * 4.  **Error Handling and Output:**
 *     *   Use `System.out` for displaying the menu, request details, and success messages.
 *     *   Use `System.err` to display error messages (e.g., invalid menu choice, invalid priority input, attempting to process when no requests are pending).
 *     *   Implement class-wide exception handling within the `runInteractiveSystem` method using a `try-catch` block to catch potential runtime exceptions (like input mismatches or unexpected errors) and print an informative error message to `System.err`.
 *     *   Implement input validation for the request priority ("Low", "Medium", "High"). If an invalid priority is entered, use `System.err` and do *not* add the request.
 * 5.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style comments for classes/methods).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The system should display a menu, respond to user input, print request details or status messages to `System.out`, and print error messages to `System.err`. Examples:
 * 
 * *   Adding a request: Prompts for description and priority. Confirms request added.
 * *   Adding a request with invalid priority: Prompts, then prints error to `System.err`.
 * *   Processing a request: Prints message indicating which request was processed or an error to `System.err` if the queue is empty.
 * *   Viewing requests: Prints a list of pending or completed requests with their details.
 * *   Invalid menu choice: Prints error to `System.err`.
 * *   Runtime error: Prints a general error message to `System.err`.
 * 
 * **Deliverables:**
 * 
 * Provide the complete Java code for the `SupportRequest` and `SupportSystem` classes, including a `main` method to start the application.
 *
 * EXPLANATION:
 * This solution implements a simplified technical support request management system using the required Java components and best practices.
 * 
 * 1.  **`SupportRequest` Class:**
 *     *   This class encapsulates the data for a single request (`id`, `description`, `priority`, `status`).
 *     *   `private` fields ensure data is only accessible via public methods (encapsulation).
 *     *   A static `nextId` ensures each request gets a unique identifier starting from 1.
 *     *   The constructor initializes a new request with a pending status.
 *     *   Getters provide read access to the request's properties.
 *     *   `setStatus` allows changing the status, used when a request is processed.
 *     *   `toString()` provides a convenient way to print request details.
 * 
 * 2.  **`SupportSystem` Class:**
 *     *   This class manages the collections of requests.
 *     *   `pendingRequests` is declared as a `Queue<SupportRequest>`. We use `java.util.LinkedList` as the concrete implementation because it efficiently supports queue operations (add to end, remove from front).
 *     *   `completedRequests` is declared as a `List<SupportRequest>`. We use `java.util.ArrayList` as the concrete implementation, suitable for storing processed items where indexed access or simple iteration is needed.
 *     *   `scanner` is a `java.util.Scanner` instance used for reading user input from `System.in`.
 *     *   **`addRequest(String description, String priority)`:**
 *         *   Takes description and priority as input.
 *         *   Includes input validation: checks if the provided priority string matches one of the allowed values ("Low", "Medium", "High"), ignoring case.
 *         *   If validation fails, it prints an error to `System.err` and returns `false`.
 *         *   If validation passes, it creates a new `SupportRequest` object and adds it to the `pendingRequests` queue using `offer()`. `offer()` is generally preferred over `add()` for capacity-constrained queues (though `LinkedList` is not constrained) as it returns `false` on failure rather than throwing an exception.
 *         *   Prints a success message to `System.out`.
 *     *   **`processNextRequest()`:**
 *         *   Uses `pendingRequests.poll()` to retrieve and remove the request at the head of the queue. `poll()` returns `null` if the queue is empty, which is handled gracefully.
 *         *   If a request is retrieved, its status is updated to "Completed" using the `setStatus` method, and it's added to the `completedRequests` list.
 *         *   Prints a success message to `System.out`.
 *         *   If the queue was empty, it prints an error message to `System.err`.
 *     *   **`viewPendingRequests()`:**
 *         *   Iterates through the `pendingRequests` queue using a for-each loop (which uses the queue's iterator) and prints each request's details using its `toString()` method. This allows viewing the queue contents without removing elements.
 *         *   Handles the case where the queue is empty.
 *         *   Prints output to `System.out`.
 *     *   **`viewCompletedRequests()`:**
 *         *   Iterates through the `completedRequests` list and prints each completed request's details.
 *         *   Handles the case where the list is empty.
 *         *   Prints output to `System.out`.
 *     *   **`runInteractiveSystem()`:**
 *         *   This method contains the main application loop (`while(running)`).
 *         *   It displays the menu using `System.out`.
 *         *   It reads the user's integer choice using `scanner.nextInt()`.
 *         *   `scanner.nextLine()` is called immediately after `nextInt()` to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls.
 *         *   A `switch` statement directs the flow based on the user's choice, calling the appropriate methods (`addRequest`, `processNextRequest`, etc.).
 *         *   The `default` case in the `switch` handles invalid integer choices, printing an error to `System.err`.
 *         *   **Class-wide Exception Handling:** The core logic inside the `while` loop (reading input and processing the choice) is wrapped in a `try-catch` block.
 *             *   `catch (InputMismatchException e)` specifically handles cases where the user enters non-integer input for the menu choice, printing an error to `System.err` and consuming the invalid input to prevent an infinite loop.
 *             *   `catch (Exception e)` is a general catch-all for any other unexpected runtime exceptions that might occur within the loop iteration, printing a generic error message to `System.err`. This demonstrates a class-wide catch for the main operational loop.
 *         *   The loop continues until the user chooses option 5, setting `running` to `false`.
 *         *   The `scanner.close()` method is called after the loop exits to release system resources.
 *     *   **`main` Method:**
 *         *   The entry point of the application.
 *         *   Creates an instance of `SupportSystem` and calls its `runInteractiveSystem()` method to start the interactive console.
 * 
 * **Best Practices Demonstrated:**
 * 
 * *   **Encapsulation:** Fields in `SupportRequest` and `SupportSystem` are `private`, accessed only through public methods.
 * *   **Meaningful Names:** Class, method, and variable names clearly indicate their purpose (e.g., `SupportRequest`, `pendingRequests`, `addRequest`, `processNextRequest`).
 * *   **Comments and Documentation:** Javadoc-style comments explain the purpose of classes and methods. Inline comments clarify specific logic points (like `scanner.nextLine()` after `nextInt()`).
 * *   **Input Validation:** The `addRequest` method explicitly checks the validity of the priority input.
 * *   **Error Handling:**
 *     *   Specific error messages are printed to `System.err` for invalid input (priority, menu choice) and operational errors (empty queue).
 *     *   A `try-catch` block provides robust handling for potential runtime exceptions within the main loop.
 * *   **Clean Code Structure:** The code is divided into logical classes and methods, making it organized and readable. The interactive logic is separated from the core system operations.
 * 
 * This solution effectively utilizes all the required Java components within a practical scenario, demonstrating competence in data structures, object-oriented programming, console interaction, and error handling.
 */

import java.util.LinkedList; // LinkedList implements Queue
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single technical support request.
 */
class SupportRequest {
    private static int nextId = 1; // Static counter for unique IDs

    private int id;
    private String description;
    private String priority;
    private String status;

    /**
     * Constructs a new SupportRequest.
     * @param description The description of the issue.
     * @param priority The priority of the request ("Low", "Medium", "High").
     */
    public SupportRequest(String description, String priority) {
        this.id = nextId++;
        this.description = description;
        this.priority = priority;
        this.status = "Pending"; // New requests are always pending
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getPriority() {
        return priority;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter for Status ---
    /**
     * Updates the status of the support request.
     * @param status The new status (e.g., "Completed").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the support request.
     * @return A formatted string describing the request.
     */
    @Override
    public String toString() {
        return "Request ID: " + id +
               ", Description: \"" + description + "\"" +
               ", Priority: " + priority +
               ", Status: " + status;
    }
}

/**
 * Manages a queue of pending support requests and a list of completed requests.
 */
class SupportSystem {
    private Queue<SupportRequest> pendingRequests;
    private List<SupportRequest> completedRequests;
    private Scanner scanner;

    /**
     * Constructs a new SupportSystem.
     * Initializes the request collections and the scanner.
     */
    public SupportSystem() {
        // Use LinkedList as a Queue implementation
        this.pendingRequests = new LinkedList<>();
        // Use ArrayList as a List implementation
        this.completedRequests = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new support request to the pending queue.
     * Validates the priority before adding.
     * @param description The description of the request.
     * @param priority The priority ("Low", "Medium", "High").
     * @return true if the request was added successfully, false otherwise.
     */
    public boolean addRequest(String description, String priority) {
        // Input validation for priority
        if (!priority.equalsIgnoreCase("Low") &&
            !priority.equalsIgnoreCase("Medium") &&
            !priority.equalsIgnoreCase("High")) {
            System.err.println("Error: Invalid priority. Must be 'Low', 'Medium', or 'High'.");
            return false;
        }

        SupportRequest newRequest = new SupportRequest(description, priority);
        pendingRequests.offer(newRequest); // offer() is preferred for queues (returns false if failed, doesn't throw)
        System.out.println("Request added: " + newRequest.toString());
        return true;
    }

    /**
     * Processes the next request from the pending queue (FIFO).
     * Moves the processed request to the completed list.
     */
    public void processNextRequest() {
        SupportRequest requestToProcess = pendingRequests.poll(); // poll() retrieves and removes the head (returns null if empty)

        if (requestToProcess != null) {
            requestToProcess.setStatus("Completed");
            completedRequests.add(requestToProcess);
            System.out.println("Processed request: " + requestToProcess.toString());
        } else {
            System.err.println("No pending requests to process.");
        }
    }

    /**
     * Displays all requests currently in the pending queue.
     */
    public void viewPendingRequests() {
        System.out.println("\n--- Pending Requests ---");
        if (pendingRequests.isEmpty()) {
            System.out.println("No pending requests.");
        } else {
            // Iterate through the queue without removing elements
            for (SupportRequest request : pendingRequests) {
                System.out.println(request);
            }
        }
        System.out.println("------------------------\n");
    }

    /**
     * Displays all requests that have been completed.
     */
    public void viewCompletedRequests() {
        System.out.println("\n--- Completed Requests ---");
        if (completedRequests.isEmpty()) {
            System.out.println("No completed requests.");
        } else {
            for (SupportRequest request : completedRequests) {
                System.out.println(request);
            }
        }
        System.out.println("--------------------------\n");
    }

    /**
     * Runs the interactive console-based system.
     * Contains the main loop and handles user input.
     */
    public void runInteractiveSystem() {
        boolean running = true;

        while (running) {
            printMenu();

            // Class-wide exception handling for the main loop operations
            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character

                switch (choice) {
                    case 1: // Add New Request
                        System.out.print("Enter request description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter priority (Low, Medium, High): ");
                        String priority = scanner.nextLine();
                        addRequest(description, priority);
                        break;
                    case 2: // Process Next Request
                        processNextRequest();
                        break;
                    case 3: // View Pending Requests
                        viewPendingRequests();
                        break;
                    case 4: // View Completed Requests
                        viewCompletedRequests();
                        break;
                    case 5: // Exit
                        System.out.println("Exiting Support System. Goodbye!");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handles non-integer input for the menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catches any other unexpected exceptions during the loop iteration
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for detailed debugging
            }
            System.out.println(); // Add a blank line for better readability
        }

        // Close the scanner when the system exits
        scanner.close();
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Support Request System Menu ---");
        System.out.println("1. Add New Request");
        System.out.println("2. Process Next Request");
        System.out.println("3. View Pending Requests");
        System.out.println("4. View Completed Requests");
        System.out.println("5. Exit");
        System.out.println("-----------------------------------");
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        SupportSystem system = new SupportSystem();
        system.runInteractiveSystem();
    }
}
