/*
 * Exam Question #648
 * Generated on: 2025-05-12 16:19:56
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Library Book Management System with Holds**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified library book management system. The system needs to keep track of books, their availability, and manage a queue of patrons who wish to place holds on books that are currently checked out. Holds must be processed in a First-Come, First-Served (FCFS) order.
 * 
 * **Requirements:**
 * 
 * 1.  **`Book` Class:**
 *     *   Create a class named `Book` with the following private attributes:
 *         *   `isbn` (String): Unique identifier for the book.
 *         *   `title` (String): The title of the book.
 *         *   `author` (String): The author of the book.
 *         *   `isCheckedOut` (boolean): Indicates if the book is currently checked out.
 *         *   `currentHolderId` (String): The ID of the patron who currently has the book checked out (null if available).
 *         *   `holdQueue` (`Queue<String>`): A queue to store the IDs of patrons who have placed a hold on this book, in the order they placed the hold. Use `java.util.Queue`.
 *     *   Include a constructor to initialize the `isbn`, `title`, and `author`. Initialize `isCheckedOut` to `false`, `currentHolderId` to `null`, and the `holdQueue` using a suitable `Queue` implementation (like `LinkedList`).
 *     *   Provide public getter methods for all attributes except `holdQueue` (provide a getter for `holdQueue` but make it return the interface `Queue<String>` to limit modification).
 *     *   Implement public methods:
 *         *   `boolean checkout(String patronId)`: Attempts to check out the book to the given patron. Returns `true` if successful (book was available), `false` otherwise. Updates `isCheckedOut` and `currentHolderId`.
 *         *   `boolean returnBook()`: Attempts to return the book. Returns `true` if successful (book was checked out), `false` otherwise. Updates `isCheckedOut` and `currentHolderId`.
 *         *   `boolean placeHold(String patronId)`: Attempts to place a hold for the given patron. Only possible if the book is checked out. Adds the patron to the `holdQueue`. Returns `true` if the hold was successfully placed (book was checked out and patron didn't already have a hold), `false` otherwise.
 *         *   `String fulfillHold()`: Removes and returns the patron ID at the front of the `holdQueue`. Returns `null` if the queue is empty. This method is intended to be called when a book is returned and there's a hold.
 *         *   `boolean isNextInHoldQueue(String patronId)`: Checks if the given patron ID is at the front of the `holdQueue` without removing it.
 * 
 * 2.  **`LibrarySystem` Class:**
 *     *   Create a class named `LibrarySystem` with a private attribute:
 *         *   `bookCollection` (`List<Book>`): A list to store all `Book` objects in the library. Use `java.util.List` and initialize it with `java.util.ArrayList`.
 *     *   Include a constructor to initialize the `bookCollection`.
 *     *   Implement the following public methods:
 *         *   `boolean addBook(Book book)`: Adds a `Book` object to the `bookCollection`. Returns `true` if added successfully, `false` if a book with the same ISBN already exists.
 *         *   `Book findBookByIsbn(String isbn)`: Searches the `bookCollection` for a book with the given ISBN. Returns the `Book` object if found, `null` otherwise.
 *         *   `int performCheckout(String isbn, String patronId)`: Handles the checkout process. Returns an integer status code (e.g., 0 for success, 1 for book not found, 2 for book already checked out and not available for general checkout, 3 for book has holds but patron is not next in queue). This method should use the `Book`'s `checkout` and `fulfillHold`/`isNextInHoldQueue` methods appropriately.
 *         *   `int performReturn(String isbn)`: Handles the return process. Returns an integer status code (e.g., 0 for success, 1 for book not found, 2 for book not checked out). This method should use the `Book`'s `returnBook` method. If successful and there are holds, it should note that the book is now available for the next patron in the queue.
 *         *   `int performPlaceHold(String isbn, String patronId)`: Handles placing a hold. Returns an integer status code (e.g., 0 for success, 1 for book not found, 2 for book not checked out, 3 for patron already has a hold). This method should use the `Book`'s `placeHold` method.
 *         *   `void displayBookStatus(String isbn)`: Finds the book by ISBN and prints its detailed status, including whether it's checked out, who holds it, and the patrons currently in the hold queue. If the book is not found, print an error message.
 *         *   `void displayAllBooks()`: Prints a summary list of all books in the library (ISBN, Title, Author, and Checked Out status).
 * 
 * 3.  **Main Class (`LibraryManagementExam`):**
 *     *   Create a class with a `main` method.
 *     *   Inside `main`:
 *         *   Create a `LibrarySystem` instance.
 *         *   Add at least 3 initial `Book` objects to the system.
 *         *   Use `java.util.Scanner` to interact with the user via the console.
 *         *   Implement a menu-driven interface with options for:
 *             1.  Add New Book
 *             2.  Checkout Book
 *             3.  Return Book
 *             4.  Place Hold
 *             5.  View Book Status
 *             6.  View All Books
 *             7.  Exit
 *         *   Use a `switch` statement to process the user's menu choice.
 *         *   For operations requiring ISBN or Patron ID, prompt the user for input.
 *         *   Implement basic input validation (e.g., check for empty strings for required inputs).
 *         *   Use `System.out` for displaying the menu, prompts, success messages, and book information.
 *         *   Use `System.err` for displaying all error messages (e.g., "Book not found!", "Invalid input!", "Cannot checkout: already checked out!").
 *         *   Implement `try-catch` blocks to handle potential runtime errors, particularly `InputMismatchException` when reading integer input and potentially exceptions related to invalid book data during creation. A top-level `try-catch` around the main application loop is recommended for general input handling. Ensure the `Scanner` is closed properly using a `finally` block or try-with-resources (if allowed by your Java version and exam constraints - assume basic `try-finally` is sufficient).
 * 
 * 4.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for classes, methods, and variables.
 *     *   Add comments to explain complex logic or method purpose.
 *     *   Handle errors gracefully and inform the user using `System.err`.
 * 
 * **Expected Output:**
 * The program should start by adding initial books and presenting a menu. User interaction should guide the program flow. Success messages should go to `System.out`, and all errors should go to `System.err`. The program should continue until the user chooses to exit.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 6
 * --- All Books in Library (3) ---
 * 1. ISBN: 978-..., Title: "...", Author: "..." [Available]
 * ...
 * ---------------------------
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 2
 * --- Checkout Book ---
 * Enter ISBN of book to checkout: 978-...
 * Enter your Patron ID: patron123
 * Book 978-... checked out successfully by patron123.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 2
 * --- Checkout Book ---
 * Enter ISBN of book to checkout: 978-...
 * Enter your Patron ID: patron456
 * Error: Book with ISBN 978-... is already checked out and not available for general checkout.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 4
 * --- Place Hold ---
 * Enter ISBN of book to place hold on: 978-...
 * Enter your Patron ID: patron456
 * Hold placed successfully for book 978-... by patron456.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 4
 * --- Place Hold ---
 * Enter ISBN of book to place hold on: 978-...
 * Enter your Patron ID: patron789
 * Hold placed successfully for book 978-... by patron789.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 5
 * --- View Book Status ---
 * Enter ISBN of book to view status: 978-...
 * 
 * --- Book Status ---
 * ISBN: 978-..., Title: "...", Author: "..."
 * Status: Checked Out
 * Currently held by: patron123
 * Holds Queue (2 patrons):
 *   1. patron456
 *   2. patron789
 * -------------------
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 3
 * --- Return Book ---
 * Enter ISBN of book to return: 978-...
 * Book 978-... returned successfully.
 * Notification: Book 978-... is now available for patron456 (next in hold queue).
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 2
 * --- Checkout Book ---
 * Enter ISBN of book to checkout: 978-...
 * Enter your Patron ID: patron789
 * Error: Book with ISBN 978-... has holds. You are not next in the hold queue.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 2
 * --- Checkout Book ---
 * Enter ISBN of book to checkout: 978-...
 * Enter your Patron ID: patron456
 * Book 978-... checked out successfully by patron456.
 * 
 * --- Library Menu ---
 * ... (menu options) ...
 * Enter your choice: 7
 * Exiting Library System. Goodbye!
 * ```
 *
 * EXPLANATION:
 * This solution provides a complete implementation of the simplified library management system as described in the exam question.
 * 
 * 1.  **`Book` Class:**
 *     *   Encapsulates book data (`isbn`, `title`, `author`, `isCheckedOut`, `currentHolderId`, `holdQueue`).
 *     *   Uses a `LinkedList` to implement the `Queue` for managing holds, ensuring FCFS order.
 *     *   Provides methods (`checkout`, `returnBook`, `placeHold`, `fulfillHold`, `isNextInHoldQueue`) that manage the book's state and interact with its internal hold queue.
 *     *   Includes basic validation in the constructor to prevent creation of books with empty details.
 *     *   The `toString` method provides a convenient way to print book information.
 * 
 * 2.  **`LibrarySystem` Class:**
 *     *   Manages the collection of `Book` objects using an `ArrayList` declared with the `List` interface.
 *     *   Provides core library operations (`addBook`, `findBookByIsbn`, `performCheckout`, `performReturn`, `performPlaceHold`, `displayBookStatus`, `displayAllBooks`).
 *     *   `findBookByIsbn` demonstrates iterating through a `List`.
 *     *   `performCheckout`, `performReturn`, and `performPlaceHold` interact with the `Book` objects, calling their respective methods and handling the logic related to checkout rules, returns, and holds. They return integer status codes that the calling code (in `main`) can interpret to provide user feedback.
 *     *   `displayBookStatus` shows how to access the `Queue` (via the getter) to iterate and display its contents without modifying it.
 *     *   `displayAllBooks` iterates through the `List` to show a summary of all books.
 * 
 * 3.  **`LibraryManagementExam` Class (Main):**
 *     *   Contains the `main` method, serving as the application's entry point and user interface handler.
 *     *   Initializes the `LibrarySystem` and adds some sample books, demonstrating exception handling during initialization.
 *     *   Uses `Scanner` to read user input from the console.
 *     *   Implements a `while` loop to keep the application running until the user chooses to exit.
 *     *   A `switch` statement is used to direct program flow based on the user's menu selection, fulfilling the requirement.
 *     *   Input validation is performed for required fields (like ISBN, Patron ID) before calling library methods.
 *     *   `System.out` is used for all standard output, including the menu, prompts, successful operation messages, and book listings/status.
 *     *   `System.err` is specifically used for printing all error messages, as required.
 *     *   **Exception Handling:**
 *         *   A `try-catch(InputMismatchException)` block is placed inside the main loop's `try` block to specifically catch cases where the user enters non-integer input for the menu choice, preventing the program from crashing and allowing it to prompt the user again.
 *         *   A general `catch(Exception e)` is included within the main loop's `try` to catch any other unexpected runtime exceptions that might occur during the execution of a menu option.
 *         *   A top-level `try-catch` block surrounds the entire `main` logic (after initial book setup) to catch exceptions that might occur during `Scanner` initialization or other unforeseen issues.
 *         *   A `finally` block is used with the top-level `try` to ensure the `Scanner` resource is closed properly, regardless of whether an exception occurred or the loop finished normally.
 *         *   Error handling from `LibrarySystem` methods is done by checking the returned status codes and printing appropriate messages to `System.err`.
 * 
 * This solution effectively demonstrates the required Java concepts (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical, structured, and error-handled application, adhering to best practices like encapsulation and meaningful names. The complexity lies in the interaction between the `LibrarySystem` and `Book` objects, particularly the logic involving the hold queue during checkout and return operations.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Specific exception for Scanner

/**
 * Represents a single book in the library with management for checkout status and holds.
 */
class Book {
    private String isbn;
    private String title;
    private String author;
    private boolean isCheckedOut;
    private String currentHolderId; // Patron ID holding the book
    private Queue<String> holdQueue; // Queue of patron IDs waiting for this book

    /**
     * Constructs a new Book object.
     * @param isbn The unique ISBN of the book.
     * @param title The title of the book.
     * @param author The author of the book.
     * @throws IllegalArgumentException if ISBN, title, or author are null or empty.
     */
    public Book(String isbn, String title, String author) {
        // Input validation for constructor parameters
        if (isbn == null || isbn.trim().isEmpty()) {
            throw new IllegalArgumentException("Book ISBN cannot be empty.");
        }
         if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("Book Title cannot be empty.");
        }
         if (author == null || author.trim().isEmpty()) {
            throw new IllegalArgumentException("Book Author cannot be empty.");
        }

        this.isbn = isbn.trim();
        this.title = title.trim();
        this.author = author.trim();
        this.isCheckedOut = false; // Initially available
        this.currentHolderId = null; // No holder initially
        this.holdQueue = new LinkedList<>(); // Initialize the hold queue
    }

    // --- Getters ---
    public String getIsbn() { return isbn; }
    public String getTitle() { return title; }
    public String getAuthor() { return author; }
    public boolean isCheckedOut() { return isCheckedOut; }
    public String getCurrentHolderId() { return currentHolderId; }
    public Queue<String> getHoldQueue() { return holdQueue; } // Return the Queue interface

    // --- Operations ---

    /**
     * Attempts to check out the book to a patron.
     * @param patronId The ID of the patron checking out the book.
     * @return true if the checkout was successful (book was available), false otherwise.
     */
    public boolean checkout(String patronId) {
        if (!this.isCheckedOut) {
            this.isCheckedOut = true;
            this.currentHolderId = patronId;
            return true; // Checkout successful
        }
        return false; // Already checked out
    }

    /**
     * Attempts to return the book.
     * @return true if the return was successful (book was checked out), false otherwise.
     */
    public boolean returnBook() {
        if (this.isCheckedOut) {
            this.isCheckedOut = false;
            this.currentHolderId = null; // Clear the current holder
            // Note: Fulfilling a hold (removing from queue) happens separately
            return true; // Return successful
        }
        return false; // Cannot return if not checked out
    }

    /**
     * Attempts to place a hold on the book for a patron.
     * @param patronId The ID of the patron placing the hold.
     * @return true if the hold was successfully placed, false otherwise (e.g., book not checked out, patron already has a hold).
     */
    public boolean placeHold(String patronId) {
        if (this.isCheckedOut) {
            // Prevent duplicate holds by the same patron
            if (!holdQueue.contains(patronId)) {
                 holdQueue.offer(patronId); // Add patron to the end of the queue
                 return true; // Hold placed successfully
            }
            return false; // Patron already has a hold
        }
        return false; // Cannot place hold on an available book
    }

    /**
     * Removes and returns the patron ID at the front of the hold queue (fulfills the hold).
     * @return The patron ID that was at the front of the queue, or null if the queue was empty.
     */
    public String fulfillHold() {
        return holdQueue.poll(); // Remove and return the head of the queue (FCFS)
    }

    /**
     * Checks if the given patron ID is the next one in the hold queue.
     * @param patronId The ID of the patron to check.
     * @return true if the patron is next in queue, false otherwise.
     */
    public boolean isNextInHoldQueue(String patronId) {
        // Check if queue is not empty and the head matches the patronId
        return !holdQueue.isEmpty() && holdQueue.peek().equals(patronId);
    }

    /**
     * Provides a string representation of the book's basic information.
     * @return A formatted string with ISBN, Title, and Author.
     */
    @Override
    public String toString() {
        return "ISBN: " + isbn + ", Title: \"" + title + "\", Author: \"" + author + "\"";
    }
}

/**
 * Manages the collection of books and library operations.
 */
class LibrarySystem {
    // Using List interface, implemented by ArrayList
    private List<Book> bookCollection;

    /**
     * Constructs a new LibrarySystem with an empty book collection.
     */
    public LibrarySystem() {
        this.bookCollection = new ArrayList<>();
    }

    /**
     * Adds a book to the library collection.
     * @param book The book to add. Must not be null and must have a unique ISBN.
     * @return true if added successfully, false if the book is null or a book with the same ISBN already exists.
     */
    public boolean addBook(Book book) {
        if (book == null) {
            return false; // Cannot add null book
        }
        // Check if a book with the same ISBN already exists
        if (findBookByIsbn(book.getIsbn()) != null) {
            return false; // Book with this ISBN already exists
        }
        bookCollection.add(book);
        return true;
    }

    /**
     * Finds a book by its ISBN.
     * @param isbn The ISBN to search for.
     * @return The Book object if found, null otherwise. Returns null for null or empty ISBN input.
     */
    public Book findBookByIsbn(String isbn) {
        if (isbn == null || isbn.trim().isEmpty()) {
            return null; // Cannot search for empty ISBN
        }
        String searchIsbn = isbn.trim();
        for (Book book : bookCollection) {
            if (book.getIsbn().equals(searchIsbn)) {
                return book;
            }
        }
        return null; // Not found
    }

    /**
     * Attempts to check out a book for a patron.
     * Handles checking out available books and fulfilling holds for the next patron in queue.
     * @param isbn The ISBN of the book to checkout.
     * @param patronId The ID of the patron performing the checkout. Must not be null or empty.
     * @return A status code:
     *         0: Success (book checked out).
     *         1: Book not found.
     *         2: Book already checked out and not available for general checkout (either has holds, or simply checked out without holds).
     *         3: Book has holds, but the provided patronId is not next in the hold queue.
     */
    public int performCheckout(String isbn, String patronId) {
         if (patronId == null || patronId.trim().isEmpty()) {
            return -1; // Indicate invalid patron ID input
         }
        Book book = findBookByIsbn(isbn);
        if (book == null) {
            return 1; // Book not found
        }

        if (book.isCheckedOut()) {
            // Book is checked out. Can only check out if patron is next in hold queue.
            if (!book.getHoldQueue().isEmpty()) {
                // Book is checked out and has holds. Check if patron is next.
                if (book.isNextInHoldQueue(patronId)) {
                    // Patron is next. Fulfill hold and check out.
                    book.fulfillHold(); // Remove patron from the queue
                    book.checkout(patronId); // Set new holder
                    return 0; // Success (hold fulfilled and checked out)
                } else {
                    // Patron is not next in queue
                    return 3; // Not next in hold queue
                }
            } else {
                 // Book is checked out but no holds - cannot check out directly.
                 return 2; // Already checked out, not available
            }
        } else {
            // Book is available. Check out directly.
            book.checkout(patronId);
            return 0; // Success (available book checked out)
        }
    }

    /**
     * Attempts to return a book.
     * If successful and there are holds, notes that the book is available for the next patron.
     * @param isbn The ISBN of the book to return.
     * @return A status code:
     *         0: Success (book returned).
     *         1: Book not found.
     *         2: Book not currently checked out.
     */
    public int performReturn(String isbn) {
        Book book = findBookByIsbn(isbn);
        if (book == null) {
            return 1; // Book not found
        }
        if (!book.isCheckedOut()) {
            return 2; // Book not checked out
        }

        book.returnBook(); // Mark as available and clear holder
        // Note: Fulfillment happens implicitly by making the book available.
        // The next patron in the queue needs to perform a checkout.
        return 0; // Success
    }

     /**
     * Attempts to place a hold on a book for a patron.
     * @param isbn The ISBN of the book to place a hold on.
     * @param patronId The ID of the patron placing the hold. Must not be null or empty.
     * @return A status code:
     *         0: Success (hold placed).
     *         1: Book not found.
     *         2: Book not currently checked out (cannot place hold on available book).
     *         3: Patron already has a hold on this book.
     */
    public int performPlaceHold(String isbn, String patronId) {
         if (patronId == null || patronId.trim().isEmpty()) {
            return -1; // Indicate invalid patron ID input
         }
        Book book = findBookByIsbn(isbn);
        if (book == null) {
            return 1; // Book not found
        }
        if (!book.isCheckedOut()) {
            return 2; // Cannot place hold on available book
        }

        if (book.placeHold(patronId)) {
             return 0; // Success (hold placed)
        } else {
             return 3; // Patron already has a hold
        }
    }

    /**
     * Displays the detailed status of a specific book to System.out and System.err.
     * @param isbn The ISBN of the book to display status for.
     */
    public void displayBookStatus(String isbn) {
         Book book = findBookByIsbn(isbn);
        if (book == null) {
            System.err.println("Error: Book with ISBN " + isbn + " not found.");
            return;
        }

        System.out.println("\n--- Book Status ---");
        System.out.println(book); // Uses Book's toString
        System.out.println("Status: " + (book.isCheckedOut() ? "Checked Out" : "Available"));
        if (book.isCheckedOut()) {
            System.out.println("Currently held by: " + book.getCurrentHolderId());
        }
        System.out.println("Holds Queue (" + book.getHoldQueue().size() + " patrons):");
        Queue<String> holds = book.getHoldQueue(); // Get the queue reference
        if (holds.isEmpty()) {
            System.out.println("  No holds.");
        } else {
            // Iterate through the queue to display elements without removing them
            int i = 1;
            for (String patron : holds) {
                System.out.println("  " + i++ + ". " + patron);
            }
        }
        System.out.println("-------------------\n");
    }

    /**
     * Displays a summary of all books in the library to System.out.
     */
    public void displayAllBooks() {
        System.out.println("\n--- All Books in Library (" + bookCollection.size() + ") ---");
        if (bookCollection.isEmpty()) {
            System.out.println("No books in the library.");
        } else {
            // Use List iteration
            for (int i = 0; i < bookCollection.size(); i++) {
                Book book = bookCollection.get(i);
                System.out.println((i + 1) + ". " + book + " [" + (book.isCheckedOut() ? "Checked Out" : "Available") + "]");
            }
        }
        System.out.println("---------------------------\n");
    }
}


/**
 * Main class for the Library Management Exam task.
 * Handles user interaction, menu display, and calls LibrarySystem methods.
 */
public class LibraryManagementExam {

    /**
     * Main method to run the library management system.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        LibrarySystem library = new LibrarySystem();
        Scanner scanner = null; // Declare scanner outside try for finally block

        // Add some initial books
        System.out.println("Initializing library with books...");
        try {
            library.addBook(new Book("978-0321765723", "The Lord of the Rings", "J.R.R. Tolkien"));
            library.addBook(new Book("978-0743273565", "The Great Gatsby", "F. Scott Fitzgerald"));
            library.addBook(new Book("978-0061120084", "To Kill a Mockingbird", "Harper Lee"));
            library.addBook(new Book("978-0553213115", "Pride and Prejudice", "Jane Austen"));
            System.out.println("Initial books added.");
        } catch (IllegalArgumentException e) {
             // Catch errors during initial book creation
             System.err.println("Error adding initial books: " + e.getMessage());
        } catch (Exception e) {
             // Catch any other unexpected errors during initialization
             System.err.println("An unexpected error occurred during initialization: " + e.getMessage());
        }


        int choice = -1;

        // Main application loop with try-catch for general exceptions
        try {
            scanner = new Scanner(System.in); // Initialize scanner here

            while (choice != 7) {
                printMenu();
                System.out.print("Enter your choice: ");

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    // Use switch for menu navigation based on user choice
                    switch (choice) {
                        case 1: // Add Book
                            System.out.println("\n--- Add New Book ---");
                            System.out.print("Enter ISBN: ");
                            String isbn = scanner.nextLine().trim();
                            System.out.print("Enter Title: ");
                            String title = scanner.nextLine().trim();
                            System.out.print("Enter Author: ");
                            String author = scanner.nextLine().trim();

                            // Basic input validation
                            if (isbn.isEmpty() || title.isEmpty() || author.isEmpty()) {
                                System.err.println("Error: ISBN, Title, and Author cannot be empty.");
                                break; // Exit switch case
                            }

                            try {
                                Book newBook = new Book(isbn, title, author);
                                if (library.addBook(newBook)) {
                                    System.out.println("Book added successfully: " + newBook.getTitle());
                                } else {
                                    System.err.println("Error: Book with ISBN " + isbn + " already exists.");
                                }
                            } catch (IllegalArgumentException e) {
                                // Catch validation errors from Book constructor
                                System.err.println("Error creating book: " + e.getMessage());
                            }
                            break; // End of case 1

                        case 2: // Checkout Book
                            System.out.println("\n--- Checkout Book ---");
                            System.out.print("Enter ISBN of book to checkout: ");
                            String checkoutIsbn = scanner.nextLine().trim();
                            System.out.print("Enter your Patron ID: ");
                            String checkoutPatronId = scanner.nextLine().trim();

                             // Basic input validation
                             if (checkoutIsbn.isEmpty() || checkoutPatronId.isEmpty()) {
                                System.err.println("Error: ISBN and Patron ID cannot be empty.");
                                break;
                            }

                            int checkoutStatus = library.performCheckout(checkoutIsbn, checkoutPatronId);
                            // Use switch to handle different checkout outcomes
                            switch (checkoutStatus) {
                                case 0:
                                    System.out.println("Book " + checkoutIsbn + " checked out successfully by " + checkoutPatronId + ".");
                                    break;
                                case 1:
                                    System.err.println("Error: Book with ISBN " + checkoutIsbn + " not found.");
                                    break;
                                case 2:
                                    System.err.println("Error: Book with ISBN " + checkoutIsbn + " is already checked out and not available for general checkout.");
                                    break;
                                case 3:
                                     System.err.println("Error: Book with ISBN " + checkoutIsbn + " has holds. You are not next in the hold queue.");
                                    break;
                                case -1:
                                     System.err.println("Error: Invalid Patron ID input.");
                                    break;
                                default:
                                    System.err.println("An unknown checkout error occurred.");
                            }
                            break; // End of case 2

                        case 3: // Return Book
                            System.out.println("\n--- Return Book ---");
                            System.out.print("Enter ISBN of book to return: ");
                            String returnIsbn = scanner.nextLine().trim();

                             // Basic input validation
                             if (returnIsbn.isEmpty()) {
                                System.err.println("Error: ISBN cannot be empty.");
                                break;
                            }

                            int returnStatus = library.performReturn(returnIsbn);
                             // Use switch to handle different return outcomes
                             switch (returnStatus) {
                                case 0:
                                    System.out.println("Book " + returnIsbn + " returned successfully.");
                                    // After return, check if there's a hold to notify the next patron
                                    Book returnedBook = library.findBookByIsbn(returnIsbn); // Re-find the book to check queue
                                    if (returnedBook != null && !returnedBook.getHoldQueue().isEmpty()) {
                                         System.out.println("Notification: Book " + returnIsbn + " is now available for " + returnedBook.getHoldQueue().peek() + " (next in hold queue).");
                                    }
                                    break;
                                case 1:
                                    System.err.println("Error: Book with ISBN " + returnIsbn + " not found.");
                                    break;
                                case 2:
                                    System.err.println("Error: Book with ISBN " + returnIsbn + " was not checked out.");
                                    break;
                                default:
                                    System.err.println("An unknown return error occurred.");
                             }
                            break; // End of case 3

                        case 4: // Place Hold
                            System.out.println("\n--- Place Hold ---");
                            System.out.print("Enter ISBN of book to place hold on: ");
                            String holdIsbn = scanner.nextLine().trim();
                            System.out.print("Enter your Patron ID: ");
                            String holdPatronId = scanner.nextLine().trim();

                             // Basic input validation
                             if (holdIsbn.isEmpty() || holdPatronId.isEmpty()) {
                                System.err.println("Error: ISBN and Patron ID cannot be empty.");
                                break;
                            }

                            int holdStatus = library.performPlaceHold(holdIsbn, holdPatronId);
                             // Use switch to handle different hold outcomes
                             switch (holdStatus) {
                                case 0:
                                    System.out.println("Hold placed successfully for book " + holdIsbn + " by " + holdPatronId + ".");
                                    break;
                                case 1:
                                    System.err.println("Error: Book with ISBN " + holdIsbn + " not found.");
                                    break;
                                case 2:
                                    System.err.println("Error: Book with ISBN " + holdIsbn + " is currently available. Holds can only be placed on checked out books.");
                                    break;
                                case 3:
                                     System.err.println("Error: Patron " + holdPatronId + " already has a hold on book " + holdIsbn + ".");
                                    break;
                                case -1:
                                     System.err.println("Error: Invalid Patron ID input.");
                                    break;
                                default:
                                    System.err.println("An unknown hold error occurred.");
                             }
                            break; // End of case 4

                        case 5: // View Book Status
                            System.out.println("\n--- View Book Status ---");
                            System.out.print("Enter ISBN of book to view status: ");
                            String statusIsbn = scanner.nextLine().trim();
                             // Basic input validation
                             if (statusIsbn.isEmpty()) {
                                System.err.println("Error: ISBN cannot be empty.");
                                break;
                            }
                            library.displayBookStatus(statusIsbn);
                            break; // End of case 5

                        case 6: // View All Books
                            library.displayAllBooks();
                            break; // End of case 6

                        case 7: // Exit
                            System.out.println("Exiting Library System. Goodbye!");
                            break; // End of case 7

                        default:
                            // Handle invalid menu choices
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 7.");
                    }
                } catch (InputMismatchException e) {
                    // Catch non-integer input for the menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent an infinite loop
                    choice = -1; // Reset choice to ensure loop continues
                } catch (Exception e) {
                    // Catch any other unexpected runtime exceptions during an operation
                    System.err.println("An unexpected error occurred during operation: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for detailed debugging information
                }
            } // End of while loop
        } catch (Exception e) {
             // Catch any exceptions that occur before or outside the main loop's inner try-catch
             System.err.println("A critical error occurred: " + e.getMessage());
             // e.printStackTrace(); // Uncomment for detailed debugging information
        } finally {
            // Ensure the scanner resource is closed regardless of exceptions
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed."); // Optional: confirmation message
            }
        }
    }

    /**
     * Prints the main menu options to the console (System.out).
     */
    private static void printMenu() {
        System.out.println("\n--- Library Menu ---");
        System.out.println("1. Add Book");
        System.out.println("2. Checkout Book");
        System.out.println("3. Return Book");
        System.out.println("4. Place Hold");
        System.out.println("5. View Book Status");
        System.out.println("6. View All Books");
        System.out.println("7. Exit");
        System.out.println("--------------------");
    }
}
