/*
 * Exam Question #405
 * Generated on: 2025-05-11 23:06:21
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Warehouse Inventory Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified inventory management system for a small warehouse. The system needs to track items currently in stock and process incoming shipments. Incoming shipments arrive as individual items which are placed in a queue to await processing. When an item is processed from the queue, it is added to the main inventory.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this warehouse system. Your solution must adhere to the following:
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to hold incoming items waiting to be processed (FIFO order).
 *     *   Use `java.util.List` (implemented by `java.util.ArrayList`) to store the current warehouse inventory.
 * 2.  **Input/Output:**
 *     *   Use `java.util.Scanner` to read user commands and item details from the console.
 *     *   Use `System.out` for displaying the menu, successful operations, and inventory listings.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, processing an empty queue, attempting to add invalid quantities).
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle different user commands (Add Shipment, Process Shipment, View Inventory, Exit).
 *     *   Implement a main loop that continues until the user chooses to exit.
 * 4.  **Error Handling:**
 *     *   Implement input validation for quantities (must be positive integers).
 *     *   Handle `InputMismatchException` when reading integer input.
 *     *   Implement class-wide exception handling using a `try-catch` block to catch unexpected errors during the system's operation.
 * 5.  **Object-Oriented Design:**
 *     *   Create a class `InventoryItem` to represent an item with a `name` (String) and `quantity` (int). Use private fields and public getters.
 *     *   Create a class `WarehouseManager` that encapsulates the `Queue` and `List` and contains methods for adding shipments, processing shipments, viewing inventory, and running the main system loop. Use private fields and public methods.
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (basic Javadoc is encouraged).
 *     *   Ensure proper encapsulation.
 * 
 * **Functionality Details:**
 * 
 * *   **Add Shipment Item:** Prompts the user for an item name and quantity. Creates an `InventoryItem` object and adds it to the incoming shipments queue. Validates that the quantity is a positive integer.
 * *   **Process Next Shipment Item:** Takes the next item from the front of the incoming shipments queue. If the queue is empty, displays an error. If an item is successfully retrieved, it checks if an item with the same name already exists in the main inventory list.
 *     *   If it exists, update the quantity of the existing item in the inventory list.
 *     *   If it does not exist, add the new item to the inventory list.
 *     *   Display a message indicating which item was processed.
 * *   **View Inventory:** Displays the current items and their quantities in the main inventory list. If the inventory is empty, display a message indicating that.
 * *   **Exit:** Terminates the program.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu of options. Based on the user's choice, it should perform the requested action, display relevant output (`System.out`) or error messages (`System.err`), and then display the menu again (unless exiting).
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 1
 * Enter item name: Laptop
 * Enter quantity: 5
 * Added Laptop (5) to incoming shipments.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 1
 * Enter item name: Mouse
 * Enter quantity: 10
 * Added Mouse (10) to incoming shipments.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 3
 * Current Inventory:
 * Inventory is empty.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 2
 * Processing shipment: Laptop (5)
 * Laptop (5) added to inventory.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 3
 * Current Inventory:
 * - Laptop: 5
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 2
 * Processing shipment: Mouse (10)
 * Mouse (10) added to inventory.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 3
 * Current Inventory:
 * - Laptop: 5
 * - Mouse: 10
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 1
 * Enter item name: Laptop
 * Enter quantity: 3
 * Added Laptop (3) to incoming shipments.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 2
 * Processing shipment: Laptop (3)
 * Laptop (3) quantity updated in inventory.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 3
 * Current Inventory:
 * - Laptop: 8
 * - Mouse: 10
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 5
 * Invalid choice. Please enter a number between 1 and 4.
 * 
 * --- Warehouse Inventory System ---
 * Choose an option:
 * 1. Add Incoming Shipment Item
 * 2. Process Next Shipment Item
 * 3. View Current Inventory
 * 4. Exit
 * Enter choice: 4
 * Exiting system.
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * The provided solution implements a simple Warehouse Inventory Management System demonstrating the required Java concepts and best practices.
 * 
 * **Core Components Used:**
 * 
 * 1.  **`java.util.Queue`**: The `incomingShipmentsQueue` is declared as a `Queue<InventoryItem>` and implemented using `java.util.LinkedList`. This correctly models the scenario where incoming items are processed in the order they arrive (First-In, First-Out). The `offer()` method is used to add items to the tail, and `poll()` is used to retrieve and remove items from the head.
 * 2.  **`java.util.List`**: The `currentInventoryList` is declared as a `List<InventoryItem>` and implemented using `java.util.ArrayList`. This provides a dynamic array structure suitable for storing and iterating through the current inventory items.
 * 3.  **`java.util.ArrayList`**: Used as the concrete implementation for the `List` interface (`currentInventoryList`).
 * 4.  **`java.util.Scanner`**: An instance of `Scanner` is used within the `WarehouseManager` class to read user input (menu choices, item names, quantities) from `System.in`.
 * 5.  **`switch` statement**: The `runSystem` method uses a `switch` statement based on the user's integer input to direct the program flow to the corresponding action (Add Shipment, Process Shipment, View Inventory, Exit).
 * 6.  **`System.err`**: Used specifically for printing error messages, such as invalid input, attempting to process an empty queue, invalid quantity, or unexpected exceptions. This separates error output from normal program output.
 * 7.  **`System.out`**: Used for all normal program output, including the menu display, prompts for input, success messages, and the inventory listing.
 * 8.  **Class-wide exception handling with `try-catch`**: The main `runSystem` method's `while` loop is wrapped in a `try-catch(Exception e)` block. This serves as a catch-all for any unexpected runtime errors that might occur within the system's operation, preventing the program from crashing abruptly and providing a basic error report. Additionally, specific `try-catch(InputMismatchException)` blocks are used within the `switch` cases to handle invalid non-integer input when an integer is expected. A `finally` block ensures the `Scanner` resource is closed.
 * 
 * **Object-Oriented Design and Best Practices:**
 * 
 * *   **`InventoryItem` Class**: A dedicated class encapsulates the data for an inventory item (name and quantity). Fields are `private`, and public `getName()` and `getQuantity()` methods provide controlled access (encapsulation). An `addQuantity` method modifies the internal state safely. The `toString()` method provides a convenient way to represent the item for printing.
 * *   **`WarehouseManager` Class**: This class acts as the controller for the system. It holds the data structures (`Queue` and `List`) as `private` fields, ensuring they can only be accessed and modified through the class's public methods (`addShipmentItem`, `processNextShipmentItem`, `viewInventory`, `runSystem`). This demonstrates good encapsulation and separation of concerns.
 * *   **Meaningful Names**: Variables like `incomingShipmentsQueue`, `currentInventoryList`, `itemToProcess`, `itemName`, `itemQuantity` are clearly named, enhancing code readability. Methods like `addShipmentItem`, `processNextShipmentItem`, `viewInventory`, `runSystem`, `displayMenu` are also descriptive.
 * *   **Comments and Documentation**: Basic Javadoc comments are included for classes and methods, explaining their purpose and parameters. Inline comments explain specific logic where necessary.
 * *   **Input Validation**: The `addShipmentItem` method explicitly checks if the provided quantity is positive. The `runSystem` method uses `try-catch(InputMismatchException)` to handle cases where the user enters non-numeric input when a number is expected, preventing program crashes and prompting the user to try again.
 * *   **Error Handling**: Specific error messages are printed to `System.err` for various failure conditions (empty queue, invalid quantity, invalid menu choice, input type mismatch, unexpected errors).
 * *   **Clean Code Structure**: The code is organized into logical methods within the `WarehouseManager` class, and the `InventoryItem` class is separate, promoting modularity. The main loop in `runSystem` clearly separates input reading, command processing (`switch`), and action execution.
 * 
 * **Functionality Implementation:**
 * 
 * *   **Add Shipment Item**: Reads name and quantity, validates quantity, creates `InventoryItem`, and adds to the queue using `offer()`.
 * *   **Process Next Shipment Item**: Uses `poll()` to get the next item. If `poll()` returns `null`, the queue is empty. Otherwise, it iterates through the `currentInventoryList` to find a matching item by name (case-insensitive comparison using `equalsIgnoreCase`). If found, it calls `addQuantity` on the existing item. If not found, it adds the new item to the list.
 * *   **View Inventory**: Iterates through the `currentInventoryList` and prints each item's details using the `InventoryItem`'s `toString()` method. Handles the case of an empty inventory.
 * *   **Run System**: Manages the main loop, displays the menu, reads user input with validation for integer format, and uses the `switch` statement to call the appropriate `WarehouseManager` methods. Includes the top-level `try-catch` for robustness and a `finally` block to close the scanner.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, control flow, error handling, and object-oriented principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents an item in the warehouse inventory or an incoming shipment.
 */
class InventoryItem {
    private String name;
    private int quantity;

    /**
     * Constructs a new InventoryItem.
     * @param name The name of the item.
     * @param quantity The quantity of the item.
     */
    public InventoryItem(String name, int quantity) {
        this.name = name;
        this.quantity = quantity;
    }

    /**
     * Gets the name of the item.
     * @return The item name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the quantity of the item.
     * @return The item quantity.
     */
    public int getQuantity() {
        return quantity;
    }

    /**
     * Updates the quantity of the item by adding the specified amount.
     * @param amount The amount to add to the quantity.
     */
    public void addQuantity(int amount) {
        if (amount > 0) {
            this.quantity += amount;
        } else {
            System.err.println("Error: Cannot add non-positive quantity.");
        }
    }

    @Override
    public String toString() {
        return "- " + name + ": " + quantity;
    }
}

/**
 * Manages the warehouse inventory and incoming shipments.
 */
public class WarehouseManager {
    // Queue to hold incoming shipment items waiting to be processed (FIFO)
    private Queue<InventoryItem> incomingShipmentsQueue;
    // List to hold items currently in the main inventory
    private List<InventoryItem> currentInventoryList;
    private Scanner scanner;

    /**
     * Constructs a new WarehouseManager.
     * Initializes the data structures and the scanner.
     */
    public WarehouseManager() {
        incomingShipmentsQueue = new LinkedList<>(); // LinkedList implements Queue
        currentInventoryList = new ArrayList<>(); // ArrayList implements List
        scanner = new Scanner(System.in);
    }

    /**
     * Adds a new item to the incoming shipments queue.
     * Validates that the quantity is positive.
     * @param name The name of the item.
     * @param quantity The quantity of the item.
     */
    public void addShipmentItem(String name, int quantity) {
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Item name cannot be empty.");
            return;
        }
        if (quantity <= 0) {
            System.err.println("Error: Quantity must be a positive integer.");
            return;
        }
        InventoryItem newItem = new InventoryItem(name.trim(), quantity);
        incomingShipmentsQueue.offer(newItem); // offer is preferred over add for queues
        System.out.println("Added " + newItem.getName() + " (" + newItem.getQuantity() + ") to incoming shipments.");
    }

    /**
     * Processes the next item from the incoming shipments queue.
     * Adds or updates the item in the main inventory.
     */
    public void processNextShipmentItem() {
        InventoryItem itemToProcess = incomingShipmentsQueue.poll(); // Retrieves and removes the head of the queue

        if (itemToProcess == null) {
            System.err.println("Error: No incoming shipment items to process.");
            return;
        }

        System.out.println("Processing shipment: " + itemToProcess.getName() + " (" + itemToProcess.getQuantity() + ")");

        // Check if item already exists in inventory
        boolean found = false;
        for (InventoryItem existingItem : currentInventoryList) {
            if (existingItem.getName().equalsIgnoreCase(itemToProcess.getName())) {
                existingItem.addQuantity(itemToProcess.getQuantity());
                System.out.println(itemToProcess.getName() + " (" + itemToProcess.getQuantity() + ") quantity updated in inventory.");
                found = true;
                break; // Found and updated, exit loop
            }
        }

        // If item not found, add it as a new item
        if (!found) {
            // Create a new item for the inventory list (optional, could reuse itemToProcess but cloning is safer)
            // For this simple case, reusing is fine as itemToProcess is no longer needed in the queue.
            currentInventoryList.add(itemToProcess);
            System.out.println(itemToProcess.getName() + " (" + itemToProcess.getQuantity() + ") added to inventory.");
        }
    }

    /**
     * Displays the current contents of the main inventory.
     */
    public void viewInventory() {
        System.out.println("Current Inventory:");
        if (currentInventoryList.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            for (InventoryItem item : currentInventoryList) {
                System.out.println(item); // Uses InventoryItem's toString()
            }
        }
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("\n--- Warehouse Inventory System ---");
        System.out.println("Choose an option:");
        System.out.println("1. Add Incoming Shipment Item");
        System.out.println("2. Process Next Shipment Item");
        System.out.println("3. View Current Inventory");
        System.out.println("4. Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Runs the main system loop, handling user interaction.
     * Includes class-wide exception handling.
     */
    public void runSystem() {
        boolean running = true;

        // Class-wide exception handling for the main system loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Go back to the start of the loop
                }

                switch (choice) {
                    case 1: // Add Incoming Shipment Item
                        System.out.print("Enter item name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter quantity: ");
                        int quantity = -1;
                        try {
                            quantity = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            addShipmentItem(name, quantity);
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid quantity. Please enter a number.");
                            scanner.nextLine(); // Consume invalid input
                        }
                        break;

                    case 2: // Process Next Shipment Item
                        processNextShipmentItem();
                        break;

                    case 3: // View Current Inventory
                        viewInventory();
                        break;

                    case 4: // Exit
                        System.out.println("Exiting system.");
                        running = false;
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during system operation
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed when the system stops running
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the Warehouse Inventory System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        WarehouseManager manager = new WarehouseManager();
        manager.runSystem();
    }
}
