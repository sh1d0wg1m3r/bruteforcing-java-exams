/*
 * Exam Question #720
 * Generated on: 2025-05-12 16:30:42
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam: Clinic Patient Management System
 * 
 * **Objective:** Design and implement a simple command-line based patient management system for a small clinic. The system should manage a list of all registered patients and a queue of patients currently waiting to be seen.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (int), `name` (String), and `condition` (String, e.g., "Fever", "Headache"). Include a constructor and public getter methods for these fields. Implement a `toString()` method for easy printing of patient details. Ensure unique IDs are generated for each new patient (e.g., using a static counter).
 * 2.  **System Class:** Create a `ClinicManagementSystem` class that contains the main logic.
 *     *   It must have a `private Queue<Patient>` to store patients currently waiting. Use `java.util.LinkedList` as the implementation for the `Queue`.
 *     *   It must have a `private List<Patient>` to store *all* registered patients in the system. Use `java.util.ArrayList` as the implementation, but declare the field using the `List` interface type.
 *     *   Include a `Scanner` for user input.
 * 3.  **Functionality (Menu-driven):** The system should present a menu to the user and perform actions based on their choice. Use a `switch` statement for menu handling. The menu options should be:
 *     *   `1. Register New Patient`: Prompts for patient name and condition, creates a `Patient` object with a unique ID, and adds it to the `registeredPatients` list.
 *     *   `2. List All Registered Patients`: Prints details of all patients in the `registeredPatients` list.
 *     *   `3. Add Patient to Waiting Queue`: Prompts for a registered patient's ID. If the patient exists in `registeredPatients`, add them to the `waitingQueue`. If not found, display an error.
 *     *   `4. See Next Patient`: Removes the patient at the front of the `waitingQueue` and prints their details. If the queue is empty, display a message indicating no patients are waiting.
 *     *   `5. List Waiting Queue`: Prints details of all patients currently in the `waitingQueue`, in the order they will be seen.
 *     *   `6. Exit`: Terminates the program.
 * 4.  **Input Handling:** Use `Scanner` to read user input for menu choices, patient details, and patient IDs.
 * 5.  **Output:**
 *     *   Use `System.out` for all normal output (menu, patient details, success messages, "no patients waiting" message).
 *     *   Use `System.err` for all error messages (e.g., patient not found, invalid input format, unexpected errors).
 * 6.  **Exception Handling:** Implement robust exception handling using `try-catch` blocks.
 *     *   Handle potential `java.util.InputMismatchException` when reading integer inputs (like menu choice or patient ID).
 *     *   Include a general `catch (Exception e)` block in the main application loop to catch any unexpected errors and print an error message using `System.err`.
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation (private fields, public getters/methods).
 *     *   Perform basic input validation (e.g., check if patient ID exists before adding to queue).
 * 
 * **Expected Output Structure:**
 * 
 * ```
 * Clinic Management System
 * Choose an option:
 * 1. Register New Patient
 * 2. List All Registered Patients
 * 3. Add Patient to Waiting Queue
 * 4. See Next Patient
 * 5. List Waiting Queue
 * 6. Exit
 * Enter choice: [User Input]
 * 
 * // Based on choice, output follows:
 * 
 * // For Register:
 * Patient [ID] registered: Name: [Name], Condition: [Condition]
 * 
 * // For List Registered:
 * --- Registered Patients ---
 * ID: [ID], Name: [Name], Condition: [Condition]
 * ...
 * ---------------------------
 * 
 * // For Add to Waiting Queue (Success):
 * Patient [ID] added to waiting queue.
 * // For Add to Waiting Queue (Not Found):
 * Error: Patient with ID [ID] not found. (Printed to System.err)
 * // For Add to Waiting Queue (Invalid Input):
 * Error: Invalid input. Please enter a valid patient ID. (Printed to System.err)
 * 
 * // For See Next Patient (Success):
 * Seeing next patient: ID: [ID], Name: [Name], Condition: [Condition]
 * // For See Next Patient (Empty Queue):
 * No patients currently waiting. (Printed to System.out)
 * 
 * // For List Waiting Queue:
 * --- Patients in Waiting Queue ---
 * ID: [ID], Name: [Name], Condition: [Condition]
 * ...
 * -----------------------------------
 * // For List Waiting Queue (Empty):
 * Waiting queue is empty.
 * 
 * // For Exit:
 * Exiting system.
 * 
 * // For Invalid Menu Choice:
 * Error: Invalid choice. Please enter a number between 1 and 6. (Printed to System.err)
 * 
 * // For General Exception:
 * An unexpected error occurred: [Error details] (Printed to System.err)
 * ```
 * 
 * **Constraints:**
 * 
 * *   You must use *all* the specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   The solution should be contained within the `ClinicManagementSystem` and `Patient` classes.
 * 
 * ---
 *
 * EXPLANATION:
 * This solution implements the `ClinicManagementSystem` based on the requirements, demonstrating the usage of all specified Java components in a practical scenario.
 * 
 * 1.  **`Patient` Class:** This is a simple Plain Old Java Object (POJO) representing a patient. It uses `private` fields (`patientId`, `name`, `condition`) and `public` getter methods (`getPatientId`, `getName`, `getCondition`) to enforce encapsulation. A `static` counter `nextId` ensures each new `Patient` object created gets a unique ID, simulating a common requirement in such systems. The `toString()` method provides a convenient way to print patient details.
 * 
 * 2.  **`ClinicManagementSystem` Class:** This class orchestrates the system's operations.
 *     *   **Data Structures:**
 *         *   `private Queue<Patient> waitingQueue = new LinkedList<>();`: A `Queue` is used for the waiting list because it naturally follows the First-In, First-Out (FIFO) principle, meaning the patient who has been waiting the longest is seen next. `LinkedList` is a common implementation of the `Queue` interface.
 *         *   `private List<Patient> registeredPatients = new ArrayList<>();`: A `List` (specifically implemented as `ArrayList`) is used to store *all* patients ever registered. `ArrayList` provides dynamic resizing and efficient access by index, although in this specific case, we primarily iterate or search by ID. Using the `List` interface type for the field demonstrates polymorphism and good practice.
 *     *   **`Scanner`:** `private Scanner scanner = new Scanner(System.in);` is used to read input from the console (`System.in`). It's initialized once and reused. The `scanner.nextLine()` calls after `scanner.nextInt()` are crucial to consume the leftover newline character, preventing input issues in subsequent `nextLine()` calls.
 *     *   **`run()` Method:** This method contains the main application loop (`while (choice != 6)`), repeatedly displaying the menu and processing user input until the user chooses to exit.
 *     *   **`printMenu()`:** A helper method to display the available options to the user using `System.out`.
 *     *   **`switch` Statement:** The core of the `run()` method uses a `switch` statement based on the user's integer input (`choice`). This efficiently directs the program flow to the appropriate method for each menu option.
 *     *   **Functional Methods (`registerNewPatient`, `listRegisteredPatients`, etc.):** Each menu option corresponds to a private method in `ClinicManagementSystem`.
 *         *   `registerNewPatient()` reads input, creates a `Patient` object, and adds it to the `registeredPatients` `List`.
 *         *   `listRegisteredPatients()` iterates through the `registeredPatients` `List` and prints details using `System.out`.
 *         *   `addToWaitingQueue()` prompts for an ID, uses a helper method `findPatientById` to search the `registeredPatients` `List`, and if found, adds the `Patient` object to the `waitingQueue` using `offer()`. Error messages for invalid ID or patient not found are printed to `System.err`.
 *         *   `seeNextPatient()` uses `waitingQueue.poll()` to retrieve and remove the head of the `Queue`. It checks if the result is `null` (indicating an empty queue) and prints the appropriate message to `System.out`.
 *         *   `listWaitingQueue()` iterates through the `waitingQueue` (without removing elements) and prints the patients in order using `System.out`.
 *     *   **`findPatientById()`:** A private helper method that demonstrates searching within the `registeredPatients` `List` based on the patient ID.
 *     *   **`System.out` and `System.err`:** Normal informational messages, menu prompts, and successful operation confirmations are printed using `System.out`. Error messages resulting from invalid user input or logical errors (like patient not found) are specifically directed to `System.err`, which is standard practice for distinguishing errors from normal output.
 *     *   **`try-catch` Exception Handling:**
 *         *   A `try-catch (InputMismatchException e)` block is wrapped around the `scanner.nextInt()` call in the main loop to catch cases where the user enters non-integer input for the menu choice. An error message is printed to `System.err`, and the invalid input is consumed to prevent an infinite loop.
 *         *   A similar `try-catch (InputMismatchException e)` is used within `addToWaitingQueue` to handle non-integer input for the patient ID.
 *         *   A general `catch (Exception e)` block is included in the main `run()` method loop. This serves as a catch-all for any other unexpected runtime errors that might occur, printing an error message and the stack trace to `System.err` for debugging purposes. This demonstrates robust, class-wide exception handling within the operational loop.
 * 
 * 3.  **Best Practices:** The code adheres to best practices by using `private` fields and `public` methods, providing meaningful names (`waitingQueue`, `registeredPatients`, `registerNewPatient`, `findPatientById`), including comments for clarity, performing basic input validation (checking for empty strings, handling `InputMismatchException`), and structuring the code logically into classes and methods. The `Scanner` is closed upon exiting the application.
 * 
 * This solution effectively integrates all required Java components into a functional and reasonably robust application, simulating a real-world task and demonstrating key object-oriented and error-handling principles.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the clinic system
class Patient {
    private static int nextId = 1; // Static counter for unique patient IDs

    private int patientId;
    private String name;
    private String condition;

    // Constructor
    public Patient(String name, String condition) {
        this.patientId = nextId++; // Assign unique ID and increment counter
        this.name = name;
        this.condition = condition;
    }

    // Public getter methods
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    // Override toString for easy printing
    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name + ", Condition: " + condition;
    }
}

// Manages patients and the waiting queue
public class ClinicManagementSystem {

    // Required data structures
    private Queue<Patient> waitingQueue; // Patients waiting to be seen (FIFO)
    private List<Patient> registeredPatients; // All registered patients (dynamic list)
    private Scanner scanner; // For user input

    // Constructor
    public ClinicManagementSystem() {
        this.waitingQueue = new LinkedList<>(); // Use LinkedList as Queue implementation
        this.registeredPatients = new ArrayList<>(); // Use ArrayList as List implementation
        this.scanner = new Scanner(System.in);
    }

    // Main method to run the system
    public static void main(String[] args) {
        ClinicManagementSystem system = new ClinicManagementSystem();
        system.run(); // Start the system
    }

    // Main system loop
    public void run() {
        System.out.println("Clinic Management System");
        int choice = 0;
        while (choice != 6) {
            printMenu();
            try {
                System.out.print("Enter choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Using switch statement for menu navigation
                switch (choice) {
                    case 1:
                        registerNewPatient();
                        break;
                    case 2:
                        listRegisteredPatients();
                        break;
                    case 3:
                        addToWaitingQueue();
                        break;
                    case 4:
                        seeNextPatient();
                        break;
                    case 5:
                        listWaitingQueue();
                        break;
                    case 6:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        // Using System.err for invalid input error
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                // Handling invalid integer input using System.err
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = 0; // Reset choice to stay in loop
            } catch (Exception e) {
                // Catch-all for any unexpected errors using System.err
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace to System.err
            }
            System.out.println(); // Add a newline for better readability between actions
        }
        scanner.close(); // Close the scanner when exiting
    }

    // Prints the main menu options
    private void printMenu() {
        System.out.println("Choose an option:");
        System.out.println("1. Register New Patient");
        System.out.println("2. List All Registered Patients");
        System.out.println("3. Add Patient to Waiting Queue");
        System.out.println("4. See Next Patient");
        System.out.println("5. List Waiting Queue");
        System.out.println("6. Exit");
    }

    // Option 1: Register a new patient
    private void registerNewPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        System.out.print("Enter patient condition: ");
        String condition = scanner.nextLine();

        // Basic validation
        if (name.trim().isEmpty() || condition.trim().isEmpty()) {
             System.err.println("Error: Name and condition cannot be empty.");
             return;
        }

        Patient newPatient = new Patient(name, condition);
        registeredPatients.add(newPatient); // Add to the list of all registered patients
        System.out.println("Patient " + newPatient.getPatientId() + " registered: " + newPatient); // Using System.out for success
    }

    // Option 2: List all registered patients
    private void listRegisteredPatients() {
        System.out.println("--- Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            // Iterating through the List (ArrayList)
            for (Patient patient : registeredPatients) {
                System.out.println(patient); // Using System.out
            }
        }
        System.out.println("---------------------------");
    }

    // Option 3: Add a registered patient to the waiting queue
    private void addToWaitingQueue() {
        System.out.print("Enter patient ID to add to waiting queue: ");
        try {
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Find the patient in the registeredPatients list
            Patient patientToAdd = findPatientById(patientId);

            if (patientToAdd != null) {
                // Add to the waiting queue (Queue)
                waitingQueue.offer(patientToAdd); // offer is generally preferred over add in queues
                System.out.println("Patient " + patientId + " added to waiting queue."); // Using System.out
            } else {
                // Patient not found - using System.err
                System.err.println("Error: Patient with ID " + patientId + " not found.");
            }
        } catch (InputMismatchException e) {
            // Handling invalid integer input for ID using System.err
            System.err.println("Error: Invalid input. Please enter a valid patient ID.");
            scanner.nextLine(); // Consume the invalid input
        }
    }

    // Helper method to find a patient by ID in the registered list
    private Patient findPatientById(int id) {
        // Searching through the List (ArrayList)
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == id) {
                return patient;
            }
        }
        return null; // Return null if patient is not found
    }

    // Option 4: See the next patient from the waiting queue
    private void seeNextPatient() {
        // Remove and retrieve the head of the queue (FIFO)
        Patient nextPatient = waitingQueue.poll(); // poll returns null if queue is empty

        if (nextPatient != null) {
            System.out.println("Seeing next patient: " + nextPatient); // Using System.out
        } else {
            System.out.println("No patients currently waiting."); // Using System.out
        }
    }

    // Option 5: List all patients in the waiting queue
    private void listWaitingQueue() {
        System.out.println("--- Patients in Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Waiting queue is empty."); // Using System.out
        } else {
            // Iterate through the Queue (LinkedList)
            // Note: Iterating a queue doesn't remove elements
            for (Patient patient : waitingQueue) {
                System.out.println(patient); // Using System.out
            }
        }
        System.out.println("-----------------------------------");
    }
}
