/*
 * Exam Question #854
 * Generated on: 2025-05-12 16:50:51
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified system for managing patient appointments at a small clinic. The system needs to handle patient registration, appointment requests, and processing patients from a waiting list.
 * 
 * **Requirements:**
 * 
 * Implement a Java application that fulfills the following:
 * 
 * 1.  **Patient Registration:** Allow new patients to register by providing their name. Registered patients are stored in a list. Patient names do not need to be unique for this exercise.
 * 2.  **Appointment Request:** A registered patient can request an appointment. This request adds the patient to a waiting list queue.
 * 3.  **Process Next Appointment:** Simulate a doctor seeing the next patient. This should remove the patient who has been waiting the longest from the waiting list queue.
 * 4.  **View Waiting List:** Display the names of all patients currently in the waiting list queue, in the order they will be seen.
 * 5.  **View Registered Patients:** Display the names of all registered patients.
 * 6.  **Interactive Menu:** Provide a command-line interface with a menu allowing the user to select these actions.
 * 7.  **Input Handling:** Use `java.util.Scanner` to read user input for menu choices and patient names.
 * 8.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 9.  **Data Structures:**
 *     *   Use `java.util.Queue` to manage the waiting list (patients waiting for an appointment).
 *     *   Use `java.util.ArrayList` to store the list of registered patients.
 *     *   Use the `java.util.List` interface type when declaring variables that hold the registered patients list.
 * 10. **Output:**
 *     *   Use `System.out` for normal output (menu, prompts, successful operations, list displays).
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, patient not registered when requesting appointment, trying to process appointment from an empty waiting list, invalid input).
 * 11. **Exception Handling:** Implement class-wide or comprehensive `try-catch` blocks to handle potential runtime errors gracefully, particularly around user input parsing (`InputMismatchException`) and unexpected states (though Queue operations like `poll()` and `peek()` are safer than `remove()` or `element()`, consider a general catch for the main loop).
 * 12. **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Include basic input validation (e.g., patient name not empty).
 *     *   Add appropriate comments and documentation (e.g., Javadoc for methods).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept integer choices, and perform the corresponding actions, printing results or errors to the console using `System.out` or `System.err` as appropriate. Example interaction might look like:
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Alice registered successfully.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Bob
 * Bob registered successfully.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 2
 * Enter patient name: Charlie
 * Error: Patient 'Charlie' is not registered.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 2
 * Enter patient name: Alice
 * Alice added to the waiting list.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 4
 * --- Waiting List ---
 * 1. Alice
 * --------------------
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 3
 * Processing appointment for Alice.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 3
 * Error: Waiting list is empty. No appointments to process.
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 5
 * --- Registered Patients ---
 * Alice
 * Bob
 * -------------------------
 * --- Hospital Appointment System ---
 * 1. Register Patient
 * 2. Request Appointment
 * 3. Process Next Appointment
 * 4. View Waiting List
 * 5. View Registered Patients
 * 6. Exit
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Your code should be a single `.java` file containing the `HospitalScheduler` class and the `main` method to run the application.
 * 
 * **Time Limit:** 45-60 minutes
 *
 * EXPLANATION:
 * This solution implements a `HospitalScheduler` class to manage patient registration and appointment scheduling using a waiting list.
 * 
 * 1.  **Class Structure and Encapsulation:** The `HospitalScheduler` class encapsulates the data (`waitingList`, `registeredPatients`) using `private` access modifiers. Public methods (`registerPatient`, `requestAppointment`, `processNextAppointment`, `viewWaitingList`, `viewRegisteredPatients`, `closeScanner`) provide controlled access to the data, adhering to encapsulation principles.
 * 
 * 2.  **Data Structures (`Queue`, `List`, `ArrayList`):**
 *     *   `waitingList`: Declared as `private Queue<String>`. A `LinkedList` is used as the concrete implementation because it efficiently supports adding to the end and removing from the beginning, which are the core operations for a Queue (FIFO - First-In, First-Out). It stores patient names (Strings) waiting for an appointment.
 *     *   `registeredPatients`: Declared as `private List<String>`. `List` is the interface, promoting flexibility. `ArrayList` is used as the concrete implementation, suitable for storing a dynamic list of registered patient names where efficient access by index or checking for containment is needed.
 * 
 * 3.  **User Input (`Scanner`):** A `Scanner` object (`scanner`) is used in the `main` method to read input from `System.in`. It's declared as a class member and initialized in the constructor to be accessible by methods if needed (though in this structure, primarily used in `main`). The `nextLine()` call after `nextInt()` is crucial to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls. The `scanner` is closed in a `finally` block to ensure resource cleanup.
 * 
 * 4.  **Flow Control (`switch`):** The `main` method uses a `while` loop to keep the application running until the user chooses to exit. Inside the loop, a `switch` statement is used to direct the program flow based on the user's integer input, calling the appropriate method for each menu option. A `default` case handles invalid integer inputs.
 * 
 * 5.  **Output (`System.out`, `System.err`):**
 *     *   `System.out.println()` is used for displaying the menu, prompts, success messages (like successful registration or adding to the queue), and the contents of the lists.
 *     *   `System.err.println()` is used specifically for printing error messages, such as invalid menu choices, patient not being registered, or attempting to process an appointment when the waiting list is empty.
 * 
 * 6.  **Exception Handling (`try-catch`):**
 *     *   A comprehensive `try-catch(Exception e)` block is placed around the main `while` loop in the `main` method. This serves as a safety net to catch any unexpected exceptions that might occur during the program's execution, providing a form of "class-wide" handling for the core operational loop. It prints the error message and stack trace to `System.err`.
 *     *   A more specific `try-catch(InputMismatchException e)` block is included *inside* the loop, specifically around the `scanner.nextInt()` call. This is essential for handling cases where the user enters non-integer input when prompted for a menu choice. It prints an error to `System.err` and consumes the invalid input from the scanner to prevent an infinite loop.
 * 
 * 7.  **Method Implementation and Logic:**
 *     *   `registerPatient`: Adds the provided name to the `registeredPatients` `ArrayList`. Includes basic validation for empty names.
 *     *   `requestAppointment`: Checks if the provided name exists in `registeredPatients` using `contains()`. If found, the name is added to the `waitingList` `Queue` using `offer()` (which is preferred over `add()` in queues when you don't want an exception if adding fails, though unlikely here). If not found, an error is printed to `System.err`.
 *     *   `processNextAppointment`: Removes the head of the `waitingList` `Queue` using `poll()`. `poll()` is safe because it returns `null` if the queue is empty, allowing a check to print an appropriate message to `System.err`. If a patient is retrieved, a success message is printed to `System.out`.
 *     *   `viewWaitingList`: Iterates through the `waitingList` using a for-each loop (which doesn't remove elements) and prints each patient's name. Checks if the queue is empty first.
 *     *   `viewRegisteredPatients`: Iterates through the `registeredPatients` `List` and prints each patient's name. Checks if the list is empty first.
 *     *   `displayMenu`: A helper method to print the menu options clearly using `System.out`.
 * 
 * 8.  **Best Practices:** Meaningful names (`waitingList`, `requestAppointment`, etc.), comments (including Javadoc for methods), basic input validation (checking for empty names, checking registration status), and separation of concerns (data handling in `HospitalScheduler` methods, user interaction loop in `main`) are incorporated. Using `List` interface for `registeredPatients` is also a good practice.
 * 
 * This solution effectively integrates all the required Java components into a functional, albeit simplified, application that simulates a real-world scenario while demonstrating key programming concepts and best practices suitable for an advanced exam.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * A simplified system for managing hospital patient appointments and a waiting list.
 * Demonstrates usage of Queue, List, ArrayList, Scanner, switch, System.out, System.err, and try-catch.
 */
public class HospitalScheduler {

    private Queue<String> waitingList;
    private List<String> registeredPatients;
    private Scanner scanner;

    /**
     * Constructs a new HospitalScheduler.
     * Initializes the waiting list (Queue) and registered patients list (ArrayList).
     */
    public HospitalScheduler() {
        this.waitingList = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.registeredPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Request Appointment");
        System.out.println("3. Process Next Appointment");
        System.out.println("4. View Waiting List");
        System.out.println("5. View Registered Patients");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Registers a new patient.
     *
     * @param name The name of the patient to register.
     */
    public void registerPatient(String name) {
        if (name == null || name.trim().isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        registeredPatients.add(name.trim());
        System.out.println(name.trim() + " registered successfully.");
    }

    /**
     * Adds a registered patient to the appointment waiting list.
     *
     * @param name The name of the patient requesting an appointment.
     */
    public void requestAppointment(String name) {
        if (name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient name cannot be empty.");
             return;
        }
        String patientName = name.trim();
        if (registeredPatients.contains(patientName)) {
            waitingList.offer(patientName); // offer is safer than add, returns false on failure
            System.out.println(patientName + " added to the waiting list.");
        } else {
            System.err.println("Error: Patient '" + patientName + "' is not registered.");
        }
    }

    /**
     * Processes the next patient in the waiting list (removes from the front of the queue).
     */
    public void processNextAppointment() {
        String nextPatient = waitingList.poll(); // poll is safer than remove, returns null if queue is empty
        if (nextPatient != null) {
            System.out.println("Processing appointment for " + nextPatient + ".");
        } else {
            System.err.println("Error: Waiting list is empty. No appointments to process.");
        }
    }

    /**
     * Displays the current patients in the waiting list.
     */
    public void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            int i = 1;
            // Iterate through the queue without removing elements
            for (String patient : waitingList) {
                System.out.println(i++ + ". " + patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays all registered patients.
     */
    public void viewRegisteredPatients() {
        System.out.println("--- Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (String patient : registeredPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Closes the scanner resource.
     */
    public void closeScanner() {
        if (scanner != null) {
            scanner.close();
        }
    }

    /**
     * The main method to run the Hospital Appointment System.
     * Handles user interaction loop and calls appropriate methods.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        int choice = -1;

        // Comprehensive try-catch block for the main application loop
        try {
            while (choice != 6) {
                scheduler.displayMenu();

                try {
                    choice = scheduler.scanner.nextInt();
                    scheduler.scanner.nextLine(); // Consume newline left-over after reading int

                    switch (choice) {
                        case 1:
                            System.out.print("Enter patient name: ");
                            String regName = scheduler.scanner.nextLine();
                            scheduler.registerPatient(regName);
                            break;
                        case 2:
                            System.out.print("Enter patient name: ");
                            String reqName = scheduler.scanner.nextLine();
                            scheduler.requestAppointment(reqName);
                            break;
                        case 3:
                            scheduler.processNextAppointment();
                            break;
                        case 4:
                            scheduler.viewWaitingList();
                            break;
                        case 5:
                            scheduler.viewRegisteredPatients();
                            break;
                        case 6:
                            System.out.println("Exiting system.");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scheduler.scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to stay in the loop
                }
                // Note: Other potential exceptions like NullPointerException or IndexOutOfBoundsException
                // are less likely with the current implementation using safer methods like poll() and contains().
                // A general catch block below the switch could catch unexpected errors,
                // but the InputMismatchException is the most probable user input error here.
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            scheduler.closeScanner(); // Ensure scanner is closed
            System.out.println("System shutdown complete.");
        }
    }
}
