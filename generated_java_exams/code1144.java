/*
 * Exam Question #1144
 * Generated on: 2025-05-12 17:31:02
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Clinic Appointment Management System**
 * 
 * **Scenario:**
 * You are tasked with developing a simplified system for a small clinic to manage patient appointments. The system needs to keep track of patients who have just arrived and are waiting for initial processing, and those who have been scheduled for an appointment.
 * 
 * **Problem Description:**
 * Create a Java application that simulates this clinic workflow. The application should allow users to:
 * 1.  Add a new patient to a waiting list.
 * 2.  Process the next patient from the waiting list and move them to a scheduled list.
 * 3.  View the current waiting list.
 * 4.  View the current list of scheduled patients.
 * 5.  Exit the application.
 * 
 * **Technical Requirements:**
 * Your solution must adhere to the following technical specifications:
 * 1.  Use a `java.util.Queue` to represent the waiting list. Patients are added to the end and processed from the front (FIFO).
 * 2.  Use a `java.util.List` (specifically, a `java.util.ArrayList` implementation) to represent the scheduled patients.
 * 3.  Use `java.util.Scanner` to get user input for menu choices and patient details.
 * 4.  Use a `switch` statement to handle the main menu navigation.
 * 5.  Use `System.err` exclusively for displaying error messages (e.g., invalid input, trying to process an empty queue).
 * 6.  Use `System.out` for all normal output (menu, prompts, lists, success messages).
 * 7.  Implement class-wide exception handling using `try-catch` blocks, particularly around user input processing and potential operational errors (like attempting to remove from an empty queue, although using `poll()` is safer, you should still handle potential issues robustly). A general `try-catch` around the main application loop is required.
 * 
 * **Design Requirements:**
 * 1.  Create a `Patient` class with private fields for `id` (an integer, auto-generated) and `name` (String). Include a constructor and public getter methods. Override `toString()` for easy printing.
 * 2.  Create a `ClinicManager` class that encapsulates the `waitingQueue` (a `Queue<Patient>`) and `scheduledPatients` (a `List<Patient>`).
 * 3.  The `ClinicManager` class should have public methods corresponding to the menu options (add patient, process patient, view lists).
 * 4.  Implement input validation where necessary (e.g., patient name should not be empty). Display validation errors using `System.err`.
 * 5.  Include meaningful variable and method names.
 * 6.  Add appropriate comments and documentation (e.g., Javadoc for classes and public methods).
 * 7.  Ensure clean code structure.
 * 
 * **User Interaction and Expected Output:**
 * 
 * The application should present a menu like this:
 * ```
 * --- Clinic Management System ---
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. View Waiting List
 * 4. View Scheduled Patients
 * 5. Exit
 * Enter your choice: 
 * ```
 * 
 * *   **Option 1 (Add Patient):**
 *     *   Prompt: `Enter patient name: `
 *     *   Read name.
 *     *   If name is empty/invalid, print error to `System.err`: `Error: Patient name cannot be empty.`
 *     *   If valid, create `Patient` object, add to waiting queue.
 *     *   Print success message to `System.out`: `Patient [Patient ID] - [Patient Name] added to waiting list.`
 * *   **Option 2 (Process Next Patient):**
 *     *   Attempt to remove patient from the front of the waiting queue.
 *     *   If waiting queue is empty, print error to `System.err`: `Error: Waiting list is empty. No patient to process.`
 *     *   If successful, move patient to the scheduled list.
 *     *   Print success message to `System.out`: `Patient [Patient ID] - [Patient Name] processed and moved to scheduled list.`
 * *   **Option 3 (View Waiting List):**
 *     *   If waiting queue is empty, print to `System.out`: `Waiting List: Empty`
 *     *   Otherwise, print header `Waiting List:` followed by each patient on a new line: `- [Patient ID] - [Patient Name]`
 * *   **Option 4 (View Scheduled Patients):**
 *     *   If scheduled list is empty, print to `System.out`: `Scheduled Patients: Empty`
 *     *   Otherwise, print header `Scheduled Patients:` followed by each patient on a new line: `- [Patient ID] - [Patient Name]`
 * *   **Option 5 (Exit):**
 *     *   Print exit message to `System.out`: `Exiting Clinic Management System. Goodbye!`
 *     *   Terminate the program.
 * *   **Invalid Menu Choice:**
 *     *   If the user enters a non-integer or an integer not between 1 and 5, print error to `System.err`: `Error: Invalid input. Please enter a number between 1 and 5.` (for non-integer) or `Error: Invalid choice. Please enter a number between 1 and 5.` (for out-of-range integer).
 * 
 * **Evaluation Criteria:**
 * *   Correct usage of all required Java components.
 * *   Adherence to design requirements (encapsulation, classes).
 * *   Proper implementation of the clinic logic (FIFO for waiting, adding to scheduled).
 * *   Robust input validation and error handling using `System.err` and `try-catch`.
 * *   Clear and correct output using `System.out`.
 * *   Code readability, comments, and adherence to best practices.
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the Clinic Appointment Management System as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`Patient` Class:**
 *     *   Represents a patient with a unique `id` (auto-generated using a static counter) and `name`.
 *     *   Uses private fields and public getters for encapsulation.
 *     *   The `toString()` method provides a convenient way to print patient information in the required format.
 * 
 * 2.  **`ClinicManager` Class:**
 *     *   This is the main class managing the system logic.
 *     *   **`Queue<Patient> waitingQueue`**: A `LinkedList` is used here as it implements the `Queue` interface and is efficient for adding to the end (`offer`) and removing from the front (`poll`). This fulfills the FIFO requirement for a waiting list.
 *     *   **`List<Patient> scheduledPatients`**: An `ArrayList` is used here as it implements the `List` interface. This list stores patients who have been processed from the waiting queue. `ArrayList` is suitable as we primarily add to the end and iterate through it.
 *     *   **`Scanner scanner`**: Used for reading user input from the console.
 *     *   **Constructor**: Initializes the `waitingQueue`, `scheduledPatients`, and `scanner`.
 *     *   **`displayMenu()`**: A helper method to print the interactive menu options.
 *     *   **`addPatientToWaitingList()`**:
 *         *   Prompts the user for a patient name.
 *         *   Includes input validation: checks if the name is empty or just whitespace. An error message is printed to `System.err` if invalid.
 *         *   If valid, a new `Patient` object is created and added to the `waitingQueue` using `offer()`.
 *         *   A success message is printed to `System.out`.
 *     *   **`processNextPatient()`**:
 *         *   Uses `waitingQueue.poll()` to get and remove the patient at the front of the queue. `poll()` is used because it returns `null` if the queue is empty, which is safer than `remove()` which would throw a `NoSuchElementException`.
 *         *   If `poll()` returns `null`, an error message is printed to `System.err`.
 *         *   If a patient is retrieved, they are added to the `scheduledPatients` list, and a success message is printed to `System.out`.
 *     *   **`viewWaitingList()`**: Iterates through the `waitingQueue` (using an enhanced for loop, which doesn't remove elements) and prints each patient's details to `System.out`. It checks if the queue is empty first.
 *     *   **`viewScheduledPatients()`**: Iterates through the `scheduledPatients` list and prints each patient's details to `System.out`. It checks if the list is empty first.
 *     *   **`run()`**: This is the main application loop.
 *         *   It runs continuously until the user chooses to exit.
 *         *   It calls `displayMenu()`, reads the user's integer choice using `scanner.nextInt()`.
 *         *   A **`try-catch` block** is wrapped around the input reading and the `switch` statement.
 *             *   `InputMismatchException` is caught specifically to handle cases where the user enters non-integer input. An error is printed to `System.err`, and `scanner.next()` is called to consume the invalid token, preventing an infinite loop.
 *             *   A general `Exception` catch block is included as a class-wide handler for any other unexpected runtime errors, printing a message to `System.err`.
 *         *   A **`switch` statement** is used to direct the flow based on the valid integer input, calling the appropriate `ClinicManager` methods.
 *         *   The loop terminates when the choice is 5.
 *     *   **`main()`**: The entry point of the application, creating a `ClinicManager` instance and calling its `run()` method.
 *     *   **`scanner.close()`**: The scanner is closed when the `run` method finishes (i.e., when the user exits), releasing system resources.
 * 
 * **Key Concepts Demonstrated:**
 * 
 * *   **Data Structures:** Effective use of `Queue` (specifically `LinkedList`) for managing items in a FIFO order and `List` (specifically `ArrayList`) for maintaining a collection of items.
 * *   **Interfaces vs. Implementations:** Programming against interfaces (`Queue`, `List`) rather than concrete implementations where possible.
 * *   **Encapsulation:** `Patient` and `ClinicManager` classes hide internal data (`private` fields) and expose functionality through public methods.
 * *   **User Input:** Using `Scanner` to interact with the console.
 * *   **Control Flow:** Using `switch` for multi-way branching based on menu choices and a `while` loop for the main application cycle.
 * *   **Error Handling:**
 *     *   Specific input validation (empty name, non-integer input).
 *     *   Handling operational errors (processing empty queue) by checking return values (`poll()` returning `null`).
 *     *   Robust **class-wide exception handling** using `try-catch` blocks around the main processing logic to gracefully handle unexpected issues, directing error output to `System.err`.
 * *   **Standard Output:** Differentiating between normal output (`System.out`) and error output (`System.err`).
 * *   **Code Organization:** Breaking down the problem into logical classes (`Patient`, `ClinicManager`) and methods.
 * *   **Comments and Documentation:** Using Javadoc and inline comments to explain the code.
 * 
 * This solution provides a solid foundation for a simple management system, fulfilling all requirements and demonstrating advanced Java concepts in a practical context.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the clinic system.
 */
class Patient {
    private static int nextId = 1; // Auto-generated ID counter
    private int id;
    private String name;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.id = nextId++;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient's ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the patient.
     * @return A string in the format "[ID] - [Name]".
     */
    @Override
    public String toString() {
        return id + " - " + name;
    }
}

/**
 * Manages the clinic's patient waiting list and scheduled patients.
 */
public class ClinicManager {
    // Use Queue for waiting list (FIFO)
    private Queue<Patient> waitingQueue;
    // Use List for scheduled patients
    private List<Patient> scheduledPatients;
    private Scanner scanner;

    /**
     * Constructs a new ClinicManager.
     * Initializes the waiting queue, scheduled list, and scanner.
     */
    public ClinicManager() {
        // LinkedList is a common implementation for Queue
        this.waitingQueue = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.scheduledPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Clinic Management System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new patient to the waiting list based on user input.
     * Includes input validation for the patient name.
     */
    public void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        // Consume the newline character left by nextInt()
        scanner.nextLine();
        String name = scanner.nextLine().trim(); // Trim whitespace

        // Input validation
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        Patient newPatient = new Patient(name);
        waitingQueue.offer(newPatient); // offer is generally preferred over add for queues
        System.out.println("Patient " + newPatient + " added to waiting list.");
    }

    /**
     * Processes the next patient from the waiting list.
     * Moves the patient from the waiting queue to the scheduled list.
     * Handles the case where the waiting list is empty.
     */
    public void processNextPatient() {
        // poll() retrieves and removes the head of the queue, returns null if empty
        Patient nextPatient = waitingQueue.poll();

        if (nextPatient == null) {
            System.err.println("Error: Waiting list is empty. No patient to process.");
        } else {
            scheduledPatients.add(nextPatient);
            System.out.println("Patient " + nextPatient + " processed and moved to scheduled list.");
        }
    }

    /**
     * Displays the current list of patients in the waiting queue.
     */
    public void viewWaitingList() {
        System.out.println("\nWaiting List:");
        if (waitingQueue.isEmpty()) {
            System.out.println("Empty");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingQueue) {
                System.out.println("- " + patient);
            }
        }
    }

    /**
     * Displays the current list of scheduled patients.
     */
    public void viewScheduledPatients() {
        System.out.println("\nScheduled Patients:");
        if (scheduledPatients.isEmpty()) {
            System.out.println("Empty");
        } else {
            // Iterate through the list
            for (Patient patient : scheduledPatients) {
                System.out.println("- " + patient);
            }
        }
    }

    /**
     * Runs the main application loop, handling user interaction and menu choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            try {
                int choice = scanner.nextInt();

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        processNextPatient();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledPatients();
                        break;
                    case 5:
                        System.out.println("Exiting Clinic Management System. Goodbye!");
                        running = false; // Exit the loop
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input
                System.err.println("Error: Invalid input. Please enter a number between 1 and 5.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicManager manager = new ClinicManager();
        manager.run();
    }
}
