/*
 * Exam Question #941
 * Generated on: 2025-05-12 17:02:51
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line application to simulate a basic task management system for a small team. The system should allow users to add new tasks, process the next task waiting in a queue, and view both the pending tasks and the completed tasks.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Task Representation:** Create a class named `Task` with private fields for a unique `id` (String) and a `description` (String). Include a constructor, public getter methods for both fields, and an appropriate `toString()` method for easy printing.
 * 2.  **Task Management Logic:** Create a class named `TaskProcessor` that manages the tasks.
 *     *   It must use a `java.util.Queue` (specifically, use `java.util.LinkedList` as the implementation) to store tasks that are waiting to be processed.
 *     *   It must use a `java.util.List` (specifically, use `java.util.ArrayList` as the implementation) to store tasks that have been completed.
 *     *   It must use `java.util.Scanner` to read user input from the console.
 *     *   Implement methods for the following operations:
 *         *   `addTask()`: Prompts the user for a task description, generates a unique ID (a simple counter starting from 1 is sufficient), creates a `Task` object, and adds it to the task queue.
 *         *   `processNextTask()`: Removes the task at the front of the queue, moves it to the completed tasks list, and prints a confirmation message. If the queue is empty, print an error message.
 *         *   `viewTaskQueue()`: Prints the details of all tasks currently in the queue. If the queue is empty, print a message indicating so.
 *         *   `viewCompletedTasks()`: Prints the details of all tasks in the completed tasks list. If the list is empty, print a message indicating so.
 *         *   A main loop method (e.g., `run()`) that displays a menu and processes user choices.
 * 3.  **User Interface:**
 *     *   Present a menu with options: Add Task, Process Next Task, View Task Queue, View Completed Tasks, Exit.
 *     *   Use `java.util.Scanner` to read the user's menu choice and any necessary input (like task description).
 *     *   Use a `switch` statement to handle the different menu options.
 * 4.  **Output:**
 *     *   Print the menu and normal program output (confirmations, task lists) to `System.out`.
 *     *   Print all error messages (e.g., invalid input, trying to process an empty queue) to `System.err`.
 * 5.  **Error Handling:**
 *     *   Implement basic input validation (e.g., ensure menu choice is a valid integer, task description is not empty). Report validation errors using `System.err`.
 *     *   Implement class-wide exception handling using a `try-catch` block around the main operational loop in the `TaskProcessor` class to catch unexpected runtime errors.
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (e.g., JavaDocs for classes and methods).
 *     *   Ensure resources like `Scanner` are closed properly.
 * 
 * **Expected Output:**
 * 
 * Your program should interact with the user via the console, displaying the menu, prompting for input, and printing results or error messages based on the operations performed. Below is an example interaction flow:
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Implement login feature
 * Task added to queue.
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Design database schema
 * Task added to queue.
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * Task Queue:
 * Task{id='1', description='Implement login feature'}
 * Task{id='2', description='Design database schema'}
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: Task{id='1', description='Implement login feature'}
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * Task Queue:
 * Task{id='2', description='Design database schema'}
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * Completed Tasks:
 * Task{id='1', description='Implement login feature'}
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: Task{id='2', description='Design database schema'}
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * System.err: Task queue is empty. No task to process.
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Management Menu ---
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Task Queue
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * **Submission:**
 * 
 * Provide the complete Java code for the `Task` and `TaskProcessor` classes (can be in a single file for simplicity).
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System as required, demonstrating the usage of various core Java concepts.
 * 
 * 1.  **`Task` Class:** This class serves as a simple Plain Old Java Object (POJO) to represent a task. It has private fields (`id` and `description`) and public getter methods, adhering to encapsulation principles. The `toString()` method provides a convenient way to print task details.
 * 
 * 2.  **`TaskProcessor` Class:** This is the main class that orchestrates the system.
 *     *   **Data Structures:**
 *         *   `Queue<Task> taskQueue`: A `LinkedList` is used here to implement the `Queue` interface. Queues are suitable for scenarios where elements are processed in the order they are added (First-In, First-Out - FIFO), which is ideal for a processing queue. `offer()` is used for adding and `poll()` for removing elements, which are standard `Queue` operations.
 *         *   `List<Task> completedTasks`: An `ArrayList` is used here and declared using the `List` interface. `ArrayList` provides dynamic array capabilities, suitable for storing a growing list of completed tasks. Using the `List` interface for the variable type promotes flexibility.
 *     *   **User Input:** A `Scanner` object is used to read input from `System.in`. It's initialized in the constructor and closed in the `finally` block of the `run` method to release system resources.
 *     *   **`run()` Method:** This method contains the main application loop (`while(running)`).
 *         *   It repeatedly displays the menu and reads the user's integer choice.
 *         *   It includes a `try-catch(InputMismatchException)` block specifically for handling non-integer input from the `scanner.nextInt()`, preventing the program from crashing and informing the user via `System.err`.
 *         *   A `switch` statement is used to dispatch control based on the valid menu choice, calling the appropriate methods (`addTask`, `processNextTask`, etc.). This provides clear and structured flow control based on discrete options.
 *     *   **Menu Options:**
 *         *   `addTask()`: Reads the description, performs a basic check for emptiness (input validation), generates a simple sequential ID using `nextTaskId`, creates a `Task` object, and adds it to the `taskQueue` using `offer()`.
 *         *   `processNextTask()`: Uses `taskQueue.poll()` to get and remove the next task. If `poll()` returns `null` (meaning the queue was empty), it prints an error to `System.err`. Otherwise, it adds the retrieved task to the `completedTasks` list.
 *         *   `viewTaskQueue()`: Iterates through the `taskQueue` (using `forEach`) to print each pending task. It checks if the queue is empty first.
 *         *   `viewCompletedTasks()`: Iterates through the `completedTasks` list (using `forEach`) to print each completed task. It checks if the list is empty first.
 *     *   **Error Handling (`try-catch`):** A broad `try-catch(Exception e)` block wraps the entire `while(running)` loop in the `run()` method. This fulfills the "class-wide exception handling" requirement by providing a safety net for unexpected runtime errors that might occur anywhere within the core execution logic. It prints an error message and the stack trace to `System.err`. The `finally` block ensures the `Scanner` is closed regardless of whether an exception occurred or the loop finished normally.
 *     *   **Output:** `System.out.println` is used for displaying the menu, prompts, task lists, and confirmation messages (normal output). `System.err.println` is explicitly used for displaying error conditions detected by the program (e.g., empty queue, invalid menu choice, empty description).
 *     *   **Best Practices:** Encapsulation is used in both classes. Variable and method names are descriptive (`taskQueue`, `processNextTask`, `displayMenu`). Basic comments and JavaDocs explain the purpose of classes and methods. Input validation is performed for task description and menu choice.
 * 
 * This solution effectively integrates all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, albeit simple, application, demonstrating an understanding of their usage and interaction following best practices.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with an ID and description.
 */
class Task {
    private final String id;
    private final String description;

    /**
     * Constructs a new Task.
     * @param id The unique identifier for the task.
     * @param description The description of the task.
     */
    public Task(String id, String description) {
        this.id = id;
        this.description = description;
    }

    /**
     * Gets the task ID.
     * @return The task ID.
     */
    public String getId() {
        return id;
    }

    /**
     * Gets the task description.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Provides a string representation of the Task.
     * @return A string in the format "Task{id='...', description='...'}".
     */
    @Override
    public String toString() {
        return "Task{" +
               "id='" + id + '\'' +
               ", description='" + description + '\'' +
               '}';
    }
}

/**
 * Manages a queue of pending tasks and a list of completed tasks.
 * Handles user interaction via a command-line menu.
 */
public class TaskProcessor {

    private final Queue<Task> taskQueue;
    private final List<Task> completedTasks;
    private final Scanner scanner;
    private int nextTaskId;

    /**
     * Constructs a new TaskProcessor, initializing the task queue,
     * completed tasks list, scanner, and task ID counter.
     */
    public TaskProcessor() {
        // Using LinkedList as the implementation for Queue
        this.taskQueue = new LinkedList<>();
        // Using ArrayList as the implementation for List
        this.completedTasks = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.nextTaskId = 1; // Initialize task ID counter
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Task Queue");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task based on user input.
     * Prompts for description, generates ID, and adds to the queue.
     */
    private void addTask() {
        System.out.print("Enter task description: ");
        scanner.nextLine(); // Consume the newline character left by previous nextInt()
        String description = scanner.nextLine().trim();

        if (description.isEmpty()) {
            System.err.println("Task description cannot be empty.");
            return;
        }

        String taskId = String.valueOf(nextTaskId++);
        Task newTask = new Task(taskId, description);
        taskQueue.offer(newTask); // Use offer for queue insertion
        System.out.println("Task added to queue.");
    }

    /**
     * Processes the next task from the queue.
     * Removes the task from the queue and adds it to the completed list.
     */
    private void processNextTask() {
        Task taskToProcess = taskQueue.poll(); // Retrieve and remove the head of the queue

        if (taskToProcess == null) {
            System.err.println("Task queue is empty. No task to process.");
        } else {
            completedTasks.add(taskToProcess);
            System.out.println("Processed task: " + taskToProcess);
        }
    }

    /**
     * Displays all tasks currently in the queue.
     */
    private void viewTaskQueue() {
        System.out.println("\nTask Queue:");
        if (taskQueue.isEmpty()) {
            System.out.println("The task queue is empty.");
        } else {
            // Iterate over the queue without removing elements
            taskQueue.forEach(System.out::println);
        }
    }

    /**
     * Displays all tasks that have been completed.
     */
    private void viewCompletedTasks() {
        System.out.println("\nCompleted Tasks:");
        if (completedTasks.isEmpty()) {
            System.out.println("No tasks have been completed yet.");
        } else {
            completedTasks.forEach(System.out::println);
        }
    }

    /**
     * Runs the main task processing loop.
     * Displays the menu, reads user input, and performs actions
     * based on the choice using a switch statement.
     * Includes class-wide exception handling.
     */
    public void run() {
        boolean running = true;

        // Class-wide exception handling around the main operational loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration
                }

                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        processNextTask();
                        break;
                    case 3:
                        viewTaskQueue();
                        break;
                    case 4:
                        viewCompletedTasks();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to stderr
        } finally {
            // Ensure scanner is closed even if an exception occurs
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the Task Processor application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskProcessor processor = new TaskProcessor();
        processor.run();
    }
}
