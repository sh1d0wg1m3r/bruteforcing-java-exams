/*
 * Exam Question #1042
 * Generated on: 2025-05-12 17:16:44
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Clinic Appointment Management System
 * 
 * **Scenario:**
 * You are tasked with developing a simplified appointment management system for a small clinic. The system needs to manage patients arriving for appointments and available time slots. Patients who arrive without a pre-booked appointment are added to a waiting list. When a doctor becomes available, the next patient from the waiting list is assigned the earliest available appointment slot.
 * 
 * **Requirements:**
 * 
 * 1.  **Implement the System:** Create a Java program that simulates this clinic workflow.
 * 2.  **Core Functionality:**
 *     *   Add a new patient to the waiting list.
 *     *   Process the next patient from the waiting list: assign them the first available appointment slot.
 *     *   View the current waiting list.
 *     *   View the list of available appointment slots.
 *     *   View the list of scheduled appointments (slots that have been assigned to a patient).
 *     *   Exit the application.
 * 3.  **Data Structures:**
 *     *   Use a `Queue<Patient>` to manage the waiting list (First-In, First-Out).
 *     *   Use a `List<AppointmentSlot>` to manage the initial set of available slots.
 *     *   Use a `List<AppointmentSlot>` to manage the slots that have been assigned (scheduled appointments).
 *     *   You must use `ArrayList` as the concrete implementation for the `List` interfaces.
 * 4.  **User Interaction:**
 *     *   Use `Scanner` to get user input for menu options and patient names.
 *     *   Implement a menu-driven interface using a `switch` statement for handling different user commands.
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and list contents.
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, waiting list empty, no slots available).
 *     *   Implement robust error handling using `try-catch` blocks for potential issues like invalid menu input (non-numeric) or attempting to process a patient when the waiting list or available slots are empty.
 *     *   Validate user input where necessary (e.g., patient name should not be empty).
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Patient` class (simple class with a name).
 *     *   Create an `AppointmentSlot` class (with time, status - e.g., "Available", "Booked", and a reference to the assigned `Patient` object if booked).
 *     *   Create a main class (e.g., `ClinicSystem`) that manages the `Queue` and `List` objects and contains the main application logic.
 *     *   Apply proper encapsulation (private fields, public methods).
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (e.g., Javadoc for classes/methods).
 *     *   Structure the code clearly.
 * 
 * **Initial State:**
 * The system should start with a pre-defined set of available appointment slots (e.g., 9:00 AM, 9:30 AM, 10:00 AM, 10:30 AM).
 * 
 * **Expected Output:**
 * The program should present a menu. Based on user selection, it should perform the requested action, display relevant information (waiting list, slots), or print error messages to `System.err`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * Clinic Appointment Management System
 * 1. Add Patient to Waiting List
 * 2. Process Next Patient
 * 3. View Waiting List
 * 4. View Available Slots
 * 5. View Scheduled Appointments
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Patient Alice added to the waiting list.
 * 
 * Enter your choice: 1
 * Enter patient name: Bob
 * Patient Bob added to the waiting list.
 * 
 * Enter your choice: 3
 * --- Waiting List ---
 * Alice
 * Bob
 * --------------------
 * 
 * Enter your choice: 4
 * --- Available Slots ---
 * Time: 09:00, Status: Available
 * Time: 09:30, Status: Available
 * Time: 10:00, Status: Available
 * Time: 10:30, Status: Available
 * -----------------------
 * 
 * Enter your choice: 2
 * Processing next patient...
 * Patient Alice scheduled for 09:00.
 * 
 * Enter your choice: 3
 * --- Waiting List ---
 * Bob
 * --------------------
 * 
 * Enter your choice: 4
 * --- Available Slots ---
 * Time: 09:30, Status: Available
 * Time: 10:00, Status: Available
 * Time: 10:30, Status: Available
 * -----------------------
 * 
 * Enter your choice: 5
 * --- Scheduled Appointments ---
 * Time: 09:00, Status: Booked, Patient: Alice
 * ----------------------------
 * 
 * Enter your choice: 2
 * Processing next patient...
 * Patient Bob scheduled for 09:30.
 * 
 * Enter your choice: 6
 * Exiting system. Goodbye!
 * ```
 * 
 * **Error Cases:**
 * 
 * *   Entering non-numeric input for menu choice: Should print an error to `System.err` and re-display the menu.
 * *   Entering an empty name for a patient: Should print an error to `System.err`.
 * *   Attempting to process next patient when waiting list is empty: Should print an error to `System.err`.
 * *   Attempting to process next patient when available slots list is empty: Should print an error to `System.err`.
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the Clinic Appointment Management System using the required Java components and follows best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple class to hold patient data (`name`). Encapsulation is used with a private field and a public getter.
 *     *   `AppointmentSlot`: Represents a time slot with its `time`, `status` ("Available" or "Booked"), and a reference to the `Patient` if booked. It includes a `bookSlot` method to change its state. Encapsulation is applied.
 *     *   `ClinicSystem`: This is the main class containing the application logic and managing the data structures. It has private fields for the `waitingList`, `availableSlots`, and `scheduledAppointments`. Public methods provide the core system functionalities.
 *     *   Custom Exceptions (`WaitingListEmptyException`, `NoAvailableSlotsException`): These are simple custom exceptions to provide specific error information when processing fails due to empty lists.
 * 
 * 2.  **Data Structures Usage:**
 *     *   `Queue<Patient> waitingList`: Implemented using `LinkedList`, which is a common practice as `LinkedList` implements the `Queue` interface. Patients are added using `offer()` and removed from the front using `poll()`, ensuring FIFO order as required for a waiting list.
 *     *   `List<AppointmentSlot> availableSlots`: Implemented using `ArrayList`. This list holds slots that are currently free and can be assigned.
 *     *   `List<AppointmentSlot> scheduledAppointments`: Implemented using `ArrayList`. This list holds slots that have been assigned to a patient.
 *     *   `List<AppointmentSlot> allSlots`: An `ArrayList` used internally during initialization to create the initial set of slots, which are then copied to `availableSlots`. This demonstrates the use of `ArrayList` and the `List` interface type.
 * 
 * 3.  **User Interaction and Control Flow:**
 *     *   `Scanner`: Used in the `main` method to read integer choices and string inputs (patient names) from the console (`System.in`).
 *     *   `switch` statement: Used in the main loop to direct execution based on the user's menu choice, calling the appropriate methods in the `ClinicSystem` object.
 *     *   Main loop (`while (choice != 6)`): Keeps the application running until the user chooses to exit.
 * 
 * 4.  **Error Handling and Output:**
 *     *   `try-catch` blocks:
 *         *   An outer `try-catch` in `main` catches any unexpected `Exception` at the top level, providing a fallback for unhandled errors.
 *         *   An inner `try-catch` block within the loop specifically handles `InputMismatchException` for non-numeric menu input, preventing the program from crashing and prompting the user to try again.
 *         *   Specific `try-catch` blocks are used around the `addPatientToWaitingList` call to catch `IllegalArgumentException` (for empty names) and around the `processNextPatient` call to catch the custom exceptions (`WaitingListEmptyException`, `NoAvailableSlotsException`).
 *     *   `System.err`: Used exclusively for printing error messages resulting from invalid input, empty lists during processing, or caught exceptions. This separates error output from normal application output.
 *     *   `System.out`: Used for displaying the menu, prompts, success messages, and the contents of the waiting list, available slots, and scheduled appointments.
 *     *   Input Validation: The `addPatientToWaitingList` method explicitly checks if the provided patient name is null or empty and throws an `IllegalArgumentException`.
 * 
 * 5.  **Encapsulation and Best Practices:**
 *     *   All data fields (`name`, `time`, `status`, `assignedPatient`, `waitingList`, `availableSlots`, `scheduledAppointments`) are declared as `private`, restricting direct access from outside the class.
 *     *   Public methods (`getName`, `getTime`, `getStatus`, `getAssignedPatient`, `bookSlot`, `addPatientToWaitingList`, `processNextPatient`, etc.) provide controlled access and modification of the object's state.
 *     *   Meaningful names are used for classes, variables, and methods (e.g., `waitingList`, `availableSlots`, `processNextPatient`, `bookSlot`).
 *     *   Basic Javadoc comments are included for classes and methods to explain their purpose.
 *     *   The code is structured logically with separate classes for models and the main system logic.
 * 
 * This solution effectively demonstrates the required Java features in a practical context, handling user input, managing data structures according to specific access patterns (Queue for FIFO, List for dynamic collections), implementing flow control with `switch`, and providing robust error handling using `try-catch` and distinct output streams (`System.out`, `System.err`).
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue and List
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// --- Custom Exception Classes ---
class WaitingListEmptyException extends Exception {
    public WaitingListEmptyException(String message) {
        super(message);
    }
}

class NoAvailableSlotsException extends Exception {
    public NoAvailableSlotsException(String message) {
        super(message);
    }
}

// --- Model Classes ---

/**
 * Represents a patient in the system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Represents an appointment time slot.
 */
class AppointmentSlot {
    private String time;
    private String status; // e.g., "Available", "Booked"
    private Patient assignedPatient; // null if status is "Available"

    /**
     * Constructs a new AppointmentSlot.
     * @param time The time of the slot (e.g., "09:00").
     */
    public AppointmentSlot(String time) {
        this.time = time;
        this.status = "Available";
        this.assignedPatient = null;
    }

    /**
     * Gets the time of the slot.
     * @return The time string.
     */
    public String getTime() {
        return time;
    }

    /**
     * Gets the status of the slot.
     * @return The status string ("Available" or "Booked").
     */
    public String getStatus() {
        return status;
    }

    /**
     * Gets the patient assigned to this slot.
     * @return The assigned Patient object, or null if available.
     */
    public Patient getAssignedPatient() {
        return assignedPatient;
    }

    /**
     * Books the slot for a given patient.
     * @param patient The patient to assign to this slot.
     */
    public void bookSlot(Patient patient) {
        this.assignedPatient = patient;
        this.status = "Booked";
    }

    @Override
    public String toString() {
        if ("Booked".equals(status)) {
            return "Time: " + time + ", Status: " + status + ", Patient: " + assignedPatient.getName();
        } else {
            return "Time: " + time + ", Status: " + status;
        }
    }
}

// --- Main System Class ---

/**
 * Manages the clinic's waiting list and appointment slots.
 */
public class ClinicSystem {

    // Use Queue for waiting list (FIFO)
    private Queue<Patient> waitingList;

    // Use List (implemented by ArrayList) for managing slots
    private List<AppointmentSlot> allSlots; // Holds all slots initially
    private List<AppointmentSlot> availableSlots; // Available slots derived from allSlots
    private List<AppointmentSlot> scheduledAppointments; // Booked slots derived from allSlots

    /**
     * Constructs the ClinicSystem and initializes data structures and slots.
     */
    public ClinicSystem() {
        waitingList = new LinkedList<>(); // LinkedList implements Queue
        allSlots = new ArrayList<>();
        availableSlots = new ArrayList<>();
        scheduledAppointments = new ArrayList<>();

        // Initialize some available slots
        initializeSlots();
    }

    /**
     * Initializes the list of available appointment slots.
     */
    private void initializeSlots() {
        // Add initial slots. These will populate availableSlots initially.
        allSlots.add(new AppointmentSlot("09:00"));
        allSlots.add(new AppointmentSlot("09:30"));
        allSlots.add(new AppointmentSlot("10:00"));
        allSlots.add(new AppointmentSlot("10:30"));
        allSlots.add(new AppointmentSlot("11:00")); // Added one more for robustness

        // Initially, all slots are available
        availableSlots.addAll(allSlots);
    }

    /**
     * Adds a patient to the waiting list.
     * @param patientName The name of the patient.
     * @throws IllegalArgumentException if patient name is null or empty.
     */
    public void addPatientToWaitingList(String patientName) throws IllegalArgumentException {
        if (patientName == null || patientName.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be empty.");
        }
        Patient newPatient = new Patient(patientName.trim());
        waitingList.offer(newPatient); // offer adds to the end of the queue
        System.out.println("Patient " + newPatient.getName() + " added to the waiting list.");
    }

    /**
     * Processes the next patient in the waiting list and assigns them an available slot.
     * @throws WaitingListEmptyException if the waiting list is empty.
     * @throws NoAvailableSlotsException if there are no available appointment slots.
     */
    public void processNextPatient() throws WaitingListEmptyException, NoAvailableSlotsException {
        System.out.println("Processing next patient...");

        if (waitingList.isEmpty()) {
            throw new WaitingListEmptyException("Waiting list is empty. Cannot process patient.");
        }

        if (availableSlots.isEmpty()) {
            throw new NoAvailableSlotsException("No available appointment slots.");
        }

        // Get the next patient from the queue (FIFO)
        Patient nextPatient = waitingList.poll();

        // Get the first available slot
        AppointmentSlot bookedSlot = availableSlots.remove(0); // Remove from available

        // Book the slot for the patient
        bookedSlot.bookSlot(nextPatient);

        // Add the now booked slot to the scheduled list
        scheduledAppointments.add(bookedSlot);

        System.out.println("Patient " + nextPatient.getName() + " scheduled for " + bookedSlot.getTime() + ".");
    }

    /**
     * Displays the current waiting list.
     */
    public void viewWaitingList() {
        System.out.println("--- Waiting List ---");
        if (waitingList.isEmpty()) {
            System.out.println("Waiting list is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays the current available appointment slots.
     */
    public void viewAvailableSlots() {
        System.out.println("--- Available Slots ---");
        if (availableSlots.isEmpty()) {
            System.out.println("No slots available.");
        } else {
            for (AppointmentSlot slot : availableSlots) {
                System.out.println(slot);
            }
        }
        System.out.println("-----------------------");
    }

    /**
     * Displays the currently scheduled appointments.
     */
    public void viewScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            for (AppointmentSlot slot : scheduledAppointments) {
                System.out.println(slot);
            }
        }
        System.out.println("----------------------------");
    }

    /**
     * Main method to run the clinic system application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicSystem system = new ClinicSystem();
        Scanner scanner = new Scanner(System.in);
        int choice = -1;

        System.out.println("Clinic Appointment Management System");

        // Class-wide try-catch for the main application loop
        try {
            while (choice != 6) {
                printMenu();

                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            System.out.print("Enter patient name: ");
                            String name = scanner.nextLine();
                            try {
                                system.addPatientToWaitingList(name);
                            } catch (IllegalArgumentException e) {
                                System.err.println("Error: " + e.getMessage());
                            }
                            break;
                        case 2:
                            try {
                                system.processNextPatient();
                            } catch (WaitingListEmptyException | NoAvailableSlotsException e) {
                                // Catch custom exceptions for processing errors
                                System.err.println("Error: " + e.getMessage());
                            }
                            break;
                        case 3:
                            system.viewWaitingList();
                            break;
                        case 4:
                            system.viewAvailableSlots();
                            break;
                        case 5:
                            system.viewScheduledAppointments();
                            break;
                        case 6:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    // Catch non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to stay in the loop
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions at the top level
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure the scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Available Slots");
        System.out.println("5. View Scheduled Appointments");
        System.out.println("6. Exit");
    }
}
