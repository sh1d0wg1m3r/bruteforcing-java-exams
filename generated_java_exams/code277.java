/*
 * Exam Question #277
 * Generated on: 2025-05-11 22:48:40
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Automated Production Line Simulator**
 * 
 * You are tasked with developing a simplified simulation of an automated production line. Products enter a queue to await processing. Once processed, they are moved to a list of completed products. The system should allow users to interact with the production line via a command-line interface.
 * 
 * Your solution must demonstrate a strong understanding of fundamental Java concepts, data structures, and error handling.
 * 
 * **Requirements:**
 * 
 * 1.  **Classes:**
 *     *   Create a `Product` class representing an item on the production line. It should have:
 *         *   A private integer field `productId`.
 *         *   A private String field `status` (e.g., "Pending", "Completed").
 *         *   A constructor `Product(int productId)` that initializes the product with the given ID and sets the status to "Pending".
 *         *   Public getter methods for `productId` and `status`.
 *         *   A public method `setStatus(String status)` to change the product's status.
 *         *   Override the `toString()` method to provide a clear string representation (e.g., "Product ID: 101, Status: Pending").
 *     *   Create an `AutomatedProductionLine` class that manages the production process. It should have:
 *         *   A private `Queue<Product>` field to hold products awaiting processing (`pendingProducts`).
 *         *   A private `List<Product>` field to hold products that have been processed (`completedProducts`).
 *         *   A constructor that initializes both data structures.
 *         *   A public method `addProduct(int productId)`: Creates a new `Product` object and adds it to the `pendingProducts` queue. Include validation to ensure `productId` is non-negative.
 *         *   A public method `processNextProduct()`: Removes the next product from the `pendingProducts` queue, sets its status to "Completed", and adds it to the `completedProducts` list. Handle the case where the queue is empty.
 *         *   A public method `viewPendingProducts()`: Prints details of all products currently in the `pendingProducts` queue.
 *         *   A public method `viewCompletedProducts()`: Prints details of all products in the `completedProducts` list.
 *         *   A public method `runSimulation()`: This method should contain the main application loop, interacting with the user.
 * 
 * 2.  **`runSimulation()` Method Logic:**
 *     *   Use a `Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Product
 *         2.  Process Next Product
 *         3.  View Pending Products
 *         4.  View Completed Products
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's choice.
 *     *   Implement a loop that continues until the user chooses to exit (option 5).
 *     *   Use `System.out` for menu display, prompts, and successful operations/data display.
 *     *   Use `System.err` for reporting errors (e.g., invalid input, attempting to process from an empty queue, invalid menu option).
 *     *   Implement class-wide exception handling using `try-catch` blocks, specifically to handle `InputMismatchException` when reading integer input and potentially other runtime errors. The input validation for `productId` should also be handled with appropriate error messages.
 * 
 * 3.  **Data Structure Usage:**
 *     *   Use `java.util.Queue` (specifically, an implementation like `java.util.LinkedList`) for `pendingProducts` to enforce FIFO order.
 *     *   Use `java.util.ArrayList` for `completedProducts`. Declare the field using the `java.util.List` interface type.
 * 
 * 4.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Perform input validation (e.g., non-negative product ID, valid menu choice).
 *     *   Implement robust error handling as specified.
 *     *   Maintain a clean and readable code structure.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, and perform the requested actions, printing appropriate messages to `System.out` or `System.err`.
 * 
 * Example interaction:
 * 
 * ```
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 1
 * Enter Product ID: 101
 * Product 101 added to the pending queue.
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 1
 * Enter Product ID: 102
 * Product 102 added to the pending queue.
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 3
 * Pending Products:
 * Product ID: 101, Status: Pending
 * Product ID: 102, Status: Pending
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 2
 * Processing next product...
 * Product 101 processed and moved to completed.
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 3
 * Pending Products:
 * Product ID: 102, Status: Pending
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 4
 * Completed Products:
 * Product ID: 101, Status: Completed
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 2
 * Processing next product...
 * Product 102 processed and moved to completed.
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 4
 * Completed Products:
 * Product ID: 101, Status: Completed
 * Product ID: 102, Status: Completed
 * 
 * --- Production Line Menu ---
 * 1. Add New Product
 * 2. Process Next Product
 * 3. View Pending Products
 * 4. View Completed Products
 * 5. Exit
 * Enter your choice: 5
 * Exiting Production Line Simulator.
 * ```
 * 
 * Handle cases like entering non-numeric input or attempting to process from an empty queue gracefully using error messages on `System.err`.
 * 
 * ```
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Processing next product...
 * System.err: Error: No products in the pending queue to process.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: abc
 * System.err: Error: Invalid input. Please enter a number.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 6
 * System.err: Error: Invalid menu option. Please try again.
 * ```
 *
 * EXPLANATION:
 * This solution implements a basic automated production line simulation, fulfilling all the specified requirements and demonstrating key Java concepts.
 * 
 * 1.  **Class Structure (`Product`, `AutomatedProductionLine`)**:
 *     *   The `Product` class encapsulates the data for a single product (`productId`, `status`) and provides methods to access and modify this data. The constructor includes basic validation for the product ID.
 *     *   The `AutomatedProductionLine` class manages the core logic and data structures (`pendingProducts`, `completedProducts`). It contains methods for each operation the user can perform.
 * 
 * 2.  **Data Structures (`Queue`, `List`, `ArrayList`, `LinkedList`)**:
 *     *   `pendingProducts` is declared as a `Queue<Product>` and initialized with a `LinkedList`. This is appropriate because a queue represents items waiting in a line (FIFO - First-In, First-Out), and `LinkedList` is a common and efficient implementation for queue operations like `offer()` (add) and `poll()` (remove and return head).
 *     *   `completedProducts` is declared using the `List<Product>` interface type but initialized as an `ArrayList`. `ArrayList` provides a dynamic array implementation suitable for storing a list of completed items where order might matter and access is needed. Using the `List` interface for the field type is good practice as it allows for flexibility to change the underlying implementation later if needed.
 * 
 * 3.  **User Interaction (`Scanner`, `System.out`, `System.err`)**:
 *     *   A `Scanner` object is used within the `runSimulation()` method to read user input from `System.in`.
 *     *   `System.out.println()` is used for displaying the menu, prompts, successful action messages, and the contents of the product lists.
 *     *   `System.err.println()` is used specifically for reporting errors, such as invalid input (non-numeric), attempting an action on an empty queue, or choosing an invalid menu option.
 * 
 * 4.  **Control Flow (`switch`, `while`)**:
 *     *   A `while` loop in `runSimulation()` keeps the simulation running until the user explicitly chooses to exit (option 5).
 *     *   A `switch` statement is used inside the loop to direct execution based on the user's integer choice from the menu, calling the appropriate method of the `AutomatedProductionLine` class.
 * 
 * 5.  **Exception Handling (`try-catch`)**:
 *     *   A `try-catch` block wraps the input reading and processing logic within the `runSimulation()` loop.
 *     *   It specifically catches `InputMismatchException`, which occurs if the user enters non-integer input when an integer is expected by `scanner.nextInt()`. The catch block prints an error message to `System.err` and consumes the invalid input from the scanner buffer (`scanner.nextLine()`) to prevent an infinite loop.
 *     *   A general `catch (Exception e)` is included as a fallback for any other unexpected runtime errors, printing an error message and the stack trace for debugging.
 *     *   Input validation for the product ID (non-negative) is handled within the `Product` constructor using an `IllegalArgumentException`, which is then caught and reported by the `addProduct` method.
 * 
 * 6.  **Best Practices**:
 *     *   **Encapsulation:** Fields (`productId`, `status`, `pendingProducts`, `completedProducts`, `scanner`) are `private`, and access/modification is controlled through `public` methods.
 *     *   **Meaningful Names:** Class names (`Product`, `AutomatedProductionLine`), field names (`productId`, `status`, `pendingProducts`, `completedProducts`), and method names (`addProduct`, `processNextProduct`, `viewPendingProducts`, `viewCompletedProducts`, `runSimulation`, `printMenu`) are descriptive.
 *     *   **Comments/Documentation:** Javadoc comments are provided for classes and methods explaining their purpose, parameters, and return values.
 *     *   **Input Validation:** Checks are performed for non-negative product IDs and valid menu choices. Non-numeric input is caught via exception handling.
 *     *   **Error Handling:** Specific error messages are provided for different failure conditions (`System.err`), and exceptions are caught and handled gracefully.
 *     *   **Clean Code Structure:** The code is organized into logical classes and methods, making it readable and maintainable. The `main` method is minimal, simply creating an instance and starting the simulation.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrating advanced usage like proper data structure selection, robust error handling, and adherence to object-oriented principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a product in the production line.
 */
class Product {
    private int productId;
    private String status;

    /**
     * Constructs a new Product.
     * @param productId The unique identifier for the product. Must be non-negative.
     */
    public Product(int productId) {
        if (productId < 0) {
            throw new IllegalArgumentException("Product ID cannot be negative.");
        }
        this.productId = productId;
        this.status = "Pending"; // Initial status
    }

    /**
     * Gets the product ID.
     * @return The product ID.
     */
    public int getProductId() {
        return productId;
    }

    /**
     * Gets the current status of the product.
     * @return The status (e.g., "Pending", "Completed").
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the product.
     * @param status The new status.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the product.
     * @return A formatted string showing product ID and status.
     */
    @Override
    public String toString() {
        return "Product ID: " + productId + ", Status: " + status;
    }
}

/**
 * Simulates an automated production line managing pending and completed products.
 */
public class AutomatedProductionLine {

    private Queue<Product> pendingProducts;
    private List<Product> completedProducts;
    private Scanner scanner;

    /**
     * Constructs a new AutomatedProductionLine.
     * Initializes the pending products queue and completed products list.
     */
    public AutomatedProductionLine() {
        this.pendingProducts = new LinkedList<>(); // LinkedList implements Queue
        this.completedProducts = new ArrayList<>(); // ArrayList implements List
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new product to the pending queue.
     * Validates that the product ID is non-negative.
     * @param productId The ID of the product to add.
     */
    public void addProduct(int productId) {
        try {
            Product newProduct = new Product(productId);
            pendingProducts.offer(newProduct); // offer is preferred over add for queues
            System.out.println("Product " + productId + " added to the pending queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding product: " + e.getMessage());
        }
    }

    /**
     * Processes the next product from the pending queue.
     * Removes it from the queue, sets status to "Completed", and adds to completed list.
     * Handles the case where the pending queue is empty.
     */
    public void processNextProduct() {
        System.out.println("Processing next product...");
        Product productToProcess = pendingProducts.poll(); // poll returns null if queue is empty

        if (productToProcess != null) {
            productToProcess.setStatus("Completed");
            completedProducts.add(productToProcess);
            System.out.println("Product " + productToProcess.getProductId() + " processed and moved to completed.");
        } else {
            System.err.println("Error: No products in the pending queue to process.");
        }
    }

    /**
     * Displays all products currently in the pending queue.
     */
    public void viewPendingProducts() {
        System.out.println("Pending Products:");
        if (pendingProducts.isEmpty()) {
            System.out.println("  (None)");
        } else {
            for (Product product : pendingProducts) {
                System.out.println("  " + product);
            }
        }
    }

    /**
     * Displays all products currently in the completed list.
     */
    public void viewCompletedProducts() {
        System.out.println("Completed Products:");
        if (completedProducts.isEmpty()) {
            System.out.println("  (None)");
        } else {
            for (Product product : completedProducts) {
                System.out.println("  " + product);
            }
        }
    }

    /**
     * Runs the main simulation loop, handling user interaction.
     * Includes a menu, switch statement, and input handling with try-catch.
     */
    public void runSimulation() {
        int choice = -1;

        while (choice != 5) {
            printMenu();
            System.out.print("Enter your choice: ");

            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character after reading int

                switch (choice) {
                    case 1:
                        System.out.print("Enter Product ID: ");
                        int productId = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        addProduct(productId);
                        break;
                    case 2:
                        processNextProduct();
                        break;
                    case 3:
                        viewPendingProducts();
                        break;
                    case 4:
                        viewCompletedProducts();
                        break;
                    case 5:
                        System.out.println("Exiting Production Line Simulator.");
                        break;
                    default:
                        System.err.println("Error: Invalid menu option. Please try again.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to prevent unintended switch case execution
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
            System.out.println(); // Add a blank line for better readability
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Production Line Menu ---");
        System.out.println("1. Add New Product");
        System.out.println("2. Process Next Product");
        System.out.println("3. View Pending Products");
        System.out.println("4. View Completed Products");
        System.out.println("5. Exit");
    }

    /**
     * Main method to start the simulation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        AutomatedProductionLine simulator = new AutomatedProductionLine();
        simulator.runSimulation();
    }
}
