/*
 * Exam Question #408
 * Generated on: 2025-05-11 23:07:00
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Warehouse Order Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified console-based application to manage orders in a small warehouse. Orders arrive and are placed in a queue waiting to be packed. Once an order is packed, it is moved to a list of shipped orders.
 * 
 * **Task:**
 * 
 * Implement a Java program that simulates this warehouse process. The program should allow users to perform the following actions via a menu:
 * 
 * 1.  **Add New Order:** Create a new order and add it to the queue of pending orders.
 * 2.  **Pack Next Pending Order:** Take the next order from the front of the pending queue, mark it as "SHIPPED", and move it to the list of shipped orders.
 * 3.  **View Pending Orders:** Display all orders currently in the pending queue.
 * 4.  **View Shipped Orders:** Display all orders that have been shipped.
 * 5.  **Exit:** Terminate the application.
 * 
 * **Requirements:**
 * 
 * 1.  **`Order` Class:** Create a class named `Order` to represent an order. It should have:
 *     *   A unique integer `orderId`. The IDs should be automatically generated sequentially starting from 1.
 *     *   A `String` `description` (e.g., "Laptop", "Office Supplies").
 *     *   A `String` `status` (either "PENDING" or "SHIPPED").
 *     *   Implement proper encapsulation (private fields, public getters).
 *     *   Include a `toString()` method for easy display.
 * 2.  **Warehouse Management:** Implement the main application logic in a class (e.g., `WarehouseSystem`). This class should:
 *     *   Use a `java.util.Queue<Order>` to store orders that are pending packing.
 *     *   Use a `java.util.List<Order>` (specifically implemented using `java.util.ArrayList<Order>`) to store orders that have been shipped.
 *     *   Provide methods corresponding to the menu options (add, pack, view pending, view shipped).
 * 3.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Display a menu with the available options in a loop.
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use `System.out` for displaying the menu, successful operation messages, and order details.
 *     *   Use `System.err` for printing error messages (e.g., invalid menu input, attempting to pack when the queue is empty).
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues, such as the user entering non-integer input for the menu choice.
 *     *   Handle the case where the user attempts to pack an order when the pending queue is empty.
 * 5.  **Best Practices:**
 *     *   Follow Java coding conventions.
 *     *   Use meaningful variable and method names.
 *     *   Add appropriate comments where necessary to explain complex logic.
 *     *   Ensure resources like `Scanner` are closed properly (though for this exam, a simple `return` or `System.exit` is acceptable for exiting the main loop).
 * 
 * **Expected Output Structure:**
 * 
 * ```
 * --- Warehouse System Menu ---
 * 1. Add New Order
 * 2. Pack Next Pending Order
 * 3. View Pending Orders
 * 4. View Shipped Orders
 * 5. Exit
 * Enter your choice: 1
 * Enter order description: Keyboard
 * Order 1 (Keyboard) added to pending.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 2
 * Packing order 1 (Keyboard)... Order 1 (Keyboard) shipped.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Orders ---
 * (No pending orders)
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 4
 * --- Shipped Orders ---
 * Order ID: 1, Description: Keyboard, Status: SHIPPED
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 2
 * Error: No orders pending to pack.
 * 
 * --- Warehouse System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Warehouse System.
 * ```
 * 
 * Your code should compile and run, providing the described functionality and error handling.
 *
 * EXPLANATION:
 * The provided solution implements a simple Warehouse Order Processing System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Order` Class:**
 *     *   This class encapsulates the data for a single order (`orderId`, `description`, `status`).
 *     *   `orderId` is automatically generated using a `static` counter (`nextOrderId`) to ensure uniqueness and sequential assignment.
 *     *   Fields are `private` and accessed via `public` getters, adhering to encapsulation principles.
 *     *   The `toString()` method provides a convenient way to print order details.
 * 
 * 2.  **`WarehouseSystem` Class:**
 *     *   This class manages the collections of orders and the user interaction logic.
 *     *   `private Queue<Order> pendingOrders;`: A `Queue` is used here because orders are processed in a First-In, First-Out (FIFO) manner (the oldest order in the queue is packed first). `LinkedList` is a common class that implements the `Queue` interface.
 *     *   `private List<Order> shippedOrders;`: A `List` is used to store shipped orders. `ArrayList` is chosen as a common, dynamic array implementation of the `List` interface, suitable for storing and iterating over shipped orders.
 *     *   `private Scanner scanner;`: Used to read input from `System.in`.
 *     *   The `addOrder` method creates a new `Order` object and adds it to the `pendingOrders` queue using `queue.add()`.
 *     *   The `packNextOrder` method uses `queue.poll()` to retrieve and remove the head of the `pendingOrders` queue. If the queue is empty, `poll()` returns `null`, which is handled as an error condition using `System.err`. If an order is retrieved, its status is updated, and it's added to the `shippedOrders` list using `list.add()`.
 *     *   `viewPendingOrders` and `viewShippedOrders` iterate through their respective collections to display the order details using the `Order` class's `toString()` method.
 *     *   The `displayMenu` method simply prints the available options to `System.out`.
 *     *   The `start` method contains the main application loop, repeatedly displaying the menu and processing user input.
 * 
 * 3.  **User Interaction and Control Flow:**
 *     *   The `start` method uses a `while` loop (`while(running)`) to keep the application running until the user chooses to exit.
 *     *   Inside the loop, `displayMenu()` prints the options to `System.out`.
 *     *   `scanner.nextInt()` reads the integer menu choice. `scanner.nextLine()` is called immediately after to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls (like when reading the order description).
 *     *   A `switch` statement is used to direct the program flow based on the user's integer choice, calling the appropriate methods (`addOrder`, `packNextOrder`, etc.).
 *     *   The `default` case in the `switch` handles invalid integer choices, printing an error to `System.err`.
 * 
 * 4.  **Exception Handling:**
 *     *   A `try-catch` block is wrapped around the code that reads the user's menu choice (`scanner.nextInt()`) and the subsequent `switch` statement.
 *     *   `catch (InputMismatchException e)` specifically handles cases where the user enters input that is not an integer (e.g., text). It prints an error message to `System.err` and uses `scanner.next()` to consume the invalid token from the input stream, preventing an infinite loop caused by the scanner repeatedly failing on the same input.
 *     *   A general `catch (Exception e)` is included as a fallback for any other unexpected runtime issues, printing a generic error message to `System.err`.
 * 
 * 5.  **Output Streams:**
 *     *   `System.out.println()` is used for standard messages like the menu, successful operations, and list contents.
 *     *   `System.err.println()` is used exclusively for printing error conditions, such as invalid input or attempting an action on an empty queue.
 * 
 * 6.  **Best Practices:**
 *     *   Meaningful names (`pendingOrders`, `packNextOrder`, `viewShippedOrders`, `orderId`, `description`).
 *     *   Comments explain the purpose of classes, fields, and methods.
 *     *   Encapsulation is used in the `Order` class.
 *     *   The `Scanner` is closed when the application exits.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, menu-driven application with basic error handling and adherence to good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents an order in the warehouse
class Order {
    private static int nextOrderId = 1; // Static counter for unique IDs

    private int orderId;
    private String description;
    private String status; // "PENDING" or "SHIPPED"

    /**
     * Constructs a new Order with a unique ID and PENDING status.
     * @param description The description of the order.
     */
    public Order(String description) {
        this.orderId = nextOrderId++;
        this.description = description;
        this.status = "PENDING";
    }

    // Getters for order properties
    public int getOrderId() {
        return orderId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the order.
     * @param status The new status ("PENDING" or "SHIPPED").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the order.
     */
    @Override
    public String toString() {
        return "Order ID: " + orderId + ", Description: " + description + ", Status: " + status;
    }
}

// Manages the warehouse operations
public class WarehouseSystem {

    // Queue for orders waiting to be packed (FIFO)
    private Queue<Order> pendingOrders;
    // List for orders that have been shipped
    private List<Order> shippedOrders;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new WarehouseSystem, initializing collections and scanner.
     */
    public WarehouseSystem() {
        // LinkedList is a common implementation for Queue
        this.pendingOrders = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.shippedOrders = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new order to the pending queue.
     * @param description The description for the new order.
     */
    public void addOrder(String description) {
        Order newOrder = new Order(description);
        pendingOrders.add(newOrder);
        System.out.println("Order " + newOrder.getOrderId() + " (" + newOrder.getDescription() + ") added to pending.");
    }

    /**
     * Packs the next order from the pending queue and moves it to the shipped list.
     */
    public void packNextOrder() {
        // poll() retrieves and removes the head of the queue, returns null if queue is empty
        Order orderToPack = pendingOrders.poll();
        if (orderToPack == null) {
            System.err.println("Error: No orders pending to pack.");
        } else {
            System.out.println("Packing order " + orderToPack.getOrderId() + " (" + orderToPack.getDescription() + ")...");
            orderToPack.setStatus("SHIPPED");
            shippedOrders.add(orderToPack);
            System.out.println("Order " + orderToPack.getOrderId() + " (" + orderToPack.getDescription() + ") shipped.");
        }
    }

    /**
     * Displays all orders currently in the pending queue.
     */
    public void viewPendingOrders() {
        System.out.println("--- Pending Orders ---");
        if (pendingOrders.isEmpty()) {
            System.out.println("(No pending orders)");
        } else {
            // Iterate through the queue without removing elements
            for (Order order : pendingOrders) {
                System.out.println(order);
            }
        }
    }

    /**
     * Displays all orders currently in the shipped list.
     */
    public void viewShippedOrders() {
        System.out.println("--- Shipped Orders ---");
        if (shippedOrders.isEmpty()) {
            System.out.println("(No shipped orders)");
        } else {
            // Iterate through the list
            for (Order order : shippedOrders) {
                System.out.println(order);
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Warehouse System Menu ---");
        System.out.println("1. Add New Order");
        System.out.println("2. Pack Next Pending Order");
        System.out.println("3. View Pending Orders");
        System.out.println("4. View Shipped Orders");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Starts the main application loop.
     */
    public void start() {
        boolean running = true;
        while (running) {
            displayMenu();
            try {
                int choice = scanner.nextInt(); // Read integer choice
                scanner.nextLine(); // Consume the newline character left by nextInt()

                switch (choice) {
                    case 1:
                        System.out.print("Enter order description: ");
                        String description = scanner.nextLine();
                        addOrder(description);
                        break;
                    case 2:
                        packNextOrder();
                        break;
                    case 3:
                        viewPendingOrders();
                        break;
                    case 4:
                        viewShippedOrders();
                        break;
                    case 5:
                        System.out.println("Exiting Warehouse System.");
                        running = false; // Exit the loop
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        WarehouseSystem system = new WarehouseSystem();
        system.start();
    }
}
