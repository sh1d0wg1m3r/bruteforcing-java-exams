/*
 * Exam Question #287
 * Generated on: 2025-05-11 22:49:51
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Restaurant Order Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified backend system for a restaurant's order management. The system needs to handle incoming customer orders, manage a menu, and allow staff to process orders.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system with the following features and constraints:
 * 
 * 1.  **Menu Management:** Maintain a fixed menu of items.
 * 2.  **Order Queue:** Orders are received and processed in a First-In, First-Out (FIFO) manner.
 * 3.  **User Interface:** Provide a text-based menu for staff interaction.
 * 4.  **Functionality:** The system must support the following operations via user input:
 *     *   **Add New Order:** Allow staff to enter items for a new customer order. The order should be added to the end of the processing queue. Input must validate that items are on the menu. An order can contain multiple items.
 *     *   **Serve Next Order:** Remove the order at the front of the queue, simulating it being prepared and served.
 *     *   **View Order Queue:** Display the current orders waiting in the queue.
 *     *   **View Menu:** Display the list of available menu items.
 *     *   **Exit:** Terminate the program.
 * 5.  **Component Usage:** Your solution MUST utilize ALL of the following Java components:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` interface
 *     *   `java.util.Scanner` for user input
 *     *   `switch` statement for handling user menu choices
 *     *   `System.err` for printing error messages (e.g., invalid input, serving from an empty queue)
 *     *   `System.out` for printing normal output (menu, prompts, queue status, confirmations)
 *     *   Class-wide exception handling using `try-catch` blocks to gracefully handle potential issues during the main execution loop.
 * 6.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include comments to explain complex logic.
 *     *   Implement robust input validation, especially for menu choices and order items.
 *     *   Provide clear and informative error messages using `System.err`.
 *     *   Structure the code logically.
 * 
 * **Implementation Details:**
 * 
 * *   The menu can be initialized with a few sample items (e.g., "Burger", "Pizza", "Salad", "Fries", "Drink").
 * *   An order can be represented as a `List<String>` where each string is a menu item name. The queue will store these `List<String>` objects (`Queue<List<String>>`).
 * *   The "Add New Order" process should allow entering items one by one until a specific input (e.g., an empty line or a keyword like "done") is entered.
 * *   When viewing the queue, display each order clearly (e.g., "Order 1: [Item1, Item2]", "Order 2: [Item3]").
 * 
 * **Expected Output:**
 * 
 * The program should present a main menu, accept user input, perform the requested action, and provide feedback. Errors should be clearly indicated using `System.err`. Successful operations and status updates should use `System.out`. The queue view should reflect the current state of waiting orders.
 * 
 * ```
 * --- Restaurant Order System ---
 * 1. Add New Order
 * 2. Serve Next Order
 * 3. View Order Queue
 * 4. View Menu
 * 5. Exit
 * Enter your choice:
 * ```
 * 
 * (Example interaction after adding an order and viewing the queue)
 * ```
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 1
 * --- Add New Order ---
 * Enter item (or 'done' to finish): Burger
 * Item 'Burger' added to order.
 * Enter item (or 'done' to finish): Fries
 * Item 'Fries' added to order.
 * Enter item (or 'done' to finish): Drink
 * Item 'Drink' added to order.
 * Enter item (or 'done' to finish): done
 * Order added to queue.
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 3
 * --- Current Order Queue ---
 * Order 1: [Burger, Fries, Drink]
 * ---------------------------
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 2
 * Serving order: [Burger, Fries, Drink]
 * Order served.
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 3
 * --- Current Order Queue ---
 * Queue is empty.
 * ---------------------------
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * (Example interaction with errors)
 * ```
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 2
 * Error: Cannot serve order. The queue is empty.
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: 1
 * --- Add New Order ---
 * Enter item (or 'done' to finish): Soup
 * Error: Item 'Soup' is not on the menu.
 * Enter item (or 'done' to finish): Pizza
 * Item 'Pizza' added to order.
 * Enter item (or 'done' to finish): done
 * Order added to queue.
 * --- Restaurant Order System ---
 * ... (menu options)
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number between 1 and 5.
 * --- Restaurant Order System ---
 * ... (menu options)
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple restaurant order management system demonstrating the required Java concepts.
 * 
 * 1.  **Scenario and Structure:** The program simulates a restaurant's order flow. The `RestaurantOrderSystem` class encapsulates the state (menu, queue, scanner) and behavior (adding, serving, viewing).
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue`: The `orderQueue` is declared as `Queue<List<String>>` and instantiated as a `LinkedList`. This correctly uses a `Queue` to maintain the FIFO order of customer orders. `offer()` is used to add orders, and `poll()` is used to remove and retrieve the next order.
 *     *   `ArrayList`: The `menuItems` are stored in an `ArrayList`, which is suitable for a fixed-size collection that needs to be iterated over and checked for item existence (`contains()`).
 *     *   `List`: The `menuItems` field is declared using the `List` interface (`List<String> menuItems`), demonstrating coding to interfaces. Each individual order stored in the queue is also represented as a `List<String>`, utilizing the interface.
 *     *   `Scanner`: A `Scanner` object is used to read user input from `System.in` for menu choices and order items.
 *     *   `switch` statement: The `switch` statement in the `startSystem` method is used to direct program flow based on the user's integer choice from the main menu.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid menu choices, attempting to serve from an empty queue, or entering an order item not on the menu. This differentiates error output from normal output.
 *     *   `System.out`: Used for all normal program output, including displaying the menu, prompts, successful action confirmations, and the current state of the order queue.
 *     *   Class-wide `try-catch`: A `try-catch(Exception e)` block is wrapped around the main `while` loop in the `startSystem` method. This provides a top-level handler for any unexpected exceptions that might occur during the program's execution, preventing it from crashing abruptly. A `finally` block ensures the `Scanner` is closed. Specific input validation is also handled within methods (`getUserChoice`, `addNewOrder`) to provide more targeted feedback.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields (`menuItems`, `orderQueue`, `scanner`) are `private`, and interaction is managed through public (`startSystem`, `main`) and private helper methods (`displayMenu`, `getUserChoice`, `addNewOrder`, `serveNextOrder`, `viewOrderQueue`, `viewMenu`).
 *     *   **Meaningful Names:** Class, variable, and method names are descriptive (e.g., `RestaurantOrderSystem`, `orderQueue`, `addNewOrder`, `getUserChoice`).
 *     *   **Comments:** Javadoc comments explain the purpose of the class and methods, and inline comments clarify specific logic points.
 *     *   **Input Validation:**
 *         *   `getUserChoice` checks if the input is an integer using `hasNextInt()` before reading and handles non-integer input.
 *         *   `addNewOrder` validates each entered item against the `menuItems` list using `contains()`.
 *     *   **Error Handling:** Specific error conditions (empty queue, invalid menu item, invalid menu choice) are checked explicitly and reported using `System.err`. The main `try-catch` provides a fallback for unexpected issues.
 *     *   **Clean Code Structure:** The code is divided into logical methods, making it readable and maintainable. The main loop in `startSystem` orchestrates calls to these helper methods.
 * 
 * 4.  **Functionality Implementation:**
 *     *   **Menu:** The `menuItems` `ArrayList` is initialized in the constructor. `viewMenu` iterates through and prints it.
 *     *   **Order Queue:** The `orderQueue` `LinkedList` is initialized in the constructor.
 *     *   **Add Order:** `addNewOrder` prompts for items, uses an `ArrayList` (`currentOrderItems`) to build the order temporarily, validates each item against the menu, and adds the completed `List<String>` to the `orderQueue` using `offer()`.
 *     *   **Serve Order:** `serveNextOrder` checks if the queue is empty. If not, it uses `poll()` to get and remove the head of the queue and confirms the action.
 *     *   **View Queue:** `viewOrderQueue` checks if the queue is empty. If not, it iterates through the `orderQueue` (without removing elements, using an enhanced for loop) and prints each order list.
 *     *   **Exit:** The `Exit` option sets a boolean flag `exit` to `true`, terminating the `while` loop in `startSystem`.
 * 
 * This solution effectively integrates all the required Java components within a practical scenario, demonstrates essential programming practices, and handles potential errors gracefully.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * A simple Restaurant Order Management System.
 * Manages a menu and a queue of customer orders.
 */
public class RestaurantOrderSystem {

    // Using List interface with ArrayList implementation for menu
    private List<String> menuItems;
    // Using Queue interface with LinkedList implementation for orders
    private Queue<List<String>> orderQueue;
    private Scanner scanner;

    /**
     * Constructor to initialize the system.
     */
    public RestaurantOrderSystem() {
        // Initialize menu using ArrayList
        menuItems = new ArrayList<>();
        menuItems.add("Burger");
        menuItems.add("Pizza");
        menuItems.add("Salad");
        menuItems.add("Fries");
        menuItems.add("Drink");

        // Initialize order queue using LinkedList
        orderQueue = new LinkedList<>();

        // Initialize Scanner for user input
        scanner = new Scanner(System.in);
    }

    /**
     * Starts the main loop of the restaurant order system.
     * Includes class-wide exception handling.
     */
    public void startSystem() {
        boolean exit = false;
        // Class-wide try-catch block for the main execution loop
        try {
            while (!exit) {
                displayMenu();
                int choice = getUserChoice();

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addNewOrder();
                        break;
                    case 2:
                        serveNextOrder();
                        break;
                    case 3:
                        viewOrderQueue();
                        break;
                    case 4:
                        viewMenu();
                        break;
                    case 5:
                        exit = true;
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        // Use System.err for invalid menu choice
                        System.err.println("Error: Invalid input. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a newline for better formatting
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions and print to System.err
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging purposes
        } finally {
            // Ensure the scanner is closed when the system exits or an error occurs
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- Restaurant Order System ---");
        System.out.println("1. Add New Order");
        System.out.println("2. Serve Next Order");
        System.out.println("3. View Order Queue");
        System.out.println("4. View Menu");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Gets and validates the user's menu choice.
     *
     * @return The valid integer choice, or -1 if input is invalid.
     */
    private int getUserChoice() {
        try {
            // Check if the next input is an integer before reading
            if (scanner.hasNextInt()) {
                return scanner.nextInt();
            } else {
                // Consume the invalid input to prevent infinite loop
                scanner.next();
                return -1; // Indicate invalid input
            }
        } catch (InputMismatchException e) {
            // This catch block might be redundant if hasNextInt check is used,
            // but kept for robustness against unexpected Scanner state issues.
            System.err.println("Error reading input. Please enter a number.");
            scanner.next(); // Consume the invalid input
            return -1;
        }
    }

    /**
     * Handles the process of adding a new order to the queue.
     * Prompts user for items and validates against the menu.
     */
    private void addNewOrder() {
        System.out.println("--- Add New Order ---");
        // Use ArrayList to build the current customer order before adding to queue
        List<String> currentOrderItems = new ArrayList<>();
        String item;
        scanner.nextLine(); // Consume the newline character left by nextInt()

        System.out.println("Enter item (or 'done' to finish):");
        while (scanner.hasNextLine()) {
            item = scanner.nextLine().trim(); // Read the whole line and trim whitespace

            if (item.equalsIgnoreCase("done")) {
                break; // Exit loop if user enters 'done'
            }

            if (item.isEmpty()) {
                System.out.println("Please enter an item or 'done'.");
                continue; // Ask for input again if line is empty but not 'done'
            }

            // Input validation: Check if item is in the menu
            if (menuItems.contains(item)) {
                currentOrderItems.add(item);
                System.out.println("Item '" + item + "' added to order.");
            } else {
                // Use System.err for validation errors
                System.err.println("Error: Item '" + item + "' is not on the menu.");
            }
            System.out.println("Enter item (or 'done' to finish):");
        }

        // Add the completed order (List of items) to the Queue
        if (!currentOrderItems.isEmpty()) {
            orderQueue.offer(currentOrderItems); // offer is preferred over add for queues
            System.out.println("Order added to queue.");
        } else {
            System.out.println("No items added to order. Order not placed.");
        }
    }

    /**
     * Serves the next order from the front of the queue.
     */
    private void serveNextOrder() {
        // Check if the queue is empty before attempting to poll
        if (orderQueue.isEmpty()) {
            // Use System.err for error condition
            System.err.println("Error: Cannot serve order. The queue is empty.");
        } else {
            // Remove and retrieve the head of the queue
            List<String> servedOrder = orderQueue.poll();
            // Use System.out for successful action
            System.out.println("Serving order: " + servedOrder);
            System.out.println("Order served.");
        }
    }

    /**
     * Displays the current orders waiting in the queue.
     */
    private void viewOrderQueue() {
        System.out.println("--- Current Order Queue ---");
        // Check if the queue is empty
        if (orderQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            // Use an enhanced for loop which works on collections
            int orderNumber = 1;
            for (List<String> order : orderQueue) {
                System.out.println("Order " + orderNumber++ + ": " + order);
            }
        }
        System.out.println("---------------------------");
    }

    /**
     * Displays the list of available menu items.
     */
    private void viewMenu() {
        System.out.println("--- Menu ---");
        // Iterate through the menuItems List
        for (String item : menuItems) {
            System.out.println("- " + item);
        }
        System.out.println("------------");
    }

    /**
     * Main method to run the Restaurant Order System.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RestaurantOrderSystem system = new RestaurantOrderSystem();
        system.startSystem();
    }
}
