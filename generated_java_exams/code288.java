/*
 * Exam Question #288
 * Generated on: 2025-05-11 22:50:00
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Exam Task: Advanced Java Print Job Management System**
 * 
 * You are tasked with developing a simplified Print Job Management System in Java. The system should allow users to add new print jobs to a queue, process the next job in the queue, view the list of pending jobs, view the list of completed jobs, and clear the pending queue. The system must be interactive, accepting commands from the user via the console.
 * 
 * Your solution must demonstrate a strong understanding of core Java data structures, control flow, input/output, exception handling, and object-oriented principles.
 * 
 * **Requirements:**
 * 
 * 1.  **PrintJob Class:** Create a class `PrintJob` representing a single print job. It should have private fields for `user` (String), `fileName` (String), and `pages` (int). Include a constructor and public getter methods for these fields. Override the `toString()` method to provide a descriptive string representation of a job.
 * 2.  **PrintManager Class:** Create a class `PrintManager` to manage the print jobs.
 *     *   It must use a `java.util.Queue<PrintJob>` to hold pending print jobs.
 *     *   It must use a `java.util.List<PrintJob>` (implemented by `java.util.ArrayList`) to store completed print jobs.
 *     *   Include methods:
 *         *   `addJob(PrintJob job)`: Adds a job to the pending queue.
 *         *   `processNextJob()`: Removes the next job from the queue and adds it to the completed list. This method should **throw a custom exception** (e.g., `EmptyQueueException`) if the queue is empty.
 *         *   `viewQueue()`: Prints the details of all jobs currently in the pending queue to `System.out`. Indicate if the queue is empty.
 *         *   `viewCompletedJobs()`: Prints the details of all completed jobs from the list to `System.out`. Indicate if the completed list is empty.
 *         *   `clearQueue()`: Clears all jobs from the pending queue.
 * 3.  **Main Application Logic:** Create a main class (e.g., `PrintSystem`) with a `main` method to run the application.
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Add Job, Process Job, View Pending, View Completed, Clear Queue, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement input validation:
 *         *   Ensure the number of pages for a new job is positive. Use `System.err` for invalid input messages.
 *         *   Handle non-integer input for menu choices or page numbers gracefully using exception handling (`NumberFormatException`).
 *     *   Utilize `System.out` for normal output (menu, prompts, success messages, job details).
 *     *   Utilize `System.err` for all error messages (invalid input, exceptions, empty queue processing attempt).
 *     *   Implement **class-wide exception handling** using `try-catch` blocks in the `main` method to catch potential exceptions during operation (including the custom `EmptyQueueException` from `processNextJob` and `NumberFormatException` from input parsing) and print informative error messages to `System.err`. Include a general catch for unexpected exceptions.
 * 4.  **Custom Exception:** Define a simple custom exception class `EmptyQueueException` that extends `Exception`.
 * 5.  **Best Practices:** Adhere to Java best practices, including:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments explaining key logic.
 *     *   Clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should continuously display the menu, accept input, perform actions, and display results or errors until the user chooses to exit. Example interactions might look like:
 * 
 * ```
 * --- Print Job Management Menu ---
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Completed Jobs
 * 5. Clear Pending Queue
 * 6. Exit
 * Enter your choice: 1
 * Enter user name: alice
 * Enter file name: report.pdf
 * Enter number of pages: 15
 * Job added successfully.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * [Job: report.pdf by alice (15 pages)]
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 2
 * Processed job: [Job: report.pdf by alice (15 pages)]
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * Queue is empty.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 2
 * Error: Cannot process job: Queue is empty.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: invalid
 * Error: Invalid input. Please enter a number.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 1
 * Enter user name: bob
 * Enter file name: presentation.pptx
 * Enter number of pages: -5
 * Error: Number of pages must be positive.
 * 
 * --- Print Job Management Menu ---
 * ...
 * Enter your choice: 6
 * Exiting Print Job Management System.
 * ```
 * 
 * Your solution should be provided as a single block of complete Java code including all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Print Job Management System, fulfilling all the specified requirements and demonstrating advanced Java concepts.
 * 
 * 1.  **PrintJob Class:** A basic Plain Old Java Object (POJO) representing a print job with encapsulated fields (`user`, `fileName`, `pages`) and public getters. The `toString()` method provides a convenient way to display job information.
 * 
 * 2.  **PrintManager Class:** This class contains the core logic.
 *     *   `jobQueue`: Declared as `Queue<PrintJob>` and instantiated with `LinkedList`. `LinkedList` implements the `Queue` interface, providing FIFO (First-In, First-Out) behavior suitable for a job queue.
 *     *   `completedJobs`: Declared as `List<PrintJob>` and instantiated with `ArrayList`. `ArrayList` implements the `List` interface, providing a dynamic array to store completed jobs.
 *     *   `addJob()`: Uses `queue.offer()` to add a job.
 *     *   `processNextJob()`: Demonstrates removing from the queue using `queue.poll()` and adding to the list using `list.add()`. Crucially, it checks if the queue is empty and **throws a custom exception (`EmptyQueueException`)** if an attempt is made to process a non-existent job.
 *     *   `viewQueue()` and `viewCompletedJobs()`: Iterate through the respective collections and print job details to `System.out`. They handle the case where the collections are empty. Iterating the `Queue` using a for-each loop or iterator does not remove elements, which is correct for viewing.
 *     *   `clearQueue()`: Uses `queue.clear()` to empty the pending queue.
 * 
 * 3.  **Main Application Logic (`PrintSystem` class):**
 *     *   **`Scanner`:** Used to read user input from `System.in`. Reading input as `scanner.nextLine()` and then parsing is generally safer than mixing `nextInt()` and `nextLine()` in a loop.
 *     *   **`displayMenu()`:** A helper method for clear output using `System.out`.
 *     *   **`while(running)` loop:** Keeps the application running until the user chooses to exit.
 *     *   **Class-wide `try-catch`:** The entire `while` loop is wrapped in a `try-catch(Exception e)` block. This provides a top-level safety net to catch any unexpected runtime exceptions that might occur during the program's execution and print error details to `System.err`. The `finally` block ensures the `Scanner` is closed before the program terminates.
 *     *   **`switch` Statement:** Controls the program flow based on the user's menu choice. Each case handles a specific operation.
 *     *   **Input Validation & Error Handling:**
 *         *   Parsing the menu choice and page numbers from `String` to `int` is done inside `try-catch(NumberFormatException)` blocks. If parsing fails, an error message is printed to `System.err`.
 *         *   The number of pages is explicitly validated (`pages <= 0`), and an error is printed to `System.err` if invalid.
 *         *   The `case 2` (Process Job) specifically catches the custom `EmptyQueueException` thrown by `printManager.processNextJob()` and prints an informative error message to `System.err`.
 *         *   The `default` case in the `switch` handles invalid menu numbers, printing an error to `System.err`.
 *     *   **`System.out` vs. `System.err`:** `System.out` is used for all normal program output (menu, prompts, success messages, job lists). `System.err` is strictly used for error reporting (invalid input, empty queue, exceptions).
 * 
 * 4.  **Custom Exception (`EmptyQueueException`):** A simple custom exception class is created by extending `Exception`. This demonstrates how to create domain-specific exceptions to signal particular error conditions (like trying to dequeue from an empty queue) in a structured way.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `PrintJob` and `PrintManager` are private.
 *     *   **Meaningful Names:** Variable names (`jobQueue`, `completedJobs`, `user`, `fileName`, `pages`, `choiceInput`, etc.) and method names (`addJob`, `processNextJob`, `viewQueue`, `clearQueue`, `displayMenu`) are descriptive.
 *     *   **Comments:** Javadoc-style comments explain classes and methods, and inline comments clarify specific logic points (like using `poll()` or `offer()`, or the purpose of `try-catch` blocks).
 *     *   **Clean Structure:** The code is organized into logical classes (`PrintJob`, `PrintManager`, `PrintSystem`) with clear responsibilities.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, showcasing proper object-oriented design, input handling, and robust exception management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Custom exception for an empty queue operation
class EmptyQueueException extends Exception {
    public EmptyQueueException(String message) {
        super(message);
    }
}

// Represents a single print job
class PrintJob {
    private String user;
    private String fileName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     * @param user The user submitting the job.
     * @param fileName The name of the file to print.
     * @param pages The number of pages in the file.
     */
    public PrintJob(String user, String fileName, int pages) {
        this.user = user;
        this.fileName = fileName;
        this.pages = pages;
    }

    // --- Getters ---
    public String getUser() {
        return user;
    }

    public String getFileName() {
        return fileName;
    }

    public int getPages() {
        return pages;
    }

    /**
     * Provides a string representation of the PrintJob.
     * @return Formatted string describing the job.
     */
    @Override
    public String toString() {
        return "[Job: " + fileName + " by " + user + " (" + pages + " pages)]";
    }
}

// Manages the queue of pending print jobs and a list of completed jobs
class PrintManager {
    // Use Queue interface, implemented by LinkedList for FIFO behavior
    private Queue<PrintJob> jobQueue;
    // Use List interface, implemented by ArrayList for storing completed jobs
    private List<PrintJob> completedJobs;

    /**
     * Constructs a new PrintManager, initializing the queue and completed list.
     */
    public PrintManager() {
        jobQueue = new LinkedList<>(); // LinkedList implements Queue
        completedJobs = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new print job to the pending queue.
     * @param job The PrintJob to add.
     */
    public void addJob(PrintJob job) {
        jobQueue.offer(job); // offer() is preferred over add() for queues
    }

    /**
     * Processes the next job in the queue. Removes it from the queue
     * and adds it to the completed list.
     * @return The PrintJob that was processed.
     * @throws EmptyQueueException if the job queue is empty.
     */
    public PrintJob processNextJob() throws EmptyQueueException {
        if (jobQueue.isEmpty()) {
            throw new EmptyQueueException("Cannot process job: Queue is empty.");
        }
        PrintJob job = jobQueue.poll(); // poll() removes and returns the head
        completedJobs.add(job);
        return job;
    }

    /**
     * Prints the details of all jobs currently in the pending queue.
     * Prints to System.out.
     */
    public void viewQueue() {
        System.out.println("--- Pending Jobs ---");
        if (jobQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate without removing elements
            for (PrintJob job : jobQueue) {
                System.out.println(job);
            }
        }
    }

    /**
     * Prints the details of all completed jobs.
     * Prints to System.out.
     */
    public void viewCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobs.isEmpty()) {
            System.out.println("No jobs completed yet.");
        } else {
            for (PrintJob job : completedJobs) {
                System.out.println(job);
            }
        }
    }

    /**
     * Clears all jobs from the pending queue.
     */
    public void clearQueue() {
        jobQueue.clear();
    }
}

// Main class to run the Print Job Management System
public class PrintSystem {

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Print Job Management Menu ---");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. View Pending Jobs");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Clear Pending Queue");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintManager printManager = new PrintManager();
        boolean running = true;

        // Class-wide exception handling wrapping the main application loop
        try {
            while (running) {
                displayMenu();
                String choiceInput = scanner.nextLine(); // Read entire line

                try {
                    int choice = Integer.parseInt(choiceInput); // Parse to int

                    // Use switch statement for flow control based on user choice
                    switch (choice) {
                        case 1: // Add New Print Job
                            System.out.print("Enter user name: ");
                            String user = scanner.nextLine();
                            System.out.print("Enter file name: ");
                            String fileName = scanner.nextLine();
                            System.out.print("Enter number of pages: ");
                            String pagesInput = scanner.nextLine();

                            try {
                                int pages = Integer.parseInt(pagesInput);
                                // Input validation for pages
                                if (pages <= 0) {
                                    System.err.println("Error: Number of pages must be positive.");
                                } else {
                                    PrintJob newJob = new PrintJob(user, fileName, pages);
                                    printManager.addJob(newJob);
                                    System.out.println("Job added successfully.");
                                }
                            } catch (NumberFormatException e) {
                                // Handle non-integer input for pages
                                System.err.println("Error: Invalid input for pages. Please enter a number.");
                            }
                            break;

                        case 2: // Process Next Job
                            try {
                                PrintJob processedJob = printManager.processNextJob();
                                System.out.println("Processed job: " + processedJob);
                            } catch (EmptyQueueException e) {
                                // Handle specific business logic exception
                                System.err.println("Error: " + e.getMessage());
                            }
                            break;

                        case 3: // View Pending Jobs
                            printManager.viewQueue();
                            break;

                        case 4: // View Completed Jobs
                            printManager.viewCompletedJobs();
                            break;

                        case 5: // Clear Pending Queue
                            printManager.clearQueue();
                            System.out.println("Pending queue cleared.");
                            break;

                        case 6: // Exit
                            System.out.println("Exiting Print Job Management System.");
                            running = false;
                            break;

                        default:
                            // Handle invalid menu choice
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (NumberFormatException e) {
                    // Handle non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                }
            }
        } catch (Exception e) {
            // General catch block for any unexpected runtime errors
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed when the program exits
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("System shut down."); // Confirmation message
        }
    }
}
