/*
 * Exam Question #525
 * Generated on: 2025-05-11 23:24:35
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam: Library Book Management System
 * 
 * **Objective:** Design and implement a simple command-line library management system. The system must manage a catalog of books and a waiting list (holds) for books that are currently checked out. This task requires demonstrating proficiency in core Java data structures, control flow, user input handling, and exception management.
 * 
 * **Requirements:**
 * 
 * 1.  **Book Representation:** Create a `Book` class with private fields for `id` (int), `title` (String), `author` (String), and `isAvailable` (boolean). Include a constructor, public getters for all fields, a public method `setAvailable(boolean status)`, and a meaningful `toString()` method.
 * 
 * 2.  **Library System Class:** Create a `LibrarySystem` class that manages the library's operations. This class will contain:
 *     *   A collection to store the library's catalog of `Book` objects. This must be declared using the `List` interface and instantiated as an `ArrayList`.
 *     *   A collection to manage hold requests for books. This must be declared using the `Queue` interface and instantiated using a concrete implementation like `LinkedList`. The queue should store the `id` of the book for which a hold has been placed, representing a FIFO waiting list for the *next* available copy of the book whose ID is at the front of the queue.
 *     *   A `Scanner` object for reading user input from the console.
 * 
 * 3.  **Functionality:** The `LibrarySystem` class must implement the following methods:
 *     *   A constructor that initializes the catalog with a few sample books (some available, some checked out) and initializes the hold queue.
 *     *   `displayCatalog()`: Prints the details of all books in the catalog.
 *     *   `checkoutBook()`: Prompts the user for a book ID, finds the book. If found and available, marks it as checked out. If not found or unavailable, reports an error.
 *     *   `returnBook()`: Prompts the user for a book ID, finds the book. If found and marked as checked out, marks it as available. If not found or already available, reports an error. **Crucially, after marking a book as available, check if its ID is at the front of the hold queue (`peek()`). If it is, remove it from the queue (`poll()`) and notify the user that the hold for that book is ready.**
 *     *   `placeHold()`: Prompts the user for a book ID, finds the book. If found and unavailable, adds the book's ID to the hold queue. If found and available, informs the user no hold is needed. If not found, reports an error.
 *     *   `viewNextHold()`: Displays the ID and title of the book at the front of the hold queue (`peek()`) without removing it. If the queue is empty, reports that there are no pending holds.
 * 
 * 4.  **User Interface:** Implement a simple command-line menu loop in the `main` method (or a dedicated `run` method called from `main`) of the `LibrarySystem` class. The menu should offer options to:
 *     *   Display Catalog
 *     *   Checkout Book
 *     *   Return Book
 *     *   Place Hold
 *     *   View Next Hold
 *     *   Exit
 * 
 * 5.  **Control Flow:** Use a `switch` statement to handle the different menu options selected by the user.
 * 
 * 6.  **Input Handling & Validation:**
 *     *   Use `Scanner` to read user input (menu choices, book IDs).
 *     *   Validate that the user's menu choice is a valid integer and corresponds to an available option.
 *     *   Validate that entered book IDs are integers.
 * 
 * 7.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main menu loop to catch potential errors (e.g., invalid input format, book not found, book unavailable).
 *     *   Define and use custom exceptions like `BookNotFoundException` and `BookUnavailableException` for specific business logic errors.
 *     *   Use `System.err.println()` to print all error messages.
 *     *   Use `System.out.println()` for all normal output (menu, catalog, success messages, hold information).
 * 
 * 8.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (especially Javadoc for classes and methods).
 *     *   Ensure the Scanner is closed properly when the application exits.
 * 
 * **Expected Output:**
 * 
 * The program should start by displaying the initial catalog. Then, it should present the menu. Based on user input, it should perform the requested action, print relevant information to `System.out`, and print any error messages to `System.err`.
 * 
 * ```
 * --- Library Catalog ---
 * ID: 1, Title: The Lord of the Rings, Author: J.R.R. Tolkien, Available: true
 * ID: 2, Title: Pride and Prejudice, Author: Jane Austen, Available: false
 * ID: 3, Title: 1984, Author: George Orwell, Available: true
 * -------------------------
 * 
 * Library Menu:
 * 1. Display Catalog
 * 2. Checkout Book
 * 3. Return Book
 * 4. Place Hold
 * 5. View Next Hold
 * 0. Exit
 * Enter your choice:
 * ```
 * 
 * *(Example interaction for checking out an available book)*
 * ```
 * Enter your choice: 2
 * Enter Book ID to checkout: 1
 * Book "The Lord of the Rings" (ID: 1) checked out successfully.
 * ```
 * 
 * *(Example interaction for trying to checkout an unavailable book)*
 * ```
 * Enter your choice: 2
 * Enter Book ID to checkout: 2
 * Error: Book "Pride and Prejudice" (ID: 2) is currently unavailable.
 * ```
 * 
 * *(Example interaction for placing a hold on an unavailable book)*
 * ```
 * Enter your choice: 4
 * Enter Book ID to place hold on: 2
 * Hold placed for book "Pride and Prejudice" (ID: 2). You are now in the queue.
 * ```
 * 
 * *(Example interaction for viewing the next hold)*
 * ```
 * Enter your choice: 5
 * Next in hold queue: Book ID 2: Pride and Prejudice
 * ```
 * 
 * *(Example interaction for returning a book with a hold)*
 * ```
 * Enter your choice: 3
 * Enter Book ID to return: 2
 * Book "Pride and Prejudice" (ID: 2) returned successfully.
 * Hold for book "Pride and Prejudice" (ID: 2) is now ready for the next person in queue.
 * ```
 * 
 * *(Example of invalid input handling)*
 * ```
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * ```
 * 
 * *(Example of exiting)*
 * ```
 * Enter your choice: 0
 * Exiting Library System. Goodbye!
 * ```
 * 
 * **Grading Criteria:**
 * 
 * *   Correct implementation of all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Correct implementation of the `Book` class and its methods.
 * *   Correct implementation of all `LibrarySystem` functionalities as described.
 * *   Proper use of `List` and `Queue` interfaces and their concrete implementations.
 * *   Effective use of `switch` for menu navigation.
 * *   Robust input handling and validation using `Scanner`.
 * *   Comprehensive error handling using `try-catch`, custom exceptions, `System.err`.
 * *   Adherence to best practices (encapsulation, naming, comments).
 * *   Clean and readable code structure.
 * 
 * **Time Limit:** 45-60 minutes. Focus on a functional implementation that meets all requirements.
 *
 * EXPLANATION:
 * This solution implements a simple library management system demonstrating the required Java concepts.
 * 
 * 1.  **`Book` Class:** Represents a book with essential attributes (`id`, `title`, `author`, `isAvailable`) and methods for accessing/modifying its state. Encapsulation is used by making fields private and providing public getters and a setter. `toString()` provides a convenient string representation.
 * 
 * 2.  **`LibrarySystem` Class:** This is the core class managing the library's data and operations.
 *     *   **`List<Book> catalog = new ArrayList<>();`**: An `ArrayList` is used to store the `Book` objects, accessed via the `List` interface. This allows dynamic resizing and easy iteration over the book collection.
 *     *   **`Queue<Integer> holdRequests = new LinkedList<>();`**: A `LinkedList` is used as the concrete implementation of the `Queue` interface. It stores `Integer` objects representing the IDs of books for which holds have been placed. The `Queue` interface guarantees FIFO behavior, meaning the book ID added first will be the first one retrieved by `poll()` or viewed by `peek()`. This structure represents a single, system-wide hold queue where the *order of requests* is maintained, and a hold is fulfilled only when the specific book at the *front* of the queue is returned.
 *     *   **`Scanner scanner = new Scanner(System.in);`**: Used to read input from the standard input stream (`System.in`).
 * 
 * 3.  **Functionality Methods:**
 *     *   `findBookById()`: A private helper method to search the `catalog` list.
 *     *   `displayCatalog()`: Iterates through the `catalog` list and prints each book's details using its `toString()` method.
 *     *   `checkoutBook()`: Takes input, uses `findBookById`, checks `isAvailable()`, and uses `setAvailable(false)`. Throws custom exceptions for clarity.
 *     *   `returnBook()`: Takes input, uses `findBookById`, uses `setAvailable(true)`. It then checks if the `holdRequests` queue is not empty and if the `peek()` element (the ID of the book at the front of the queue) matches the ID of the book just returned. If it matches, `holdRequests.poll()` removes that hold request, and a notification is printed. This correctly implements the FIFO hold logic based on the queue structure.
 *     *   `placeHold()`: Takes input, uses `findBookById`. If the book is unavailable, its ID is added to the `holdRequests` queue using `offer()`, maintaining the FIFO order of hold requests.
 *     *   `viewNextHold()`: Uses `holdRequests.peek()` to look at the first element in the queue without removing it. It then finds the corresponding `Book` object to display its title.
 * 
 * 4.  **User Interface (`run` method):**
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   `printMenu()` displays the options.
 *     *   `readIntInput()` is a helper method to handle reading integer input robustly, consuming invalid input and prompting again if a non-integer is entered. This prevents `InputMismatchException` from crashing the program directly in the main loop's `try-catch`.
 *     *   **`switch (choice)`**: This control structure efficiently directs execution based on the user's valid integer input to the appropriate method call. The `default` case handles valid integer inputs that don't match any menu option.
 * 
 * 5.  **Input Handling and Validation:**
 *     *   `Scanner` is used for input. The `readIntInput()` helper method demonstrates robust integer input reading and validation, consuming incorrect tokens and handling `InputMismatchException` internally before returning a valid integer. `scanner.nextLine()` is called after reading the integer to consume the remaining newline character, preventing potential issues with subsequent `nextLine()` calls if they were needed.
 * 
 * 6.  **Error Handling:**
 *     *   **`try-catch`**: A large `try` block wraps the input reading and method calls within the `run` loop. This allows catching exceptions thrown by the action methods (`checkoutBook`, `returnBook`, `placeHold`) and potential `NumberFormatException` from `Integer.parseInt` (though `readIntInput` handles the primary input parsing error) or other unexpected exceptions.
 *     *   **Custom Exceptions (`BookNotFoundException`, `BookUnavailableException`)**: These specific exceptions are thrown by methods like `checkoutBook`, `returnBook`, and `placeHold` when business rules are violated (book not in catalog, book not available for checkout). This provides clear, semantic error information.
 *     *   **`System.err.println()`**: All error messages caught in the `try-catch` blocks or handled within `readIntInput` are printed to `System.err`, separating them from normal application output which uses `System.out.println()`.
 * 
 * 7.  **Best Practices:**
 *     *   **Encapsulation:** Private fields and public methods in `Book` and `LibrarySystem`.
 *     *   **Meaningful Names:** Variables like `catalog`, `holdRequests`, `checkoutBook`, `findBookById`, `isAvailable` are descriptive.
 *     *   **Comments:** Javadoc comments explain the purpose of classes and methods. Inline comments clarify specific logic points (like the hold queue check in `returnBook`).
 *     *   **Resource Management:** The `scanner.close()` call ensures the `Scanner` resource is released when the program exits.
 * 
 * This solution effectively integrates all required Java components within a practical scenario, demonstrating understanding of data structures, control flow, and comprehensive error handling using exceptions and distinct output streams.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Custom Exception for when a book is not found
class BookNotFoundException extends Exception {
    public BookNotFoundException(String message) {
        super(message);
    }
}

// Custom Exception for when a book is unavailable (e.g., trying to checkout)
class BookUnavailableException extends Exception {
    public BookUnavailableException(String message) {
        super(message);
    }
}

// Represents a Book in the library catalog
class Book {
    private int id;
    private String title;
    private String author;
    private boolean isAvailable;

    /**
     * Constructs a new Book.
     * @param id The unique ID of the book.
     * @param title The title of the book.
     * @param author The author of the book.
     */
    public Book(int id, String title, String author) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.isAvailable = true; // Books are available by default
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    /**
     * Sets the availability status of the book.
     * @param available True if the book is available, false otherwise.
     */
    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return "ID: " + id +
               ", Title: " + title +
               ", Author: " + author +
               ", Available: " + isAvailable;
    }
}

// Main class for the Library System
public class LibrarySystem {
    // Using List interface, implemented by ArrayList for the catalog
    private List<Book> catalog;
    // Using Queue interface, implemented by LinkedList for hold requests (FIFO)
    private Queue<Integer> holdRequests; // Stores book IDs
    private Scanner scanner;

    /**
     * Constructs the LibrarySystem, initializes catalog and hold queue,
     * and adds sample books.
     */
    public LibrarySystem() {
        catalog = new ArrayList<>();
        holdRequests = new LinkedList<>();
        scanner = new Scanner(System.in);

        // Add sample books
        catalog.add(new Book(101, "The Lord of the Rings", "J.R.R. Tolkien"));
        catalog.add(new Book(102, "Pride and Prejudice", "Jane Austen"));
        catalog.add(new Book(103, "1984", "George Orwell"));
        catalog.add(new Book(104, "To Kill a Mockingbird", "Harper Lee"));

        // Set one book as initially checked out for demonstration
        findBookById(102).setAvailable(false);
    }

    /**
     * Finds a book in the catalog by its ID.
     * @param id The ID of the book to find.
     * @return The Book object if found, null otherwise.
     */
    private Book findBookById(int id) {
        for (Book book : catalog) {
            if (book.getId() == id) {
                return book;
            }
        }
        return null; // Book not found
    }

    /**
     * Displays the entire library catalog.
     */
    public void displayCatalog() {
        System.out.println("\n--- Library Catalog ---");
        if (catalog.isEmpty()) {
            System.out.println("Catalog is empty.");
        } else {
            for (Book book : catalog) {
                System.out.println(book);
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Handles the checkout process for a book.
     * Prompts user for ID, validates, and updates book status.
     * @throws BookNotFoundException if the book ID is not in the catalog.
     * @throws BookUnavailableException if the book is already checked out.
     */
    public void checkoutBook() throws BookNotFoundException, BookUnavailableException {
        System.out.print("Enter Book ID to checkout: ");
        int bookId = readIntInput(); // Use helper for robust input

        Book book = findBookById(bookId);

        if (book == null) {
            throw new BookNotFoundException("Book with ID " + bookId + " not found.");
        }

        if (!book.isAvailable()) {
            throw new BookUnavailableException("Book \"" + book.getTitle() + "\" (ID: " + bookId + ") is currently unavailable.");
        }

        book.setAvailable(false);
        System.out.println("Book \"" + book.getTitle() + "\" (ID: " + bookId + ") checked out successfully.");
    }

    /**
     * Handles the return process for a book.
     * Prompts user for ID, validates, updates book status, and checks hold queue.
     * @throws BookNotFoundException if the book ID is not in the catalog.
     */
    public void returnBook() throws BookNotFoundException {
        System.out.print("Enter Book ID to return: ");
        int bookId = readIntInput(); // Use helper for robust input

        Book book = findBookById(bookId);

        if (book == null) {
            throw new BookNotFoundException("Book with ID " + bookId + " not found.");
        }

        if (book.isAvailable()) {
             System.out.println("Book \"" + book.getTitle() + "\" (ID: " + bookId + ") was already available.");
             return; // Book was already available, nothing more to do regarding status
        }

        book.setAvailable(true);
        System.out.println("Book \"" + book.getTitle() + "\" (ID: " + bookId + ") returned successfully.");

        // Check if this returned book is the next one on hold
        if (!holdRequests.isEmpty() && holdRequests.peek().equals(bookId)) {
            holdRequests.poll(); // Remove the hold request from the queue
            System.out.println("Hold for book \"" + book.getTitle() + "\" (ID: " + bookId + ") is now ready for the next person in queue.");
        }
    }

    /**
     * Handles placing a hold on a book.
     * Prompts user for ID, validates, and adds to hold queue if unavailable.
     * @throws BookNotFoundException if the book ID is not in the catalog.
     */
    public void placeHold() throws BookNotFoundException {
        System.out.print("Enter Book ID to place hold on: ");
        int bookId = readIntInput(); // Use helper for robust input

        Book book = findBookById(bookId);

        if (book == null) {
            throw new BookNotFoundException("Book with ID " + bookId + " not found.");
        }

        if (book.isAvailable()) {
            System.out.println("Book \"" + book.getTitle() + "\" (ID: " + bookId + ") is currently available. No hold needed.");
        } else {
            // Add the book ID to the hold queue
            holdRequests.offer(bookId);
            System.out.println("Hold placed for book \"" + book.getTitle() + "\" (ID: " + bookId + "). You are now in the queue.");
        }
    }

    /**
     * Displays the book details for the next hold request in the queue.
     */
    public void viewNextHold() {
        System.out.println("\n--- Hold Queue ---");
        if (holdRequests.isEmpty()) {
            System.out.println("No pending holds.");
        } else {
            Integer nextHoldBookId = holdRequests.peek(); // Peek without removing
            Book nextHoldBook = findBookById(nextHoldBookId); // Find the book details

            if (nextHoldBook != null) {
                 System.out.println("Next in hold queue: Book ID " + nextHoldBookId + ": " + nextHoldBook.getTitle());
            } else {
                 // This case should ideally not happen if book IDs in queue are valid
                 System.err.println("Error: Book ID in hold queue (" + nextHoldBookId + ") not found in catalog.");
                 // Optionally, remove the invalid hold ID: holdRequests.poll();
            }
        }
         System.out.println("------------------");
    }

    /**
     * Helper method to read and validate integer input.
     * Handles non-integer input gracefully.
     * @return The valid integer input from the user.
     */
    private int readIntInput() {
        while (!scanner.hasNextInt()) {
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.next(); // Consume the invalid input
            System.out.print("Enter a number: "); // Prompt again
        }
        int input = scanner.nextInt();
        scanner.nextLine(); // Consume the leftover newline character
        return input;
    }


    /**
     * Runs the main library system application loop.
     */
    public void run() {
        int choice = -1;

        displayCatalog(); // Show initial state

        while (choice != 0) {
            printMenu();
            System.out.print("Enter your choice: ");

            try {
                choice = readIntInput(); // Use helper for robust input

                // Use switch statement for menu control
                switch (choice) {
                    case 1:
                        displayCatalog();
                        break;
                    case 2:
                        checkoutBook();
                        break;
                    case 3:
                        returnBook();
                        break;
                    case 4:
                        placeHold();
                        break;
                    case 5:
                        viewNextHold();
                        break;
                    case 0:
                        System.out.println("Exiting Library System. Goodbye!");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 0 and 5.");
                }
            } catch (BookNotFoundException e) {
                System.err.println("Error: " + e.getMessage());
            } catch (BookUnavailableException e) {
                System.err.println("Error: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(System.err); // Uncomment for debugging
            }
            System.out.println(); // Add a newline for better readability between actions
        }

        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("Library Menu:");
        System.out.println("1. Display Catalog");
        System.out.println("2. Checkout Book");
        System.out.println("3. Return Book");
        System.out.println("4. Place Hold");
        System.out.println("5. View Next Hold");
        System.out.println("0. Exit");
    }

    public static void main(String[] args) {
        LibrarySystem library = new LibrarySystem();
        library.run();
    }
}
