/*
 * Exam Question #428
 * Generated on: 2025-05-11 23:09:59
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Management System**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System using core Java concepts. The system should manage a waiting list of patients needing to register and a list of successfully registered appointments.
 * 
 * **System Requirements:**
 * 
 * 1.  **Patient Representation:** Create a simple `Patient` class with private fields for `patientId` (String) and `name` (String). Include a constructor and public getter methods.
 * 2.  **Appointment Representation:** Create a simple `Appointment` class with private fields for `patient` (Patient object), `doctor` (String representing doctor's name), and `timeSlot` (String). Include a constructor and public getter methods.
 * 3.  **Appointment Management Logic:** Create a class named `AppointmentSystem` that encapsulates the system's state and logic.
 *     *   It must have a private `Queue<Patient>` to hold patients waiting for registration.
 *     *   It must have a private `List<Appointment>` to store successfully registered appointments.
 *     *   It must have a private `List<String>` representing available doctors/time slots (initialize with a few sample slots). Use the `List` interface type for this field.
 *     *   The class should have public methods for the following operations:
 *         *   `addPatient()`: Prompts the user for patient details (ID, Name) using `Scanner` and adds the patient to the waiting queue. Perform basic input validation (e.g., check if ID/Name are empty).
 *         *   `registerAppointment()`: Takes the next patient from the waiting queue (if available) and assigns them the first available doctor/time slot (if available). Creates an `Appointment` object and adds it to the registered appointments list. This process should *not* remove the doctor/slot from the available list in this simplified version, but it should check for availability. If the queue is empty or no slots are available, it should report an error.
 *         *   `viewWaitingQueue()`: Displays the list of patients currently in the waiting queue.
 *         *   `viewRegisteredAppointments()`: Displays the list of all registered appointments.
 *         *   `runSystem()`: Contains the main application loop. It should display a menu to the user, read their choice using `Scanner`, and use a `switch` statement to call the appropriate method based on the user's input.
 * 4.  **User Interface:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operations, and lists.
 *     *   Use `System.err` to report error conditions (e.g., invalid menu choice, queue empty, no slots available, invalid patient input).
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling within the `runSystem` method using a `try-catch` block to catch potential exceptions (like `InputMismatchException` if the user enters non-integer input for the menu) and provide informative error messages.
 *     *   Implement input validation within `addPatient` and error checks within `registerAppointment` as described above.
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments to explain the purpose of classes and complex logic.
 *     *   Ensure clean code structure.
 * 
 * **Menu Options:**
 * 
 * 1.  Add Patient to Waiting Queue
 * 2.  Register Appointment for Next Patient
 * 3.  View Waiting Queue
 * 4.  View Registered Appointments
 * 5.  Exit
 * 
 * **Expected Output:**
 * 
 * *   The system should continuously display the menu until the user chooses to exit.
 * *   Successful operations should be confirmed with messages on `System.out`.
 * *   Error conditions (invalid input, empty queue, no slots) should be reported on `System.err`.
 * *   Viewing queues/appointments should display the relevant information clearly formatted on `System.out`.
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` and `Appointment` classes are simple Plain Old Java Objects (POJOs) with private fields, a constructor, and public getter methods, adhering to encapsulation. `toString()` methods are included for easy printing of object details.
 *     *   `AppointmentSystem` is the main class managing the system logic and state.
 * 
 * 2.  **Required Components Usage:**
 *     *   `Queue (java.util.Queue)`: The `waitingQueue` field is declared as `Queue<Patient>` and initialized with a `LinkedList` implementation. `offer()` is used to add patients to the end of the queue, and `poll()` is used in `registerAppointment()` to retrieve and remove the patient at the front of the queue.
 *     *   `ArrayList (java.util.ArrayList)`: Used to initialize the `registeredAppointments` and `availableDoctors` lists.
 *     *   `List interface (java.util.List)`: The fields `registeredAppointments` and `availableDoctors` are declared using the `List` interface type (`List<Appointment>`, `List<String>`), promoting good practice by programming to interfaces rather than concrete implementations.
 *     *   `Scanner (java.util.Scanner)`: An instance of `Scanner` is created in the `AppointmentSystem` constructor and used throughout the `runSystem` and `addPatient` methods to read user input from `System.in`.
 *     *   `Switch statement`: Used in the `runSystem` method to handle the different menu choices selected by the user, directing the program flow to the appropriate method call.
 *     *   `System.err`: Used to print error messages, such as invalid menu input, empty queues, or invalid patient details, directing error output to the standard error stream.
 *     *   `System.out`: Used for all normal output, including the menu, prompts, confirmation messages, and the contents of the waiting queue and registered appointments lists.
 *     *   `Class-wide exception handling with try-catch blocks`: The `runSystem` method contains a broad `try-catch(Exception e)` block wrapping the main application loop. This demonstrates catching unexpected runtime errors that might occur anywhere within the loop's execution. Additionally, a nested `try-catch(InputMismatchException e)` is used specifically around the `scanner.nextInt()` call within the loop to handle cases where the user enters non-integer input for the menu choice gracefully, preventing the program from crashing and allowing the loop to continue.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** All data fields in `Patient`, `Appointment`, and `AppointmentSystem` are `private`, and access is provided through public methods (constructors, getters, system operation methods).
 *     *   **Meaningful Names:** Variable names (`waitingQueue`, `registeredAppointments`, `addPatient`, `registerAppointment`, `patientId`, `timeSlot`) and method names clearly indicate their purpose.
 *     *   **Comments:** Javadoc-style comments briefly explain the purpose of each class and method. Inline comments clarify specific logic points (e.g., using `offer()` vs `add()`, `poll()` vs `remove()`, consuming newline).
 *     *   **Input Validation:** The `addPatient` method checks if the entered ID or Name is empty. The `registerAppointment` method checks if the `waitingQueue` or `availableDoctors` list is empty before attempting to proceed.
 *     *   **Error Handling:** Error conditions identified by validation are reported using `System.err` with descriptive messages. The `try-catch` blocks handle unexpected exceptions.
 *     *   **Clean Code Structure:** The logic is divided into distinct methods (`addPatient`, `registerAppointment`, etc.), making the code modular and easier to understand. The `runSystem` method orchestrates the main application flow. The `main` method is minimal, just creating an instance and starting the system. Resource management is shown by closing the `Scanner` in a `finally` block.
 * 
 * The solution provides a functional system that meets all the specified requirements, demonstrating a solid understanding of core Java data structures, control flow, user input handling, and error management in a practical context.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a Patient
class Patient {
    private String patientId;
    private String name;

    // Constructor
    public Patient(String patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    // Getters
    public String getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    // toString for easy printing
    @Override
    public String toString() {
        return "Patient{ID='" + patientId + "', Name='" + name + "'}";
    }
}

// Represents a Registered Appointment
class Appointment {
    private Patient patient;
    private String doctor;
    private String timeSlot;

    // Constructor
    public Appointment(Patient patient, String doctor, String timeSlot) {
        this.patient = patient;
        this.doctor = doctor;
        this.timeSlot = timeSlot;
    }

    // Getters
    public Patient getPatient() {
        return patient;
    }

    public String getDoctor() {
        return doctor;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    // toString for easy printing
    @Override
    public String toString() {
        return "Appointment{Patient=" + patient.getName() + " (ID:" + patient.getPatientId() + "), Doctor='" + doctor + "', Time='" + timeSlot + "'}";
    }
}

// Manages the Hospital Appointments
public class AppointmentSystem {

    // Queue to hold patients waiting for registration
    private Queue<Patient> waitingQueue;
    // List to store successfully registered appointments
    private List<Appointment> registeredAppointments;
    // List of available doctors/time slots (using List interface)
    private List<String> availableDoctors;
    // Scanner for user input
    private Scanner scanner;

    // Constructor to initialize the system
    public AppointmentSystem() {
        // Use LinkedList for Queue implementation
        waitingQueue = new LinkedList<>();
        // Use ArrayList for List implementation
        registeredAppointments = new ArrayList<>();
        availableDoctors = new ArrayList<>();
        // Add some initial available slots
        availableDoctors.add("Dr. Smith - 9:00 AM");
        availableDoctors.add("Dr. Jones - 10:00 AM");
        availableDoctors.add("Dr. Williams - 11:00 AM");

        scanner = new Scanner(System.in);
    }

    // Adds a new patient to the waiting queue based on user input
    public void addPatient() {
        System.out.println("\n--- Add New Patient ---");
        System.out.print("Enter Patient ID: ");
        String id = scanner.nextLine().trim(); // Read full line and trim whitespace
        System.out.print("Enter Patient Name: ");
        String name = scanner.nextLine().trim();

        // Input validation
        if (id.isEmpty() || name.isEmpty()) {
            System.err.println("Error: Patient ID and Name cannot be empty.");
            return; // Exit the method if input is invalid
        }

        Patient newPatient = new Patient(id, name);
        waitingQueue.offer(newPatient); // Add patient to the end of the queue
        System.out.println("Patient added to waiting queue: " + newPatient.getName());
    }

    // Registers an appointment for the next patient in the queue
    public void registerAppointment() {
        System.out.println("\n--- Register Appointment ---");

        // Check if there are patients waiting
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: No patients in the waiting queue.");
            return;
        }

        // Check if there are available doctor slots
        if (availableDoctors.isEmpty()) {
             System.err.println("Error: No available doctor slots at the moment.");
             return;
        }

        // Get the next patient from the queue (and remove them)
        Patient nextPatient = waitingQueue.poll();
        // Get the first available doctor/slot (without removing it for simplicity)
        String assignedDoctorSlot = availableDoctors.get(0); // Assign the first one

        // Create and store the appointment
        Appointment newAppointment = new Appointment(nextPatient, assignedDoctorSlot.split(" - ")[0], assignedDoctorSlot.split(" - ")[1]); // Simple split for doctor name and time
        registeredAppointments.add(newAppointment); // Add to the list of registered appointments

        System.out.println("Appointment registered:");
        System.out.println(newAppointment); // Print the appointment details
    }

    // Displays all patients currently in the waiting queue
    public void viewWaitingQueue() {
        System.out.println("\n--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            int count = 1;
            // Iterate through the queue without removing elements
            for (Patient patient : waitingQueue) {
                System.out.println(count++ + ". " + patient);
            }
        }
    }

    // Displays all successfully registered appointments
    public void viewRegisteredAppointments() {
        System.out.println("\n--- Registered Appointments ---");
        if (registeredAppointments.isEmpty()) {
            System.out.println("No appointments have been registered yet.");
        } else {
            int count = 1;
            // Iterate through the list
            for (Appointment appointment : registeredAppointments) {
                System.out.println(count++ + ". " + appointment);
            }
        }
    }

    // Runs the main system loop with menu interaction
    public void runSystem() {
        int choice = -1;

        // Class-wide try-catch for handling potential exceptions during execution
        try {
            while (choice != 5) {
                printMenu();
                System.out.print("Enter your choice: ");

                // Use a nested try-catch specifically for reading integer input
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    // Switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            addPatient();
                            break;
                        case 2:
                            registerAppointment();
                            break;
                        case 3:
                            viewWaitingQueue();
                            break;
                        case 4:
                            viewRegisteredAppointments();
                            break;
                        case 5:
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input specifically
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input line to prevent infinite loop
                    choice = -1; // Reset choice to stay in loop
                }
                System.out.println(); // Add a blank line for better readability
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during system execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed when the system exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Helper method to print the main menu
    private void printMenu() {
        System.out.println("--- Hospital Appointment System Menu ---");
        System.out.println("1. Add Patient to Waiting Queue");
        System.out.println("2. Register Appointment for Next Patient");
        System.out.println("3. View Waiting Queue");
        System.out.println("4. View Registered Appointments");
        System.out.println("5. Exit");
        System.out.println("--------------------------------------");
    }

    // Main method to start the application
    public static void main(String[] args) {
        AppointmentSystem system = new AppointmentSystem();
        system.runSystem();
    }
}
