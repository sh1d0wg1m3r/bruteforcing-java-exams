/*
 * Exam Question #463
 * Generated on: 2025-05-11 23:14:52
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Technical Support Queue Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line application to manage technical support requests for a small software company. New support requests arrive and are placed in a queue to be processed by the support team. Once a request is picked from the queue and resolved, it is moved to a list of completed requests for record-keeping.
 * 
 * Your system must allow users (simulating support staff) to interact with the queue and view resolved requests.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following functional requirements:
 * 
 * 1.  **Add New Support Request:** Prompt the user for a description and priority (e.g., "Low", "Medium", "High") for a new support request. Assign a unique ID to the request (starting from 1 and incrementing). Add the newly created request to the queue of open requests.
 * 2.  **View Next Open Request:** Display the details (ID, description, priority, status) of the request that is next in line to be processed from the open requests queue, *without* removing it. If the queue is empty, inform the user.
 * 3.  **Resolve Next Open Request:** Remove the request that is next in line from the open requests queue, change its status to "Resolved", and add it to a list of resolved requests. Display the details of the resolved request. If the queue is empty, inform the user.
 * 4.  **View All Open Requests:** Display the details of all requests currently waiting in the open requests queue, in the order they would be processed. If the queue is empty, inform the user. Also, display the total number of open requests.
 * 5.  **View All Resolved Requests:** Display the details of all requests that have been resolved and moved to the resolved list. If the list is empty, inform the user. Also, display the total number of resolved requests.
 * 6.  **Exit:** Terminate the application.
 * 
 * **Technical Constraints:**
 * 
 * Your solution MUST utilize ALL of the following Java components:
 * 
 * *   `java.util.Queue` (use a concrete implementation like `LinkedList`) for managing open requests.
 * *   `java.util.ArrayList` for managing resolved requests.
 * *   `java.util.List` for declaring the type of the resolved requests collection.
 * *   `java.util.Scanner` for reading user input from the console.
 * *   `switch` statement for handling the main menu choices.
 * *   `System.err` for printing error messages (e.g., invalid input, queue empty when trying to resolve).
 * *   `System.out` for printing the menu, prompts, request details, and other normal output.
 * *   Class-wide exception handling using `try-catch` blocks to manage potential runtime issues, particularly around user input processing.
 * 
 * **Implementation Details & Best Practices:**
 * 
 * *   Design your solution using object-oriented principles. Create classes like `SupportRequest` and `SupportQueueManager`.
 * *   Apply proper encapsulation (private fields, public methods).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and basic documentation (e.g., Javadoc for methods).
 * *   Implement basic input validation (e.g., handle non-integer input for menu choices, check for empty description).
 * *   Ensure robust error handling, especially for operations on potentially empty collections.
 * *   Structure your code clearly.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's integer input, it should perform the corresponding action. Output for requests should clearly show ID, description, priority, and status. Error messages should be distinct (using `System.err`). Informative messages should be provided when queues/lists are empty.
 * 
 * Example interaction flow (user input in bold):
 * 
 * ```
 * --- Technical Support System Menu ---
 * 1. Add New Support Request
 * 2. View Next Open Request
 * 3. Resolve Next Open Request
 * 4. View All Open Requests
 * 5. View All Resolved Requests
 * 0. Exit
 * -------------------------------------
 * Enter choice: **1**
 * Enter request description: **Cannot connect to server**
 * Enter request priority (e.g., Low, Medium, High): **High**
 * Support request added successfully.
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **1**
 * Enter request description: **Printer not working**
 * Enter request priority (e.g., Low, Medium, High): **Low**
 * Support request added successfully.
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **4**
 * --- Open Requests ---
 * ID: 1, Desc: "Cannot connect to server", Priority: High, Status: Open
 * ID: 2, Desc: "Printer not working", Priority: Low, Status: Open
 * Total open requests: 2
 * ---------------------
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **3**
 * Resolved Request: ID: 1, Desc: "Cannot connect to server", Priority: High, Status: Resolved
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **4**
 * --- Open Requests ---
 * ID: 2, Desc: "Printer not working", Priority: Low, Status: Open
 * Total open requests: 1
 * ---------------------
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **5**
 * --- Resolved Requests ---
 * ID: 1, Desc: "Cannot connect to server", Priority: High, Status: Resolved
 * Total resolved requests: 1
 * -------------------------
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **99**
 * Invalid choice. Please try again.
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **abc**
 * Invalid input. Please enter a number.
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **3**
 * Resolved Request: ID: 2, Desc: "Printer not working", Priority: Low, Status: Resolved
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **3**
 * No open requests to resolve.
 * 
 * --- Technical Support System Menu ---
 * ... (menu repeats) ...
 * Enter choice: **0**
 * Exiting system. Goodbye!
 * ```
 * 
 * Your task is to write the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements the Technical Support Queue Management System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **Object-Oriented Design:** The problem is broken down into logical entities: `SupportRequest` (data model) and `SupportQueueManager` (business logic). The main class `SupportSystem` handles user interaction and orchestrates the others.
 * 2.  **`java.util.Queue`:** The `openRequests` field in `SupportQueueManager` is declared as `Queue<SupportRequest>` and instantiated using `LinkedList`. This correctly models the FIFO (First-In, First-Out) nature of incoming support requests waiting to be processed. Methods like `offer()` (for adding) and `poll()` (for removing from the front) and `peek()` (for viewing the front) are used, which are safer for queues that might be empty or capacity-constrained compared to their `Collection` counterparts (`add`, `remove`, `element`).
 * 3.  **`java.util.ArrayList` and `java.util.List`:** The `resolvedRequests` field in `SupportQueueManager` is declared as `List<SupportRequest>` and instantiated using `ArrayList`. This demonstrates the use of the `List` interface for type declaration and `ArrayList` as a common dynamic array implementation suitable for storing a collection of items where order is maintained and access by index is possible (though not strictly required by this problem, `ArrayList` is a standard choice for a list).
 * 4.  **`java.util.Scanner`:** The `Scanner` class is used in the `SupportSystem` class to read user input from `System.in` for menu choices, request descriptions, and priorities.
 * 5.  **`switch` statement:** The `switch` statement in the `SupportSystem.run()` method is used to control the flow of the program based on the integer menu choice entered by the user, directing execution to the appropriate handler method (`addRequest`, `viewNextRequest`, etc.).
 * 6.  **`System.err`:** Error messages, such as invalid menu choices or empty input for description, are printed to `System.err`, distinguishing them from normal program output.
 * 7.  **`System.out`:** Normal program output, including the menu, prompts, success messages, and request details, is printed to `System.out`.
 * 8.  **Class-wide `try-catch`:** The `run()` method in `SupportSystem` includes a `try-catch(Exception e)` block wrapping the main `while` loop. This provides a top-level catch for any unexpected exceptions that might occur during the program's execution. An inner `try-catch(InputMismatchException e)` is specifically used around the `scanner.nextInt()` call within the loop to handle cases where the user enters non-integer input for the menu choice, preventing the program from crashing and allowing the loop to continue after informing the user via `System.err`.
 * 9.  **Encapsulation:** Fields in `SupportRequest` and `SupportQueueManager` are `private`. Access and modification are controlled via public getter and setter methods (`getId`, `getDescription`, `setStatus`, etc.).
 * 10. **Meaningful Names:** Class names (`SupportSystem`, `SupportQueueManager`, `SupportRequest`), variable names (`openRequests`, `resolvedRequests`, `nextRequestId`, `description`, `priority`), and method names (`addRequest`, `viewNextRequest`, `resolveNextRequest`, `printMenu`) are descriptive and indicate their purpose.
 * 11. **Comments and Documentation:** Basic Javadoc-style comments are provided for classes and public methods, explaining their purpose, parameters, and return values where applicable.
 * 12. **Input Validation:** Basic validation is performed for the request description to ensure it's not empty. The `try-catch` block handles validation for integer menu input.
 * 13. **Error Handling:** The code handles cases where the queue or list might be empty when trying to view or resolve requests, printing informative messages instead of throwing exceptions like `NoSuchElementException` (which `element()` or `remove()` would do on an empty queue). `System.err` is used for error output.
 * 
 * This solution effectively integrates the required components into a functional application, demonstrating understanding of data structures, object-oriented principles, user interaction handling, and robust error management in Java.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single technical support request.
 */
class SupportRequest {
    private int id;
    private String description;
    private String priority;
    private String status;

    /**
     * Constructs a new SupportRequest.
     *
     * @param id          The unique ID of the request.
     * @param description The description of the issue.
     * @param priority    The priority level (e.g., "Low", "Medium", "High").
     */
    public SupportRequest(int id, String description, String priority) {
        this.id = id;
        this.description = description;
        this.priority = priority;
        this.status = "Open"; // Initial status
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getPriority() {
        return priority;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    /**
     * Sets the status of the support request.
     *
     * @param status The new status (e.g., "Resolved").
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Returns a string representation of the support request.
     *
     * @return Formatted string with request details.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Desc: \"%s\", Priority: %s, Status: %s",
                             id, description, priority, status);
    }
}

/**
 * Manages the queue of open support requests and a list of resolved requests.
 */
class SupportQueueManager {
    private Queue<SupportRequest> openRequests;
    private List<SupportRequest> resolvedRequests;
    private int nextRequestId; // Counter for generating unique IDs

    /**
     * Constructs a new SupportQueueManager.
     * Initializes the open requests queue and the resolved requests list.
     */
    public SupportQueueManager() {
        // Using LinkedList as a concrete implementation of Queue
        openRequests = new LinkedList<>();
        // Using ArrayList as a concrete implementation of List
        resolvedRequests = new ArrayList<>();
        nextRequestId = 1; // Start unique IDs from 1
    }

    /**
     * Adds a new support request to the queue.
     *
     * @param description The description of the request.
     * @param priority    The priority of the request.
     */
    public void addRequest(String description, String priority) {
        SupportRequest newRequest = new SupportRequest(nextRequestId++, description, priority);
        // offer is generally preferred over add for queues as it handles capacity restrictions gracefully
        openRequests.offer(newRequest);
    }

    /**
     * Views the next request in the queue without removing it.
     * Prints the request details or an empty queue message.
     */
    public void viewNextRequest() {
        // peek returns the head of the queue or null if the queue is empty
        SupportRequest nextRequest = openRequests.peek();
        if (nextRequest != null) {
            System.out.println("Next Request: " + nextRequest);
        } else {
            System.out.println("No open requests in the queue.");
        }
    }

    /**
     * Resolves the next request in the queue, removes it, and moves it to the resolved list.
     * Prints the resolved request details or an empty queue message.
     */
    public void resolveNextRequest() {
        // poll retrieves and removes the head of the queue, or returns null if the queue is empty
        SupportRequest resolvedRequest = openRequests.poll();
        if (resolvedRequest != null) {
            resolvedRequest.setStatus("Resolved");
            resolvedRequests.add(resolvedRequest);
            System.out.println("Resolved Request: " + resolvedRequest);
        } else {
            System.out.println("No open requests to resolve.");
        }
    }

    /**
     * Views all requests currently in the open queue.
     * Prints the list of requests and the total count.
     */
    public void viewAllOpenRequests() {
        System.out.println("--- Open Requests ---");
        if (openRequests.isEmpty()) {
            System.out.println("No open requests.");
        } else {
            // Iterating through the queue elements
            for (SupportRequest request : openRequests) {
                System.out.println(request);
            }
            System.out.println("Total open requests: " + openRequests.size());
        }
        System.out.println("---------------------");
    }

    /**
     * Views all requests that have been resolved.
     * Prints the list of resolved requests and the total count.
     */
    public void viewAllResolvedRequests() {
        System.out.println("--- Resolved Requests ---");
        if (resolvedRequests.isEmpty()) {
            System.out.println("No resolved requests.");
        } else {
            // Iterating through the list elements
            for (SupportRequest request : resolvedRequests) {
                System.out.println(request);
            }
            System.out.println("Total resolved requests: " + resolvedRequests.size());
        }
        System.out.println("-------------------------");
    }
}

/**
 * Main class for the Technical Support Queue Management System.
 * Handles user interaction and manages the SupportQueueManager.
 */
public class SupportSystem {

    private SupportQueueManager manager;
    private Scanner scanner;

    /**
     * Constructs a new SupportSystem.
     * Initializes the manager and scanner.
     */
    public SupportSystem() {
        manager = new SupportQueueManager();
        scanner = new Scanner(System.in);
    }

    /**
     * Runs the main application loop, displaying the menu and processing user input.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1;

        // Class-wide exception handling for the main application loop
        try {
            while (choice != 0) {
                printMenu();
                try {
                    System.out.print("Enter choice: ");
                    // Handle potential non-integer input
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    // Use switch statement for menu navigation
                    switch (choice) {
                        case 1:
                            addRequest();
                            break;
                        case 2:
                            viewNextRequest();
                            break;
                        case 3:
                            resolveNextRequest();
                            break;
                        case 4:
                            viewAllOpenRequests();
                            break;
                        case 5:
                            viewAllResolvedRequests();
                            break;
                        case 0:
                            System.out.println("Exiting system. Goodbye!");
                            break;
                        default:
                            // Invalid menu choice
                            System.err.println("Invalid choice. Please try again.");
                    }
                } catch (InputMismatchException e) {
                    // Handle cases where the user enters non-integer input for the menu
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to ensure loop continues
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during menu processing
                    System.err.println("An unexpected error occurred during operation: " + e.getMessage());
                    // e.printStackTrace(); // Uncomment for detailed debugging
                }
                System.out.println(); // Add a blank line for readability between operations
            }
        } catch (Exception e) {
            // Outer catch block for any exceptions that might escape the inner loop handling
            System.err.println("A critical error occurred in the main application loop: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for detailed debugging
        } finally {
            // Ensure the scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Technical Support System Menu ---");
        System.out.println("1. Add New Support Request");
        System.out.println("2. View Next Open Request");
        System.out.println("3. Resolve Next Open Request");
        System.out.println("4. View All Open Requests");
        System.out.println("5. View All Resolved Requests");
        System.out.println("0. Exit");
        System.out.println("-------------------------------------");
    }

    /**
     * Handles the process of adding a new support request based on user input.
     */
    private void addRequest() {
        System.out.print("Enter request description: ");
        String description = scanner.nextLine();
        System.out.print("Enter request priority (e.g., Low, Medium, High): ");
        String priority = scanner.nextLine();

        // Basic input validation
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Request description cannot be empty.");
            return; // Exit the method if description is invalid
        }
        // Optional: Add validation for priority format if needed, but prompt allows flexibility
         if (priority == null || priority.trim().isEmpty()) {
            priority = "Medium"; // Default priority if none entered
            System.out.println("Priority not entered, defaulting to Medium.");
        }

        manager.addRequest(description.trim(), priority.trim());
        System.out.println("Support request added successfully.");
    }

    /**
     * Calls the manager method to view the next open request.
     */
    private void viewNextRequest() {
        manager.viewNextRequest();
    }

    /**
     * Calls the manager method to resolve the next open request.
     */
    private void resolveNextRequest() {
        manager.resolveNextRequest();
    }

    /**
     * Calls the manager method to view all open requests.
     */
    private void viewAllOpenRequests() {
        manager.viewAllOpenRequests();
    }

    /**
     * Calls the manager method to view all resolved requests.
     */
    private void viewAllResolvedRequests() {
        manager.viewAllResolvedRequests();
    }

    /**
     * Main method to start the application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        SupportSystem system = new SupportSystem();
        system.run();
    }
}
