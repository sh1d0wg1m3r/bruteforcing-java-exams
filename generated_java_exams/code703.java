/*
 * Exam Question #703
 * Generated on: 2025-05-12 16:27:57
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment management system for a small clinic. The system needs to handle patients arriving and waiting for appointments, and schedule them with available doctors.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Waiting List:** Maintain a queue of patients waiting for an appointment. Patients are added to the back of the queue and scheduled from the front.
 * 2.  **Scheduled Appointments:** Maintain a list of appointments that have been successfully scheduled.
 * 3.  **Doctors:** For simplicity, assume doctors are identified by name when scheduling. The system doesn't need to manage a list of doctors, just record the doctor's name in the appointment.
 * 4.  **User Interface:** Provide a command-line interface for the user (a receptionist) to interact with the system.
 * 5.  **Functionality:** Implement the following operations via a menu:
 *     *   **Add Patient to Waiting List:** Prompt for the patient's name and add them to the waiting queue.
 *     *   **Schedule Next Appointment:** Take the patient from the front of the waiting queue, prompt for the doctor's name and appointment time, and add it to the list of scheduled appointments. Handle the case where the waiting list is empty.
 *     *   **View Waiting List:** Display all patients currently in the waiting queue.
 *     *   **View Scheduled Appointments:** Display all scheduled appointments.
 *     *   **Exit:** Terminate the program.
 * 6.  **Required Java Components:** Your solution **must** use and demonstrate the practical application of **ALL** the following Java components:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` (as a type for variables or method parameters)
 *     *   `java.util.Scanner` for user input
 *     *   `switch` statement for menu navigation
 *     *   `System.err` for displaying error messages
 *     *   `System.out` for displaying menu, prompts, and normal output
 *     *   Class-wide exception handling using `try-catch` blocks to handle unexpected issues (like invalid input) and specific errors (like trying to schedule from an empty queue).
 * 7.  **Best Practices:**
 *     *   Use appropriate data structures (`Queue`, `List`).
 *     *   Implement proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include comments and basic documentation where necessary.
 *     *   Implement input validation (e.g., patient name not empty).
 *     *   Handle errors gracefully using `try-catch` and `System.err`.
 *     *   Structure your code logically into classes.
 * 
 * **Classes:**
 * 
 * *   `Patient`: Represents a patient. Should have a name.
 * *   `Appointment`: Represents a scheduled appointment. Should include the patient, doctor's name, and time.
 * *   `HospitalSystem`: Manages the waiting queue and scheduled appointments, and contains the main application logic (menu, operations).
 * 
 * **Expected Output:**
 * 
 * The system should present a menu, process user commands, and display relevant information or error messages.
 * 
 * *   Menu presentation using `System.out`.
 * *   Prompts for input using `System.out`.
 * *   Successful operations reported using `System.out`.
 * *   Error conditions (e.g., empty queue when scheduling, invalid input) reported using `System.err`.
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add Patient to Waiting List
 * 2. Schedule Next Appointment
 * 3. View Waiting List
 * 4. View Scheduled Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Alice added to waiting list.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 1
 * Enter patient name: Bob
 * Bob added to waiting list.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Waiting List:
 * 1. Alice
 * 2. Bob
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Enter appointment time (e.g., 10:00 AM): 10:30 AM
 * Scheduled appointment for Alice with Dr. Smith at 10:30 AM.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Waiting List:
 * 1. Bob
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 4
 * Scheduled Appointments:
 * 1. Alice with Dr. Smith at 10:30 AM
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Jones
 * Enter appointment time (e.g., 10:00 AM): 11:00 AM
 * Scheduled appointment for Bob with Dr. Jones at 11:00 AM.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Error: No patients in the waiting list to schedule. // Using System.err here
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic hospital appointment management system demonstrating the required Java concepts.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple POJO (Plain Old Java Object) with a `name` field and a constructor and getter. It also overrides `toString()` for easy printing.
 *     *   `Appointment`: Another POJO holding a `Patient` object, `doctorName` (String), and `time` (String). It has a constructor, getters, and overrides `toString()`.
 *     *   `HospitalSystem`: The main class that orchestrates the system. It holds the core data structures (`waitingList`, `scheduledAppointments`) and the application logic.
 * 
 * 2.  **Required Components Usage:**
 *     *   `java.util.Queue`: The `waitingList` is declared as `Queue<Patient>` and instantiated as a `LinkedList`. `LinkedList` is a common implementation of `Queue`. `offer()` is used to add patients to the end, and `poll()` is used to remove patients from the front.
 *     *   `java.util.ArrayList`: The `scheduledAppointments` list is instantiated as an `ArrayList`.
 *     *   `java.util.List`: The `scheduledAppointments` variable is declared using the `List` interface (`List<Appointment> scheduledAppointments;`), demonstrating polymorphism and programming to the interface.
 *     *   `java.util.Scanner`: A `Scanner` object is used in the `HospitalSystem` class to read user input from `System.in`.
 *     *   `switch` statement: Used in the `runSystem()` method to control the flow based on the user's menu choice.
 *     *   `System.err`: Used to print error messages, such as invalid menu input, empty patient name, or attempting to schedule from an empty waiting list.
 *     *   `System.out`: Used for printing the menu, prompts, successful operation messages, and displaying the contents of the waiting list and scheduled appointments.
 *     *   Class-wide exception handling (`try-catch`):
 *         *   A `try-catch` block wraps the main loop's input reading and operation calls in `runSystem()` to catch general exceptions like `InputMismatchException` or `NumberFormatException` if the user enters non-numeric input for the menu choice.
 *         *   A specific `try-catch` block is used within the `scheduleNextAppointment()` method to handle the `IllegalStateException` that is explicitly thrown if `waitingList.poll()` returns `null` (meaning the queue was empty). A general `catch (Exception e)` is also included in both `runSystem` and `scheduleNextAppointment` as a fallback for any other unexpected runtime issues, fulfilling the "class-wide" aspect by having handling in the main operational methods.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Patient`, `Appointment`, and `HospitalSystem` are `private`. Access is provided through `public` methods (constructors, getters, system operations).
 *     *   **Meaningful Names:** Variables (`waitingList`, `scheduledAppointments`, `doctorName`, `time`, `choice`), methods (`addPatientToWaitingList`, `scheduleNextAppointment`, `viewWaitingList`, `runSystem`), and classes (`Patient`, `Appointment`, `HospitalSystem`) have clear, descriptive names.
 *     *   **Comments and Documentation:** Javadoc comments are included for classes and public methods explaining their purpose. Inline comments are used where necessary to clarify logic (e.g., why `offer` is used).
 *     *   **Input Validation:** The code checks if patient name, doctor name, and time inputs are empty strings before proceeding.
 *     *   **Error Handling:** Specific error conditions (empty queue, invalid menu input, empty string input) are checked and reported using `System.err` within `try-catch` blocks or `if` statements.
 *     *   **Clean Code Structure:** The logic is separated into distinct classes and methods, making the code modular and easier to read and maintain. The main application loop is contained within the `runSystem` method. The `Scanner` is closed upon exiting the loop.
 * 
 * This solution effectively integrates all the required components into a practical scenario, demonstrating fundamental object-oriented principles and robust error handling.
 */

import java.util.LinkedList; // LinkedList implements Queue
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient waiting for an appointment.
 */
class Patient {
    private String name;

    /**
     * Constructs a Patient object.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Represents a scheduled appointment.
 */
class Appointment {
    private Patient patient;
    private String doctorName;
    private String time;

    /**
     * Constructs an Appointment object.
     * @param patient The patient for the appointment.
     * @param doctorName The name of the doctor.
     * @param time The scheduled time.
     */
    public Appointment(Patient patient, String doctorName, String time) {
        this.patient = patient;
        this.doctorName = doctorName;
        this.time = time;
    }

    /**
     * Gets the patient for the appointment.
     * @return The patient.
     */
    public Patient getPatient() {
        return patient;
    }

    /**
     * Gets the doctor's name.
     * @return The doctor's name.
     */
    public String getDoctorName() {
        return doctorName;
    }

    /**
     * Gets the appointment time.
     * @return The appointment time.
     */
    public String getTime() {
        return time;
    }

    @Override
    public String toString() {
        return patient.getName() + " with " + doctorName + " at " + time;
    }
}

/**
 * Manages the hospital's appointment system, including waiting list and scheduled appointments.
 */
public class HospitalSystem {
    private Queue<Patient> waitingList;
    private List<Appointment> scheduledAppointments;
    private Scanner scanner;

    /**
     * Constructs a HospitalSystem. Initializes the waiting list and scheduled appointments list.
     */
    public HospitalSystem() {
        waitingList = new LinkedList<>(); // LinkedList implements Queue
        scheduledAppointments = new ArrayList<>(); // ArrayList implements List
        scanner = new Scanner(System.in);
    }

    /**
     * Adds a patient to the waiting list.
     */
    public void addPatientToWaitingList() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        Patient patient = new Patient(name);
        waitingList.offer(patient); // offer is preferred over add for queues
        System.out.println(patient.getName() + " added to waiting list.");
    }

    /**
     * Schedules the next patient from the waiting list.
     */
    public void scheduleNextAppointment() {
        try {
            Patient patientToSchedule = waitingList.poll(); // poll retrieves and removes head, returns null if empty

            if (patientToSchedule == null) {
                throw new IllegalStateException("No patients in the waiting list to schedule.");
            }

            System.out.print("Enter doctor name: ");
            String doctorName = scanner.nextLine().trim();

            if (doctorName.isEmpty()) {
                 // Put patient back if doctor name is invalid, or handle differently
                 // For this simple case, we'll just report error and not schedule.
                 // A more robust system might re-queue or handle differently.
                 System.err.println("Error: Doctor name cannot be empty. Appointment not scheduled.");
                 // Optionally, you could re-add the patient to the queue: waitingList.addFirst(patientToSchedule);
                 return;
            }

            System.out.print("Enter appointment time (e.g., 10:00 AM): ");
            String time = scanner.nextLine().trim();

             if (time.isEmpty()) {
                 System.err.println("Error: Appointment time cannot be empty. Appointment not scheduled.");
                 return;
            }


            Appointment appointment = new Appointment(patientToSchedule, doctorName, time);
            scheduledAppointments.add(appointment);
            System.out.println("Scheduled appointment for " + appointment);

        } catch (IllegalStateException e) {
            System.err.println("Error: " + e.getMessage());
        } catch (Exception e) {
            // Catch any other unexpected exceptions during scheduling
            System.err.println("An unexpected error occurred during scheduling: " + e.getMessage());
            // e.printStackTrace(); // For debugging
        }
    }

    /**
     * Displays all patients currently in the waiting list.
     */
    public void viewWaitingList() {
        System.out.println("Waiting List:");
        if (waitingList.isEmpty()) {
            System.out.println("  (Empty)");
        } else {
            int i = 1;
            // Iterating over the queue without removing elements
            for (Patient patient : waitingList) {
                System.out.println("  " + i++ + ". " + patient.getName());
            }
        }
    }

    /**
     * Displays all scheduled appointments.
     */
    public void viewScheduledAppointments() {
        System.out.println("Scheduled Appointments:");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("  (Empty)");
        } else {
            int i = 1;
            for (Appointment appointment : scheduledAppointments) {
                System.out.println("  " + i++ + ". " + appointment);
            }
        }
    }

    /**
     * Displays the main menu.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Schedule Next Appointment");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Scheduled Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     */
    public void runSystem() {
        int choice = -1;
        while (choice != 5) {
            displayMenu();
            try {
                // Use hasNextLine() and nextLine() pattern for safety with mixed input
                String input = scanner.nextLine();
                choice = Integer.parseInt(input);

                switch (choice) {
                    case 1:
                        addPatientToWaitingList();
                        break;
                    case 2:
                        scheduleNextAppointment();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewScheduledAppointments();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException | NumberFormatException e) {
                // Catch non-integer input or parsing errors
                System.err.println("Error: Invalid input. Please enter a number.");
                // scanner.next(); // Consume the invalid input - not needed with nextLine()
            } catch (Exception e) {
                 // Catch any other unexpected exceptions during the main loop processing
                 System.err.println("An unexpected error occurred: " + e.getMessage());
                 // e.printStackTrace(); // For debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.runSystem();
    }
}
