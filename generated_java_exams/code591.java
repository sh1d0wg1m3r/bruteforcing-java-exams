/*
 * Exam Question #591
 * Generated on: 2025-05-12 16:11:40
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Restaurant Order Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified backend system for a small restaurant to manage incoming customer orders and process them in the order they were received. The system should allow staff to view the menu, place new orders, view pending orders, and serve the next order in line.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this restaurant order management system. Your solution must adhere to the following:
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of available menu items. Use `java.util.List` as the type and `java.util.ArrayList` for the implementation.
 *     *   Maintain a queue of pending customer orders. Use `java.util.Queue` as the type (e.g., implemented by `java.util.LinkedList`).
 * 
 * 2.  **Classes:**
 *     *   Create a `MenuItem` class with private fields for `name` and potentially a simple identifier (like an item code or just use the name as identifier). Include a constructor and public getter methods.
 *     *   Create an `Order` class with a unique order identifier (e.g., an integer sequence) and a list of `MenuItem`s included in the order. Use `java.util.List` for the list of items and `java.util.ArrayList` for its implementation. Include a constructor, public getter methods, and a meaningful `toString()` method for displaying order details.
 *     *   Create a main class (e.g., `RestaurantSystem`) that contains the `main` method and manages the menu list and the order queue.
 * 
 * 3.  **Functionality:**
 *     *   Initialize the system with a few sample `MenuItem`s in the menu list.
 *     *   Provide a command-line interface using `java.util.Scanner` for user interaction.
 *     *   Present a menu of options to the user:
 *         1.  View Menu
 *         2.  Place Order
 *         3.  View Pending Orders
 *         4.  Serve Next Order
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's chosen option.
 *     *   **View Menu:** Display all items from the menu list using `System.out`.
 *     *   **Place Order:**
 *         *   Prompt the user to enter the names of the menu items they want, one per line. The user should type "done" when they are finished adding items.
 *         *   For each item entered, validate if it exists in the menu list (case-insensitive validation is acceptable but not strictly required).
 *         *   If an item is invalid, print an error message to `System.err` and do *not* add it to the current order. Continue prompting for the next item.
 *         *   If an item is valid, add the corresponding `MenuItem` object to a temporary list for the current order.
 *         *   Once the user types "done", if the temporary order list is not empty, create a new `Order` object with a unique ID and the list of selected valid items. Add this `Order` object to the end of the pending orders `Queue`.
 *         *   Print a confirmation message to `System.out` with the new order ID.
 *         *   If the temporary order list is empty after the user finishes, print a message indicating no valid items were entered.
 *     *   **View Pending Orders:** Display all orders currently in the pending orders `Queue` using `System.out`. Iterate through the queue without removing elements. If the queue is empty, print a message indicating that.
 *     *   **Serve Next Order:**
 *         *   Remove the order at the front of the pending orders `Queue`.
 *         *   Display the details of the served order using `System.out`.
 *         *   If the queue is empty when this option is chosen, print an error message to `System.err` indicating that there are no orders to serve.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **Error Handling & Validation:**
 *     *   Use `System.err` to print all error messages (e.g., invalid menu item, trying to serve from an empty queue, invalid menu option).
 *     *   Use `System.out` for all normal output (menu display, confirmations, served order details, pending order list).
 *     *   Implement input validation for the main menu choice (handle non-integer input or choices outside the valid range).
 *     *   Implement input validation for menu items during order placement.
 *     *   Use `try-catch` blocks for exception handling. A class-wide approach around the main interaction loop is required to catch potential unexpected errors during program execution.
 * 
 * 5.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (basic comments explaining sections or complex logic are sufficient for an exam context).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The output should be interactive, guiding the user through the options. Error messages should clearly indicate the problem and be printed to `System.err`. Successful operations and information displays should be printed to `System.out`.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Restaurant System Menu ---
 * 1. View Menu
 * 2. Place Order
 * 3. View Pending Orders
 * 4. Serve Next Order
 * 5. Exit
 * Enter your choice: 1
 * --- Menu ---
 * Burger
 * Fries
 * Soda
 * --- Restaurant System Menu ---
 * ...
 * Enter your choice: 2
 * Enter menu items (type 'done' when finished):
 * Burger
 * Fries
 * Pizza <-- Invalid item
 * Error: 'Pizza' is not a valid menu item.
 * Soda
 * done
 * Order 1 placed with items: [Burger, Fries, Soda]
 * --- Restaurant System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Orders ---
 * Order 1: [Burger, Fries, Soda]
 * --- Restaurant System Menu ---
 * ...
 * Enter your choice: 4
 * Serving Order 1: [Burger, Fries, Soda]
 * --- Restaurant System Menu ---
 * ...
 * Enter your choice: 4
 * Error: No pending orders to serve.
 * --- Restaurant System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Restaurant System.
 * ```
 * 
 * This task requires integrating several core Java data structures and control flow mechanisms in a practical context, demonstrating understanding of object-oriented design, error handling, and basic I/O.
 *
 * EXPLANATION:
 * This solution implements the `RestaurantSystem` based on the requirements, demonstrating the usage of all specified Java components.
 * 
 * 1.  **Class Structure:**
 *     *   `MenuItem`: A simple class to represent items on the menu, holding just the `name`.
 *     *   `Order`: Represents a customer's order, containing a unique `orderId` and a `List<MenuItem>` (`ArrayList` implementation) of the items ordered. The static `nextOrderId` ensures each order gets a unique sequential ID.
 *     *   `RestaurantSystem`: The main class orchestrates the system. It holds the `menu` (a `List<MenuItem>`) and the `orderQueue` (a `Queue<Order>`). It also manages the `Scanner` for user input and contains the main `run` method that drives the interaction loop.
 * 
 * 2.  **Data Structures Usage:**
 *     *   `List<MenuItem> menu`: An `ArrayList` is used to store the fixed set of available menu items. `List` interface is used for the field type, promoting good practice.
 *     *   `List<MenuItem> items` within `Order`: An `ArrayList` is used to store the specific items included in a particular order. Again, the `List` interface is used for the field type.
 *     *   `Queue<Order> orderQueue`: A `LinkedList` is used to implement the `Queue` interface. This is suitable because orders are processed in a First-In, First-Out (FIFO) manner. `add()` is used to add orders to the end, and `poll()` is used to remove and retrieve orders from the front.
 * 
 * 3.  **User Interaction and Control Flow:**
 *     *   `Scanner scanner`: Used to read user input from the console (System.in) for menu choices and item names.
 *     *   `displayMainMenu()`: Prints the options to `System.out`.
 *     *   `run()` method: Contains the main `while` loop that keeps the system running until the user chooses to exit.
 *     *   `switch (choice)`: Handles the user's integer input to dispatch the correct action (view menu, place order, etc.). This effectively controls the program flow based on user command.
 * 
 * 4.  **Functionality Implementation:**
 *     *   `viewMenu()`: Iterates through the `menu` `List` and prints each item's name to `System.out`.
 *     *   `placeOrder()`: Prompts the user, reads item names using the `Scanner` until "done" is entered. It uses a temporary `ArrayList` (`currentOrderItems`) to build the list of items for the new order. The `findMenuItem` helper method validates if the entered item name exists in the `menu` `List`. Validated items are added to `currentOrderItems`. Finally, if the list is not empty, a new `Order` is created and added to the `orderQueue` using `add()`. Success messages go to `System.out`.
 *     *   `viewPendingOrders()`: Iterates through the `orderQueue` using an enhanced for loop (`for (Order order : orderQueue)`). This type of iteration accesses elements without removing them from the queue, fulfilling the requirement to view without serving. The `toString()` method of the `Order` class is implicitly called to display order details to `System.out`.
 *     *   `serveNextOrder()`: Checks if the `orderQueue` is empty. If not, it uses `orderQueue.poll()` to remove and retrieve the order at the front of the queue (the next one to be served). The details of the served order are printed to `System.out`.
 * 
 * 5.  **Error Handling & Validation:**
 *     *   `System.err`: Used specifically for printing error messages, such as when an invalid menu item is entered, when the user tries to serve from an empty queue, or when the main menu input is invalid.
 *     *   `System.out`: Used for all successful operations, displaying information like the menu, confirmation of placed orders, and details of served/pending orders.
 *     *   Input Validation (Menu Choice): A `try-catch (InputMismatchException e)` block around `scanner.nextInt()` in the `run` loop catches cases where the user enters non-integer input for the menu choice. The invalid input is consumed (`scanner.nextLine()`) to prevent an infinite loop. The `default` case in the `switch` handles integer inputs outside the valid range (1-5).
 *     *   Input Validation (Menu Item): The `findMenuItem` method checks if the entered item name exists in the `menu` list. If not found (`findMenuItem` returns `null`), an error is printed to `System.err`.
 *     *   `try-catch (Exception e)`: A general `catch` block is included in the `run` method's `while` loop. This serves as a class-wide handler for any other unexpected runtime exceptions that might occur during the execution of the menu options, fulfilling the requirement for class-wide exception handling. It prints a generic error message and the exception details to `System.err`.
 * 
 * 6.  **Best Practices:**
 *     *   Private fields (`name`, `orderId`, `items`, `menu`, `orderQueue`, `scanner`, `nextOrderId`) and public getter methods (`getName`, `getOrderId`, `getItems`) ensure proper encapsulation.
 *     *   Method names (`displayMainMenu`, `viewMenu`, `placeOrder`, `serveNextOrder`, `viewPendingOrders`, `findMenuItem`, `run`) are descriptive. Variable names (`menu`, `orderQueue`, `currentOrderItems`, `selectedItem`) are clear.
 *     *   Basic comments explain the purpose of classes, methods, and key logic sections.
 *     *   The code is structured into logical methods within the `RestaurantSystem` class and separate data classes (`MenuItem`, `Order`).
 *     *   Using `List` and `Queue` interfaces rather than concrete implementations (`ArrayList`, `LinkedList`) for the field types demonstrates good practice, allowing flexibility to change the underlying implementation later if needed.
 *     *   The `Scanner` is closed when the program exits in the `run` method.
 * 
 * This solution effectively integrates the required components to build a functional, robust, and well-structured program that meets the exam task's challenging requirements.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single item on the menu
class MenuItem {
    private String name;

    public MenuItem(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a customer order
class Order {
    private static int nextOrderId = 1; // Static counter for unique IDs
    private int orderId;
    private List<MenuItem> items; // Use List interface, implement with ArrayList

    public Order(List<MenuItem> items) {
        this.orderId = nextOrderId++;
        this.items = new ArrayList<>(items); // Create a copy to prevent external modification
    }

    public int getOrderId() {
        return orderId;
    }

    public List<MenuItem> getItems() {
        return items; // Return a copy or unmodifiable list if immutability is critical
    }

    @Override
    public String toString() {
        return "Order " + orderId + ": " + items;
    }
}

// Main system class managing menu and orders
public class RestaurantSystem {

    private List<MenuItem> menu; // Use List interface
    private Queue<Order> orderQueue; // Use Queue interface
    private Scanner scanner;

    public RestaurantSystem() {
        // Initialize menu
        menu = new ArrayList<>(); // Implement with ArrayList
        menu.add(new MenuItem("Burger"));
        menu.add(new MenuItem("Fries"));
        menu.add(new MenuItem("Soda"));
        menu.add(new MenuItem("Pizza Slice"));
        menu.add(new MenuItem("Salad"));

        // Initialize order queue
        orderQueue = new LinkedList<>(); // Implement Queue with LinkedList

        // Initialize scanner
        scanner = new Scanner(System.in);
    }

    // Displays the main menu options
    private void displayMainMenu() {
        System.out.println("\n--- Restaurant System Menu ---");
        System.out.println("1. View Menu");
        System.out.println("2. Place Order");
        System.out.println("3. View Pending Orders");
        System.out.println("4. Serve Next Order");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Displays the available menu items
    private void viewMenu() {
        System.out.println("--- Menu ---");
        if (menu.isEmpty()) {
            System.out.println("Menu is currently empty.");
        } else {
            for (MenuItem item : menu) {
                System.out.println(item.getName());
            }
        }
    }

    // Handles placing a new order
    private void placeOrder() {
        System.out.println("Enter menu items (type 'done' when finished):");
        List<MenuItem> currentOrderItems = new ArrayList<>(); // Use ArrayList for temporary storage

        while (true) {
            String itemName = scanner.nextLine().trim();
            if (itemName.equalsIgnoreCase("done")) {
                break;
            }

            MenuItem selectedItem = findMenuItem(itemName);

            if (selectedItem != null) {
                currentOrderItems.add(selectedItem);
                System.out.println("Added '" + itemName + "' to the order.");
            } else {
                System.err.println("Error: '" + itemName + "' is not a valid menu item.");
            }
        }

        if (!currentOrderItems.isEmpty()) {
            Order newOrder = new Order(currentOrderItems);
            orderQueue.add(newOrder); // Add order to the queue
            System.out.println("Order " + newOrder.getOrderId() + " placed with items: " + newOrder.getItems());
        } else {
            System.out.println("No valid items entered. Order not placed.");
        }
    }

    // Finds a MenuItem by name (case-insensitive)
    private MenuItem findMenuItem(String name) {
        for (MenuItem item : menu) {
            if (item.getName().equalsIgnoreCase(name.trim())) {
                return item;
            }
        }
        return null; // Item not found
    }

    // Displays orders currently in the queue without removing them
    private void viewPendingOrders() {
        System.out.println("--- Pending Orders ---");
        if (orderQueue.isEmpty()) {
            System.out.println("No pending orders.");
        } else {
            // Iterate through the queue elements
            for (Order order : orderQueue) { // Enhanced for loop iterates without removing
                System.out.println(order);
            }
        }
    }

    // Serves the next order from the front of the queue
    private void serveNextOrder() {
        if (orderQueue.isEmpty()) {
            System.err.println("Error: No pending orders to serve.");
        } else {
            Order servedOrder = orderQueue.poll(); // Remove and get the head of the queue
            System.out.println("Serving " + servedOrder);
        }
    }

    // Runs the main application loop
    public void run() {
        boolean running = true;
        while (running) {
            displayMainMenu();
            try {
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character after reading int

                // Use switch statement for flow control
                switch (choice) {
                    case 1:
                        viewMenu();
                        break;
                    case 2:
                        placeOrder();
                        break;
                    case 3:
                        viewPendingOrders();
                        break;
                    case 4:
                        serveNextOrder();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Restaurant System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for the main menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Class-wide catch for any other unexpected runtime errors
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    public static void main(String[] args) {
        RestaurantSystem system = new RestaurantSystem();
        system.run();
    }
}
