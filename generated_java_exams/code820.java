/*
 * Exam Question #820
 * Generated on: 2025-05-12 16:45:57
 * Generated by: Account 3
 * 
 * QUESTION:
 * **Subject:** Advanced Java Programming - Data Structures, Control Flow, and Exception Handling
 * 
 * **Task:** Develop a simplified Hospital Appointment Management System.
 * 
 * **Scenario:**
 * A small clinic needs a basic system to manage patient appointments. Patients are first registered, and then they can be added to a waiting queue for their appointment. The system should allow staff to call the next patient from the queue and view lists of waiting and completed patients.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (String), `name` (String), and `age` (int). Include a constructor and public getter methods. Override the `toString()` method to provide a user-friendly representation of a patient.
 * 2.  **System Class:** Create a class named `HospitalAppointmentSystem` that encapsulates the system's state and operations.
 * 3.  **Data Structures:**
 *     *   Use an `ArrayList` (declared as a `List<Patient>`) to store all *registered* patients.
 *     *   Use a `Queue<Patient>` to manage the waiting list for appointments.
 *     *   Use another `ArrayList` (declared as a `List<Patient>`) to store patients whose appointments have been *completed*.
 * 4.  **Functionality:** Implement the following operations within the `HospitalAppointmentSystem` class:
 *     *   `registerPatient(String name, int age)`: Registers a new patient, assigns a unique ID (e.g., "P" + sequential number), adds them to the registered patients list, and prints a confirmation message using `System.out`.
 *     *   `addPatientToWaitingQueue(String patientId)`: Finds a registered patient by ID and adds them to the waiting queue. Prints a confirmation using `System.out`. If the patient is not found or is already in the waiting/completed list, print an error message using `System.err`.
 *     *   `callNextPatient()`: Removes the patient at the front of the waiting queue, moves them to the completed appointments list, and prints a message indicating which patient is being called using `System.out`. If the waiting queue is empty, print an error message using `System.err`.
 *     *   `viewWaitingList()`: Prints the current patients in the waiting queue using `System.out`. Indicate if the queue is empty.
 *     *   `viewCompletedAppointments()`: Prints the list of completed appointments using `System.out`. Indicate if the list is empty.
 * 5.  **User Interface:**
 *     *   In a `main` method (e.g., in a separate `HospitalApp` class), create a menu-driven interface using `Scanner` for user input.
 *     *   The menu options should correspond to the functionality described above (Register, Add to Queue, Call Next, View Waiting, View Completed, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 6.  **Input Validation and Error Handling:**
 *     *   Use `Scanner` to read user input (menu choice, patient details, patient ID).
 *     *   Implement input validation for the menu choice (ensure it's an integer within the valid range). Handle non-integer input gracefully using `try-catch` and `System.err`.
 *     *   Handle cases where a patient ID is not found when trying to add to the queue using `System.err`.
 *     *   Handle the case where `callNextPatient` is called on an empty queue using `System.err`.
 *     *   Implement a general `try-catch` block around the main application loop in `main` to demonstrate class-wide exception handling for unexpected errors.
 *     *   Use `System.err` exclusively for error messages and `System.out` for normal output (menu, confirmations, list contents).
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and Javadoc documentation where necessary.
 *     *   Ensure clean code structure.
 * 
 * **Expected Output Examples:**
 * 
 * ```
 * --- Hospital Appointment System Menu ---
 * 1. Register Patient
 * 2. Add Patient to Waiting Queue
 * 3. Call Next Patient
 * 4. View Waiting List
 * 5. View Completed Appointments
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient age: 30
 * Patient registered successfully. ID: P1
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 2
 * Enter patient ID to add to queue: P1
 * Patient P1 (Alice, 30) added to waiting queue.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 3
 * Calling next patient: P1 (Alice, 30)
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 4
 * Waiting List:
 * Queue is empty.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 5
 * Completed Appointments:
 * P1 (Alice, 30)
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 3
 * Error: Waiting queue is empty. No patient to call.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: invalid
 * Error: Invalid input. Please enter a number.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 7
 * Error: Invalid menu choice. Please enter a number between 1 and 6.
 * ```
 * 
 * Your solution should provide the complete Java code for the `Patient`, `HospitalAppointmentSystem`, and a main class (`HospitalApp`) to run the application.
 *
 * EXPLANATION:
 * This solution implements a simplified Hospital Appointment System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Patient` Class:** This class is a simple Plain Old Java Object (POJO) representing a patient. It uses `private` fields (`patientId`, `name`, `age`) and `public` getter methods, adhering to encapsulation principles. The `toString()` method provides a convenient way to print patient details. `equals()` and `hashCode()` are overridden based on `patientId` for correct behavior when using collections like `ArrayList.contains()` or `Queue.contains()`.
 * 
 * 2.  **`HospitalAppointmentSystem` Class:** This class contains the core logic and data structures.
 *     *   **Data Structures:**
 *         *   `registeredPatients`: Declared as `List<Patient>` and initialized as `new ArrayList<>()`. This list holds all patients ever registered.
 *         *   `waitingQueue`: Declared as `Queue<Patient>` and initialized as `new LinkedList<>()`. `LinkedList` is a common class that implements the `Queue` interface and is suitable for this use case (efficient additions/removals from ends). This queue maintains the order of patients waiting for their appointment.
 *         *   `completedAppointments`: Declared as `List<Patient>` and initialized as `new ArrayList<>()`. This list stores patients who have been called from the waiting queue.
 *     *   **Encapsulation:** All data structure fields are `private`. Public methods (`registerPatient`, `addPatientToWaitingQueue`, `callNextPatient`, `viewWaitingList`, `viewCompletedAppointments`) provide controlled access to the system's state.
 *     *   **Methods:** Each method performs a specific operation as described in the requirements, using the appropriate data structure methods (`add`, `offer`, `poll`, `isEmpty`, `contains`, iteration).
 *     *   **Input Validation/Error Handling:** The `addPatientToWaitingQueue` and `callNextPatient` methods include checks (`findRegisteredPatient == null`, `waitingQueue.isEmpty()`, `waitingQueue.contains()`, `completedAppointments.contains()`) and use `System.err` to report errors instead of throwing exceptions for these specific business logic failures.
 * 
 * 3.  **`HospitalApp` Class (Main):**
 *     *   **`main` Method:** This is the entry point of the application. It creates a `HospitalAppointmentSystem` instance and a `Scanner` for user input.
 *     *   **Menu and `Switch`:** A `while` loop keeps the application running until the user chooses to exit. Inside the loop, `displayMenu()` is called, `Scanner` reads the user's integer choice, and a `switch` statement directs the execution to the corresponding system method.
 *     *   **`Scanner` and `InputMismatchException`:** The `scanner.nextInt()` call is wrapped in a `try-catch` block specifically for `InputMismatchException`. If the user enters non-integer input, the catch block prints an error message using `System.err`, consumes the invalid input using `scanner.next()`, and uses `continue` to restart the loop, prompting the user again. `scanner.nextLine()` is used after `nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls.
 *     *   **Class-wide Exception Handling:** A large `try-catch (Exception e)` block surrounds the main `while(running)` loop. This fulfills the "class-wide exception handling" requirement by catching any unexpected `Exception` that might propagate up from the system logic or elsewhere, preventing the application from crashing abruptly. It prints a generic error message and the stack trace to `System.err`.
 *     *   **`finally` Block:** A `finally` block ensures that the `Scanner` object is closed when the `try` block (or `catch` block) finishes, regardless of whether an exception occurred or the loop exited normally.
 *     *   **`System.out` vs. `System.err`:** `System.out` is used for displaying the menu, successful operation confirmations, and list contents. `System.err` is strictly used for printing error messages (invalid input, patient not found, empty queue).
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `Switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating proper object-oriented design (encapsulation), input validation, and robust error handling. The use of interfaces (`List`, `Queue`) promotes good design practices.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String patientId;
    private String name;
    private int age;

    /**
     * Constructs a new Patient object.
     *
     * @param patientId The unique ID assigned to the patient.
     * @param name      The name of the patient.
     * @param age       The age of the patient.
     */
    public Patient(String patientId, String name, int age) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
    }

    // --- Getters ---
    public String getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Provides a string representation of the patient.
     *
     * @return A formatted string including patient ID, name, and age.
     */
    @Override
    public String toString() {
        return String.format("%s (%s, %d)", patientId, name, age);
    }

    /**
     * Checks if two Patient objects are equal based on their patient ID.
     *
     * @param o The object to compare with.
     * @return true if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Patient patient = (Patient) o;
        return patientId.equals(patient.patientId);
    }

    /**
     * Returns a hash code value for the object, based on patient ID.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return patientId.hashCode();
    }
}

/**
 * Manages the hospital appointment system, including patient registration,
 * waiting queue, and completed appointments.
 */
class HospitalAppointmentSystem {
    // Using List interface for flexibility, implemented by ArrayList
    private List<Patient> registeredPatients;
    // Using Queue interface, implemented by LinkedList
    private Queue<Patient> waitingQueue;
    // Using List interface, implemented by ArrayList
    private List<Patient> completedAppointments;

    private int nextPatientId = 1; // Counter for generating unique IDs

    /**
     * Constructs a new HospitalAppointmentSystem.
     * Initializes the data structures.
     */
    public HospitalAppointmentSystem() {
        this.registeredPatients = new ArrayList<>();
        this.waitingQueue = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.completedAppointments = new ArrayList<>();
    }

    /**
     * Registers a new patient with the system.
     *
     * @param name The name of the patient.
     * @param age  The age of the patient.
     */
    public void registerPatient(String name, int age) {
        String id = "P" + nextPatientId++;
        Patient newPatient = new Patient(id, name, age);
        registeredPatients.add(newPatient);
        System.out.println("Patient registered successfully. " + newPatient);
    }

    /**
     * Finds a registered patient by their ID.
     *
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findRegisteredPatient(String patientId) {
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId().equalsIgnoreCase(patientId)) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Adds a registered patient to the waiting queue for an appointment.
     *
     * @param patientId The ID of the patient to add to the queue.
     */
    public void addPatientToWaitingQueue(String patientId) {
        Patient patient = findRegisteredPatient(patientId);

        if (patient == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found in registered patients.");
            return;
        }

        // Check if the patient is already in the waiting queue
        if (waitingQueue.contains(patient)) {
            System.err.println("Error: Patient " + patient.getPatientId() + " is already in the waiting queue.");
            return;
        }

        // Check if the patient has already completed their appointment
        if (completedAppointments.contains(patient)) {
             System.err.println("Error: Patient " + patient.getPatientId() + " has already completed their appointment.");
             return;
        }


        // Add patient to the waiting queue
        waitingQueue.offer(patient); // offer is preferred over add for queues (doesn't throw exception if capacity restricted)
        System.out.println("Patient " + patient + " added to waiting queue.");
    }

    /**
     * Calls the next patient from the waiting queue for their appointment.
     * Moves the patient from the waiting queue to the completed list.
     */
    public void callNextPatient() {
        if (waitingQueue.isEmpty()) {
            System.err.println("Error: Waiting queue is empty. No patient to call.");
            return;
        }

        // Remove patient from the front of the queue
        Patient nextPatient = waitingQueue.poll(); // poll retrieves and removes the head

        // Add the patient to the completed list
        completedAppointments.add(nextPatient);

        System.out.println("Calling next patient: " + nextPatient);
    }

    /**
     * Displays the current patients in the waiting queue.
     */
    public void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(index++ + ". " + patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays the list of completed appointments.
     */
    public void viewCompletedAppointments() {
        System.out.println("\n--- Completed Appointments ---");
        if (completedAppointments.isEmpty()) {
            System.out.println("No appointments completed yet.");
        } else {
            int index = 1;
            for (Patient patient : completedAppointments) {
                System.out.println(index++ + ". " + patient);
            }
        }
        System.out.println("----------------------------");
    }
}

/**
 * Main class to run the Hospital Appointment System application.
 */
public class HospitalApp {

    /**
     * Displays the main menu options.
     */
    private static void displayMenu() {
        System.out.println("\n--- Hospital Appointment System Menu ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Add Patient to Waiting Queue");
        System.out.println("3. Call Next Patient");
        System.out.println("4. View Waiting List");
        System.out.println("5. View Completed Appointments");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Main method to start the application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalAppointmentSystem system = new HospitalAppointmentSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling block
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Default invalid choice

                // Input validation for menu choice
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline character
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                    continue; // Skip the rest of the loop iteration
                }

                // Switch statement for menu navigation
                switch (choice) {
                    case 1: // Register Patient
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        int age = -1;
                        System.out.print("Enter patient age: ");
                        try {
                            age = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            if (age <= 0) {
                                System.err.println("Error: Age must be a positive number.");
                                continue; // Skip registration if age is invalid
                            }
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid age input. Please enter a number.");
                            scanner.nextLine(); // Consume invalid input line
                            continue; // Skip registration
                        }
                        system.registerPatient(name, age);
                        break;

                    case 2: // Add Patient to Waiting Queue
                        System.out.print("Enter patient ID to add to queue: ");
                        String patientId = scanner.nextLine();
                        system.addPatientToWaitingQueue(patientId);
                        break;

                    case 3: // Call Next Patient
                        system.callNextPatient();
                        break;

                    case 4: // View Waiting List
                        system.viewWaitingList();
                        break;

                    case 5: // View Completed Appointments
                        system.viewCompletedAppointments();
                        break;

                    case 6: // Exit
                        System.out.println("Exiting Hospital Appointment System. Goodbye!");
                        running = false;
                        break;

                    default: // Invalid menu choice
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 6.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions
            System.err.println("\nAn unexpected error occurred! System shutting down.");
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }
}
