/*
 * Exam Question #244
 * Generated on: 2025-05-11 22:38:24
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Software Project Task Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line application to manage tasks for a small software project. The system should allow users to add new tasks, mark the next pending task as completed, list all pending tasks, and list all completed tasks.
 * 
 * The core requirement is to use a queue to manage tasks that are waiting to be worked on (pending) and a list to store tasks once they have been finished (completed).
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a `Task` class with the following attributes:
 *     *   `taskId` (an integer, automatically generated and unique for each task)
 *     *   `description` (a String)
 *     *   `status` (a String, e.g., "Pending", "Completed")
 *     *   Ensure proper encapsulation (private fields, public getters, and potentially a method to mark as completed).
 * 
 * 2.  **Task Management Logic:** Create a `ProjectTaskQueue` class that manages the collection of tasks. It should contain:
 *     *   A `Queue<Task>` to hold tasks with "Pending" status.
 *     *   An `ArrayList<Task>` to hold tasks with "Completed" status.
 *     *   An internal counter to generate unique `taskId` values starting from 1.
 *     *   Methods for the following operations:
 *         *   `addTask(String description)`: Creates a new `Task` with "Pending" status and adds it to the pending queue. The description must not be empty.
 *         *   `completeNextTask()`: Removes the task at the front of the pending queue, updates its status to "Completed", and adds it to the completed list. If the queue is empty, this operation should be handled gracefully.
 *         *   `getPendingTasks()`: Returns a `List<Task>` containing all tasks currently in the pending queue.
 *         *   `getCompletedTasks()`: Returns a `List<Task>` containing all tasks currently in the completed list.
 * 
 * 3.  **User Interface:** Create a main application class (e.g., `TaskManagementApp`) with a `main` method that provides a command-line interface:
 *     *   Display a menu of options to the user:
 *         1.  Add New Task
 *         2.  Complete Next Task
 *         3.  List Pending Tasks
 *         4.  List Completed Tasks
 *         5.  Exit
 *     *   Use `java.util.Scanner` to read user input for menu choices and task descriptions.
 *     *   Use a `switch` statement to handle the user's menu selection.
 *     *   Call the appropriate methods of the `ProjectTaskQueue` based on the user's choice.
 *     *   Use `System.out` for displaying the menu, task lists, and success messages.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, empty task description, attempting to complete a task when the queue is empty).
 * 
 * 4.  **Error Handling:**
 *     *   Implement input validation for the task description (cannot be empty or just whitespace).
 *     *   Handle the case where `completeNextTask()` is called on an empty queue.
 *     *   Implement class-wide exception handling using `try-catch` blocks within the `main` method to catch potential runtime errors during input processing or task operations.
 * 
 * 5.  **Best Practices:**
 *     *   Follow Java naming conventions.
 *     *   Add comments to explain complex parts of the code.
 *     *   Ensure proper encapsulation in the `Task` and `ProjectTaskQueue` classes.
 * 
 * **Expected Output:**
 * 
 * The application should run interactively. Example flow:
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Implement user login feature
 * Task added: Task 1: Implement user login feature [Pending]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Design database schema
 * Task added: Task 2: Design database schema [Pending]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task 1: Implement user login feature [Pending]
 * Task 2: Design database schema [Pending]
 * ---------------------
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Completed task: Task 1: Implement user login feature
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * Task 2: Design database schema [Pending]
 * ---------------------
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * Task 1: Implement user login feature [Completed]
 * -----------------------
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Handle edge cases like entering non-numeric input for the menu choice, entering an empty task description, or attempting to complete a task when no tasks are pending, using `System.err` for error messages.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct usage of `Queue`, `ArrayList`, and `List`.
 * *   Proper implementation of the `Task` and `ProjectTaskQueue` classes with encapsulation.
 * *   Effective use of `Scanner`, `switch`, `System.out`, and `System.err`.
 * *   Robust error handling using `try-catch` and input validation.
 * *   Clean code structure, meaningful names, and comments.
 * *   The application runs interactively as described.
 * 
 * **Time Allotment:** 45-60 minutes.
 *
 * EXPLANATION:
 * This solution implements a simple command-line task management system demonstrating the required Java concepts.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents a single task with `taskId`, `description`, and `status`.
 *     *   Uses private fields and public getters (`getTaskId`, `getDescription`, `getStatus`) for encapsulation.
 *     *   Includes a `markAsCompleted()` method to change the status, ensuring status modification is controlled by the object itself.
 *     *   Overrides `toString()` for easy printing of task details.
 * 
 * 2.  **`ProjectTaskQueue` Class:**
 *     *   Manages the collections of tasks.
 *     *   Uses a `java.util.Queue<Task>` (`LinkedList` implementation) named `pendingTasks`. The `Queue` interface is ideal here because tasks are processed in a First-In, First-Out (FIFO) manner (the "next" task to complete is the one added earliest). `offer()` adds to the tail, and `poll()` removes from the head.
 *     *   Uses a `java.util.ArrayList<Task>` named `completedTasks`. An `ArrayList` is suitable for storing completed tasks as we might need to list them all or potentially access them by index later (though not required in this specific problem). It implements the `java.util.List` interface.
 *     *   `nextTaskId` is a simple counter to ensure each task gets a unique ID.
 *     *   `addTask()`: Validates the description, creates a new `Task`, increments `nextTaskId`, and adds the task to the `pendingTasks` queue using `offer()`.
 *     *   `completeNextTask()`: Uses `poll()` to get and remove the head of the `pendingTasks` queue. If `poll()` returns `null` (meaning the queue is empty), it throws an `IllegalStateException`, which is caught and handled in the main application. Otherwise, it marks the task as completed and adds it to the `completedTasks` list.
 *     *   `getPendingTasks()` and `getCompletedTasks()`: Provide access to the task lists. `getPendingTasks()` returns a *copy* of the pending tasks in a new `ArrayList` to prevent external code from modifying the internal queue structure directly. `getCompletedTasks()` returns the internal `ArrayList`.
 * 
 * 3.  **`TaskManagementApp` Class:**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   Initializes `Scanner` for user input and `ProjectTaskQueue` to manage tasks.
 *     *   The main logic is enclosed in a `while(running)` loop that continues until the user chooses to exit.
 *     *   `displayMenu()`: A helper method to print the menu options to `System.out`.
 *     *   Input Handling: Reads the user's choice using `scanner.nextLine()`. It then attempts to parse the input string into an integer using `Integer.parseInt()`. A `try-catch (NumberFormatException e)` block handles cases where the user enters non-numeric input, printing an error to `System.err`.
 *     *   `switch` Statement: Controls the program flow based on the valid integer choice. Each case calls the appropriate method on the `taskManager` object.
 *     *   Error Handling within `switch`: Cases 1 and 2 (`addTask`, `completeNextTask`) have internal `try-catch` blocks to handle specific exceptions thrown by `ProjectTaskQueue` methods (`IllegalArgumentException` for empty description, `IllegalStateException` for empty queue). These catch blocks print error messages to `System.err`.
 *     *   Listing Tasks: Cases 3 and 4 retrieve the task lists using `getPendingTasks()` and `getCompletedTasks()`, iterate through them, and print each task's details to `System.out`. They also handle the case where the lists are empty.
 *     *   Class-wide `try-catch`: The main `while` loop and the `Scanner` initialization are wrapped in a larger `try-catch (Exception e)` block. This demonstrates class-wide exception handling, catching any unexpected runtime exceptions that might occur anywhere within the main execution flow and printing an error message and stack trace to `System.err`.
 *     *   `finally` block: Ensures the `Scanner` resource is closed properly regardless of whether an exception occurred.
 * 
 * This solution effectively utilizes all required components in a practical scenario, demonstrates good object-oriented design principles (encapsulation), handles user input and potential errors gracefully, and uses `System.out` and `System.err` appropriately.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Although we read line, good practice to know

// Represents a single task in the project
class Task {
    private int taskId;
    private String description;
    private String status; // e.g., "Pending", "Completed"

    // Constructor
    public Task(int taskId, String description) {
        this.taskId = taskId;
        this.description = description;
        this.status = "Pending"; // New tasks start as Pending
    }

    // Getters
    public int getTaskId() {
        return taskId;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // Method to mark task as completed
    public void markAsCompleted() {
        this.status = "Completed";
    }

    @Override
    public String toString() {
        return "Task " + taskId + ": " + description + " [" + status + "]";
    }
}

// Manages the collection of tasks using a Queue and an ArrayList
class ProjectTaskQueue {
    // Queue for tasks that are pending (waiting to be done)
    private Queue<Task> pendingTasks;
    // List for tasks that have been completed
    private List<Task> completedTasks;
    // Counter for generating unique task IDs
    private int nextTaskId;

    // Constructor
    public ProjectTaskQueue() {
        // Using LinkedList as a Queue implementation
        this.pendingTasks = new LinkedList<>();
        // Using ArrayList for completed tasks
        this.completedTasks = new ArrayList<>();
        this.nextTaskId = 1; // Start task IDs from 1
    }

    /**
     * Adds a new task to the pending queue.
     *
     * @param description The description of the task.
     * @throws IllegalArgumentException if the description is null or empty.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be empty.");
        }
        Task newTask = new Task(nextTaskId++, description.trim());
        pendingTasks.offer(newTask); // offer is preferred over add in Queue for capacity-constrained queues, but works fine here
        System.out.println("Task added: " + newTask);
    }

    /**
     * Completes the next task in the pending queue.
     * Moves the task from pending to completed status and list.
     *
     * @throws IllegalStateException if the pending queue is empty.
     */
    public void completeNextTask() {
        Task taskToComplete = pendingTasks.poll(); // Retrieves and removes the head of the queue
        if (taskToComplete == null) {
            throw new IllegalStateException("No pending tasks to complete.");
        }
        taskToComplete.markAsCompleted();
        completedTasks.add(taskToComplete);
        System.out.println("Completed task: " + taskToComplete.toString().replace(" [Completed]", "")); // Print without status initially
    }

    /**
     * Returns a list of all pending tasks.
     *
     * @return A List view of the pending tasks.
     */
    public List<Task> getPendingTasks() {
        // Return a new list to avoid external modification of the internal queue structure
        return new ArrayList<>(pendingTasks);
    }

    /**
     * Returns a list of all completed tasks.
     *
     * @return The List of completed tasks.
     */
    public List<Task> getCompletedTasks() {
        // Return the internal list (a copy could be made if necessary for immutability)
        return completedTasks;
    }
}

// Main application class for the command-line interface
public class TaskManagementApp {

    // Method to display the menu
    private static void displayMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. List Pending Tasks");
        System.out.println("4. List Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ProjectTaskQueue taskManager = new ProjectTaskQueue();
        boolean running = true;

        // Class-wide try-catch block for handling potential exceptions during execution
        try {
            while (running) {
                displayMenu();

                // Read the entire line to avoid issues with nextInt() followed by nextLine()
                String inputLine = scanner.nextLine();
                int choice;

                // Attempt to parse the input as an integer
                try {
                    choice = Integer.parseInt(inputLine);
                } catch (NumberFormatException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip to the next iteration
                }

                // Use a switch statement to handle different menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        try {
                            taskManager.addTask(description);
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;

                    case 2:
                        try {
                            taskManager.completeNextTask();
                        } catch (IllegalStateException e) {
                            System.err.println("Error: " + e.getMessage());
                        }
                        break;

                    case 3:
                        List<Task> pending = taskManager.getPendingTasks();
                        System.out.println("--- Pending Tasks ---");
                        if (pending.isEmpty()) {
                            System.out.println("No pending tasks.");
                        } else {
                            for (Task task : pending) {
                                System.out.println(task);
                            }
                        }
                        System.out.println("---------------------");
                        break;

                    case 4:
                        List<Task> completed = taskManager.getCompletedTasks();
                        System.out.println("--- Completed Tasks ---");
                        if (completed.isEmpty()) {
                            System.out.println("No completed tasks.");
                        } else {
                            for (Task task : completed) {
                                System.out.println(task);
                            }
                        }
                        System.out.println("-----------------------");
                        break;

                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }
}
