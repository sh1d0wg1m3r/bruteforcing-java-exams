/*
 * Exam Question #976
 * Generated on: 2025-05-12 17:07:32
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System. The system should allow managing patient records and handling appointments in a queue-based manner. Patients first need to be registered in the system. Once registered, they can book an appointment, which places them in a waiting queue. The system should then allow processing appointments from the front of the queue.
 * 
 * **Requirements:**
 * 
 * Implement a Java application that fulfills the following:
 * 
 * 1.  **Patient Management:**
 *     *   Maintain a list of registered patients. Each patient should have a unique integer ID and a name.
 *     *   Allow adding new patients to the system. Validate that the patient ID is unique.
 *     *   Allow listing all registered patients.
 * 
 * 2.  **Appointment Management:**
 *     *   Maintain a queue of patients who have booked an appointment and are waiting to be seen.
 *     *   Allow a registered patient to book an appointment. The system should find the patient by their ID from the registered list and add them to the appointment queue. If the patient is not found, display an error.
 *     *   Allow processing the next appointment in the queue. This removes the patient from the front of the queue and indicates they are being seen. If the queue is empty, display a message indicating no appointments are waiting.
 * 
 * 3.  **User Interface:**
 *     *   Provide a command-line menu interface using `Scanner` for user interaction.
 *     *   The menu should include options for:
 *         *   Add New Patient
 *         *   List All Patients
 *         *   Book Appointment
 *         *   Process Next Appointment
 *         *   Exit
 * 
 * 4.  **Core Java Component Usage:**
 *     *   You **must** use `java.util.Queue` for the appointment waiting list.
 *     *   You **must** use `java.util.ArrayList` to store the registered patients.
 *     *   You **must** declare the patient list variable using the `java.util.List` interface type.
 *     *   You **must** use `java.util.Scanner` to read user input.
 *     *   You **must** use a `switch` statement for the main menu flow control.
 *     *   You **must** use `System.err.println()` for all error messages.
 *     *   You **must** use `System.out.println()` for all normal output (menu, prompts, lists, success messages).
 *     *   You **must** implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, especially around input operations or unexpected issues.
 * 
 * 5.  **Best Practices:**
 *     *   Implement proper encapsulation using private fields and public methods in your classes.
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Implement input validation (e.g., checking if patient ID exists, handling non-integer input).
 *     *   Ensure proper error handling as described above.
 *     *   Structure your code cleanly into appropriate classes (e.g., `Patient`, `AppointmentSystem`).
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt the user for input based on the selected option, perform the requested action, and display relevant output or error messages. Error messages must go to `System.err`, while all other messages go to `System.out`.
 * 
 * Example interaction flow:
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Add New Patient
 * 2. List All Patients
 * 3. Book Appointment
 * 4. Process Next Appointment
 * 5. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Patient added successfully.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 1
 * Enter Patient ID: 102
 * Enter Patient Name: Bob
 * Patient added successfully.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 2
 * Registered Patients:
 * ID: 101, Name: Alice
 * ID: 102, Name: Bob
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter Patient ID to book appointment: 101
 * Appointment booked for Patient ID 101. Added to queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter Patient ID to book appointment: 999
 * Error: Patient with ID 999 not found.
 * (This error message should appear on System.err)
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 4
 * Processing appointment for Patient ID 101 (Alice).
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 4
 * No appointments waiting in the queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Your solution should consist of the complete Java code for the application.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all features.
 * *   Proper usage of all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling, structure).
 * *   Clear and correct output.
 *
 * EXPLANATION:
 * This solution implements the Hospital Appointment Management System as requested, demonstrating the practical use of the specified Java components and adhering to best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient` class: A simple class to encapsulate patient data (`patientId`, `name`). It has a constructor, getter methods, and an overridden `toString()` method for easy printing. Fields are `private` for encapsulation.
 *     *   `AppointmentSystem` class: This is the main class that orchestrates the system. It holds the collections (`registeredPatients`, `appointmentQueue`) and the `Scanner`. It contains methods for each menu operation (`addPatient`, `listPatients`, `bookAppointment`, `processNextAppointment`) and the main `runMenu` loop.
 * 
 * 2.  **Required Component Usage:**
 *     *   `java.util.ArrayList`: Used to store the `registeredPatients`. `new ArrayList<>()` creates the concrete list object.
 *     *   `java.util.List`: The `registeredPatients` variable is declared using the `List` interface type (`private List<Patient> registeredPatients;`). This is good practice as it allows flexibility to change the underlying implementation (e.g., to `LinkedList` or `Vector`) later without changing the code that uses the list methods.
 *     *   `java.util.Queue`: Used for `appointmentQueue`. `new LinkedList<>()` creates the concrete queue object, as `LinkedList` implements the `Queue` interface. The `offer()` method is used to add patients to the end of the queue, and `poll()` is used to retrieve and remove the patient from the front.
 *     *   `java.util.Scanner`: An instance is created (`private Scanner scanner;`) to read user input from `System.in`. It's initialized in the constructor and closed in the `finally` block of `runMenu`.
 *     *   `switch` statement: Used in the `runMenu` method to dispatch actions based on the user's integer choice.
 *     *   `System.err`: Used exclusively for printing error messages (e.g., invalid input, patient not found, duplicate ID).
 *     *   `System.out`: Used for all normal output, including the menu, prompts, success messages, and listing patients.
 *     *   `try-catch` blocks: Implemented in several places.
 *         *   A general `try-catch` block wraps the main `while` loop in `runMenu` to catch any unexpected exceptions during the program's execution.
 *         *   Specific `try-catch(InputMismatchException)` blocks are used within `runMenu`, `addPatient`, and `bookAppointment` to handle cases where the user enters non-integer input when an integer is expected by `scanner.nextInt()`. This prevents the program from crashing and allows graceful error reporting.
 *         *   Additional `catch(Exception e)` blocks are included in the operational methods (`addPatient`, `bookAppointment`, `processNextAppointment`) to catch any other potential runtime errors specific to those operations, providing more localized error handling. The `finally` block in `runMenu` ensures the `Scanner` is closed, releasing system resources.
 * 
 * 3.  **Best Practices Implementation:**
 *     *   **Encapsulation:** Fields in `Patient` and `AppointmentSystem` are `private`. Access and modification are done via public methods (getters, operational methods).
 *     *   **Meaningful Names:** Variables (`registeredPatients`, `appointmentQueue`, `patientId`, `name`, `choice`), methods (`addPatient`, `listPatients`, `bookAppointment`, `processNextAppointment`, `runMenu`, `printMenu`, `findPatientById`), and classes (`Patient`, `AppointmentSystem`) have names that clearly indicate their purpose.
 *     *   **Comments/Documentation:** Javadoc comments are used for classes and public methods explaining their purpose, parameters, and return values. Inline comments clarify specific logic where needed.
 *     *   **Input Validation:**
 *         *   In `addPatient`, it checks if a patient with the entered ID already exists before adding. It also checks if the name is empty.
 *         *   In `bookAppointment`, it validates if the entered patient ID corresponds to a registered patient.
 *         *   The `try-catch(InputMismatchException)` blocks handle non-integer input validation for IDs and menu choices.
 *         *   The `default` case in the `switch` handles valid integer inputs that are outside the expected range (1-5).
 *     *   **Error Handling:** Error messages are informative and directed to `System.err`. `InputMismatchException` is specifically caught and handled. General exceptions are caught for robustness.
 *     *   **Clean Code Structure:** The code is divided into two classes with clear responsibilities. Methods are concise and perform specific tasks. The `runMenu` method manages the main loop and user interaction flow.
 * 
 * This solution effectively integrates the required components into a functional, albeit simplified, system, demonstrating core Java programming skills, data structure usage, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int patientId;
    private String name;

    /**
     * Constructs a new Patient object.
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getPatientId() {
        return patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the patient.
     * @return A formatted string with patient details.
     */
    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name;
    }

    // Optional: Equals and hashCode based on patientId for easier searching if needed,
    // but simple iteration is sufficient for this problem.
}

/**
 * Manages patients and appointments for the hospital system.
 */
public class AppointmentSystem {

    // Use List interface type, implemented by ArrayList
    private List<Patient> registeredPatients;

    // Use Queue interface type, typically implemented by LinkedList for this use case
    private Queue<Patient> appointmentQueue;

    private Scanner scanner;

    /**
     * Constructs a new AppointmentSystem.
     * Initializes patient list, appointment queue, and scanner.
     */
    public AppointmentSystem() {
        this.registeredPatients = new ArrayList<>(); // ArrayList for list
        this.appointmentQueue = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the system.
     * Prompts user for ID and name, validates ID uniqueness.
     */
    public void addPatient() {
        System.out.println("--- Add New Patient ---");
        int patientId = -1; // Use -1 to indicate invalid/not read yet
        String name = null;

        try {
            System.out.print("Enter Patient ID: ");
            patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            // Check if ID already exists
            if (findPatientById(patientId) != null) {
                System.err.println("Error: Patient with ID " + patientId + " already exists.");
                return; // Exit method if ID is not unique
            }

            System.out.print("Enter Patient Name: ");
            name = scanner.nextLine();

            // Basic name validation (not empty)
            if (name == null || name.trim().isEmpty()) {
                 System.err.println("Error: Patient name cannot be empty.");
                 return;
            }

            Patient newPatient = new Patient(patientId, name.trim());
            registeredPatients.add(newPatient);
            System.out.println("Patient added successfully.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for Patient ID. Please enter an integer.");
            scanner.nextLine(); // Consume the invalid input to prevent infinite loop
        } catch (Exception e) {
             // Catch any other unexpected exceptions during input
             System.err.println("An unexpected error occurred while adding a patient: " + e.getMessage());
             // e.printStackTrace(); // Uncomment for debugging
        }
    }

    /**
     * Finds a patient in the registered list by their ID.
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found, null otherwise.
     */
    private Patient findPatientById(int patientId) {
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Lists all registered patients in the system.
     */
    public void listPatients() {
        System.out.println("--- Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Allows a registered patient to book an appointment.
     * Finds the patient by ID and adds them to the appointment queue.
     */
    public void bookAppointment() {
        System.out.println("--- Book Appointment ---");
        System.out.print("Enter Patient ID to book appointment: ");

        try {
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            Patient patientToBook = findPatientById(patientId);

            if (patientToBook == null) {
                System.err.println("Error: Patient with ID " + patientId + " not found.");
            } else {
                // Check if patient is already in the queue (optional, but good practice)
                // Simple check for this problem: just add. Queue allows duplicates unless handled.
                // For this problem, we assume a patient can potentially book multiple times
                // or the system doesn't prevent double booking into the queue.
                appointmentQueue.offer(patientToBook); // Add patient to the end of the queue
                System.out.println("Appointment booked for Patient ID " + patientId + ". Added to queue.");
            }

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input for Patient ID. Please enter an integer.");
            scanner.nextLine(); // Consume invalid input
        } catch (Exception e) {
             // Catch any other unexpected exceptions
             System.err.println("An unexpected error occurred while booking an appointment: " + e.getMessage());
             // e.printStackTrace();
        }
    }

    /**
     * Processes the next appointment in the queue.
     * Removes the patient from the front of the queue.
     */
    public void processNextAppointment() {
        System.out.println("--- Process Next Appointment ---");
        try {
            Patient nextPatient = appointmentQueue.poll(); // Retrieve and remove the head of the queue

            if (nextPatient == null) {
                System.out.println("No appointments waiting in the queue.");
            } else {
                System.out.println("Processing appointment for " + nextPatient.getName() + " (ID: " + nextPatient.getPatientId() + ").");
                // In a real system, this would involve more logic (e.g., assigning doctor, updating status)
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during queue processing
            System.err.println("An unexpected error occurred while processing an appointment: " + e.getMessage());
            // e.printStackTrace();
        }
    }

    /**
     * Displays the main menu and handles user input.
     * Contains the main application loop and switch statement.
     */
    public void runMenu() {
        int choice = -1;
        // Wrap the main loop in a try-catch for broader exception handling
        try {
            while (choice != 5) {
                printMenu();

                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    // No scanner.nextLine() here, as nextInt() doesn't consume the newline
                    // if the next input is also an int. It's handled within the specific methods
                    // after reading the int and before reading a line.

                    // Specific handling for newline consumption after nextInt()
                    // if the next operation in the switch case ISN'T nextInt()
                    // This is done inside addPatient and bookAppointment.

                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    choice = -1; // Reset choice to avoid processing invalid input
                }

                // Use a switch statement for flow control
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        listPatients();
                        break;
                    case 3:
                        bookAppointment();
                        break;
                    case 4:
                        processNextAppointment();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        // Handles cases where the input is an integer but not 1-5
                        if (choice != -1) { // Avoid printing this for InputMismatchException case
                             System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        }
                        break;
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
             // Catch any unhandled exceptions that might occur during the menu loop
             System.err.println("An unrecoverable error occurred: " + e.getMessage());
             // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure the scanner is closed when the application exits or on error
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private void printMenu() {
        System.out.println("--- Hospital Appointment System ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. List All Patients");
        System.out.println("3. Book Appointment");
        System.out.println("4. Process Next Appointment");
        System.out.println("5. Exit");
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        AppointmentSystem system = new AppointmentSystem();
        system.runMenu();
    }
}
