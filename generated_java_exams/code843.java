/*
 * Exam Question #843
 * Generated on: 2025-05-12 16:49:21
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Team Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple console-based application to help a small team manage their tasks. Tasks are added to a list of pending items and processed in a first-in, first-out manner. Once completed, tasks are moved to an archive.
 * 
 * **Requirements:**
 * 
 * Implement a Java console application named `TaskApp` that fulfills the following requirements:
 * 
 * 1.  **Task Representation:** Create a simple class `Task` with a private field for the task description (`String`) and a public getter method.
 * 2.  **Task Management Logic:** Create a class `TaskManager` responsible for managing the tasks.
 *     *   It must use a `java.util.Queue` to store tasks that are pending.
 *     *   It must use a `java.util.List` (implemented by `java.util.ArrayList`) to store tasks that have been completed.
 *     *   Implement methods to add a task, complete the next task, and retrieve lists of pending and completed tasks. The "complete next task" method should remove the task from the pending queue and add it to the completed list.
 * 3.  **User Interface:** The `main` method in `TaskApp` should provide a command-line interface.
 *     *   Use `java.util.Scanner` to read user input.
 *     *   Present a menu of options to the user:
 *         1.  Add New Task
 *         2.  Complete Next Task
 *         3.  View Pending Tasks
 *         4.  View Completed Tasks
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, success messages, and lists of tasks.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, attempting to complete a task when none are pending).
 * 5.  **Exception Handling:** Implement class-wide exception handling using a `try-catch` block in the `main` method's core loop. This block should catch potential issues like invalid integer input (`java.util.InputMismatchException`) or errors originating from the `TaskManager` (e.g., trying to complete a task from an empty queue - you can use a standard exception like `IllegalStateException` for this). Provide informative error messages via `System.err`.
 * 6.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation where necessary.
 *     *   Implement basic input validation (e.g., ensuring the menu choice is a valid integer within the range).
 *     *   Handle cases where the pending queue or completed list is empty when attempting to view or complete tasks.
 *     *   Ensure resources like the `Scanner` are closed properly.
 * 
 * **Expected Interaction:**
 * 
 * The application should loop, displaying the menu and prompting for input. Based on the input, it performs the requested action, prints relevant output to `System.out`, or prints an error to `System.err` if an issue occurs. The loop continues until the user chooses the 'Exit' option.
 * 
 * **Example Flow:**
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Implement Task Class
 * Task added: Implement Task Class
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * ...
 * Enter your choice: 1
 * Enter task description: Create TaskManager
 * Task added: Create TaskManager
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Tasks ---
 * 1. Implement Task Class
 * 2. Create TaskManager
 * ---------------------
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 2
 * Completed task: Implement Task Class
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 4
 * --- Completed Tasks ---
 * 1. Implement Task Class
 * ---------------------
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 2
 * Completed task: Create TaskManager
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 2
 * Error: No tasks pending to complete. (Printed to System.err)
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5. (Printed to System.err)
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: five
 * Error: Invalid input. Please enter a number. (Printed to System.err)
 * 
 * --- Task Management Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should provide the complete Java code for the `Task`, `TaskManager`, and `TaskApp` classes within a single file or clearly separated sections.
 *
 * EXPLANATION:
 * The solution provides a simple console-based Task Management System adhering to all specified requirements.
 * 
 * 1.  **Task Class:** A basic `Task` class is defined with a private `description` field and a public getter. A constructor is provided, including basic validation to ensure the description is not null or empty. The `toString()` method is overridden for easy printing.
 * 
 * 2.  **TaskManager Class:**
 *     *   It maintains two collections: `pendingTasks` (a `Queue<Task>` implemented by `LinkedList`) and `completedTasks` (a `List<Task>` implemented by `ArrayList`).
 *     *   `addTask(Task task)`: Uses `pendingTasks.offer(task)` to add a task to the end of the queue.
 *     *   `completeNextTask()`: Uses `pendingTasks.poll()` to retrieve and remove the head of the queue. If `poll()` returns `null` (queue is empty), it throws an `IllegalStateException` to signal the error condition, which is caught in the `main` method. If successful, the task is added to the `completedTasks` list.
 *     *   `displayPendingTasks()` and `displayCompletedTasks()`: These methods iterate through their respective collections and print the tasks to `System.out`, handling the case where the collections are empty. Iterating over the `Queue` directly allows viewing without removing elements.
 * 
 * 3.  **TaskApp Class (Main Application Logic):**
 *     *   The `main` method contains the core application loop.
 *     *   A `Scanner` is initialized to read user input from `System.in`.
 *     *   A `TaskManager` instance is created.
 *     *   The main `while(running)` loop continues until the user chooses to exit.
 *     *   **Class-wide Exception Handling:** A `try-catch` block wraps the main `while` loop. This allows catching exceptions that might occur during input reading (`InputMismatchException`) or during `TaskManager` operations (`IllegalStateException` thrown by `completeNextTask`). A general `Exception` catch is included as a fallback for any unexpected errors, printing the stack trace for debugging.
 *     *   Inside the `try` block:
 *         *   The menu is printed using `System.out`.
 *         *   Input is read using `scanner.nextInt()`. A nested `try-catch` specifically for `InputMismatchException` is used around `scanner.nextInt()` to handle non-integer input gracefully, printing an error to `System.err` and consuming the invalid input to prevent an infinite loop.
 *         *   `scanner.nextLine()` is called after `nextInt()` to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls (e.g., when reading the task description).
 *         *   A `switch` statement processes the `choice`.
 *         *   **Case 1 (Add Task):** Prompts for description, creates a `Task` object (which might throw `IllegalArgumentException` caught locally), and adds it to the `TaskManager`.
 *         *   **Case 2 (Complete Task):** Calls `taskManager.completeNextTask()`. This call is within a `try-catch` block specifically for `IllegalStateException` to catch the "empty queue" error and print a user-friendly message to `System.err`.
 *         *   **Case 3 & 4 (View Tasks):** Calls the corresponding display methods in `TaskManager`.
 *         *   **Case 5 (Exit):** Sets `running` to `false` to terminate the loop.
 *         *   **Default:** Handles invalid integer choices within the valid range (1-5), printing an error to `System.err`.
 *     *   The `finally` block ensures the `scanner` is closed when the application exits, releasing system resources.
 * 
 * This solution effectively demonstrates the use of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` for exception handling in a practical, encapsulated structure with basic validation and error reporting.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single task with a description.
class Task {
    private String description;

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     */
    public Task(String description) {
        if (description == null || description.trim().isEmpty()) {
            throw new IllegalArgumentException("Task description cannot be null or empty.");
        }
        this.description = description.trim();
    }

    /**
     * Gets the description of the task.
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    @Override
    public String toString() {
        return description;
    }
}

// Manages the collection of pending and completed tasks.
class TaskManager {
    private Queue<Task> pendingTasks;
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskManager, initializing the task collections.
     */
    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new task to the pending queue.
     * @param task The task to add.
     */
    public void addTask(Task task) {
        if (task != null) {
            pendingTasks.offer(task); // offer is generally preferred over add for queues
        }
    }

    /**
     * Completes the next task in the pending queue.
     * Removes the task from pending and adds it to completed.
     * @return The completed task.
     * @throws IllegalStateException if the pending queue is empty.
     */
    public Task completeNextTask() {
        Task nextTask = pendingTasks.poll(); // poll returns null if queue is empty
        if (nextTask == null) {
            throw new IllegalStateException("No tasks pending to complete.");
        }
        completedTasks.add(nextTask);
        return nextTask;
    }

    /**
     * Displays all tasks currently in the pending queue.
     * Uses System.out for printing.
     */
    public void displayPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            int index = 1;
            // Iterating over the queue without removing elements
            for (Task task : pendingTasks) {
                System.out.println(index++ + ". " + task);
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Displays all tasks currently in the completed list.
     * Uses System.out for printing.
     */
    public void displayCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks yet.");
        } else {
            int index = 1;
            for (Task task : completedTasks) {
                System.out.println(index++ + ". " + task);
            }
        }
        System.out.println("---------------------");
    }
}

// Main application class for the Task Management System.
public class TaskApp {

    private static void printMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskManager taskManager = new TaskManager();
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                printMenu();
                int choice = -1; // Default invalid choice

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the main loop
                }

                // Switch statement for menu navigation
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        try {
                            Task newTask = new Task(description);
                            taskManager.addTask(newTask);
                            System.out.println("Task added: " + newTask.getDescription());
                        } catch (IllegalArgumentException e) {
                             System.err.println("Error adding task: " + e.getMessage());
                        }
                        break;

                    case 2:
                        try {
                            Task completedTask = taskManager.completeNextTask();
                            System.out.println("Completed task: " + completedTask.getDescription());
                        } catch (IllegalStateException e) {
                            System.err.println("Error: " + e.getMessage()); // Handles empty queue
                        }
                        break;

                    case 3:
                        taskManager.displayPendingTasks();
                        break;

                    case 4:
                        taskManager.displayCompletedTasks();
                        break;

                    case 5:
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;

                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions not handled elsewhere
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }
}
