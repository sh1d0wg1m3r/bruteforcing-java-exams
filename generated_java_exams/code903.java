/*
 * Exam Question #903
 * Generated on: 2025-05-12 16:57:18
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: E-Commerce Order Processing System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified backend system for an e-commerce platform. This system needs to manage a fixed inventory of products and process customer orders sequentially.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must fulfill the following requirements:
 * 
 * 1.  **Product Management:**
 *     *   Maintain a list of available products. Each product should have a unique ID (integer), a name (String), a price (double), and the current stock quantity (integer).
 *     *   Initialize the system with a few sample products.
 * 
 * 2.  **Order Management:**
 *     *   Allow customers to place orders for a specific product and quantity.
 *     *   Validate that the requested product exists and that there is sufficient stock.
 *     *   If an order is valid, deduct the quantity from the product's stock and add the order to a queue for processing. Each order should have a unique order ID.
 *     *   Orders must be processed in the order they were placed (First-In, First-Out).
 * 
 * 3.  **System Operations:**
 *     *   Provide a command-line interface for the user (administrator) to interact with the system.
 *     *   The system should present a menu with the following options:
 *         *   **1. List Available Products:** Display details (ID, Name, Price, Stock) of all products.
 *         *   **2. Place New Order:** Prompt for Product ID and Quantity. Validate and place the order into the processing queue.
 *         *   **3. Process Next Order:** Take the next order from the queue, mark it as processed, and display its details.
 *         *   **4. View Pending Orders:** Display a summary of all orders currently waiting in the processing queue.
 *         *   **5. Exit:** Terminate the program.
 * 
 * **Mandatory Component Usage:**
 * 
 * Your solution **must** explicitly use and demonstrate understanding of the following Java components:
 * 
 * *   `java.util.Queue`: To manage the pending orders (FIFO).
 * *   `java.util.ArrayList`: To store the product inventory.
 * *   `java.util.List`: As the interface type for the inventory variable.
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To print error messages (e.g., invalid input, product not found, insufficient stock, empty queue).
 * *   `System.out`: To print normal output (menu, product lists, order details, success messages).
 * *   Class-wide exception handling with `try-catch` blocks: To gracefully handle potential runtime errors, especially around user input parsing and invalid operations.
 * 
 * **Best Practices:**
 * 
 * *   Use proper encapsulation (private fields, public getters/methods).
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 * *   Implement robust input validation.
 * *   Provide clear error messages using `System.err`.
 * *   Structure your code into appropriate classes (`Product`, `Order`, and the main system class).
 * 
 * **Expected Output:**
 * 
 * The program should print a menu, accept user input, and provide output based on the selected option. Error messages should be clearly distinguishable using `System.err`.
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * --- E-Commerce System Menu ---
 * 1. List Available Products
 * 2. Place New Order
 * 3. Process Next Order
 * 4. View Pending Orders
 * 5. Exit
 * Enter your choice: 1
 * --- Available Products ---
 * ID: 101, Name: Laptop, Price: 1200.00, Stock: 10
 * ID: 102, Name: Keyboard, Price: 75.50, Stock: 50
 * ID: 103, Name: Mouse, Price: 25.00, Stock: 30
 * 
 * --- E-Commerce System Menu ---
 * 1. List Available Products
 * ...
 * Enter your choice: 2
 * Enter Product ID: 101
 * Enter Quantity: 2
 * Order placed successfully! Order ID: 1. Product: Laptop, Quantity: 2.
 * Updated Stock for Laptop: 8
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 3
 * Processing Order ID: 1. Product: Laptop, Quantity: 2.
 * Order 1 processed.
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 3
 * No pending orders to process.
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 2
 * Enter Product ID: 999
 * Enter Quantity: 1
 * Error: Product with ID 999 not found.
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 2
 * Enter Product ID: 102
 * Enter Quantity: 100
 * Error: Insufficient stock for Keyboard. Requested: 100, Available: 50.
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 4
 * --- Pending Orders ---
 * No pending orders.
 * 
 * --- E-Commerce System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting E-Commerce System.
 * ```
 * 
 * Your code should be a single, runnable Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simplified E-Commerce Order Processing System using the required Java components and best practices.
 * 
 * 1.  **Structure:** The code is organized into three classes:
 *     *   `Product`: Represents an item available for sale, holding its details and managing its stock.
 *     *   `Order`: Represents a customer order, capturing the product details and quantity at the time of ordering. It also manages unique order IDs using a static counter.
 *     *   `ECommerceSystem`: The main class that orchestrates the system. It holds the inventory and the pending orders queue, handles user interaction, and implements the core logic for each menu option.
 * 
 * 2.  **Component Usage:**
 *     *   `java.util.ArrayList`: Used to store the `inventory` of `Product` objects. `ArrayList` provides dynamic resizing and efficient element access by index or iteration, suitable for managing a list of products.
 *     *   `java.util.List`: The `inventory` variable is declared using the `List` interface (`private List<Product> inventory = new ArrayList<>();`). This is a best practice promoting programming to interfaces, making the code more flexible if a different List implementation were needed later.
 *     *   `java.util.Queue`: Used to store `pendingOrders`. `Queue` provides methods like `offer()` (add to tail) and `poll()` (remove from head), perfectly implementing the First-In, First-Out (FIFO) requirement for processing orders. `java.util.LinkedList` is used as a concrete implementation of `Queue`.
 *     *   `java.util.Scanner`: An instance `scanner` is used in the `ECommerceSystem` class to read user input from `System.in`.
 *     *   `switch` statement: Used in the `run()` method's main loop to control the flow based on the user's menu choice.
 *     *   `System.err`: Used specifically for printing error messages (e.g., "Error: Product not found.", "Error: Insufficient stock."). This directs error output to the standard error stream, which is conventional and can be handled separately from standard output.
 *     *   `System.out`: Used for all normal output, including the menu, prompts, product listings, successful order placement messages, and processed order details.
 *     *   `try-catch` blocks: Implemented in the `run()` method around the main loop's input reading and processing, and specifically in the `placeOrder()` method.
 *         *   In `run()`, a `try-catch(NumberFormatException)` handles cases where the user enters non-numeric input for the menu choice. A general `catch(Exception e)` is also included as a class-wide handler to catch any other unexpected errors during the execution of a menu option, preventing the program from crashing and printing an error message to `System.err`.
 *         *   In `placeOrder()`, a `try-catch(NumberFormatException)` handles non-numeric input for product ID or quantity. An additional `catch(IllegalArgumentException)` is included to catch potential errors thrown by the `decreaseStock` method if validation logic were somehow bypassed (though the explicit checks before calling `decreaseStock` are the primary validation). A general `catch(Exception e)` is also present to handle any other unforeseen issues during the complex order placement process.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Product`, `Order`, and `ECommerceSystem` are `private`. Public getter methods are provided to access necessary data. Methods are public or private as appropriate for their role (e.g., `run()` is public, `initializeInventory()` is private as it's an internal setup method).
 *     *   **Meaningful Names:** Variables (`inventory`, `pendingOrders`, `productId`, `quantity`, `totalAmount`), classes (`Product`, `Order`, `ECommerceSystem`), and methods (`listProducts`, `placeOrder`, `processNextOrder`, `findProductById`) have descriptive names.
 *     *   **Comments and Documentation:** Javadoc comments are provided for classes and key methods explaining their purpose, parameters, and return values. Inline comments explain specific logic where needed.
 *     *   **Input Validation:** The `placeOrder` method checks if the quantity is positive, if the product ID exists in the inventory, and if there is enough stock before proceeding. The `run` method validates if the menu input is a valid integer within the expected range.
 *     *   **Error Handling:** Specific error conditions (product not found, insufficient stock, invalid input, empty queue) are checked, and informative error messages are printed to `System.err`. `try-catch` blocks ensure that invalid input or unexpected issues don't crash the program.
 *     *   **Clean Code:** Methods are relatively focused on a single responsibility. The `run` method acts as the main loop orchestrator, delegating specific tasks to other methods (`listProducts`, `placeOrder`, etc.). The `Order` class captures a snapshot of product details (`productName`, `productPrice`) rather than holding a direct reference to the inventory `Product` object, preventing issues if the inventory product's details change after the order is placed. Using `scanner.nextLine()` followed by `Integer.parseInt()` is a common robust way to handle mixed numeric and string input with `Scanner`.
 * 
 * This solution effectively demonstrates the required Java concepts integrated into a practical, albeit simplified, real-world scenario, while adhering to good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a product in the e-commerce system.
 */
class Product {
    private int id;
    private String name;
    private double price;
    private int stock;

    /**
     * Constructs a new Product.
     * @param id The unique product ID.
     * @param name The product name.
     * @param price The product price.
     * @param stock The initial stock quantity.
     */
    public Product(int id, String name, double price, int stock) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
    }

    // Getters
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getStock() {
        return stock;
    }

    /**
     * Decreases the stock of the product.
     * @param quantity The amount to decrease the stock by.
     * @throws IllegalArgumentException if quantity is negative or greater than current stock.
     */
    public void decreaseStock(int quantity) {
        if (quantity < 0) {
            throw new IllegalArgumentException("Quantity cannot be negative.");
        }
        if (this.stock < quantity) {
            throw new IllegalArgumentException("Insufficient stock. Requested: " + quantity + ", Available: " + this.stock);
        }
        this.stock -= quantity;
    }

    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Price: %.2f, Stock: %d",
                             id, name, price, stock);
    }
}

/**
 * Represents an order placed by a customer.
 */
class Order {
    private static int nextOrderId = 1; // Static counter for unique order IDs
    private int orderId;
    private int productId; // Storing product ID and details at time of order
    private String productName;
    private double productPrice;
    private int quantity;
    private double totalAmount;

    /**
     * Constructs a new Order.
     * Takes a snapshot of product details at the time of ordering.
     * @param product The product being ordered.
     * @param quantity The quantity ordered.
     */
    public Order(Product product, int quantity) {
        this.orderId = nextOrderId++;
        this.productId = product.getId();
        this.productName = product.getName();
        this.productPrice = product.getPrice(); // Snapshot price
        this.quantity = quantity;
        this.totalAmount = this.productPrice * this.quantity;
    }

    // Getters
    public int getOrderId() {
        return orderId;
    }

    public int getProductId() {
        return productId;
    }

    public String getProductName() {
        return productName;
    }

    public double getProductPrice() {
        return productPrice;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    @Override
    public String toString() {
        return String.format("Order ID: %d, Product: %s (ID: %d), Quantity: %d, Total: %.2f",
                             orderId, productName, productId, quantity, totalAmount);
    }
}

/**
 * The main class for the E-Commerce System. Manages inventory and orders.
 */
public class ECommerceSystem {

    // Use List interface for inventory, implemented by ArrayList
    private List<Product> inventory = new ArrayList<>();

    // Use Queue interface for pending orders, implemented by LinkedList
    private Queue<Order> pendingOrders = new LinkedList<>();

    private Scanner scanner = new Scanner(System.in);

    /**
     * Initializes the system with sample products.
     */
    private void initializeInventory() {
        inventory.add(new Product(101, "Laptop", 1200.00, 10));
        inventory.add(new Product(102, "Keyboard", 75.50, 50));
        inventory.add(new Product(103, "Mouse", 25.00, 30));
        System.out.println("Inventory initialized with sample products.");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- E-Commerce System Menu ---");
        System.out.println("1. List Available Products");
        System.out.println("2. Place New Order");
        System.out.println("3. Process Next Order");
        System.out.println("4. View Pending Orders");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Finds a product in the inventory by its ID.
     * @param productId The ID of the product to find.
     * @return The Product object if found, null otherwise.
     */
    private Product findProductById(int productId) {
        for (Product product : inventory) {
            if (product.getId() == productId) {
                return product;
            }
        }
        return null; // Product not found
    }

    /**
     * Handles the "List Available Products" menu option.
     */
    private void listProducts() {
        System.out.println("\n--- Available Products ---");
        if (inventory.isEmpty()) {
            System.out.println("No products in inventory.");
        } else {
            for (Product product : inventory) {
                System.out.println(product);
            }
        }
    }

    /**
     * Handles the "Place New Order" menu option.
     * Prompts for product ID and quantity, validates, and adds to queue.
     */
    private void placeOrder() {
        System.out.println("\n--- Place New Order ---");
        try {
            System.out.print("Enter Product ID: ");
            int productId = Integer.parseInt(scanner.nextLine()); // Use nextLine and parse for safer integer input

            System.out.print("Enter Quantity: ");
            int quantity = Integer.parseInt(scanner.nextLine());

            if (quantity <= 0) {
                System.err.println("Error: Quantity must be positive.");
                return;
            }

            Product product = findProductById(productId);

            if (product == null) {
                System.err.println("Error: Product with ID " + productId + " not found.");
                return;
            }

            if (product.getStock() < quantity) {
                System.err.println("Error: Insufficient stock for " + product.getName() + ". Requested: " + quantity + ", Available: " + product.getStock() + ".");
                return;
            }

            // Decrease stock and create order
            product.decreaseStock(quantity);
            Order newOrder = new Order(product, quantity);
            pendingOrders.offer(newOrder); // Add order to the end of the queue

            System.out.println("Order placed successfully! " + newOrder);
            System.out.println("Updated Stock for " + product.getName() + ": " + product.getStock());

        } catch (NumberFormatException e) {
            System.err.println("Error: Invalid input. Please enter valid numbers for Product ID and Quantity.");
        } catch (IllegalArgumentException e) {
             // Catching the exception thrown by decreaseStock if logic error occurs (though validation above should prevent it)
             System.err.println("Error processing order: " + e.getMessage());
        } catch (Exception e) {
            // Catch any other unexpected exceptions during order placement
            System.err.println("An unexpected error occurred while placing the order: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace for debugging
        }
    }

    /**
     * Handles the "Process Next Order" menu option.
     * Takes the next order from the queue and displays it.
     */
    private void processNextOrder() {
        System.out.println("\n--- Process Next Order ---");
        if (pendingOrders.isEmpty()) {
            System.err.println("No pending orders to process.");
        } else {
            Order processedOrder = pendingOrders.poll(); // Get and remove the head of the queue
            System.out.println("Processing " + processedOrder);
            System.out.println("Order " + processedOrder.getOrderId() + " processed.");
        }
    }

    /**
     * Handles the "View Pending Orders" menu option.
     * Displays summary of orders in the queue without removing them.
     */
    private void viewPendingOrders() {
        System.out.println("\n--- Pending Orders ---");
        if (pendingOrders.isEmpty()) {
            System.out.println("No pending orders.");
        } else {
            // Iterate through the queue without removing elements
            int count = 1;
            for (Order order : pendingOrders) {
                System.out.println(count++ + ". " + order);
            }
        }
    }

    /**
     * Runs the main application loop.
     */
    public void run() {
        initializeInventory();
        int choice = 0;

        while (choice != 5) {
            displayMenu();
            try {
                // Read the entire line and parse to avoid issues with nextInt() and newline
                String input = scanner.nextLine();
                choice = Integer.parseInt(input);

                switch (choice) {
                    case 1:
                        listProducts();
                        break;
                    case 2:
                        placeOrder();
                        break;
                    case 3:
                        processNextOrder();
                        break;
                    case 4:
                        viewPendingOrders();
                        break;
                    case 5:
                        System.out.println("Exiting E-Commerce System.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (NumberFormatException e) {
                System.err.println("Invalid input. Please enter a number.");
                choice = 0; // Reset choice to stay in loop
            } catch (Exception e) {
                // General catch for any unexpected errors in the main loop
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace for debugging
                choice = 0; // Reset choice to stay in loop
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * The main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ECommerceSystem system = new ECommerceSystem();
        system.run();
    }
}
