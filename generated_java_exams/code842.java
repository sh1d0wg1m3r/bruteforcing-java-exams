/*
 * Exam Question #842
 * Generated on: 2025-05-12 16:49:16
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Event Management System
 * 
 * **Objective:** Design and implement a simple console-based event management system that allows managing event attendees and a queue of administrative tasks.
 * 
 * **Requirements:**
 * 
 * You must create a Java program that defines a class (e.g., `EventOrganizer`) responsible for managing an event. This class should provide functionalities accessible via a menu-driven interface.
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of attendee names using `java.util.List` and instantiate it as a `java.util.ArrayList`.
 *     *   Maintain a queue of pending administrative tasks (represented as strings) using `java.util.Queue`.
 * 
 * 2.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Attendee
 *         2.  Add New Task
 *         3.  Process Next Task
 *         4.  View All Attendees
 *         5.  View All Pending Tasks
 *         6.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 
 * 3.  **Functionality:**
 *     *   **Add Attendee:** Prompt the user for an attendee's name and add it to the attendee list. Ensure the name is not empty.
 *     *   **Add Task:** Prompt the user for a task description and add it to the task queue. Ensure the description is not empty.
 *     *   **Process Next Task:** Remove the next task from the queue and display it as "Processing task: [Task Description]". If the queue is empty, display an appropriate message.
 *     *   **View Attendees:** Display all registered attendees. If the list is empty, display a message indicating no attendees are registered.
 *     *   **View Tasks:** Display all pending tasks in the queue without removing them. If the queue is empty, display a message indicating no pending tasks.
 *     *   **Exit:** Terminate the program.
 * 
 * 4.  **Error Handling & Best Practices:**
 *     *   Implement input validation for attendee names and task descriptions (must not be empty).
 *     *   Handle cases where the task queue is empty when trying to process a task.
 *     *   Use `System.out` for all normal output (menu, prompts, lists, success messages).
 *     *   Use `System.err` for all error messages (invalid input, empty queue processing error, invalid menu choice).
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential `InputMismatchException` if the user enters non-integer input for the menu choice. Also, include a general catch block around the main execution loop to handle any unexpected runtime errors gracefully.
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include basic comments or documentation where necessary.
 *     *   Close the `Scanner` resource properly.
 * 
 * **Expected Output Structure:**
 * 
 * The program should loop, displaying the menu and processing user input until the user chooses to exit.
 * 
 * ```
 * Event Management System Menu:
 * 1. Add New Attendee
 * 2. Add New Task
 * 3. Process Next Task
 * 4. View All Attendees
 * 5. View All Pending Tasks
 * 6. Exit
 * Enter your choice: 1
 * Enter attendee name: Alice
 * 
 * Attendee 'Alice' added.
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 2
 * Enter task description: Send welcome email
 * 
 * Task 'Send welcome email' added to queue.
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 3
 * Processing task: Send welcome email
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 3
 * Error: No tasks in the queue to process.
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 4
 * 
 * Registered Attendees:
 * Alice
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 5
 * 
 * Pending Tasks:
 * Prepare badge
 * Print schedule
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 7
 * Error: Invalid menu choice. Please enter a number between 1 and 6.
 * 
 * Event Management System Menu:
 * ...
 * Enter your choice: 6
 * Exiting Event Management System.
 * ```
 * 
 * **Note:** The exact output will depend on user interaction. The structure and use of `System.out` and `System.err` should match the description.
 *
 * EXPLANATION:
 * This solution implements a simple event management system demonstrating the required Java concepts.
 * 
 * 1.  **Data Structures (`List`, `ArrayList`, `Queue`):**
 *     *   `attendees` is declared as `List<String>` and instantiated as `new ArrayList<>()`. This shows the use of the `List` interface and its common `ArrayList` implementation for managing a dynamic, ordered collection of attendees.
 *     *   `tasks` is declared as `Queue<String>` and instantiated as `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, suitable for adding elements to the end (`offer`) and removing from the beginning (`poll`), simulating a task queue.
 * 
 * 2.  **User Input (`Scanner`):**
 *     *   A `Scanner` object is created to read input from `System.in`.
 *     *   `scanner.nextInt()` is used to read the menu choice, and `scanner.nextLine()` is used to read the full attendee name or task description (and also to consume the leftover newline character after reading the integer choice).
 * 
 * 3.  **Flow Control (`Switch`):**
 *     *   The `switch` statement in the `run()` method is used to direct the program flow based on the user's integer menu choice, calling the appropriate private methods for each option.
 * 
 * 4.  **Output Streams (`System.out`, `System.err`):**
 *     *   `System.out.println()` and `System.out.print()` are used for displaying the menu, prompts, success messages, and lists of attendees/tasks.
 *     *   `System.err.println()` is used specifically for displaying error messages, such as invalid input, empty queue conditions, or general exception details. This helps differentiate normal program output from errors.
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch` block is placed around `scanner.nextInt()` within the `run()` loop to specifically catch `InputMismatchException` if the user enters non-integer input for the menu choice. This prevents the program from crashing and prompts the user for valid input. `scanner.nextLine()` is called in the catch block to clear the invalid input from the scanner buffer.
 *     *   A larger `try-catch` block wraps the entire `while` loop in the `run()` method. This serves as a form of "class-wide" or main loop exception handling, catching any `Exception` that might occur during the execution of the menu loop or the methods called within it (though specific exceptions like `InputMismatchException` are handled more granularly inside). A `finally` block ensures the `scanner` is closed regardless of whether an exception occurred or the loop finished normally.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** Fields (`attendees`, `tasks`, `scanner`) are `private`, and functionality is exposed through `public` or `private` methods (`run` is public, others are private helpers).
 *     *   **Meaningful Names:** Variable names (e.g., `attendees`, `tasks`, `taskDescription`, `choice`) and method names (e.g., `addAttendee`, `processNextTask`, `displayMenu`) clearly indicate their purpose.
 *     *   **Comments/Documentation:** Basic Javadoc comments explain the purpose of the class and key methods. Inline comments clarify specific implementation details.
 *     *   **Input Validation:** Checks (`name.isEmpty()`, `taskDescription.isEmpty()`) are performed before adding items to the list/queue.
 *     *   **Error Handling:** Specific error messages are provided via `System.err` for invalid input and empty queue scenarios. General exceptions are caught and reported.
 *     *   **Clean Code:** Methods are relatively short and focused on a single task. The `run` method orchestrates the main loop.
 *     *   **Resource Management:** The `Scanner` is explicitly closed in the `finally` block of the `run` method to release system resources.
 * 
 * This solution effectively integrates all the required Java components into a cohesive, practical example of managing data and user interaction in a console application, demonstrating essential programming concepts suitable for evaluating advanced understanding.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Manages event attendees and administrative tasks using Lists and Queues.
 */
public class EventOrganizer {

    private List<String> attendees; // List to store attendee names
    private Queue<String> tasks;    // Queue to store pending tasks
    private Scanner scanner;        // Scanner for user input

    /**
     * Constructs an EventOrganizer, initializing data structures and scanner.
     */
    public EventOrganizer() {
        this.attendees = new ArrayList<>(); // Use ArrayList for attendees
        this.tasks = new LinkedList<>();    // Use LinkedList as a Queue for tasks
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nEvent Management System Menu:");
        System.out.println("1. Add New Attendee");
        System.out.println("2. Add New Task");
        System.out.println("3. Process Next Task");
        System.out.println("4. View All Attendees");
        System.out.println("5. View All Pending Tasks");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new attendee to the list based on user input.
     * Validates that the name is not empty.
     */
    private void addAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine().trim(); // Read full line and trim whitespace

        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
        } else {
            attendees.add(name);
            System.out.println("Attendee '" + name + "' added.");
        }
    }

    /**
     * Adds a new task to the queue based on user input.
     * Validates that the task description is not empty.
     */
    private void addTask() {
        System.out.print("Enter task description: ");
        String taskDescription = scanner.nextLine().trim(); // Read full line and trim whitespace

        if (taskDescription.isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
        } else {
            tasks.offer(taskDescription); // offer() is generally preferred over add() for queues
            System.out.println("Task '" + taskDescription + "' added to queue.");
        }
    }

    /**
     * Processes (removes and displays) the next task from the queue.
     * Handles the case where the queue is empty.
     */
    private void processNextTask() {
        String nextTask = tasks.poll(); // poll() returns null if queue is empty

        if (nextTask == null) {
            System.err.println("Error: No tasks in the queue to process.");
        } else {
            System.out.println("Processing task: " + nextTask);
        }
    }

    /**
     * Displays all registered attendees.
     */
    private void viewAttendees() {
        if (attendees.isEmpty()) {
            System.out.println("\nNo attendees registered yet.");
        } else {
            System.out.println("\nRegistered Attendees:");
            for (int i = 0; i < attendees.size(); i++) {
                System.out.println((i + 1) + ". " + attendees.get(i));
            }
        }
    }

    /**
     * Displays all pending tasks in the queue without removing them.
     */
    private void viewTasks() {
        if (tasks.isEmpty()) {
            System.out.println("\nNo pending tasks in the queue.");
        } else {
            System.out.println("\nPending Tasks:");
            // Iterate through the queue without removing elements
            int index = 1;
            for (String task : tasks) {
                System.out.println(index++ + ". " + task);
            }
        }
    }

    /**
     * Runs the main event management system loop.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = 0;
        try { // Class-wide exception handling for the main loop
            while (choice != 6) {
                displayMenu();
                try {
                    choice = scanner.nextInt(); // Read the integer choice
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    switch (choice) {
                        case 1:
                            addAttendee();
                            break;
                        case 2:
                            addTask();
                            break;
                        case 3:
                            processNextTask();
                            break;
                        case 4:
                            viewAttendees();
                            break;
                        case 5:
                            viewTasks();
                            break;
                        case 6:
                            System.out.println("Exiting Event Management System.");
                            break;
                        default:
                            System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number for your choice.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = 0; // Reset choice to stay in loop
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed even if an exception occurs
            closeScanner();
        }
    }

    /**
     * Closes the scanner resource.
     */
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
            // System.out.println("Scanner closed."); // Optional: for debugging
        }
    }

    /**
     * Main method to start the Event Management System.
     */
    public static void main(String[] args) {
        EventOrganizer organizer = new EventOrganizer();
        organizer.run();
    }
}
