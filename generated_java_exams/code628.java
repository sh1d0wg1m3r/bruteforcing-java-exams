/*
 * Exam Question #628
 * Generated on: 2025-05-12 16:16:46
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Emergency Department Patient Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified management system for a hospital's Emergency Department (ED). The system needs to track patients waiting to be seen and manage a list of available doctors. Patients arrive and are added to a waiting queue. Doctors can see the next patient in the queue. The system should allow users to interact via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with a `name` (String) and a simple `toString()` method.
 * 2.  **Doctor Representation:** Create a `Doctor` class with a `name` (String) and a `specialty` (String), and a simple `toString()` method.
 * 3.  **Emergency Department System:** Create a main class, `EmergencyDeptSystem`, to manage the ED operations.
 *     *   It must maintain a waiting list of patients using a `Queue<Patient>`.
 *     *   It must maintain a list of available doctors using an `ArrayList<Doctor>`. Declare this field using the `List<Doctor>` interface type.
 *     *   Initialize the `ArrayList` with at least 3 sample `Doctor` objects in the constructor.
 *     *   Implement a command-line interface using `java.util.Scanner` in a `startSystem()` method.
 *     *   The `startSystem()` method should present a menu of options to the user and process their choice using a `switch` statement within a loop.
 *     *   The system must support the following operations:
 *         *   **Add Patient:** Prompt for patient name, create a `Patient` object, and add it to the waiting `Queue`.
 *         *   **See Next Patient:** Remove the next patient from the `Queue`. If the queue is not empty, prompt the user to select a doctor (by name) from the available list who will see the patient. Print a message indicating which doctor is seeing which patient. If the queue is empty, display an appropriate message. Handle cases where the entered doctor name is not found.
 *         *   **List Waiting Patients:** Display the names of all patients currently in the waiting `Queue` without removing them.
 *         *   **List Available Doctors:** Display the names and specialties of all doctors in the `List`.
 *         *   **Exit:** Terminate the program.
 * 4.  **Input Handling and Validation:**
 *     *   Use `Scanner` to read user input for menu choices, patient names, and doctor names.
 *     *   Validate user input for menu choices (ensure it's a valid number within the range). Use a `try-catch` block to handle `InputMismatchException` if the user enters non-integer input for the menu choice.
 *     *   Validate patient name input (e.g., ensure it's not empty).
 *     *   Handle cases where a doctor name entered by the user doesn't match any available doctor.
 * 5.  **Error Handling and Output:**
 *     *   Use `System.out.println()` for all normal output (menu, prompts, success messages, lists).
 *     *   Use `System.err.println()` for all error messages (invalid input, queue empty, doctor not found).
 *     *   Implement class-wide or method-level `try-catch` blocks to handle potential runtime exceptions (e.g., `InputMismatchException` during input reading, or potentially other unexpected errors) within the main processing loop (`startSystem()`).
 * 6.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (basic Javadoc for classes/methods).
 *     *   Ensure resources like `Scanner` are properly closed.
 * 
 * **Expected Output:**
 * 
 * The system should display a menu, prompt for input based on the choice, and print relevant output or error messages. Example interaction might look like:
 * 
 * ```
 * --- ED Management Menu ---
 * 1. Add Patient
 * 2. See Next Patient
 * 3. List Waiting Patients
 * 4. List Available Doctors
 * 5. Exit
 * Enter choice: 1
 * Enter patient name: Alice
 * Patient Alice added to the queue.
 * 
 * --- ED Management Menu ---
 * 1. Add Patient
 * ...
 * Enter choice: 3
 * Waiting Patients:
 * - Alice
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 2
 * Waiting Patients:
 * - Alice
 * Enter the name of the doctor seeing Alice: Dr. Smith
 * Dr. Smith is now seeing patient Alice.
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 3
 * Waiting Patients:
 * (Queue is empty)
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 4
 * Available Doctors:
 * - Dr. Smith (Cardiology)
 * - Dr. Jones (Neurology)
 * - Dr. Brown (Pediatrics)
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 2
 * System.err: The waiting queue is empty. No patient to see.
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 9
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: abc
 * System.err: Invalid input. Please enter a number.
 * 
 * --- ED Management Menu ---
 * ...
 * Enter choice: 5
 * Exiting system.
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated on:
 * *   Correct implementation of all required features and operations.
 * *   Proper usage of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch`.
 * *   Adherence to best practices (encapsulation, naming, comments, error handling, input validation).
 * *   Code structure and readability.
 *
 * EXPLANATION:
 * This solution implements the `EmergencyDeptSystem` as requested, demonstrating the use of all specified Java components in a practical scenario.
 * 
 * 1.  **Classes (`Patient`, `Doctor`):** Simple classes with private fields (`name`, `specialty`) and public constructors and getters, demonstrating encapsulation. The `toString()` methods provide a convenient way to print object details.
 * 
 * 2.  **`EmergencyDeptSystem` Class:**
 *     *   **Fields:**
 *         *   `patientQueue`: Declared as `Queue<Patient>`, using `LinkedList` as the concrete implementation. `LinkedList` is a good choice for a queue as it provides efficient additions to the tail and removals from the head. This field manages the waiting list following the FIFO (First-In, First-Out) principle inherent in a queue.
 *         *   `doctors`: Declared as `List<Doctor>`, using `ArrayList` as the concrete implementation. This demonstrates programming to the interface (`List`). `ArrayList` is suitable here as we primarily need to store and iterate through a list of doctors, and random access isn't a critical requirement, though `ArrayList` provides it efficiently.
 *         *   `scanner`: An instance of `Scanner` to read user input from the console. It's made a class field so it can be initialized once and managed throughout the system's lifecycle.
 *     *   **Constructor:** Initializes the `patientQueue` (as a `LinkedList`), the `doctors` list (as an `ArrayList`), and the `scanner`. It also populates the `doctors` list with initial data.
 *     *   **`startSystem()` Method:** This is the main entry point for the system's interactive loop.
 *         *   It runs a `while` loop that continues until the user chooses to exit (option 5).
 *         *   Inside the loop, it displays the menu.
 *         *   It uses a `try-catch` block to wrap the input reading and the `switch` statement. This is crucial for handling potential `InputMismatchException` if the user enters non-integer text when a number is expected. It also includes a general `catch(Exception e)` for any other unexpected errors, printing them to `System.err`.
 *         *   `scanner.nextInt()` reads the integer choice, and `scanner.nextLine()` consumes the leftover newline character to prevent issues with subsequent `scanner.nextLine()` calls in other methods (`addPatient`, `seeNextPatient`).
 *         *   A `switch` statement is used to direct the program flow based on the user's validated integer choice, calling the appropriate method for each operation.
 *         *   A `default` case in the `switch` handles valid integer inputs that are outside the expected menu range, printing an error to `System.err`.
 *         *   Finally, `closeScanner()` is called after the loop finishes to release the system resource.
 * 
 * 3.  **Operation Methods (`addPatient`, `seeNextPatient`, `listWaitingPatients`, `listDoctors`):**
 *     *   `addPatient()`: Reads the patient name, performs basic validation (checks if empty), creates a `Patient` object, and adds it to the `patientQueue` using `offer()`. Prints success message to `System.out`.
 *     *   `seeNextPatient()`: Checks if the `patientQueue` is empty using `isEmpty()`. If empty, prints an error to `System.err`. If not empty, it uses `poll()` to remove the next patient from the queue. It then calls `listDoctors()` to show options, prompts for a doctor's name, uses the `findDoctorByName` helper to find the doctor in the `doctors` list, and prints the outcome to `System.out` or an error to `System.err` if the doctor isn't found.
 *     *   `listWaitingPatients()`: Checks if the `patientQueue` is empty. If empty, prints a message to `System.out`. If not empty, it iterates through the `patientQueue` using an enhanced for loop. This loop iterates over the elements without removing them, which is suitable for just listing the contents. Prints patient names to `System.out`.
 *     *   `listDoctors()`: Iterates through the `doctors` `List` (which is an `ArrayList`) using an enhanced for loop and prints each doctor's details using their `toString()` method to `System.out`.
 * 
 * 4.  **Helper Method (`findDoctorByName`):** A private helper method to search the `doctors` `List` for a doctor by name, demonstrating iteration over a `List`. It uses `equalsIgnoreCase` for case-insensitive matching.
 * 
 * 5.  **Error Handling:**
 *     *   `InputMismatchException` for non-integer input in the main menu loop is caught and handled, prompting the user to enter a number and consuming the invalid input.
 *     *   Empty queue condition in `seeNextPatient` is explicitly checked, and an error is printed to `System.err`.
 *     *   Invalid doctor name in `seeNextPatient` is handled by checking the return value of `findDoctorByName` (null) and printing an error to `System.err`.
 *     *   Invalid menu choice (integer out of range) is handled in the `switch` `default` case, printing to `System.err`.
 *     *   A general `catch(Exception e)` in the main loop provides robustness against unexpected runtime errors.
 *     *   `System.err` is used consistently for all error output, separating it from normal program messages on `System.out`.
 * 
 * 6.  **Best Practices:**
 *     *   Private fields and public methods (`startSystem`, `main`) ensure proper encapsulation.
 *     *   Variable names (`patientQueue`, `doctors`, `nextPatient`, `selectedDoctor`) and method names (`addPatient`, `seeNextPatient`, `listWaitingPatients`, `findDoctorByName`) are descriptive.
 *     *   Basic Javadoc comments are included for the classes and key methods.
 *     *   Input validation is performed for patient names and menu choices.
 *     *   The `Scanner` resource is closed using `closeScanner()` when the system exits.
 *     *   The code is structured into logical methods, improving readability and maintainability.
 * 
 * This solution effectively integrates all the required Java components to build a functional, albeit simplified, real-world system, demonstrating advanced understanding of data structures, control flow, input/output, and exception handling in Java.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the emergency department
class Patient {
    private String name;

    public Patient(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a doctor in the emergency department
class Doctor {
    private String name;
    private String specialty;

    public Doctor(String name, String specialty) {
        this.name = name;
        this.specialty = specialty;
    }

    public String getName() {
        return name;
    }

    public String getSpecialty() {
        return specialty;
    }

    @Override
    public String toString() {
        return name + " (" + specialty + ")";
    }
}

// Main class for the Emergency Department Management System
public class EmergencyDeptSystem {

    // Use Queue for patient waiting list (FIFO)
    private Queue<Patient> patientQueue;
    // Use List interface and ArrayList implementation for doctors
    private List<Doctor> doctors;
    private Scanner scanner;

    /**
     * Constructor initializes the system, patient queue, doctor list, and scanner.
     */
    public EmergencyDeptSystem() {
        // LinkedList is a common implementation of Queue
        this.patientQueue = new LinkedList<>();
        // ArrayList for doctors list
        this.doctors = new ArrayList<>();
        // Initialize with sample doctors
        doctors.add(new Doctor("Dr. Smith", "Cardiology"));
        doctors.add(new Doctor("Dr. Jones", "Neurology"));
        doctors.add(new Doctor("Dr. Brown", "Pediatrics"));

        this.scanner = new Scanner(System.in);
    }

    /**
     * Starts the main system loop, displaying menu and handling user input.
     */
    public void startSystem() {
        int choice = -1;
        System.out.println("--- Welcome to ED Management System ---");

        // Main loop for menu interaction
        while (choice != 5) {
            displayMenu();
            try {
                System.out.print("Enter choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        seeNextPatient();
                        break;
                    case 3:
                        listWaitingPatients();
                        break;
                    case 4:
                        listDoctors();
                        break;
                    case 5:
                        System.out.println("Exiting system.");
                        break;
                    default:
                        // Handle invalid choice within the valid number range
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice using try-catch
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to stay in loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions and print to System.err
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
            System.out.println(); // Add a newline for better readability between operations
        }
        closeScanner(); // Close the scanner when exiting the loop
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- ED Management Menu ---");
        System.out.println("1. Add Patient");
        System.out.println("2. See Next Patient");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Available Doctors");
        System.out.println("5. Exit");
    }

    /**
     * Prompts user for patient details and adds patient to the queue.
     */
    private void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        // Basic input validation for patient name
        if (name.isEmpty()) {
            System.err.println("Patient name cannot be empty.");
            return;
        }

        Patient patient = new Patient(name);
        patientQueue.offer(patient); // offer() is generally preferred over add() for queues as it returns false instead of throwing exception on capacity issues (though LinkedList doesn't have capacity limits)
        System.out.println("Patient " + patient.getName() + " added to the queue.");
    }

    /**
     * Removes and processes the next patient from the queue.
     */
    private void seeNextPatient() {
        // Check if queue is empty before trying to poll
        if (patientQueue.isEmpty()) {
            System.err.println("The waiting queue is empty. No patient to see.");
            return;
        }

        Patient nextPatient = patientQueue.poll(); // Retrieve and remove the head of the queue
        System.out.println("Next patient: " + nextPatient.getName());

        listDoctors(); // Show available doctors
        System.out.print("Enter the name of the doctor seeing " + nextPatient.getName() + ": ");
        String doctorName = scanner.nextLine().trim();

        Doctor selectedDoctor = findDoctorByName(doctorName);

        // Handle case where doctor is not found
        if (selectedDoctor == null) {
            System.err.println("Doctor '" + doctorName + "' not found. Patient " + nextPatient.getName() + " remains in the queue (virtually, for this simulation).");
            // Note: In a real system, you might re-queue the patient or handle differently.
            // For this exercise, we just report the error and don't assign a doctor.
            // The patient was already removed by poll(). A more complex system might use peek() first.
        } else {
            System.out.println(selectedDoctor.getName() + " is now seeing patient " + nextPatient.getName() + ".");
        }
    }

    /**
     * Lists all patients currently waiting in the queue.
     */
    private void listWaitingPatients() {
        System.out.println("Waiting Patients:");
        if (patientQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
            return;
        }

        // Iterate through the queue without removing elements
        for (Patient patient : patientQueue) {
            System.out.println("- " + patient.getName());
        }
    }

    /**
     * Lists all available doctors.
     */
    private void listDoctors() {
        System.out.println("Available Doctors:");
        // Iterate through the List of doctors
        for (Doctor doctor : doctors) {
            System.out.println("- " + doctor.toString());
        }
    }

    /**
     * Helper method to find a doctor by name in the list.
     * @param name The name of the doctor to find.
     * @return The Doctor object if found, otherwise null.
     */
    private Doctor findDoctorByName(String name) {
        for (Doctor doctor : doctors) {
            if (doctor.getName().equalsIgnoreCase(name.trim())) {
                return doctor;
            }
        }
        return null; // Doctor not found
    }

    /**
     * Closes the scanner resource.
     */
    private void closeScanner() {
        if (scanner != null) {
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        EmergencyDeptSystem system = new EmergencyDeptSystem();
        system.startSystem();
    }
}
