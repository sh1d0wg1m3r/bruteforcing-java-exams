/*
 * Exam Question #439
 * Generated on: 2025-05-11 23:11:21
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified appointment management system for a single-doctor clinic. The system needs to register patients, schedule appointments, display the list of pending appointments, and allow cancellation of appointments. Appointments are processed by the doctor in the order they were scheduled, hence a waiting line (queue) is essential.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Management:**
 *     *   Maintain a list of registered patients. Each patient should have a unique ID, name, and contact information.
 *     *   Allow registration of new patients.
 * 2.  **Appointment Scheduling:**
 *     *   Allow scheduling appointments for registered patients.
 *     *   An appointment should include an auto-generated unique ID, the patient's ID, and a requested time slot (represented as a simple String for this task, e.g., "10:00 AM").
 *     *   Scheduled appointments are added to a queue representing the waiting line for the doctor.
 *     *   Validate that the patient exists before scheduling an appointment.
 * 3.  **Appointment Management:**
 *     *   Display the list of all pending appointments in the order they were scheduled.
 *     *   Allow cancellation of a pending appointment by its unique appointment ID.
 * 4.  **User Interface:**
 *     *   Provide a command-line menu interface using `Scanner` for user interaction.
 *     *   Menu options should include: Register Patient, Schedule Appointment, View Pending Appointments, Cancel Appointment, Exit.
 * 5.  **Technical Constraints & Required Components:**
 *     *   You *must* use `java.util.Queue` to manage the pending appointments (use a concrete implementation like `LinkedList`).
 *     *   You *must* use `java.util.ArrayList` as the concrete implementation for the list of patients.
 *     *   You *must* declare the patient list variable using the `java.util.List` interface type.
 *     *   You *must* use `java.util.Scanner` for all user input.
 *     *   You *must* use a `switch` statement to handle the main menu choices.
 *     *   You *must* use `System.err` for all error messages (e.g., invalid input, patient not found, appointment not found).
 *     *   You *must* use `System.out` for all normal output (menu, prompts, success messages, list displays).
 *     *   You *must* implement class-wide exception handling using `try-catch` blocks to gracefully handle unexpected errors during the program execution, especially around input operations.
 * 6.  **Best Practices:**
 *     *   Use appropriate access modifiers (`private` fields, `public` methods) for proper encapsulation.
 *     *   Choose meaningful variable, method, and class names.
 *     *   Include comments or Javadoc where necessary to explain complex logic.
 *     *   Implement input validation (e.g., checking if patient ID exists, handling non-numeric input).
 *     *   Ensure clean code structure with separate methods for different functionalities.
 * 
 * **Classes to Implement:**
 * 
 * *   `Patient`: Represents a patient with ID, name, and contact.
 * *   `Appointment`: Represents an appointment with a unique ID, patient ID, and time slot.
 * *   `HospitalSystem`: The main class containing the application logic, managing the lists and queue, handling user input, and implementing the menu and operations.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input for various operations, display relevant information, and print error messages to `System.err` when validation fails or issues occur. Example interactions:
 * 
 * ```
 * --- Hospital Appointment System Menu ---
 * 1. Register Patient
 * 2. Schedule Appointment
 * 3. View Pending Appointments
 * 4. Cancel Appointment
 * 5. Exit
 * Enter your choice: 1
 * Enter Patient Name: John Doe
 * Enter Patient Contact: 555-1234
 * Patient registered with ID: 1
 * 
 * --- Hospital Appointment System Menu ---
 * 1. Register Patient
 * ...
 * Enter your choice: 2
 * Enter Patient ID: 1
 * Enter requested time slot (e.g., 10:00 AM): 10:30 AM
 * Appointment scheduled with ID: 101 for Patient ID: 1 at 10:30 AM
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 3
 * --- Pending Appointments ---
 * ID: 101, Patient ID: 1, Time: 10:30 AM
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 4
 * Enter Appointment ID to cancel: 101
 * Appointment ID 101 cancelled successfully.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 4
 * Enter Appointment ID to cancel: 999
 * Error: Appointment with ID 999 not found in pending queue.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 2
 * Enter Patient ID: 99
 * Error: Patient with ID 99 not found. Cannot schedule appointment.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * --- Hospital Appointment System Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Hospital Appointment System.
 * ```
 * 
 * Your solution should provide the complete Java code for the `Patient`, `Appointment`, and `HospitalSystem` classes within a single file or demonstrate how they would interact.
 *
 * EXPLANATION:
 * This solution implements a basic hospital appointment management system, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`: A simple Plain Old Java Object (POJO) class with private fields (`id`, `name`, `contact`) and public getters, adhering to encapsulation.
 *     *   `Appointment`: Similar POJO structure with private fields (`id`, `patientId`, `timeSlot`) and public getters.
 *     *   `HospitalSystem`: The core class containing the application logic. It holds the data structures (`patients` and `pendingAppointments`) and the main application flow.
 * 
 * 2.  **Required Components Usage:**
 *     *   `java.util.List`: The `patients` variable is declared as `private List<Patient> patients;`. This demonstrates programming to an interface, allowing flexibility (though `ArrayList` is required as the concrete type).
 *     *   `java.util.ArrayList`: The `patients` list is initialized using `new ArrayList<>();`, fulfilling the requirement for the concrete implementation.
 *     *   `java.util.Queue`: The `pendingAppointments` variable is declared as `private Queue<Appointment> pendingAppointments;`. It is initialized with `new LinkedList<>();`. `LinkedList` is chosen because it implements `Queue` and also allows easier iteration and removal of elements by criteria, which is needed for the `cancelAppointment` operation (though standard `Queue` operations are `offer`, `poll`, `peek`). We use `offer` to add to the queue.
 *     *   `java.util.Scanner`: A `Scanner` object is used to read user input from `System.in`. It's initialized in the constructor and closed in the `finally` block to prevent resource leaks.
 *     *   `switch` statement: The `run()` method uses a `switch` statement to dispatch actions based on the user's menu choice.
 *     *   `System.err`: Used specifically for printing error messages, such as invalid input, patient not found, or appointment not found.
 *     *   `System.out`: Used for all standard output, including the menu, prompts, success messages, and listing appointments.
 *     *   `try-catch`: A `try-catch(Exception e)` block wraps the main `do-while` loop in the `run()` method. This provides class-wide exception handling, catching any unexpected runtime errors that might occur during the execution of the menu operations. A `finally` block ensures the `Scanner` is closed regardless of whether an exception occurs. Specific `try-catch` blocks are also implicitly handled within the input validation loops for `hasNextInt()`.
 * 
 * 3.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Patient` and `Appointment` are `private` with public getters. `HospitalSystem` fields are also `private`.
 *     *   **Meaningful Names:** Class, variable, and method names are descriptive (e.g., `registerPatient`, `pendingAppointments`, `findPatientById`).
 *     *   **Comments:** Comments explain the purpose of classes, methods, and specific code sections (like input validation or iterator usage).
 *     *   **Input Validation:**
 *         *   The `getUserChoice()` method includes a `while` loop with `scanner.hasNextInt()` to ensure the user enters a number for the menu choice, printing an error to `System.err` and consuming the invalid input if necessary.
 *         *   Similar validation loops are used when reading integer IDs for scheduling and cancelling appointments.
 *         *   Patient existence is validated before scheduling an appointment.
 *     *   **Error Handling:** `System.err` is used for errors. Specific error messages are provided for different failure cases (invalid choice, patient not found, appointment not found, invalid input type). The main `try-catch` provides a fallback for unexpected errors.
 *     *   **Clean Code Structure:** The logic is broken down into private methods (`printMenu`, `getUserChoice`, `registerPatient`, etc.) within the `HospitalSystem` class, making the `run()` method clean and readable.
 * 
 * 4.  **Specific Implementation Details:**
 *     *   Patient and appointment IDs are generated using simple counters (`nextPatientId`, `nextAppointmentId`).
 *     *   Scheduling uses `pendingAppointments.offer()`, adding the appointment to the end of the queue.
 *     *   Viewing appointments iterates through the `pendingAppointments` queue using a for-each loop, which uses the queue's iterator internally, displaying elements without removing them.
 *     *   Cancellation iterates through the `pendingAppointments` queue using an `Iterator`. When the appointment with the matching ID is found, `iterator.remove()` is called. This is the correct and safe way to remove an element from a collection while iterating over it.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating understanding of data structures, control flow, user input handling, and robust error management.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Iterator;

// Represents a patient
class Patient {
    private int id;
    private String name;
    private String contact;

    public Patient(int id, String name, String contact) {
        this.id = id;
        this.name = name;
        this.contact = contact;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getContact() {
        return contact;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Contact: " + contact;
    }
}

// Represents an appointment
class Appointment {
    private int id;
    private int patientId;
    private String timeSlot;

    public Appointment(int id, int patientId, String timeSlot) {
        this.id = id;
        this.patientId = patientId;
        this.timeSlot = timeSlot;
    }

    public int getId() {
        return id;
    }

    public int getPatientId() {
        return patientId;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Patient ID: " + patientId + ", Time: " + timeSlot;
    }
}

// Main class managing the hospital system
public class HospitalSystem {

    // Use List interface, concrete implementation ArrayList
    private List<Patient> patients;
    // Use Queue interface, concrete implementation LinkedList for easier removal by iteration
    private Queue<Appointment> pendingAppointments;
    private Scanner scanner;
    private int nextPatientId = 1;
    private int nextAppointmentId = 101; // Start appointment IDs higher

    public HospitalSystem() {
        this.patients = new ArrayList<>();
        this.pendingAppointments = new LinkedList<>(); // LinkedList implements Queue
        this.scanner = new Scanner(System.in);
    }

    // Method to run the main application loop
    public void run() {
        // Class-wide exception handling for the main loop
        try {
            int choice;
            do {
                printMenu();
                choice = getUserChoice();

                switch (choice) {
                    case 1:
                        registerPatient();
                        break;
                    case 2:
                        scheduleAppointment();
                        break;
                    case 3:
                        viewPendingAppointments();
                        break;
                    case 4:
                        cancelAppointment();
                        break;
                    case 5:
                        System.out.println("Exiting Hospital Appointment System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a blank line for readability

            } while (choice != 5);
        } catch (Exception e) {
            // Catch any unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    // Prints the main menu
    private void printMenu() {
        System.out.println("--- Hospital Appointment System Menu ---");
        System.out.println("1. Register Patient");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. View Pending Appointments");
        System.out.println("4. Cancel Appointment");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Gets user's menu choice with input validation
    private int getUserChoice() {
        while (!scanner.hasNextInt()) {
            System.err.println("Error: Invalid input. Please enter a number.");
            scanner.next(); // Consume the invalid input
            System.out.print("Enter your choice: "); // Prompt again
        }
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character left by nextInt()
        return choice;
    }

    // Registers a new patient
    private void registerPatient() {
        System.out.print("Enter Patient Name: ");
        String name = scanner.nextLine();

        System.out.print("Enter Patient Contact: ");
        String contact = scanner.nextLine();

        Patient newPatient = new Patient(nextPatientId++, name, contact);
        patients.add(newPatient);
        System.out.println("Patient registered with ID: " + newPatient.getId());
    }

    // Schedules a new appointment
    private void scheduleAppointment() {
        System.out.print("Enter Patient ID: ");
        // Validate integer input for patient ID
        while (!scanner.hasNextInt()) {
            System.err.println("Error: Invalid input. Please enter a number for Patient ID.");
            scanner.next(); // Consume invalid input
            System.out.print("Enter Patient ID: "); // Prompt again
        }
        int patientId = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        // Find the patient
        Patient foundPatient = findPatientById(patientId);

        if (foundPatient == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found. Cannot schedule appointment.");
            return; // Exit method if patient not found
        }

        System.out.print("Enter requested time slot (e.g., 10:00 AM): ");
        String timeSlot = scanner.nextLine();

        Appointment newAppointment = new Appointment(nextAppointmentId++, patientId, timeSlot);
        pendingAppointments.offer(newAppointment); // Add to the end of the queue
        System.out.println("Appointment scheduled with ID: " + newAppointment.getId() +
                           " for Patient ID: " + newAppointment.getPatientId() +
                           " at " + newAppointment.getTimeSlot());
    }

    // Views all pending appointments in queue order
    private void viewPendingAppointments() {
        System.out.println("--- Pending Appointments ---");
        if (pendingAppointments.isEmpty()) {
            System.out.println("No pending appointments.");
        } else {
            // Iterate through the queue without removing elements
            for (Appointment appt : pendingAppointments) {
                System.out.println(appt);
            }
        }
    }

    // Cancels an appointment by its ID
    private void cancelAppointment() {
        System.out.print("Enter Appointment ID to cancel: ");
         // Validate integer input for appointment ID
        while (!scanner.hasNextInt()) {
            System.err.println("Error: Invalid input. Please enter a number for Appointment ID.");
            scanner.next(); // Consume invalid input
            System.out.print("Enter Appointment ID to cancel: "); // Prompt again
        }
        int appointmentIdToCancel = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        boolean cancelled = false;
        // Iterate through the queue to find and remove the appointment
        Iterator<Appointment> iterator = pendingAppointments.iterator();
        while (iterator.hasNext()) {
            Appointment appointment = iterator.next();
            if (appointment.getId() == appointmentIdToCancel) {
                iterator.remove(); // Safely remove the current element using the iterator
                System.out.println("Appointment ID " + appointmentIdToCancel + " cancelled successfully.");
                cancelled = true;
                break; // Exit loop once found and removed
            }
        }

        if (!cancelled) {
            System.err.println("Error: Appointment with ID " + appointmentIdToCancel + " not found in pending queue.");
        }
    }

    // Helper method to find a patient by ID
    private Patient findPatientById(int id) {
        for (Patient patient : patients) {
            if (patient.getId() == id) {
                return patient;
            }
        }
        return null; // Return null if patient not found
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
