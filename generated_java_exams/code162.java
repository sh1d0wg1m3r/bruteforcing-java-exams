/*
 * Exam Question #162
 * Generated on: 2025-05-11 22:23:52
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Support Ticket Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple command-line application to simulate a support ticket management system. The system should allow users to submit new support requests, process the oldest pending request, view the list of pending requests, and view the list of completed requests.
 * 
 * **Requirements:**
 * 
 * 1.  **Classes:**
 *     *   Create a `SupportTicket` class to represent a single ticket. It should have private fields for a unique `id` (integer), `description` (String), and `status` (String, e.g., "Open", "Closed"). Implement a constructor and appropriate getters and setters. Include a `toString()` method for easy printing.
 *     *   Create a `SupportSystem` class to manage the tickets. It should contain the data structures and methods to perform the core operations.
 *     *   Create a main class (e.g., `SupportSystemApp`) with a `main` method to handle user interaction.
 * 
 * 2.  **Data Structures:**
 *     *   Inside the `SupportSystem` class, use a `java.util.Queue<SupportTicket>` to store tickets that are currently open and waiting to be processed. Tickets should be processed in the order they were submitted (FIFO).
 *     *   Inside the `SupportSystem` class, use a `java.util.List<SupportTicket>` (implemented as `java.util.ArrayList`) to store tickets that have been processed and closed.
 * 
 * 3.  **Functionality (in `SupportSystemApp` using `SupportSystem` methods):**
 *     *   **Submit Ticket:** Prompt the user for a ticket description. Create a new `SupportTicket` object with a unique ID, set its status to "Open", and add it to the queue of open tickets.
 *     *   **Process Next Ticket:** Remove the ticket at the front of the open tickets queue. Change its status to "Closed" and add it to the list of closed tickets. If the queue is empty, display an appropriate error message.
 *     *   **View Open Tickets:** Display the details of all tickets currently in the open tickets queue, showing them in the order they will be processed.
 *     *   **View Closed Tickets:** Display the details of all tickets that have been processed and are now in the closed tickets list.
 *     *   **Exit:** Terminate the application.
 * 
 * 4.  **User Interface:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user (Submit, Process, View Open, View Closed, Exit).
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly for handling potential issues with user input (e.g., non-integer input for menu choice).
 *     *   Use `System.err.println()` to display error messages (e.g., invalid input, attempting to process an empty queue).
 *     *   Use `System.out.println()` for all normal output (menu, ticket details, confirmation messages).
 * 
 * 6.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadocs where applicable).
 *     *   Perform basic input validation (e.g., ensure ticket description is not empty).
 *     *   Structure the code cleanly across the classes.
 * 
 * **Expected Output:**
 * 
 * The application should present a menu, accept integer input for choices, and perform the corresponding actions. Error messages should go to standard error, while all other output goes to standard output.
 * 
 * ```
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: My printer is not working.
 * Ticket submitted successfully.
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 1
 * Enter ticket description: Cannot access network drive.
 * Ticket submitted successfully.
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Open Tickets ---
 * Ticket ID: 1, Description: My printer is not working., Status: Open
 * Ticket ID: 2, Description: Cannot access network drive., Status: Open
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 2
 * Processed ticket: Ticket ID: 1, Description: My printer is not working., Status: Closed
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 3
 * --- Open Tickets ---
 * Ticket ID: 2, Description: Cannot access network drive., Status: Open
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 4
 * --- Closed Tickets ---
 * Ticket ID: 1, Description: My printer is not working., Status: Closed
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 6
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 2
 * Processed ticket: Ticket ID: 2, Description: Cannot access network drive., Status: Closed
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 2
 * System.err: No open tickets to process.
 * 
 * --- Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * 3. View Open Tickets
 * 4. View Closed Tickets
 * 5. Exit
 * Enter your choice: 5
 * Exiting system. Goodbye!
 * ```
 * 
 * Implement the solution adhering to all specified requirements and best practices.
 *
 * EXPLANATION:
 * The provided solution implements a basic Support Ticket Management System following all the specified requirements.
 * 
 * 1.  **Class Structure:**
 *     *   `SupportTicket`: A simple Plain Old Java Object (POJO) representing a ticket with `id`, `description`, and `status`. It uses a static counter (`nextId`) to ensure unique IDs for each ticket. Encapsulation is achieved through private fields and public getter/setter methods. `toString()` provides a convenient way to print ticket details.
 *     *   `SupportSystem`: This class encapsulates the core logic and data structures. It holds the `Queue` and `List` that store the tickets. Methods like `submitTicket`, `processNextTicket`, `viewOpenTickets`, and `viewClosedTickets` operate on these collections, separating the business logic from the user interface.
 *     *   `SupportSystemApp`: This is the main entry point of the application. It contains the `main` method, handles the user interaction loop, displays the menu, reads input using `Scanner`, and uses a `switch` statement to call the appropriate methods in the `SupportSystem` class based on the user's choice.
 * 
 * 2.  **Data Structures (`Queue` and `List`/`ArrayList`):**
 *     *   `java.util.Queue<SupportTicket> openTickets`: A `LinkedList` is used here because it implements the `Queue` interface and is efficient for adding elements to the end (`add`) and removing elements from the beginning (`poll`), which are typical queue operations needed for processing tickets in FIFO order.
 *     *   `java.util.List<SupportTicket> closedTickets`: An `ArrayList` is used here. It implements the `List` interface and is suitable for storing completed tickets where access by index or iterating through the list is common.
 * 
 * 3.  **Scanner and Switch:**
 *     *   `java.util.Scanner`: Used in the `SupportSystemApp` class to read integer choices and string descriptions from the console.
 *     *   `switch` statement: Used in the `main` method to direct the program flow based on the user's integer input from the menu. Each case corresponds to a specific action (submit, process, view, exit).
 * 
 * 4.  **System.out and System.err:**
 *     *   `System.out.println()`: Used for displaying the menu, successful operation messages, and the details of open and closed tickets.
 *     *   `System.err.println()`: Used specifically for displaying error messages, such as when the user enters invalid input (non-integer choice) or attempts to process a ticket when the queue is empty.
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   A `try-catch` block wraps the core application loop in `main`. This serves as a class-wide handler for any unexpected `Exception` that might occur during execution, preventing the program from crashing abruptly.
 *     *   A more specific `try-catch(InputMismatchException)` is used when reading the menu choice using `scanner.nextInt()`. This handles cases where the user types non-integer input. Upon catching this, an error is printed to `System.err`, the invalid input is consumed using `scanner.next()`, and the loop continues, prompting the user again.
 *     *   A `finally` block ensures `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls for ticket descriptions.
 *     *   Another `finally` block is used around the main `try-catch` to ensure the `Scanner` resource is closed when the application terminates.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `SupportTicket` and `SupportSystem` are private, accessed via public methods.
 *     *   **Meaningful Names:** Variables (`openTickets`, `closedTickets`, `description`, `choice`, `running`), classes (`SupportTicket`, `SupportSystem`, `SupportSystemApp`), and methods (`submitTicket`, `processNextTicket`, `viewOpenTickets`, `displayMenu`) have names that clearly indicate their purpose.
 *     *   **Comments and Documentation:** Javadoc comments are included for classes and methods, explaining their purpose and parameters/return values. Inline comments clarify specific logic.
 *     *   **Input Validation:** The `submitTicket` method checks if the provided description is null or empty before creating and adding a ticket.
 *     *   **Error Handling:** As detailed above, `try-catch` and `System.err` are used for robust error management.
 *     *   **Clean Code Structure:** The responsibilities are divided among the three classes: `SupportTicket` for data representation, `SupportSystem` for data management and logic, and `SupportSystemApp` for the user interface and application flow.
 * 
 * This solution effectively demonstrates the required Java concepts in a practical, well-structured, and error-resistant application.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single support ticket in the system.
 */
class SupportTicket {
    private static int nextId = 1; // Static counter for unique ticket IDs

    private int id;
    private String description;
    private String status; // e.g., "Open", "Closed"

    /**
     * Constructs a new SupportTicket with a unique ID and description.
     *
     * @param description The description of the support issue.
     */
    public SupportTicket(String description) {
        this.id = nextId++;
        this.description = description;
        this.status = "Open"; // New tickets are always open initially
    }

    /**
     * Gets the unique ID of the ticket.
     * @return The ticket ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the description of the ticket.
     * @return The ticket description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the current status of the ticket.
     * @return The ticket status.
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of the ticket.
     * @param status The new status.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Returns a string representation of the ticket.
     * @return Formatted ticket details.
     */
    @Override
    public String toString() {
        return "Ticket ID: " + id + ", Description: " + description + ", Status: " + status;
    }
}

/**
 * Manages the collection of support tickets.
 */
class SupportSystem {
    // Queue for tickets waiting to be processed (FIFO)
    private Queue<SupportTicket> openTickets;
    // List for tickets that have been processed
    private List<SupportTicket> closedTickets;

    /**
     * Constructs a new SupportSystem, initializing the ticket collections.
     */
    public SupportSystem() {
        // LinkedList is a common implementation for Queue
        this.openTickets = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.closedTickets = new ArrayList<>();
    }

    /**
     * Submits a new support ticket to the system.
     *
     * @param description The description of the issue.
     */
    public void submitTicket(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return;
        }
        SupportTicket newTicket = new SupportTicket(description.trim());
        openTickets.add(newTicket); // Add to the end of the queue
        System.out.println("Ticket submitted successfully.");
    }

    /**
     * Processes the next available ticket from the queue.
     * Moves the ticket from open to closed status.
     */
    public void processNextTicket() {
        if (openTickets.isEmpty()) {
            System.err.println("No open tickets to process.");
            return;
        }

        // Remove the ticket at the front of the queue
        SupportTicket processedTicket = openTickets.poll();
        if (processedTicket != null) { // poll returns null if queue is empty, but we checked above
            processedTicket.setStatus("Closed");
            closedTickets.add(processedTicket); // Add to the end of the closed list
            System.out.println("Processed ticket: " + processedTicket);
        }
    }

    /**
     * Displays all tickets currently in the open queue.
     */
    public void viewOpenTickets() {
        System.out.println("--- Open Tickets ---");
        if (openTickets.isEmpty()) {
            System.out.println("No open tickets.");
        } else {
            // Iterate through the queue without removing elements
            for (SupportTicket ticket : openTickets) {
                System.out.println(ticket);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays all tickets that have been processed and closed.
     */
    public void viewClosedTickets() {
        System.out.println("--- Closed Tickets ---");
        if (closedTickets.isEmpty()) {
            System.out.println("No closed tickets.");
        } else {
            // Iterate through the list
            for (SupportTicket ticket : closedTickets) {
                System.out.println(ticket);
            }
        }
        System.out.println("--------------------");
    }
}

/**
 * Main application class for the Support Ticket System.
 * Handles user interaction and delegates operations to SupportSystem.
 */
public class SupportSystemApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SupportSystem system = new SupportSystem();
        boolean running = true;

        // Class-wide exception handling for the main application loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;

                // Try-catch block specifically for reading integer input
                try {
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                    continue; // Skip the rest of the loop iteration
                } finally {
                     // Consume the rest of the line after reading the integer,
                     // important for subsequent nextLine() calls
                     scanner.nextLine();
                }


                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter ticket description: ");
                        String description = scanner.nextLine();
                        system.submitTicket(description);
                        break;
                    case 2:
                        system.processNextTicket();
                        break;
                    case 3:
                        system.viewOpenTickets();
                        break;
                    case 4:
                        system.viewClosedTickets();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting system. Goodbye!");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a blank line for readability
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("--- Support Ticket System ---");
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Open Tickets");
        System.out.println("4. View Closed Tickets");
        System.out.println("5. Exit");
    }
}
