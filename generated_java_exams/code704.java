/*
 * Exam Question #704
 * Generated on: 2025-05-12 16:28:04
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Advanced Task Processing System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Task Management System. This system will manage incoming tasks that need to be processed sequentially. New tasks are added to a queue, processed one by one, and then moved to a list of completed tasks. The system should be interactive, allowing a user to add tasks, process the next available task, view the current status of tasks (waiting and completed), and exit.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following requirements:
 * 
 * 1.  **Task Representation:** Create a class `Task` to represent a single task. Each task should have:
 *     *   A unique integer ID (auto-generated starting from 1).
 *     *   A `String` description.
 *     *   A status (e.g., "Waiting", "Completed").
 *     *   Proper encapsulation (private fields, public getters).
 *     *   A meaningful `toString()` method for easy printing.
 * 
 * 2.  **Task Management Logic:** Create a class `TaskScheduler` that manages the tasks. It should contain:
 *     *   A `Queue<Task>` to hold tasks that are waiting to be processed.
 *     *   A `List<Task>` to hold tasks that have been completed.
 *     *   Methods for:
 *         *   `addTask(String description)`: Creates a new `Task` with status "Waiting" and adds it to the waiting queue. Should validate that the description is not empty.
 *         *   `processNextTask()`: Removes the next task from the waiting queue, changes its status to "Completed", and adds it to the completed list. Must handle the case where the queue is empty.
 *         *   `viewStatus()`: Prints the descriptions and IDs of all tasks currently in the waiting queue and all tasks in the completed list. Clearly label each section.
 * 
 * 3.  **User Interface:** Implement a command-line interface using `java.util.Scanner`. The program should present a menu with the following options:
 *     *   1. Add New Task
 *     *   2. Process Next Task
 *     *   3. View Task Status
 *     *   4. Exit
 * 
 * 4.  **Control Flow:** Use a `switch` statement to handle the user's menu choice.
 * 
 * 5.  **Output:**
 *     *   Use `System.out.println()` for displaying the menu, prompts, task status, and success messages.
 *     *   Use `System.err.println()` for displaying error messages (e.g., invalid menu choice, empty task description, attempting to process when the queue is empty).
 * 
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues, such as the user entering non-integer input for the menu choice.
 *     *   Handle specific errors like trying to process a task when the queue is empty or adding a task with an empty description.
 * 
 * 7.  **Best Practices:**
 *     *   Employ meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style comments for classes/methods).
 *     *   Ensure proper input validation where necessary (e.g., non-empty task description, valid menu choice input type).
 *     *   Structure the code into logical classes and methods.
 * 
 * **Required Java Components Checklist:**
 * 
 * *   `java.util.Queue`: Yes
 * *   `java.util.ArrayList`: Yes
 * *   `java.util.List`: Yes
 * *   `java.util.Scanner`: Yes
 * *   `switch` statement: Yes
 * *   `System.err`: Yes
 * *   `System.out`: Yes
 * *   Class-wide `try-catch`: Yes
 * 
 * **Expected Output Structure (Example):**
 * 
 * ```
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 1
 * Enter task description: Clean room
 * Task added: Task[ID=1, Description=Clean room, Status=Waiting]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 1
 * Enter task description: Do laundry
 * Task added: Task[ID=2, Description=Do laundry, Status=Waiting]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 3
 * --- Waiting Tasks ---
 * Task[ID=1, Description=Clean room, Status=Waiting]
 * Task[ID=2, Description=Do laundry, Status=Waiting]
 * --- Completed Tasks ---
 * (No completed tasks)
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 2
 * Processing next task...
 * Task completed: Task[ID=1, Description=Clean room, Status=Completed]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 3
 * --- Waiting Tasks ---
 * Task[ID=2, Description=Do laundry, Status=Waiting]
 * --- Completed Tasks ---
 * Task[ID=1, Description=Clean room, Status=Completed]
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 5
 * Error: Invalid choice. Please enter a number between 1 and 4.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: abc
 * Error: Invalid input. Please enter a valid number.
 * 
 * --- Task Management Menu ---
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Task Status
 * 4. Exit
 * Enter your choice: 4
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should compile and run, demonstrating the functionality described above and adhering to all specified requirements and best practices.
 *
 * EXPLANATION:
 * 
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Represents the status of a task.
 */
enum TaskStatus {
    WAITING,
    COMPLETED,
    FAILED // Although not explicitly used in this simple version, good practice
}

/**
 * Represents a single task in the system.
 */
class Task {
    private static int nextTaskId = 1; // Static counter for unique IDs

    private int id;
    private String description;
    private TaskStatus status;

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task.
     */
    public Task(String description) {
        this.id = nextTaskId++; // Assign unique ID and increment counter
        this.description = description;
        this.status = TaskStatus.WAITING; // New tasks start as Waiting
    }

    // --- Getters ---

    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public TaskStatus getStatus() {
        return status;
    }

    // --- Setters (controlled access) ---

    /**
     * Sets the status of the task.
     *
     * @param status The new status.
     */
    public void setStatus(TaskStatus status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the Task.
     *
     * @return A formatted string describing the task.
     */
    @Override
    public String toString() {
        return "Task[ID=" + id + ", Description=" + description + ", Status=" + status + "]";
    }
}

/**
 * Manages the collection of tasks, including waiting and completed tasks.
 */
class TaskScheduler {
    // Using LinkedList as it implements the Queue interface efficiently
    private Queue<Task> waitingTasks;
    // Using ArrayList as a general-purpose List implementation
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskScheduler.
     */
    public TaskScheduler() {
        this.waitingTasks = new LinkedList<>();
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a new task to the waiting queue.
     *
     * @param description The description of the task.
     * @return The newly created task if successful, null otherwise.
     */
    public Task addTask(String description) {
        // Input validation for description
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return null; // Indicate failure
        }

        Task newTask = new Task(description.trim());
        waitingTasks.offer(newTask); // offer() is preferred over add() for queues
        System.out.println("Task added: " + newTask);
        return newTask; // Return the added task
    }

    /**
     * Processes the next task from the waiting queue.
     * Moves the task to the completed list upon successful processing.
     */
    public void processNextTask() {
        System.out.println("Processing next task...");
        Task taskToProcess = waitingTasks.poll(); // poll() retrieves and removes the head

        if (taskToProcess == null) {
            System.err.println("Error: No tasks in the waiting queue to process.");
        } else {
            // Simulate processing by changing status
            taskToProcess.setStatus(TaskStatus.COMPLETED);
            completedTasks.add(taskToProcess);
            System.out.println("Task completed: " + taskToProcess);
        }
    }

    /**
     * Displays the status of all tasks (waiting and completed).
     */
    public void viewStatus() {
        System.out.println("\n--- Waiting Tasks ---");
        if (waitingTasks.isEmpty()) {
            System.out.println("(No waiting tasks)");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : waitingTasks) {
                System.out.println(task);
            }
        }

        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("(No completed tasks)");
        } else {
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
        System.out.println(); // Add a newline for better formatting
    }
}

/**
 * Main class to run the Task Management System.
 * Handles user interaction and delegates tasks to TaskScheduler.
 */
public class TaskManagementSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskScheduler scheduler = new TaskScheduler();
        boolean running = true;

        System.out.println("--- Welcome to Task Management System ---");

        // Main application loop
        while (running) {
            printMenu();

            // Class-wide exception handling for input
            try {
                System.out.print("Enter your choice: ");
                String input = scanner.nextLine();
                int choice = Integer.parseInt(input); // Potential NumberFormatException

                // Switch statement for menu navigation
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        scheduler.addTask(description); // Validation handled inside scheduler
                        break;
                    case 2:
                        scheduler.processNextTask(); // Error handling handled inside scheduler
                        break;
                    case 3:
                        scheduler.viewStatus();
                        break;
                    case 4:
                        running = false; // Exit the loop
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        // Invalid choice handling
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                        break;
                }
            } catch (NumberFormatException e) {
                // Catch block for non-integer input
                System.err.println("Error: Invalid input. Please enter a valid number.");
            } catch (Exception e) {
                // General catch block for any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for detailed debugging
            }
            // Optional: Add a small pause or prompt before showing menu again
            // System.out.println("\nPress Enter to continue...");
            // scanner.nextLine();
        }

        scanner.close(); // Close the scanner resource
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Task Management Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Task Status");
        System.out.println("4. Exit");
    }
}
