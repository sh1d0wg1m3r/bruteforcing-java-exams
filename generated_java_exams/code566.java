/*
 * Exam Question #566
 * Generated on: 2025-05-11 23:30:13
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Print Job Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified Print Job Management System for a small office. The system should allow users to add new print jobs to a queue, view the current jobs waiting in the queue, and process (simulate printing) the next job in the queue. The system needs to handle user input robustly and manage potential errors.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Functionality:**
 *     *   Add a new print job: The user provides a file name and the number of pages. A unique job ID should be assigned automatically. Jobs are added to the end of the queue.
 *     *   View the print queue: Display all jobs currently waiting in the queue, in order of arrival.
 *     *   Process the next job: Remove the job at the front of the queue and simulate printing it (print its details).
 *     *   Exit the system.
 * 2.  **Data Structures:**
 *     *   Use `java.util.Queue` to store the print jobs waiting to be processed. A `LinkedList` is a suitable implementation for a `Queue`.
 *     *   Use `java.util.ArrayList` and the `java.util.List` interface to represent and display the contents of the current queue when the user chooses to view it.
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get user input (menu choices, job details).
 *     *   Present a clear menu of options to the user.
 *     *   Handle user menu choices using a `switch` statement.
 * 4.  **Error Handling:**
 *     *   Use `System.err` to display error messages (e.g., invalid input, attempting to process an empty queue).
 *     *   Use `System.out` for normal output (menu, prompts, job details, success messages).
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle unexpected errors (e.g., issues with input reading).
 *     *   Implement specific error handling for scenarios like trying to process a job when the queue is empty.
 *     *   Validate user input for new jobs (e.g., number of pages must be positive).
 * 5.  **Object-Oriented Design:**
 *     *   Create a `PrintJob` class to represent a single print job (with properties like job ID, file name, and pages). Ensure proper encapsulation.
 *     *   Create a `PrintJobManager` class to manage the queue of print jobs and provide methods for adding, processing, and viewing jobs. Ensure proper encapsulation.
 *     *   The main application logic should reside in a separate class (e.g., `PrintJobSystem`) that interacts with the `PrintJobManager`.
 * 6.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Ensure resources like `Scanner` are closed properly.
 * 
 * **Expected Output:**
 * 
 * The system should continuously display a menu until the user chooses to exit. Output should be clear, indicating the result of each operation. Error messages should be distinct (using `System.err`).
 * 
 * Example Interaction Flow:
 * 
 * ```
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 1
 * Enter file name: document.pdf
 * Enter number of pages: 10
 * Job added: Job ID: 1, File: document.pdf, Pages: 10
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 1
 * Enter file name: report.docx
 * Enter number of pages: 5
 * Job added: Job ID: 2, File: report.docx, Pages: 5
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 2
 * --- Current Print Queue ---
 * Job ID: 1, File: document.pdf, Pages: 10
 * Job ID: 2, File: report.docx, Pages: 5
 * ---------------------------
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 3
 * Processing job: Job ID: 1, File: document.pdf, Pages: 10
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 3
 * Processing job: Job ID: 2, File: report.docx, Pages: 5
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 3
 * System.err: Error: The print queue is empty. No jobs to process.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 5
 * System.err: Error: Invalid choice. Please enter a number between 1 and 4.
 * 
 * --- Print Job Management System ---
 * 1. Add New Job
 * 2. View Print Queue
 * 3. Process Next Job
 * 4. Exit
 * Enter your choice: 4
 * Exiting Print Job Management System. Goodbye!
 * ```
 * 
 * Your solution should provide the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a Print Job Management System demonstrating the required Java concepts.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   This class represents a single print job.
 *     *   It uses private fields (`jobId`, `fileName`, `pages`) for encapsulation.
 *     *   A static counter `nextJobId` ensures each job gets a unique ID.
 *     *   The constructor includes basic input validation for `pages`, throwing an `IllegalArgumentException` if the value is not positive.
 *     *   Getters provide controlled access to the job's properties.
 *     *   The `toString()` method provides a convenient way to print job details.
 * 
 * 2.  **`PrintJobManager` Class:**
 *     *   This class manages the collection of `PrintJob` objects.
 *     *   It holds a `Queue<PrintJob>` named `printQueue`. A `LinkedList` is used as the concrete implementation of the `Queue` interface, suitable for adding to the end and removing from the front.
 *     *   `addJob(String fileName, int pages)`: Creates a `PrintJob` and adds it to the queue using `offer()`. It includes a `try-catch` block to catch potential `IllegalArgumentException` from the `PrintJob` constructor and print an error message to `System.err`.
 *     *   `processNextJob()`: Removes the job at the head of the queue using `remove()`. It includes a `try-catch` block specifically for `NoSuchElementException`, which `remove()` throws if the queue is empty, printing a user-friendly error message to `System.err`. If successful, it prints the processed job details to `System.out`.
 *     *   `viewQueue()`: This method demonstrates the use of `ArrayList` and the `List` interface. It creates a new `ArrayList` by copying the elements from the `printQueue`. This allows viewing the queue contents without modifying the queue itself. The method returns the `ArrayList` instance, but the return type is specified as the `List` interface, showcasing polymorphism.
 *     *   `isEmpty()`: A helper method to check if the queue is empty.
 * 
 * 3.  **`PrintJobSystem` Class (Main Class):**
 *     *   This class contains the `main` method, which is the entry point of the application.
 *     *   It creates instances of `Scanner` for input and `PrintJobManager`.
 *     *   The main application logic runs inside a `while(running)` loop.
 *     *   **Class-wide Exception Handling:** The core `while` loop is wrapped in a `try-catch(Exception e)` block. This provides a fallback for any unexpected runtime exceptions that might occur within the loop, preventing the program from crashing abruptly. It prints an error to `System.err` and the stack trace.
 *     *   **Scanner Input Handling:** Inside the loop, a nested `try-catch(InputMismatchException e)` is used specifically when reading the integer menu choice. This catches non-integer input, prints an error to `System.err`, consumes the invalid input using `scanner.nextLine()`, and uses `continue` to restart the loop, prompting the user again. Similar handling is used for reading the number of pages.
 *     *   **Switch Statement:** A `switch` statement is used to control the program flow based on the user's valid menu choice (1, 2, 3, or 4).
 *     *   **Menu Display and Output:** `System.out` is used to display the menu, prompts, and successful operation messages.
 *     *   **Error Output:** `System.err` is used for displaying invalid input messages and the empty queue error message from `processNextJob`.
 *     *   **Resource Management:** A `finally` block ensures that the `scanner.close()` method is called when the `try` block (containing the main loop) is exited, either normally or due to an exception, preventing resource leaks.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a cohesive, object-oriented structure with proper error handling and input validation, simulating a practical scenario.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

/**
 * Represents a single print job.
 */
class PrintJob {
    private static int nextJobId = 1; // Static counter for unique job IDs

    private int jobId;
    private String fileName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     * @param fileName The name of the file to print.
     * @param pages The number of pages in the file.
     * @throws IllegalArgumentException if pages is not positive.
     */
    public PrintJob(String fileName, int pages) {
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        this.jobId = nextJobId++;
        this.fileName = fileName;
        this.pages = pages;
    }

    // Getters
    public int getJobId() {
        return jobId;
    }

    public String getFileName() {
        return fileName;
    }

    public int getPages() {
        return pages;
    }

    /**
     * Returns a string representation of the PrintJob.
     */
    @Override
    public String toString() {
        return "Job ID: " + jobId + ", File: " + fileName + ", Pages: " + pages;
    }
}

/**
 * Manages the queue of print jobs.
 */
class PrintJobManager {
    private Queue<PrintJob> printQueue;

    /**
     * Constructs a new PrintJobManager with an empty queue.
     */
    public PrintJobManager() {
        // Using LinkedList as an implementation of Queue
        this.printQueue = new LinkedList<>();
    }

    /**
     * Adds a new print job to the queue.
     * @param fileName The name of the file.
     * @param pages The number of pages.
     * @throws IllegalArgumentException if pages is not positive (handled by PrintJob constructor).
     */
    public void addJob(String fileName, int pages) {
        try {
            PrintJob newJob = new PrintJob(fileName, pages);
            printQueue.offer(newJob); // offer() is preferred over add() for capacity-constrained queues, but works fine here
            System.out.println("Job added: " + newJob);
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding job: " + e.getMessage());
        }
    }

    /**
     * Processes the next job in the queue (removes and prints details).
     * @return The processed PrintJob, or null if the queue was empty.
     */
    public PrintJob processNextJob() {
        try {
            PrintJob jobToProcess = printQueue.remove(); // remove() throws NoSuchElementException if empty
            System.out.println("Processing job: " + jobToProcess);
            return jobToProcess;
        } catch (NoSuchElementException e) {
            // Specific error handling for empty queue
            System.err.println("Error: The print queue is empty. No jobs to process.");
            return null;
        }
    }

    /**
     * Returns a list of jobs currently in the queue without removing them.
     * @return A List view of the current queue contents.
     */
    public List<PrintJob> viewQueue() {
        // Copy elements from the Queue to an ArrayList for easy viewing
        List<PrintJob> currentJobs = new ArrayList<>(printQueue); // Using ArrayList here
        return currentJobs; // Returning List interface type
    }

    /**
     * Checks if the print queue is empty.
     * @return true if the queue is empty, false otherwise.
     */
    public boolean isEmpty() {
        return printQueue.isEmpty();
    }
}

/**
 * Main class for the Print Job Management System.
 * Handles user interaction and orchestrates operations.
 */
public class PrintJobSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        PrintJobManager jobManager = new PrintJobManager();
        boolean running = true;

        System.out.println("--- Print Job Management System ---");

        // Class-wide exception handling for the main loop
        try {
            while (running) {
                displayMenu();
                System.out.print("Enter your choice: ");

                int choice = -1;
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input
                    continue; // Skip the rest of the loop and show menu again
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1: // Add New Job
                        System.out.print("Enter file name: ");
                        String fileName = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        try {
                            int pages = scanner.nextInt();
                            scanner.nextLine(); // Consume newline
                            jobManager.addJob(fileName, pages); // addJob handles validation internally
                        } catch (InputMismatchException e) {
                            System.err.println("Error: Invalid input for pages. Please enter a whole number.");
                            scanner.nextLine(); // Consume invalid input
                        }
                        break;

                    case 2: // View Print Queue
                        List<PrintJob> currentQueue = jobManager.viewQueue(); // Using List and ArrayList
                        if (currentQueue.isEmpty()) {
                            System.out.println("The print queue is currently empty.");
                        } else {
                            System.out.println("--- Current Print Queue ---");
                            for (PrintJob job : currentQueue) {
                                System.out.println(job);
                            }
                            System.out.println("---------------------------");
                        }
                        break;

                    case 3: // Process Next Job
                        jobManager.processNextJob(); // processNextJob handles empty queue error
                        break;

                    case 4: // Exit
                        running = false;
                        System.out.println("Exiting Print Job Management System. Goodbye!");
                        break;

                    default: // Invalid choice
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during the main loop execution
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed regardless of exceptions
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("--- Print Job Management System ---");
        System.out.println("1. Add New Job");
        System.out.println("2. View Print Queue");
        System.out.println("3. Process Next Job");
        System.out.println("4. Exit");
    }
}
