/*
 * Exam Question #649
 * Generated on: 2025-05-12 16:20:00
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Scheduler
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified appointment scheduling system for a small hospital clinic. The system needs to manage patients waiting for appointments and a pool of available doctors. When a doctor becomes available, the system should automatically schedule the next patient in the waiting queue with that doctor.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that provides a command-line interface for the hospital scheduler. The program should allow the user to perform the following actions via a menu:
 * 
 * 1.  **Add a new patient to the waiting queue:** The system should prompt for the patient's name and add them to the end of the waiting list.
 * 2.  **Add a new doctor to the pool of available doctors:** The system should prompt for the doctor's name and specialty and add them to the list of available doctors.
 * 3.  **Schedule the next appointment:** If there are patients waiting *and* doctors available, take the patient who has been waiting the longest (from the front of the queue) and assign them to the first available doctor. Report the scheduled appointment. The doctor is then considered busy and removed from the available pool for this simple simulation.
 * 4.  **View current status:** Display the list of patients currently in the waiting queue and the list of doctors currently available.
 * 5.  **Exit the program:** Terminate the application.
 * 
 * **Technical Constraints:**
 * 
 * Your solution *must* use *all* of the following Java components:
 * 
 * *   `java.util.Queue`: To manage the patient waiting list (FIFO - First-In, First-Out).
 * *   `java.util.ArrayList`: To store the pool of available doctors.
 * *   `java.util.List`: Use the `List` interface type when declaring the variable for available doctors.
 * *   `java.util.Scanner`: To read user input from the console.
 * *   `switch` statement: To handle the different menu options.
 * *   `System.err`: To output error messages (e.g., invalid input, cannot schedule appointment).
 * *   `System.out`: To output normal messages (menu, prompts, success messages, status).
 * *   Class-wide exception handling: Use `try-catch` blocks to handle potential exceptions, especially around user input.
 * 
 * **Best Practices:**
 * 
 * *   Implement proper encapsulation using private fields and public methods in your classes.
 * *   Use meaningful names for variables, methods, and classes.
 * *   Include comments and documentation (e.g., Javadoc) where appropriate to explain your code.
 * *   Perform input validation to handle incorrect user input gracefully.
 * *   Provide clear error messages using `System.err`.
 * *   Structure your code cleanly (e.g., separate classes for Patient, Doctor, and the main Scheduler logic).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu to the user. Based on the user's choice, it should perform the requested action, display relevant information (`System.out`), or display error messages (`System.err`).
 * 
 * Example Interaction (Illustrative):
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1. Add Patient
 * 2. Add Doctor
 * 3. Schedule Appointment
 * 4. View Status
 * 5. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * 
 * Patient Alice added to the queue.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Enter doctor specialty: Cardiology
 * 
 * Doctor Dr. Smith (Cardiology) added to available doctors.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * 
 * Appointment scheduled: Alice with Dr. Smith (Cardiology).
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Current Status ---
 * Waiting Queue:
 * (Queue is empty)
 * Available Doctors:
 * (No doctors available)
 * ----------------------
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * 
 * Error: Cannot schedule appointment. Either no patients waiting or no doctors available.
 * (Output to System.err)
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 5
 * 
 * Exiting Hospital Scheduler.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all required functionalities.
 * *   Proper and mandatory use of all specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Clean code structure and readability.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * The provided solution implements a simple Hospital Appointment Scheduler based on the requirements. It demonstrates the use of all specified Java components within a practical scenario.
 * 
 * **Key Components Usage:**
 * 
 * 1.  **`java.util.Queue`**: The `patientQueue` is declared as a `Queue<Patient>`. A `LinkedList` is used as the concrete implementation, which is a common choice for queues due to efficient additions (`offer`) and removals (`poll`) at the ends. This ensures patients are processed in a FIFO manner (First-In, First-Out).
 * 2.  **`java.util.ArrayList`**: The `availableDoctors` list is implemented using `ArrayList`. This is suitable for storing available doctors where elements might be added or removed, and access by index (though we primarily use `remove(0)` here) is efficient enough for this scale.
 * 3.  **`java.util.List`**: The variable `availableDoctors` is declared with the interface type `List<Doctor>`, adhering to the principle of programming to the interface. This makes the code more flexible if a different `List` implementation were needed later.
 * 4.  **`java.util.Scanner`**: A `Scanner` object is used to read user input for menu choices, patient names, doctor names, and specialties from `System.in`.
 * 5.  **`switch` statement**: The `run()` method uses a `switch` statement to process the user's menu choice, directing the program flow to the appropriate method (`addPatient`, `addDoctor`, `scheduleAppointment`, `viewStatus`).
 * 6.  **`System.err`**: `System.err.println()` is used specifically for outputting error messages. This includes messages for invalid menu input (non-numeric or out-of-range choices) and logical errors during scheduling (no patients or no doctors available), separating them from normal program output.
 * 7.  **`System.out`**: `System.out.println()` is used for all normal program output, such as the menu display, prompts for input, confirmation messages after adding patients/doctors, successful appointment scheduling messages, and the status display.
 * 8.  **Class-wide exception handling with `try-catch`**: A `try-catch` block is wrapped around the main loop inside the `run()` method. It specifically catches `InputMismatchException` to handle cases where the user enters non-integer input for the menu choice, preventing the program from crashing and guiding the user to correct the input. A general `Exception` catch is also included as a fallback for any other unexpected runtime errors.
 * 
 * **Code Structure and Best Practices:**
 * 
 * *   **Encapsulation:** The `Patient` and `Doctor` classes have private fields (`name`, `specialty`) and public getter methods. The `HospitalScheduler` class also has private fields (`patientQueue`, `availableDoctors`, `scanner`) and public methods for the main operations (`addPatient`, `addDoctor`, `scheduleAppointment`, `viewStatus`, `run`).
 * *   **Meaningful Names:** Class names (`Patient`, `Doctor`, `HospitalScheduler`), field names (`patientQueue`, `availableDoctors`), and method names (`addPatient`, `scheduleAppointment`, `viewStatus`, `displayMenu`, `run`) are descriptive and indicate their purpose.
 * *   **Comments and Documentation:** Javadoc-style comments are used for classes, and inline comments explain specific logic (e.g., why `scanner.nextLine()` is called after `scanner.nextInt()`, the purpose of `offer` vs. `add`, and `poll` vs. `remove`).
 * *   **Input Validation:** The `addPatient` and `addDoctor` methods check if the entered names or specialty are empty strings. The `run` method uses `try-catch` to validate that the menu input is an integer and checks if the integer is within the valid range (1-5).
 * *   **Error Handling:** Specific error messages are printed to `System.err` for invalid inputs and impossible scheduling scenarios. The `try-catch` block handles `InputMismatchException` robustly.
 * *   **Clean Code:** The code is divided into logical classes. Methods are kept relatively short and focused on a single task. The `run` method manages the main application loop and menu logic, delegating specific tasks to other methods.
 * 
 * This solution effectively combines the required Java components to build a functional, albeit simplified, system that demonstrates core object-oriented principles, data structure usage, and robust input/error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient waiting for an appointment
class Patient {
    private String name;

    public Patient(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

// Represents a doctor available for appointments
class Doctor {
    private String name;
    private String specialty;

    public Doctor(String name, String specialty) {
        this.name = name;
        this.specialty = specialty;
    }

    public String getName() {
        return name;
    }

    public String getSpecialty() {
        return specialty;
    }

    @Override
    public String toString() {
        return name + " (" + specialty + ")";
    }
}

// Manages the patient queue and available doctors
class HospitalScheduler {
    // Use Queue for FIFO patient waiting list
    private Queue<Patient> patientQueue;
    // Use List interface and ArrayList implementation for available doctors
    private List<Doctor> availableDoctors;
    private Scanner scanner;

    public HospitalScheduler() {
        // LinkedList is a common implementation of Queue
        this.patientQueue = new LinkedList<>();
        this.availableDoctors = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    // Adds a patient to the waiting queue
    public void addPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }
        Patient patient = new Patient(name);
        patientQueue.offer(patient); // offer is preferred over add for queues
        System.out.println("Patient " + patient.getName() + " added to the queue.");
    }

    // Adds a doctor to the available doctors list
    public void addDoctor() {
        System.out.print("Enter doctor name: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) {
            System.err.println("Error: Doctor name cannot be empty.");
            return;
        }
        System.out.print("Enter doctor specialty: ");
        String specialty = scanner.nextLine().trim();
         if (specialty.isEmpty()) {
            System.err.println("Error: Doctor specialty cannot be empty.");
            return;
        }
        Doctor doctor = new Doctor(name, specialty);
        availableDoctors.add(doctor);
        System.out.println("Doctor " + doctor.getName() + " (" + doctor.getSpecialty() + ") added to available doctors.");
    }

    // Schedules the next appointment if possible
    public void scheduleAppointment() {
        // Check if both patients and doctors are available
        if (patientQueue.isEmpty()) {
            System.err.println("Error: Cannot schedule appointment. No patients waiting.");
            return;
        }
        if (availableDoctors.isEmpty()) {
            System.err.println("Error: Cannot schedule appointment. No doctors available.");
            return;
        }

        // Get the next patient from the queue (FIFO)
        Patient nextPatient = patientQueue.poll(); // poll removes and returns the head

        // Get the first available doctor
        Doctor availableDoctor = availableDoctors.remove(0); // remove the first doctor from the list

        System.out.println("Appointment scheduled: " + nextPatient.getName() + " with " + availableDoctor.getName() + " (" + availableDoctor.getSpecialty() + ").");
    }

    // Displays the current status of the queue and available doctors
    public void viewStatus() {
        System.out.println("\n--- Current Status ---");
        System.out.println("Waiting Queue:");
        if (patientQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            patientQueue.forEach(patient -> System.out.println("- " + patient.getName()));
        }

        System.out.println("\nAvailable Doctors:");
        if (availableDoctors.isEmpty()) {
            System.out.println("(No doctors available)");
        } else {
            // Iterate through the list
            availableDoctors.forEach(doctor -> System.out.println("- " + doctor.getName() + " (" + doctor.getSpecialty() + ")"));
        }
        System.out.println("----------------------");
    }

    // Displays the main menu
    private void displayMenu() {
        System.out.println("\n--- Hospital Scheduler Menu ---");
        System.out.println("1. Add Patient");
        System.out.println("2. Add Doctor");
        System.out.println("3. Schedule Appointment");
        System.out.println("4. View Status");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Runs the main application loop
    public void run() {
        int choice = -1;
        while (choice != 5) {
            displayMenu();
            try {
                // Read integer input for menu choice
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        addDoctor();
                        break;
                    case 3:
                        scheduleAppointment();
                        break;
                    case 4:
                        viewStatus();
                        break;
                    case 5:
                        System.out.println("Exiting Hospital Scheduler.");
                        break;
                    default:
                        // Handle invalid menu choices
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to prevent exiting or incorrect action
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optionally print stack trace for debugging: e.printStackTrace();
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    // Main method to start the application
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.run();
    }
}
