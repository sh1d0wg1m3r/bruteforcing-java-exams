/*
 * Exam Question #534
 * Generated on: 2025-05-11 23:26:03
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam - Restaurant Order Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified backend system for a small restaurant. The system needs to manage a fixed menu, accept customer orders, queue them for the kitchen, and process them in the order they were received. The system should be interactive, allowing a user (simulating a staff member) to perform actions via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Menu:** The system must have a predefined menu of items with names and prices. Use an `ArrayList` to store these menu items. The list should be accessible via the `List` interface type in method signatures where appropriate.
 * 2.  **Orders:**
 *     *   An order consists of a unique order ID and a list of `MenuItem`s.
 *     *   Orders waiting to be processed by the kitchen must be stored in a `Queue`. Orders should be processed in a First-In, First-Out (FIFO) manner.
 * 3.  **User Interface:**
 *     *   Use `Scanner` to read user input from the console.
 *     *   Present a main menu with options:
 *         *   Display Menu
 *         *   Place New Order
 *         *   Process Next Order
 *         *   Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 4.  **Functionality:**
 *     *   **Display Menu:** Show the list of available menu items with their numbers and prices.
 *     *   **Place New Order:**
 *         *   Prompt the user to select items from the menu by number. Allow multiple items per order.
 *         *   Input should continue until the user enters a specific sentinel value (e.g., 0).
 *         *   Validate user input: ensure the entered number corresponds to a valid menu item index.
 *         *   Create an `Order` object with a unique ID and the selected items.
 *         *   Add the new order to the processing queue.
 *         *   Confirm the order placement.
 *     *   **Process Next Order:**
 *         *   Take the next order from the front of the queue.
 *         *   If the queue is empty, report an error.
 *         *   If an order is processed, display its details (ID and items).
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful actions, and processed order details.
 *     *   Use `System.err` to report errors, such as:
 *         *   Invalid menu selection in the main menu.
 *         *   Invalid item number entered during order placement.
 *         *   Attempting to process an order when the queue is empty.
 *     *   Implement class-wide exception handling using `try-catch` blocks, particularly around operations that might fail (e.g., reading integer input from `Scanner`, potential index out of bounds if input validation fails, although robust validation should prevent this). A main `try-catch` block around the application loop is recommended to handle unexpected input issues gracefully.
 * 6.  **Best Practices:**
 *     *   Create separate classes for `MenuItem` and `Order` with private fields and public getters (encapsulation).
 *     *   Create a main class (e.g., `RestaurantSystem`) to manage the menu and the order queue.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc).
 *     *   Ensure proper input validation before processing.
 * 
 * **Expected Output Structure:**
 * 
 * ```
 * --- Restaurant System Menu ---
 * 1. Display Menu
 * 2. Place New Order
 * 3. Process Next Order
 * 4. Exit
 * Enter your choice: [user input]
 * 
 * (Based on choice)
 * 
 * --- Menu ---
 * 1. Item Name 1 - $Price1
 * 2. Item Name 2 - $Price2
 * ...
 * 
 * --- Place New Order ---
 * Select items by number (0 to finish):
 * Enter item number: [user input]
 * (Repeat until 0)
 * Order [ID] placed with [N] items.
 * 
 * --- Process Next Order ---
 * Processing Order [ID]:
 * - Item Name 1 ($Price1)
 * - Item Name 2 ($Price2)
 * Total: $Total Price
 * 
 * (If queue empty)
 * Error: No orders in the queue to process. (Output to System.err)
 * 
 * (If invalid main menu choice)
 * Error: Invalid choice. Please enter a number between 1 and 4. (Output to System.err)
 * 
 * (If invalid item number during order)
 * Error: Invalid item number. Please select from 1 to [Menu Size] or 0 to finish. (Output to System.err)
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements the requested Restaurant Order Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Class Structure:**
 *     *   `MenuItem`: A simple POJO (Plain Old Java Object) representing an item on the menu with `name` and `price`. It has private fields and public getter methods, adhering to encapsulation.
 *     *   `Order`: Represents a customer order, containing a unique `orderId` and a `List<MenuItem>`. It also includes a `getTotalPrice` method for calculating the order cost. Encapsulation is maintained with private fields and public getters.
 *     *   `RestaurantSystem`: The main class that orchestrates the application logic. It holds the system's state (`menu`, `orderQueue`, `nextOrderId`) and contains the methods for interacting with the user and managing orders.
 * 
 * 2.  **Required Components Usage:**
 *     *   `ArrayList`: Used internally within `RestaurantSystem` to store the `menu` items (`List<MenuItem> menu = new ArrayList<>();`). This provides dynamic resizing and indexed access.
 *     *   `List interface`: The `menu` field is declared as `List<MenuItem>`, and the `items` field in the `Order` class is declared as `List<MenuItem>`. This promotes flexibility, allowing other `List` implementations if needed later.
 *     *   `Queue`: Used for `orderQueue` (`Queue<Order> orderQueue = new LinkedList<>();`). `LinkedList` is used as it implements the `Queue` interface and is suitable for FIFO operations. `offer()` is used to add elements, and `poll()` is used to remove elements from the front. `isEmpty()` is used to check if the queue has orders.
 *     *   `Scanner`: An instance is created in `RestaurantSystem`'s constructor (`scanner = new Scanner(System.in);`) and used to read user input in the `run()` and `placeOrder()` methods.
 *     *   `Switch statement`: Used in the `run()` method to handle the user's main menu choice.
 *     *   `System.err`: Used to output error messages, such as invalid menu choices, invalid item numbers during order placement, and attempting to process an order from an empty queue.
 *     *   `System.out`: Used for all normal output, including displaying the menu, prompts, successful order placement messages, and details of processed orders.
 *     *   `Try-catch blocks`:
 *         *   A main `try-catch (Exception e)` block wraps the core application loop in the `run()` method to catch any unhandled exceptions during runtime.
 *         *   Specific `try-catch (InputMismatchException e)` blocks are used within the `run()` and `placeOrder()` methods around `scanner.nextInt()` calls. This handles cases where the user enters non-integer input, preventing the program from crashing and allowing it to prompt the user again after consuming the invalid input (`scanner.next()`).
 *         *   A `try-catch (Exception e)` block is also used within `placeOrder()` as a broader catch for any other potential issues during that process.
 * 
 * 3.  **Functionality Implementation:**
 *     *   `initializeMenu()`: Populates the `ArrayList` with sample `MenuItem` objects.
 *     *   `displayMenu()`: Iterates through the `menu` `ArrayList` and prints each item with its index (starting from 1 for user-friendliness).
 *     *   `placeOrder()`: Prompts the user, reads item numbers using the `Scanner` within a loop. It validates if the entered number is within the valid range (1 to menu size) or the exit sentinel (0). Valid items are added to a temporary `ArrayList`. Input validation includes a `try-catch` for `InputMismatchException`. Once the user enters 0, a new `Order` object is created (if items were selected) and added to the `orderQueue` using `offer()`.
 *     *   `processNextOrder()`: Checks if `orderQueue` is empty using `isEmpty()`. If not empty, it removes the next order using `poll()` and prints its details. If empty, it prints an error to `System.err`.
 *     *   `run()`: Contains the main application loop (`while (choice != 4)`), displays the menu options, reads user input using `scanner.nextInt()`, and uses a `switch` to delegate to the appropriate methods (`displayMenu`, `placeOrder`, `processNextOrder`). Includes robust `try-catch` for input handling.
 * 
 * 4.  **Best Practices:**
 *     *   Encapsulation is applied in `MenuItem` and `Order` classes.
 *     *   Variable names (`menu`, `orderQueue`, `nextOrderId`, `itemNumber`, `itemsForOrder`) and method names (`displayMenu`, `placeOrder`, `processNextOrder`, `getTotalPrice`) are descriptive.
 *     *   Javadoc comments are included for classes and methods, explaining their purpose and parameters/return values. Inline comments clarify specific logic points.
 *     *   Input validation is performed for both main menu choices and item selection during order placement.
 *     *   Error handling uses `System.err` for user-facing errors and `try-catch` for handling runtime exceptions, especially related to input parsing.
 *     *   The code is structured into logical methods within the `RestaurantSystem` class, making the `main` method simple and clean. The `Scanner` is managed carefully, including consuming invalid input and closing the resource in a `finally` block (or implicitly by exiting the application after `run()` finishes).
 * 
 * This solution effectively integrates all the required Java components into a cohesive, practical application while adhering to important programming principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a single menu item
class MenuItem {
    private String name;
    private double price;

    /**
     * Constructs a new MenuItem.
     * @param name The name of the menu item.
     * @param price The price of the menu item.
     */
    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    /**
     * Gets the name of the menu item.
     * @return The item name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the price of the menu item.
     * @return The item price.
     */
    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return name + " ($" + String.format("%.2f", price) + ")";
    }
}

// Represents a customer order
class Order {
    private int orderId;
    private List<MenuItem> items;

    /**
     * Constructs a new Order.
     * @param orderId The unique ID for the order.
     * @param items The list of menu items in the order.
     */
    public Order(int orderId, List<MenuItem> items) {
        this.orderId = orderId;
        this.items = items;
    }

    /**
     * Gets the order ID.
     * @return The order ID.
     */
    public int getOrderId() {
        return orderId;
    }

    /**
     * Gets the list of items in the order.
     * @return The list of menu items.
     */
    public List<MenuItem> getItems() {
        return items;
    }

    /**
     * Calculates the total price of the order.
     * @return The total price.
     */
    public double getTotalPrice() {
        double total = 0;
        for (MenuItem item : items) {
            total += item.getPrice();
        }
        return total;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Order #").append(orderId).append(":\n");
        for (MenuItem item : items) {
            sb.append("- ").append(item).append("\n");
        }
        sb.append("Total: $").append(String.format("%.2f", getTotalPrice()));
        return sb.toString();
    }
}

// Main class for managing the restaurant system
public class RestaurantSystem {

    private List<MenuItem> menu; // Using ArrayList for the menu
    private Queue<Order> orderQueue; // Using LinkedList as a Queue for orders
    private int nextOrderId;
    private Scanner scanner; // Scanner instance for user input

    /**
     * Constructs the RestaurantSystem, initializes menu, queue, and scanner.
     */
    public RestaurantSystem() {
        // Initialize menu using ArrayList
        menu = new ArrayList<>();
        initializeMenu();

        // Initialize order queue using LinkedList (implements Queue)
        orderQueue = new LinkedList<>();
        nextOrderId = 1;

        // Initialize Scanner
        scanner = new Scanner(System.in);
    }

    /**
     * Populates the menu with some default items.
     */
    private void initializeMenu() {
        menu.add(new MenuItem("Burger", 8.99));
        menu.add(new MenuItem("Fries", 3.49));
        menu.add(new MenuItem("Soda", 1.99));
        menu.add(new MenuItem("Pizza Slice", 4.50));
        menu.add(new MenuItem("Salad", 7.00));
    }

    /**
     * Displays the current menu to the console.
     */
    public void displayMenu() {
        System.out.println("\n--- Menu ---");
        for (int i = 0; i < menu.size(); i++) {
            System.out.println((i + 1) + ". " + menu.get(i));
        }
        System.out.println("------------");
    }

    /**
     * Guides the user through placing a new order.
     * Reads item selections from the scanner, validates input,
     * creates an Order, and adds it to the queue.
     */
    public void placeOrder() {
        System.out.println("\n--- Place New Order ---");
        List<MenuItem> itemsForOrder = new ArrayList<>();
        int itemNumber = -1;

        displayMenu(); // Show menu for selection

        System.out.println("Select items by number (0 to finish):");

        // Use a try-catch block for input reading loop
        try {
            while (true) {
                System.out.print("Enter item number: ");
                try {
                    itemNumber = scanner.nextInt();
                    if (itemNumber == 0) {
                        break; // Sentinel value to finish order
                    }

                    // Validate item number against menu size
                    if (itemNumber > 0 && itemNumber <= menu.size()) {
                        itemsForOrder.add(menu.get(itemNumber - 1)); // Add selected item (adjusting for 0-based index)
                        System.out.println(menu.get(itemNumber - 1).getName() + " added.");
                    } else {
                        // Invalid item number error
                        System.err.println("Error: Invalid item number. Please select from 1 to " + menu.size() + " or 0 to finish.");
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                }
            }

            // Check if any items were added before creating an order
            if (!itemsForOrder.isEmpty()) {
                Order newOrder = new Order(nextOrderId++, itemsForOrder);
                orderQueue.offer(newOrder); // Add order to the queue
                System.out.println("Order #" + newOrder.getOrderId() + " placed with " + itemsForOrder.size() + " items.");
            } else {
                System.out.println("No items selected. Order cancelled.");
            }

        } catch (Exception e) {
            // Catch any other unexpected exceptions during order placement
            System.err.println("An unexpected error occurred during order placement: " + e.getMessage());
            // In a real system, you might log the exception details
        }
    }

    /**
     * Processes the next order in the queue.
     * Removes the order from the queue and displays its details.
     */
    public void processNextOrder() {
        System.out.println("\n--- Process Next Order ---");
        // Check if the queue is empty
        if (orderQueue.isEmpty()) {
            // Output error to System.err
            System.err.println("Error: No orders in the queue to process.");
        } else {
            // Poll the next order from the queue (FIFO)
            Order processedOrder = orderQueue.poll();
            System.out.println("Processing " + processedOrder); // Order class's toString() handles formatting
        }
    }

    /**
     * Runs the main application loop, displaying the menu and handling user choices.
     */
    public void run() {
        int choice = -1;

        // Main application loop with class-wide exception handling for input
        try {
            while (choice != 4) {
                System.out.println("\n--- Restaurant System Menu ---");
                System.out.println("1. Display Menu");
                System.out.println("2. Place New Order");
                System.out.println("3. Process Next Order");
                System.out.println("4. Exit");
                System.out.print("Enter your choice: ");

                try {
                    choice = scanner.nextInt(); // Read user choice

                    // Use switch statement for flow control
                    switch (choice) {
                        case 1:
                            displayMenu();
                            break;
                        case 2:
                            placeOrder();
                            break;
                        case 3:
                            processNextOrder();
                            break;
                        case 4:
                            System.out.println("Exiting Restaurant System. Goodbye!");
                            break;
                        default:
                            // Handle invalid menu choice using System.err
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input for main menu choice
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                    choice = -1; // Reset choice to stay in loop
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during the main loop execution
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace for debugging
        } finally {
            // Ensure scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        RestaurantSystem app = new RestaurantSystem();
        app.run(); // Start the main application loop
    }
}
