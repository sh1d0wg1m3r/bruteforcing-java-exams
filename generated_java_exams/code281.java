/*
 * Exam Question #281
 * Generated on: 2025-05-11 22:49:10
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam: Advanced Hospital Appointment Scheduler**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified command-line application for a small clinic to manage patient flow. The clinic handles both scheduled appointments and walk-in patients. Walk-in patients are seen on a first-come, first-served basis, while scheduled appointments are fixed at specific times. Your system needs to manage a waiting list for walk-ins and a list of scheduled appointments.
 * 
 * **Requirements:**
 * 
 * 1.  **Core Functionality:**
 *     *   Allow adding new walk-in patients to a waiting list.
 *     *   Allow scheduling appointments for patients at specific time slots. The system must prevent scheduling an appointment if the desired time slot is already taken.
 *     *   Allow processing the next patient from the walk-in waiting list (i.e., remove them from the queue).
 *     *   Allow viewing the current walk-in waiting list.
 *     *   Allow viewing the list of scheduled appointments.
 *     *   Provide a menu-driven interface for the user to interact with the system.
 * 
 * 2.  **Java Component Usage:** Your solution *must* use the following Java components:
 *     *   `java.util.Queue` for the walk-in waiting list.
 *     *   `java.util.ArrayList` as the concrete implementation for storing scheduled appointments.
 *     *   `java.util.List` interface for declaring the scheduled appointments list (use `List<Appointment> scheduledAppointments = new ArrayList<>();`).
 *     *   `java.util.Scanner` for reading user input from the console.
 *     *   `switch` statement for handling the main menu options.
 *     *   `System.err` for printing error messages (e.g., invalid input, scheduling conflicts, attempting to process an empty queue).
 *     *   `System.out` for printing normal output (menu, prompts, success messages, list contents).
 *     *   Class-wide exception handling using `try-catch` blocks, particularly for handling potential input errors (like non-integer input when expecting an integer) and other runtime issues.
 * 
 * 3.  **Object-Oriented Design:**
 *     *   Create separate classes for `Patient` (with name and a unique ID) and `Appointment` (linking a `Patient` to a time slot).
 *     *   Implement proper encapsulation (private fields, public getters).
 *     *   The main application logic should reside in a separate class (e.g., `HospitalScheduler`) that manages the `Queue` and `List`.
 * 
 * 4.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments to explain complex parts.
 *     *   Implement basic input validation (e.g., checking for empty strings, handling non-numeric input where numbers are expected).
 *     *   Provide clear and informative messages to the user.
 * 
 * **Input Format:**
 * 
 * The system should present a menu. User input will follow the prompts.
 * - Menu choice (integer).
 * - Patient name (string).
 * - Time slot (string, e.g., "10:00", "14:30").
 * 
 * **Output Format:**
 * 
 * - Menu display using `System.out`.
 * - Prompts for input using `System.out`.
 * - Success messages using `System.out`.
 * - List contents (queue/schedule) using `System.out`.
 * - Error messages using `System.err`.
 * - Use clear formatting for displaying lists.
 * 
 * **Example Interaction (Illustrative):**
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1. Add Walk-in Patient
 * 2. Schedule Appointment
 * 3. Process Next Walk-in
 * 4. View Walk-in Queue
 * 5. View Scheduled Appointments
 * 6. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Alice added to walk-in queue.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Enter patient name: Bob
 * Enter time slot (e.g., HH:MM): 11:00
 * Appointment scheduled for Bob at 11:00.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * Enter patient name: Charlie
 * Enter time slot (e.g., HH:MM): 11:00
 * Error: Time slot 11:00 is already booked.
 * (This error message should go to System.err)
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * --- Walk-in Queue ---
 * 1. Alice (ID: 1)
 * ---------------------
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 5
 * --- Scheduled Appointments ---
 * - Bob (ID: 2) at 11:00
 * ----------------------------
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * Processing walk-in patient: Alice (ID: 1)
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * --- Walk-in Queue ---
 * (Queue is empty)
 * ---------------------
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 7
 * Error: Invalid menu choice. Please enter a number between 1 and 6.
 * (This error message should go to System.err)
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 6
 * Exiting scheduler.
 * ```
 * 
 * Your task is to implement the `HospitalScheduler` class and necessary helper classes (`Patient`, `Appointment`) according to the requirements.
 * 
 * **Note:** For simplicity, patient IDs can be sequentially generated integers starting from 1. Time slot validation can be basic (e.g., just checking for duplicates).
 *
 * EXPLANATION:
 * The provided solution implements a `HospitalScheduler` system demonstrating the required Java concepts and best practices.
 * 
 * **Overall Structure:**
 * The system is composed of three classes:
 * 1.  `Patient`: A simple class to hold patient information (ID and name) with encapsulation (private fields, public getters). A static counter ensures unique IDs.
 * 2.  `Appointment`: A simple class linking a `Patient` object to a `timeSlot` string. Encapsulation is used here as well.
 * 3.  `HospitalScheduler`: This is the main class containing the core logic. It manages the data structures (`Queue` and `List`), handles user interaction via `Scanner`, and contains the main application loop with the `switch` statement and exception handling.
 * 
 * **Required Component Usage:**
 * 
 * 1.  **`java.util.Queue`**: The `walkInQueue` is declared as `Queue<Patient>` and initialized with `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO behavior.
 *     *   `offer()` is used to add patients to the end of the queue.
 *     *   `poll()` is used to retrieve and remove the patient from the front of the queue (processing the next walk-in).
 *     *   `isEmpty()` is used to check if the queue has any patients before attempting to process.
 *     *   Iteration (using an enhanced for loop) is used in `viewWalkInQueue` to display queue contents without removing elements.
 * 
 * 2.  **`java.util.ArrayList`**: The `scheduledAppointments` list is specifically instantiated as `new ArrayList<>()`. This fulfills the requirement of using `ArrayList` as the concrete implementation.
 * 
 * 3.  **`java.util.List`**: The `scheduledAppointments` variable is declared using the `List` interface (`private List<Appointment> scheduledAppointments;`). This demonstrates the principle of programming to interfaces.
 * 
 * 4.  **`java.util.Scanner`**: A `Scanner` object is created (`private Scanner scanner;`) and used throughout the `HospitalScheduler` class to read user input (menu choice, patient name, time slot) from `System.in`.
 * 
 * 5.  **`switch` statement**: The `main` method uses a `switch` statement based on the user's menu choice (`choice`) to direct the program flow to the appropriate method (`addWalkInPatient`, `scheduleAppointment`, etc.).
 * 
 * 6.  **`System.err`**: `System.err.println()` is used exclusively for printing error messages, such as invalid menu choices, empty input, scheduling conflicts, and attempting to process an empty queue.
 * 
 * 7.  **`System.out`**: `System.out.println()` and `System.out.print()` are used for all normal program output, including displaying the menu, prompts for input, success messages, and the contents of the queue and scheduled appointments lists.
 * 
 * 8.  **`try-catch` blocks**:
 *     *   A specific `try-catch(InputMismatchException e)` block is wrapped around the `scanner.nextInt()` call within the main loop. This handles cases where the user enters non-integer input when prompted for a menu choice, preventing the program from crashing. The invalid input is consumed (`scanner.nextLine()`) to clear the buffer.
 *     *   A `finally` block is used after the input reading `try-catch` to ensure `scanner.nextLine()` is called to consume the newline character left by `nextInt()`, regardless of whether an exception occurred or not, preventing issues with subsequent `nextLine()` calls for string input.
 *     *   A general `try-catch(Exception e)` block wraps the main `while` loop in the `main` method. This provides a class-wide safety net to catch any unexpected runtime exceptions that might occur within the application logic, printing an error message and stack trace to `System.err`.
 *     *   Input validation for empty strings is handled using `if` statements and `System.err`, which is a common and efficient pattern for basic validation in console applications.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** `Patient` and `Appointment` classes have private fields accessed via public getters. The `HospitalScheduler` manages its internal data structures (`walkInQueue`, `scheduledAppointments`).
 * *   **Meaningful Names:** Variables (`walkInQueue`, `scheduledAppointments`, `timeSlot`, `patient`), methods (`addWalkInPatient`, `scheduleAppointment`, `processNextWalkIn`, `viewWalkInQueue`, `isTimeSlotBooked`), and classes are named descriptively.
 * *   **Comments:** Comments are included to explain the purpose of classes, methods, data structures, and specific logic (like the conflict check or input handling).
 * *   **Input Validation:** Basic validation is performed for patient names and time slots (checking for emptiness). `try-catch` handles invalid input *type* for the menu choice.
 * *   **Error Handling:** `System.err` is used for errors, and `try-catch` blocks handle potential exceptions, making the program more robust against invalid user input.
 * *   **Clean Code Structure:** The code is organized into logical methods, and the main loop in `main` orchestrates the calls to these methods based on user input.
 * 
 * This solution effectively demonstrates the required Java components and programming principles within a simulated real-world context, providing a solid base for evaluating a student's understanding.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList implements Queue
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Class representing a Patient
class Patient {
    private static int nextPatientId = 1; // To generate unique IDs
    private int id;
    private String name;

    public Patient(String name) {
        this.id = nextPatientId++;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name + " (ID: " + id + ")";
    }
}

// Class representing an Appointment
class Appointment {
    private Patient patient;
    private String timeSlot; // Using String for simplicity (e.g., "10:30")

    public Appointment(Patient patient, String timeSlot) {
        this.patient = patient;
        this.timeSlot = timeSlot;
    }

    public Patient getPatient() {
        return patient;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "- " + patient.getName() + " (ID: " + patient.getId() + ") at " + timeSlot;
    }
}

// Main class for the Hospital Scheduler system
public class HospitalScheduler {

    // Required: Queue for walk-in patients (FIFO)
    private Queue<Patient> walkInQueue;

    // Required: List for scheduled appointments (using ArrayList as concrete implementation)
    private List<Appointment> scheduledAppointments;

    private Scanner scanner; // Required: Scanner for user input

    public HospitalScheduler() {
        // Initialize the required data structures
        this.walkInQueue = new LinkedList<>(); // LinkedList implements Queue
        this.scheduledAppointments = new ArrayList<>(); // Using ArrayList as concrete implementation
        this.scanner = new Scanner(System.in);
    }

    // Method to add a walk-in patient
    public void addWalkInPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        // Basic input validation
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return; // Exit method if input is invalid
        }

        Patient patient = new Patient(name);
        walkInQueue.offer(patient); // Add patient to the end of the queue
        System.out.println(patient.getName() + " added to walk-in queue.");
    }

    // Method to schedule an appointment
    public void scheduleAppointment() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine().trim();

        // Basic input validation
        if (name.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        System.out.print("Enter time slot (e.g., HH:MM): ");
        String timeSlot = scanner.nextLine().trim();

        // Basic time slot validation (can be enhanced)
        if (timeSlot.isEmpty()) {
             System.err.println("Error: Time slot cannot be empty.");
             return;
        }

        // Check for time slot conflict
        if (isTimeSlotBooked(timeSlot)) {
            // Required: Use System.err for error messages
            System.err.println("Error: Time slot " + timeSlot + " is already booked.");
            return; // Exit method if conflict exists
        }

        Patient patient = new Patient(name); // Create a new patient for the appointment
        Appointment appointment = new Appointment(patient, timeSlot);
        scheduledAppointments.add(appointment); // Add appointment to the list
        // Required: Use System.out for normal output
        System.out.println("Appointment scheduled for " + patient.getName() + " at " + timeSlot + ".");
    }

    // Helper method to check if a time slot is already booked
    private boolean isTimeSlotBooked(String timeSlot) {
        for (Appointment appointment : scheduledAppointments) {
            if (appointment.getTimeSlot().equals(timeSlot)) {
                return true;
            }
        }
        return false;
    }

    // Method to process the next patient from the walk-in queue
    public void processNextWalkIn() {
        // Check if the queue is empty before processing
        if (walkInQueue.isEmpty()) {
            // Required: Use System.err for error messages
            System.err.println("Error: Walk-in queue is empty. No patients to process.");
        } else {
            Patient nextPatient = walkInQueue.poll(); // Get and remove the head of the queue
            // Required: Use System.out for normal output
            System.out.println("Processing walk-in patient: " + nextPatient.getName() + " (ID: " + nextPatient.getId() + ")");
        }
    }

    // Method to view the walk-in queue
    public void viewWalkInQueue() {
        System.out.println("--- Walk-in Queue ---");
        if (walkInQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Patient patient : walkInQueue) {
                System.out.println(index++ + ". " + patient);
            }
        }
        System.out.println("---------------------");
    }

    // Method to view the scheduled appointments
    public void viewScheduledAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("(No appointments scheduled)");
        } else {
            // Iterate through the list
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
        }
        System.out.println("----------------------------");
    }

    // Method to display the main menu
    private void displayMenu() {
        System.out.println("\n--- Hospital Scheduler Menu ---");
        System.out.println("1. Add Walk-in Patient");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. Process Next Walk-in");
        System.out.println("4. View Walk-in Queue");
        System.out.println("5. View Scheduled Appointments");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    // Main method to run the scheduler
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        boolean running = true;

        // Required: Class-wide exception handling with try-catch blocks
        try {
            while (running) {
                scheduler.displayMenu();

                int choice = -1; // Default value for choice

                // Try-catch block for handling potential non-integer input
                try {
                    choice = scheduler.scanner.nextInt();
                } catch (InputMismatchException e) {
                    // Required: Use System.err for error messages
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scheduler.scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the while loop
                } finally {
                    scheduler.scanner.nextLine(); // Consume the newline character left by nextInt()
                }

                // Required: Use switch statement for flow control
                switch (choice) {
                    case 1:
                        scheduler.addWalkInPatient();
                        break;
                    case 2:
                        scheduler.scheduleAppointment();
                        break;
                    case 3:
                        scheduler.processNextWalkIn();
                        break;
                    case 4:
                        scheduler.viewWalkInQueue();
                        break;
                    case 5:
                        scheduler.viewScheduledAppointments();
                        break;
                    case 6:
                        running = false; // Set flag to exit the loop
                        System.out.println("Exiting scheduler.");
                        break;
                    default:
                        // Required: Use System.err for error messages
                        System.err.println("Error: Invalid menu choice. Please enter a number between 1 and 6.");
                }
            }
        } catch (Exception e) {
            // General catch block for any unexpected exceptions
            // Required: Use System.err for error messages
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Close the scanner resource
            if (scheduler.scanner != null) {
                scheduler.scanner.close();
            }
        }
    }
}
