/*
 * Exam Question #1133
 * Generated on: 2025-05-12 17:29:22
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified hospital appointment management system. The system needs to handle patient registration and manage a waiting list for doctor consultations. Patients arrive, register, are added to a waiting queue, and are called in order. The system should be interactive, allowing hospital staff to perform different actions via a command-line interface.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `id` (an integer, auto-generated), `name` (String), and `age` (int). Include a constructor and public getter methods for these fields. Implement a meaningful `toString()` method for easy printing.
 * 2.  **System Core:** Create a main class (e.g., `HospitalScheduler`) that manages the system.
 * 3.  **Data Structures:**
 *     *   Maintain a list of *all* registered patients using an `ArrayList`.
 *     *   Maintain the *current* waiting list using a `Queue`. Patients should be added to the queue upon registration.
 * 4.  **User Interface:** Implement a command-line interface using `java.util.Scanner`. The system should present a menu with the following options:
 *     *   `1. Register New Patient`: Prompts for patient name and age. Creates a `Patient` object, adds it to the list of all registered patients and the waiting queue. Assigns a unique ID (simple counter is fine).
 *     *   `2. View Waiting List`: Displays the patients currently in the waiting queue, in order.
 *     *   `3. Call Next Patient`: Removes the patient at the front of the queue and prints a message indicating they are being called. Handles the case where the queue is empty.
 *     *   `4. Exit`: Terminates the program.
 * 5.  **Flow Control:** Use a `switch` statement to handle the different menu options selected by the user.
 * 6.  **Input Validation & Error Handling:**
 *     *   Validate user input where necessary (e.g., ensuring age is a positive integer, menu choice is valid).
 *     *   Use `System.err` to print error messages for invalid operations (e.g., trying to call a patient when the queue is empty) or invalid input.
 *     *   Use `System.out` for normal output (menu, prompts, success messages, listing patients).
 *     *   Implement class-wide exception handling using `try-catch` blocks within the main operational loop or methods to gracefully handle unexpected errors (e.g., non-integer input when expecting a number).
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments and documentation (like Javadoc) where appropriate.
 *     *   Ensure proper encapsulation in the `Patient` class.
 *     *   Structure the code cleanly into methods.
 *     *   Use the `List` interface type where appropriate (e.g., for the `ArrayList` variable or method parameters).
 * 
 * **Expected Output:**
 * 
 * The system should run interactively, displaying a menu, prompting for input based on the chosen option, and providing feedback (success messages, waiting list display, error messages) using `System.out` and `System.err` as specified.
 * 
 * Example Interaction Snippet:
 * 
 * ```
 * Hospital Appointment Scheduler
 * Menu:
 * 1. Register New Patient
 * 2. View Waiting List
 * 3. Call Next Patient
 * 4. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient age: 30
 * Patient Alice (ID: 1) registered and added to waiting list.
 * 
 * Enter your choice: 1
 * Enter patient name: Bob
 * Enter patient age: 25
 * Patient Bob (ID: 2) registered and added to waiting list.
 * 
 * Enter your choice: 2
 * Waiting List:
 * [ID: 1, Name: Alice, Age: 30]
 * [ID: 2, Name: Bob, Age: 25]
 * 
 * Enter your choice: 3
 * Calling next patient: [ID: 1, Name: Alice, Age: 30]
 * 
 * Enter your choice: 3
 * Calling next patient: [ID: 2, Name: Bob, Age: 25]
 * 
 * Enter your choice: 3
 * System.err: Waiting list is empty. No patient to call.
 * 
 * Enter your choice: 5
 * System.err: Invalid choice. Please enter a number between 1 and 4.
 * 
 * Enter your choice: 4
 * Exiting system.
 * ```
 * 
 * **Constraints:**
 * 
 * *   You *must* use `java.util.Queue`, `java.util.ArrayList`, `java.util.List`, `java.util.Scanner`, `switch` statement, `System.err`, `System.out`, and `try-catch` blocks as specified.
 * *   The solution should be a single Java file containing all necessary classes.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on correctness, adherence to all requirements (including component usage and best practices), robustness (error handling, input validation), and code clarity.
 *
 * EXPLANATION:
 * The provided solution implements a simplified Hospital Appointment Management System as requested, demonstrating the required Java concepts and best practices.
 * 
 * **Overall Structure:**
 * 
 * The solution consists of two classes:
 * 1.  `Patient`: A simple class to model a patient with `id`, `name`, and `age`. It follows encapsulation principles with private fields and public getters. The `toString()` method provides a convenient way to print patient information.
 * 2.  `HospitalScheduler`: The main class containing the system logic. It holds the data structures (`Queue` and `List`), the `Scanner`, and methods for each system operation (`registerNewPatient`, `viewWaitingList`, `callNextPatient`). The `runSystem` method orchestrates the main loop, menu display, and user interaction.
 * 
 * **Required Component Usage:**
 * 
 * 1.  **`java.util.Queue`**: The `waitingList` is declared as a `Queue<Patient>` and initialized with a `LinkedList`. The `LinkedList` class implements the `Queue` interface, making it suitable for managing a First-In, First-Out (FIFO) waiting list. Patients are added using `offer()` in `registerNewPatient` and removed using `poll()` in `callNextPatient`.
 * 2.  **`java.util.ArrayList`**: The `registeredPatients` is declared as an `List<Patient>` and initialized with an `ArrayList`. This list stores a record of *all* patients who have ever registered, separate from the current waiting queue. Patients are added to this list in `registerNewPatient`.
 * 3.  **`java.util.List` interface**: The `registeredPatients` variable is declared using the `List` interface type (`List<Patient> registeredPatients = new ArrayList<>();`). This is a best practice as it allows flexibility to change the underlying implementation (e.g., to `LinkedList`) later without modifying code that interacts with the variable using only `List` methods.
 * 4.  **`java.util.Scanner`**: A `Scanner` object is used to read user input from `System.in` in the `runSystem` method and within `registerNewPatient`.
 * 5.  **`switch` statement**: A `switch` statement in the `runSystem` method is used to direct the program flow based on the user's integer choice from the menu.
 * 6.  **`System.err`**: `System.err.println()` is used to print error messages, specifically when:
 *     *   The user enters an invalid menu choice.
 *     *   The user enters non-integer input for the menu choice or patient age.
 *     *   The user tries to call the next patient when the `waitingList` is empty.
 *     *   The user enters a non-positive age.
 * 7.  **`System.out`**: `System.out.println()` is used for all normal output, including the menu, prompts for input, confirmation messages after registration, and displaying the contents of the waiting list.
 * 8.  **Class-wide exception handling (`try-catch`)**: The core user interaction loop within `runSystem` is wrapped in a `try-catch` block. This block specifically catches `NumberFormatException` that might occur if the user enters non-integer text when an integer (like the menu choice) is expected. A general `Exception` catch is also included as a fallback for any other unexpected runtime errors, printing an error message to `System.err`. Specific validation with `try-catch` is also used within `registerNewPatient` for the age input.
 * 
 * **Best Practices and Other Concepts:**
 * 
 * *   **Encapsulation:** The `Patient` class fields are private, and access is provided through public getter methods.
 * *   **Meaningful Names:** Variables (`waitingList`, `registeredPatients`, `nextPatientId`), methods (`runSystem`, `registerNewPatient`, `viewWaitingList`, `callNextPatient`, `displayMenu`), and classes are named descriptively.
 * *   **Comments and Documentation:** Javadoc comments are used for classes and methods, explaining their purpose, parameters, and return values. Inline comments clarify specific logic points.
 * *   **Input Validation:** The code checks if the age entered is positive and uses `try-catch` blocks to handle `NumberFormatException` when reading integer inputs (menu choice and age).
 * *   **Error Handling:** Specific error conditions (empty queue, invalid input, invalid choice) are checked, and informative messages are printed to `System.err`.
 * *   **Clean Code Structure:** The logic is divided into well-defined methods, each responsible for a specific task, making the code more readable and maintainable.
 * *   **`offer()` vs `add()` for Queue:** `offer()` is used to add elements to the queue. While `add()` also works, `offer()` is generally preferred in capacity-constrained queues as it returns `false` on failure instead of throwing an exception. For `LinkedList`, both behave similarly, but `offer()` is the standard `Queue` method for adding.
 * *   **`poll()` vs `remove()` for Queue:** `poll()` is used to retrieve and remove the head of the queue. It returns `null` if the queue is empty, which is handled gracefully by the code to print an error message. `remove()` would throw a `NoSuchElementException` if the queue is empty, which would require additional specific `try-catch` or a check with `isEmpty()` before calling `remove()`. `poll()` provides a more convenient way to handle the empty case.
 * 
 * This solution effectively demonstrates the required Java components in a practical scenario, incorporating robust error handling, input validation, and good coding practices suitable for an advanced programming exam.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int id;
    private String name;
    private int age;

    /**
     * Constructs a new Patient object.
     *
     * @param id   The unique ID of the patient.
     * @param name The name of the patient.
     * @param age  The age of the patient.
     */
    public Patient(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    // --- Getters ---

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    /**
     * Returns a string representation of the Patient object.
     *
     * @return String representation including ID, Name, and Age.
     */
    @Override
    public String toString() {
        return "[ID: " + id + ", Name: " + name + ", Age: " + age + "]";
    }
}

/**
 * Manages the hospital appointment scheduling system.
 * Handles patient registration, waiting list management, and user interaction.
 */
public class HospitalScheduler {

    // --- Required Data Structures ---
    private Queue<Patient> waitingList; // Queue for patients waiting to be seen
    private List<Patient> registeredPatients; // List of all registered patients
    private Scanner scanner; // Scanner for user input

    private int nextPatientId = 1; // Counter for assigning unique patient IDs

    /**
     * Constructs a new HospitalScheduler.
     * Initializes data structures and the scanner.
     */
    public HospitalScheduler() {
        // Using LinkedList as an implementation for Queue
        this.waitingList = new LinkedList<>();
        // Using ArrayList as an implementation for List
        this.registeredPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Runs the main loop of the hospital scheduling system.
     * Displays menu, reads user input, and processes commands.
     * Includes class-wide exception handling.
     */
    public void runSystem() {
        System.out.println("Hospital Appointment Scheduler");

        boolean running = true;
        while (running) {
            displayMenu();
            System.out.print("Enter your choice: ");

            try {
                // Read the entire line first to avoid issues with nextInt/nextLine mix
                String choiceStr = scanner.nextLine();
                int choice = Integer.parseInt(choiceStr); // Potential NumberFormatException

                // --- Switch Statement for Flow Control ---
                switch (choice) {
                    case 1:
                        registerNewPatient();
                        break;
                    case 2:
                        viewWaitingList();
                        break;
                    case 3:
                        callNextPatient();
                        break;
                    case 4:
                        System.out.println("Exiting system.");
                        running = false;
                        break;
                    default:
                        // --- System.err for Error Messages ---
                        System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                        break;
                }
            } catch (NumberFormatException e) {
                // --- Class-wide Exception Handling ---
                System.err.println("Invalid input. Please enter a number for your choice.");
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Optional: e.printStackTrace(); // For debugging
            }
            System.out.println(); // Add a newline for better readability between operations
        }

        // Close the scanner when the system exits
        scanner.close();
    }

    /**
     * Displays the main menu options to the user.
     * Uses System.out for normal output.
     */
    private void displayMenu() {
        System.out.println("Menu:");
        System.out.println("1. Register New Patient");
        System.out.println("2. View Waiting List");
        System.out.println("3. Call Next Patient");
        System.out.println("4. Exit");
    }

    /**
     * Handles the registration of a new patient.
     * Prompts for name and age, creates a Patient object,
     * adds it to the registered list and the waiting queue.
     * Includes input validation.
     * Uses System.out for prompts and success messages, System.err for errors.
     */
    private void registerNewPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();

        int age = -1; // Initialize with an invalid value
        boolean validAge = false;
        while (!validAge) {
            System.out.print("Enter patient age: ");
            try {
                String ageStr = scanner.nextLine();
                age = Integer.parseInt(ageStr); // Potential NumberFormatException
                if (age <= 0) {
                    // --- System.err for Error Messages ---
                    System.err.println("Age must be a positive number.");
                } else {
                    validAge = true;
                }
            } catch (NumberFormatException e) {
                // --- System.err for Error Messages ---
                System.err.println("Invalid input. Please enter a number for age.");
            }
        }

        // Create patient with auto-generated ID
        Patient newPatient = new Patient(nextPatientId++, name, age);

        // Add patient to both lists
        registeredPatients.add(newPatient); // Add to ArrayList
        waitingList.offer(newPatient);      // Add to Queue (offer is preferred over add as it returns false instead of throwing exception on failure)

        // --- System.out for Normal Output ---
        System.out.println("Patient " + newPatient.getName() + " (ID: " + newPatient.getId() + ") registered and added to waiting list.");
    }

    /**
     * Displays the current patients in the waiting list.
     * Uses System.out for normal output, handles empty list case.
     */
    private void viewWaitingList() {
        // --- System.out for Normal Output ---
        System.out.println("Waiting List:");
        if (waitingList.isEmpty()) {
            System.out.println("The waiting list is currently empty.");
        } else {
            // Iterate through the queue without removing elements
            // LinkedList's toString() method provides a good representation
            // Or iterate explicitly:
             for (Patient patient : waitingList) {
                 System.out.println(patient);
             }
            // Or simply print the queue object itself:
            // System.out.println(waitingList); // This also works but format might vary
        }
    }

    /**
     * Removes and calls the next patient from the waiting list.
     * Uses Queue's poll() method. Handles empty queue case using System.err.
     * Uses System.out for success message.
     */
    private void callNextPatient() {
        Patient nextPatient = waitingList.poll(); // Get and remove the head of the queue

        if (nextPatient == null) {
            // --- System.err for Error Messages ---
            System.err.println("Waiting list is empty. No patient to call.");
        } else {
            // --- System.out for Normal Output ---
            System.out.println("Calling next patient: " + nextPatient);
        }
    }

    /**
     * Main method to start the HospitalScheduler application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.runSystem();
    }
}
