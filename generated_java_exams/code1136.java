/*
 * Exam Question #1136
 * Generated on: 2025-05-12 17:29:55
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Process Automation Queue Manager
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line application to simulate a Process Automation Queue Manager. This system manages tasks that need to be processed sequentially (First-In, First-Out) and keeps a log of completed tasks.
 * 
 * The system should allow users to interact via a menu to perform operations on the task queue.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Representation:** Create a class `Task` to represent a unit of work. Each `Task` must have:
 *     *   A unique description (String).
 *     *   A priority level (String: "High" or "Normal").
 *     *   Implement proper encapsulation (private fields, public getters).
 *     *   Provide a meaningful `toString()` method for easy display.
 * 
 * 2.  **Core Management Class:** Create a class `ProcessQueueManager` that contains the main logic. This class must manage:
 *     *   A queue of pending `Task` objects (`java.util.Queue`).
 *     *   A list of completed `Task` objects (`java.util.List`, specifically using `java.util.ArrayList`).
 * 
 * 3.  **User Interface:** Implement a command-line interface using `java.util.Scanner` that presents a menu with the following options:
 *     *   1. Add New Task
 *     *   2. Process Next Task
 *     *   3. List Pending Tasks
 *     *   4. List Completed Tasks
 *     *   5. Exit
 * 
 * 4.  **Functionality Details:**
 *     *   **Add New Task:**
 *         *   Prompt the user for the task description and priority ("High" or "Normal").
 *         *   **Input Validation:**
 *             *   The description cannot be empty or just whitespace.
 *             *   The priority must be either "High" or "Normal" (case-insensitive).
 *         *   If input is invalid, display an error message using `System.err` and do *not* add the task.
 *         *   If input is valid, create a `Task` object and add it to the *end* of the pending task queue.
 *         *   Display a confirmation message using `System.out`.
 *     *   **Process Next Task:**
 *         *   Take the task from the *front* of the pending task queue.
 *         *   If the queue is empty, display a message using `System.out` indicating no tasks are pending.
 *         *   If a task is processed, remove it from the pending queue and add it to the *end* of the completed tasks list.
 *         *   Display a message using `System.out` indicating which task was processed.
 *     *   **List Pending Tasks:**
 *         *   Display all tasks currently in the pending queue using `System.out`.
 *         *   If the queue is empty, display a message using `System.out`.
 *         *   Display tasks in their queue order.
 *     *   **List Completed Tasks:**
 *         *   Display all tasks currently in the completed tasks list using `System.out`.
 *         *   If the list is empty, display a message using `System.out`.
 *         *   Display tasks in the order they were completed.
 *     *   **Exit:** Terminate the program.
 * 
 * 5.  **Control Flow:** Use a `switch` statement within a loop to handle the user's menu choice.
 * 
 * 6.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors (e.g., issues with input).
 *     *   Display error messages for unexpected exceptions using `System.err`.
 * 
 * 7.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Ensure clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompts for input, confirmations, task lists, and error messages as described above.
 * 
 * Example interaction flow (user input is underlined):
 * 
 * ```
 * Process Automation Queue Manager
 * Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 5. Exit
 * Enter your choice:
 * <u>1</u>
 * Enter task description: <u>Analyze Report</u>
 * Enter priority (High/Normal): <u>High</u>
 * Task added: [Description: Analyze Report, Priority: High]
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>1</u>
 * Enter task description: <u>Write Email</u>
 * Enter priority (High/Normal): <u>normal</u>
 * Task added: [Description: Write Email, Priority: Normal]
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>3</u>
 * --- Pending Tasks ---
 * 1. [Description: Analyze Report, Priority: High]
 * 2. [Description: Write Email, Priority: Normal]
 * ---------------------
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>2</u>
 * Processed task: [Description: Analyze Report, Priority: High]
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>3</u>
 * --- Pending Tasks ---
 * 1. [Description: Write Email, Priority: Normal]
 * ---------------------
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>4</u>
 * --- Completed Tasks ---
 * 1. [Description: Analyze Report, Priority: High]
 * -----------------------
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>2</u>
 * Processed task: [Description: Write Email, Priority: Normal]
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>2</u>
 * No pending tasks to process.
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>4</u>
 * --- Completed Tasks ---
 * 1. [Description: Analyze Report, Priority: High]
 * 2. [Description: Write Email, Priority: Normal]
 * -----------------------
 * 
 * Menu:
 * ...
 * Enter your choice:
 * <u>5</u>
 * Exiting system.
 * ```
 * 
 * **Time Limit:** 45-60 minutes
 *
 * EXPLANATION:
 * This solution implements the `Process Automation Queue Manager` application, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   Represents a single task with `description` and `priority` fields.
 *     *   Fields are `private` enforcing encapsulation.
 *     *   Public `getters` provide controlled access to the data.
 *     *   The `toString()` method is overridden to provide a user-friendly representation of a `Task` object when printed.
 * 
 * 2.  **`ProcessQueueManager` Class:**
 *     *   This is the main class orchestrating the application logic.
 *     *   It has two private fields:
 *         *   `pendingTasks`: Declared as `Queue<Task>`, initialized with a `LinkedList`. `LinkedList` is chosen because it implements the `Queue` interface and provides efficient FIFO operations (`offer` for adding, `poll` for removing from the front).
 *         *   `completedTasks`: Declared as `List<Task>`, initialized with an `ArrayList`. `ArrayList` is suitable for storing completed tasks as a dynamic list where elements are added sequentially to the end (`add`). Using the `List` interface for the variable type (`List<Task> completedTasks`) demonstrates programming to interfaces, a key OOP principle.
 *     *   The constructor initializes these collections.
 * 
 * 3.  **User Interface and Control Flow (`run` method):**
 *     *   The `run` method contains the main application loop.
 *     *   A `Scanner` is used to read user input from `System.in`. The `try-with-resources` block ensures the `Scanner` is properly closed when the program exits the `try` block.
 *     *   The `displayMenu` method prints the available options using `System.out`.
 *     *   The core logic is within a `while(running)` loop.
 *     *   Inside the loop, a `try-catch` block is used for **class-wide exception handling**. This block wraps the reading of user input and the `switch` statement execution. If any unexpected exception occurs during the processing of a command, it will be caught here, an error message printed to `System.err`, and the loop continues, preventing the program from crashing.
 *     *   User input for the menu choice is read using `scanner.nextLine()` and then parsed to an integer. A `NumberFormatException` is handled implicitly by the inner `try-catch` (or explicitly if a specific catch were added) if the input is not a valid number, resulting in `choice` remaining -1, which falls into the `default` case of the `switch`.
 *     *   A `switch` statement is used to direct execution based on the user's integer choice, calling the appropriate private methods (`addTask`, `processNextTask`, `listPendingTasks`, `listCompletedTasks`) or setting the `running` flag to `false` for the exit option.
 *     *   `System.out` is used for all normal output like the menu, prompts, confirmations, and task listings.
 *     *   `System.err` is used specifically for displaying error messages (input validation errors and caught exceptions).
 * 
 * 4.  **Functionality Methods (`addTask`, `processNextTask`, `listPendingTasks`, `listCompletedTasks`):**
 *     *   These methods encapsulate the specific logic for each menu option. They are `private` as they are internal helpers for the `run` method.
 *     *   `addTask`: Prompts for description and priority using `System.out`. Reads input using the passed `Scanner`. Includes **input validation**: checks if the description is empty after trimming, and checks if the priority is "High" or "Normal" (case-insensitive). Validation failures result in an error message to `System.err` and the method returning early. Valid tasks are added to the `pendingTasks` queue using `offer()`.
 *     *   `processNextTask`: Uses `pendingTasks.poll()` to retrieve and remove the next task. `poll()` is safe for empty queues (returns `null`). If `null`, a message is printed to `System.out`. Otherwise, the task is added to the `completedTasks` list using `add()`, and a confirmation message is printed to `System.out`.
 *     *   `listPendingTasks`: Checks if `pendingTasks` is empty. If not, it iterates through the queue using a for-each loop (which traverses without removing elements) and prints each task using `System.out` and the `Task`'s `toString()` method.
 *     *   `listCompletedTasks`: Checks if `completedTasks` is empty. If not, it iterates through the `ArrayList` and prints each task using `System.out`.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Fields in `Task` and `ProcessQueueManager` are private.
 *     *   **Meaningful Names:** Variable names (`pendingTasks`, `completedTasks`, `description`, `priority`, `choice`, `running`) and method names (`addTask`, `processNextTask`, `listPendingTasks`, `listCompletedTasks`, `displayMenu`, `run`) are descriptive.
 *     *   **Comments/Documentation:** Javadoc comments explain the purpose of classes and methods. Inline comments clarify specific logic points.
 *     *   **Input Validation:** Explicit checks for empty description and valid priority are performed, with errors directed to `System.err`.
 *     *   **Error Handling:** The main `try-catch` block in `run` provides a safety net for unexpected issues, and validation errors are handled specifically within `addTask`. `System.err` is used for error output.
 *     *   **Clean Code Structure:** The logic is divided into small, focused methods. The `main` method is minimal, simply creating the manager object and calling `run`.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `Switch`, `System.err`, `System.out`, `try-catch`) within a practical, object-oriented structure, demonstrating advanced understanding of Java programming principles.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Represents a single task in the process automation queue.
 */
class Task {
    private String description;
    private String priority; // "High" or "Normal"

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task.
     * @param priority    The priority of the task ("High" or "Normal").
     */
    public Task(String description, String priority) {
        this.description = description;
        this.priority = priority;
    }

    /**
     * Gets the description of the task.
     *
     * @return The task description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the priority of the task.
     *
     * @return The task priority ("High" or "Normal").
     */
    public String getPriority() {
        return priority;
    }

    /**
     * Provides a string representation of the Task.
     *
     * @return A formatted string including description and priority.
     */
    @Override
    public String toString() {
        return "[Description: " + description + ", Priority: " + priority + "]";
    }
}

/**
 * Manages a queue of pending tasks and a list of completed tasks.
 * Provides a command-line interface for interaction.
 */
public class ProcessQueueManager {

    // Queue to hold tasks waiting to be processed (FIFO)
    private Queue<Task> pendingTasks;

    // List to hold tasks that have been completed
    private List<Task> completedTasks;

    /**
     * Constructs a new ProcessQueueManager, initializing the task collections.
     */
    public ProcessQueueManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nProcess Automation Queue Manager");
        System.out.println("Menu:");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. List Pending Tasks");
        System.out.println("4. List Completed Tasks");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task to the pending queue based on user input.
     * Includes input validation.
     *
     * @param scanner The Scanner object for reading user input.
     */
    private void addTask(Scanner scanner) {
        System.out.print("Enter task description: ");
        String description = scanner.nextLine().trim(); // Read description and trim whitespace

        // Validate description
        if (description.isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return; // Exit method if validation fails
        }

        System.out.print("Enter priority (High/Normal): ");
        String priority = scanner.nextLine().trim(); // Read priority and trim

        // Validate priority (case-insensitive)
        if (!priority.equalsIgnoreCase("High") && !priority.equalsIgnoreCase("Normal")) {
            System.err.println("Error: Invalid priority. Must be 'High' or 'Normal'.");
            return; // Exit method if validation fails
        }

        // Create task and add to the queue
        Task newTask = new Task(description, priority);
        pendingTasks.offer(newTask); // offer is preferred for queues; returns false on failure, doesn't throw exception
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task from the pending queue.
     * Moves the processed task to the completed list.
     */
    private void processNextTask() {
        Task nextTask = pendingTasks.poll(); // Retrieve and remove the head of the queue, or return null if empty

        if (nextTask == null) {
            System.out.println("No pending tasks to process.");
        } else {
            completedTasks.add(nextTask); // Add to the end of the completed list
            System.out.println("Processed task: " + nextTask);
        }
    }

    /**
     * Lists all tasks currently in the pending queue.
     */
    private void listPendingTasks() {
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            System.out.println("--- Pending Tasks ---");
            int index = 1;
            // Iterate over the queue elements without removing them
            for (Task task : pendingTasks) {
                System.out.println(index++ + ". " + task);
            }
            System.out.println("---------------------");
        }
    }

    /**
     * Lists all tasks that have been completed.
     */
    private void listCompletedTasks() {
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            System.out.println("--- Completed Tasks ---");
            int index = 1;
            // Iterate over the list elements
            for (Task task : completedTasks) {
                System.out.println(index++ + ". " + task);
            }
            System.out.println("-----------------------");
        }
    }

    /**
     * Runs the main application loop, handling user input and menu choices.
     * Includes the main exception handling block.
     */
    public void run() {
        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            boolean running = true;

            while (running) {
                displayMenu();
                try {
                    // Read the entire line to avoid issues with nextInt/nextLine mix
                    String choiceStr = scanner.nextLine();
                    int choice = -1; // Default invalid choice

                    // Attempt to parse the choice string to an integer
                    try {
                         choice = Integer.parseInt(choiceStr);
                    } catch (NumberFormatException e) {
                         // choice remains -1, handled by the switch default case
                    }


                    // Use switch statement for menu control
                    switch (choice) {
                        case 1:
                            addTask(scanner); // Pass scanner to methods that need input
                            break;
                        case 2:
                            processNextTask();
                            break;
                        case 3:
                            listPendingTasks();
                            break;
                        case 4:
                            listCompletedTasks();
                            break;
                        case 5:
                            running = false; // Set flag to exit loop
                            System.out.println("Exiting system.");
                            break;
                        default:
                            System.out.println("Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (Exception e) {
                    // Catch any unexpected exceptions during command processing
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    // Optionally print stack trace for debugging during development/testing
                    // e.printStackTrace();
                }
            }
        } // Scanner is automatically closed here by try-with-resources
    }

    /**
     * Main method to start the application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProcessQueueManager manager = new ProcessQueueManager();
        manager.run(); // Start the main application loop
    }
}
