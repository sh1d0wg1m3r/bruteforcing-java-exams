/*
 * Exam Question #328
 * Generated on: 2025-05-11 22:56:05
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Flight Boarding Management System
 * 
 * **Objective:** Develop a simplified system to manage the boarding process for a single flight at an airport gate. This task requires demonstrating proficiency in using fundamental Java collections, input handling, control flow, and exception handling.
 * 
 * **Scenario:** Passengers arrive at the gate and join a waiting line (queue). A gate agent can board passengers one by one from the front of the line. The system needs to track both passengers waiting to board and those who have successfully boarded.
 * 
 * **Requirements:**
 * 
 * 1.  **`Passenger` Class:**
 *     *   Create a public class named `Passenger`.
 *     *   It must have private fields: `boardingPassNumber` (an `int`) and `name` (a `String`).
 *     *   Include a constructor `Passenger(int boardingPassNumber, String name)` to initialize these fields.
 *     *   Provide public getter methods: `getBoardingPassNumber()` and `getName()`.
 *     *   Override the `toString()` method to return a formatted string representing the passenger (e.g., `"[Pass: 123, Name: Alice]"`).
 * 
 * 2.  **`BoardingManager` Class:**
 *     *   Create a public class named `BoardingManager`.
 *     *   It must contain a private field `waitingQueue` of type `java.util.Queue<Passenger>`. Use `java.util.LinkedList` as the concrete implementation.
 *     *   It must contain a private field `boardedList` of type `java.util.List<Passenger>`. Use `java.util.ArrayList` as the concrete implementation.
 *     *   Implement a constructor to initialize `waitingQueue` and `boardedList`.
 *     *   Implement the following private methods (called internally by `runSystem`):
 *         *   `displayMenu()`: Prints the main menu options to `System.out`.
 *         *   `addPassenger(Scanner scanner)`: Prompts the user to enter passenger name and boarding pass number. Reads input using the provided `Scanner`. Validates that the boarding pass number is a positive integer and is unique across *both* the `waitingQueue` and `boardedList`. If valid and unique, creates a `Passenger` object and adds it to the `waitingQueue`. Uses `System.out` for prompts/confirmations and `System.err` for validation errors. Handles potential `InputMismatchException` during number input.
 *         *   `boardNextPassenger()`: Removes the passenger from the front of the `waitingQueue` and adds them to the `boardedList`. If the `waitingQueue` is empty, prints an error message to `System.err`. Uses `System.out` for successful boarding messages.
 *         *   `listWaitingPassengers()`: Prints the details of all passengers currently in the `waitingQueue` to `System.out`.
 *         *   `listBoardedPassengers()`: Prints the details of all passengers who have been boarded to `System.out`.
 *     *   Implement a private helper method `isPassNumberUnique(int passNumber)` that checks if the given boarding pass number already exists in either `waitingQueue` or `boardedList`. Returns `true` if unique, `false` otherwise.
 *     *   Implement a public method `runSystem()`:
 *         *   This method should contain the main application loop.
 *         *   It should create a single `java.util.Scanner` instance for reading user input.
 *         *   Inside the loop, it should call `displayMenu()`, read the user's choice using the `Scanner`, and use a `switch` statement to call the appropriate private method (`addPassenger`, `boardNextPassenger`, etc.).
 *         *   The loop should continue until the user selects the "Exit" option.
 *         *   Implement **class-wide exception handling** using a `try-catch` block around the main loop in `runSystem` to catch potential unexpected errors.
 *         *   Implement specific exception handling for `InputMismatchException` when reading the menu choice within the loop. Use `System.err` for error messages.
 *         *   Ensure the `Scanner` is properly closed when the `runSystem` method finishes or exits due to an exception.
 * 
 * 3.  **Main Method:**
 *     *   Include a `main` method (can be in `BoardingManager` or a separate class) that creates an instance of `BoardingManager` and calls its `runSystem()` method to start the application.
 * 
 * **General Requirements & Best Practices:**
 * 
 * *   Use `java.util.Scanner` for all user input.
 * *   Use a `switch` statement for menu navigation in `runSystem`.
 * *   Use `System.err` exclusively for printing error messages.
 * *   Use `System.out` for all normal output (menu, prompts, confirmations, lists).
 * *   Implement robust input validation (positive, unique boarding pass number) and handle input format errors (`InputMismatchException`).
 * *   Ensure proper encapsulation (private fields, public/private methods as appropriate).
 * *   Use meaningful variable and method names.
 * *   Include basic comments to explain key parts of the code.
 * 
 * **Expected Output:** The system should present a menu, accept user input for operations, display results or errors, and terminate gracefully upon selecting the exit option. Error messages should appear on `System.err`.
 * 
 * **Time Limit:** 45-60 minutes
 *
 * EXPLANATION:
 * This solution implements a `Flight Boarding Management System` as described in the exam question, utilizing all the required Java components and adhering to best practices.
 * 
 * 1.  **`Passenger` Class:** A simple class representing a passenger with a boarding pass number and name. It follows encapsulation with private fields and public getters. The `toString()` method provides a convenient way to print passenger information.
 * 
 * 2.  **`BoardingManager` Class:**
 *     *   **Collections:** It correctly uses a `java.util.Queue<Passenger>` (`LinkedList` implementation) for the waiting line, leveraging the FIFO (First-In, First-Out) nature of a queue for boarding. It uses a `java.util.List<Passenger>` (`ArrayList` implementation) to store passengers who have been boarded, providing a dynamic list to keep track of completed boardings.
 *     *   **Encapsulation:** The collection fields (`waitingQueue`, `boardedList`) are private, and operations are exposed through public or private methods.
 *     *   **`displayMenu()`:** A simple method to print the options available to the user.
 *     *   **`addPassenger(Scanner scanner)`:** This method handles adding a passenger. It prompts for input using `System.out`. It includes a loop to repeatedly ask for the boarding pass number until valid, positive, and unique input is provided. It uses a `try-catch` block to handle `InputMismatchException` if the user enters non-integer input for the pass number, printing the error to `System.err` and consuming the invalid input line. It calls the `isPassNumberUnique` helper method for validation. If successful, it creates a `Passenger` object and adds it to the `waitingQueue` using `offer()`.
 *     *   **`isPassNumberUnique(int passNumber)`:** This private helper method demonstrates iterating through both the `waitingQueue` and `boardedList` to check if a given boarding pass number already exists.
 *     *   **`boardNextPassenger()`:** This method simulates boarding. It uses `waitingQueue.poll()` to retrieve and remove the element at the head of the queue. If `poll()` returns `null`, it means the queue was empty, and an error is printed to `System.err`. Otherwise, the removed `Passenger` is added to the `boardedList` using `add()`, and a success message is printed to `System.out`.
 *     *   **`listWaitingPassengers()`:** Iterates through the `waitingQueue` (without removing elements) and prints each passenger's details using the `toString()` method to `System.out`.
 *     *   **`listBoardedPassengers()`:** Iterates through the `boardedList` and prints each passenger's details to `System.out`.
 *     *   **`runSystem()`:** This is the core method driving the application.
 *         *   It creates a single `Scanner` instance used throughout the system's lifetime.
 *         *   The main logic is wrapped in a `while(true)` loop that continues until explicitly exited.
 *         *   A `try-catch` block specifically handles `InputMismatchException` when reading the user's menu choice, printing an error to `System.err` and using `continue` to restart the loop, prompting for input again. The `scanner.nextLine()` call after `nextInt()` is crucial to consume the leftover newline character.
 *         *   A `switch` statement directs execution based on the valid menu choice.
 *         *   A **class-wide `try-catch(Exception e)`** block surrounds the main `while` loop. This demonstrates catching any unexpected runtime exceptions that might occur within the system's operation, printing a generic error message and the stack trace to `System.err`.
 *         *   A `finally` block ensures that the `scanner.close()` method is called regardless of whether the loop exits normally (via `return` for option 5) or due to an unhandled exception, preventing resource leaks.
 * 
 * 3.  **Main Method:** The `main` method serves as the application entry point. It instantiates `BoardingManager` and calls `runSystem()` to start the interactive process.
 * 
 * This solution effectively demonstrates the required Java components in a practical context, incorporating essential programming practices like input validation, error handling (using `try-catch` and `System.err`), proper use of `System.out`, structured control flow (`switch`, loops), and basic object-oriented design principles.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a passenger with a boarding pass number and name.
 */
class Passenger {
    private final int boardingPassNumber;
    private final String name;

    /**
     * Constructs a new Passenger.
     * @param boardingPassNumber The unique boarding pass number.
     * @param name The passenger's name.
     */
    public Passenger(int boardingPassNumber, String name) {
        this.boardingPassNumber = boardingPassNumber;
        this.name = name;
    }

    /**
     * Gets the passenger's boarding pass number.
     * @return The boarding pass number.
     */
    public int getBoardingPassNumber() {
        return boardingPassNumber;
    }

    /**
     * Gets the passenger's name.
     * @return The passenger's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the passenger.
     * @return Formatted passenger string.
     */
    @Override
    public String toString() {
        return "[Pass: " + boardingPassNumber + ", Name: " + name + "]";
    }
}

/**
 * Manages the flight boarding process using a waiting queue and a boarded list.
 */
public class BoardingManager {

    // Queue to hold passengers waiting to board
    private Queue<Passenger> waitingQueue;
    // List to hold passengers who have successfully boarded
    private List<Passenger> boardedList;

    /**
     * Constructs a new BoardingManager, initializing the waiting queue and boarded list.
     */
    public BoardingManager() {
        this.waitingQueue = new LinkedList<>(); // LinkedList implements Queue
        this.boardedList = new ArrayList<>();   // ArrayList implements List
    }

    /**
     * Displays the main menu options to the console.
     */
    private void displayMenu() {
        System.out.println("--- Flight Boarding Menu ---");
        System.out.println("1. Add Passenger to Queue");
        System.out.println("2. Board Next Passenger");
        System.out.println("3. List Waiting Passengers");
        System.out.println("4. List Boarded Passengers");
        System.out.println("5. Exit");
        System.out.println("----------------------------");
    }

    /**
     * Adds a new passenger to the waiting queue after validating input and uniqueness.
     * Handles input errors using try-catch and prints errors to System.err.
     * @param scanner The Scanner object to read user input.
     */
    private void addPassenger(Scanner scanner) {
        System.out.println("--- Add Passenger ---");
        String name = "";
        int passNumber = -1;

        System.out.print("Enter passenger name: ");
        name = scanner.nextLine(); // Read the name

        boolean validInput = false;
        while (!validInput) {
            System.out.print("Enter boarding pass number: ");
            try {
                passNumber = scanner.nextInt();
                scanner.nextLine(); // Consume the newline left-over after reading int

                if (passNumber <= 0) {
                    System.err.println("Error: Boarding pass number must be positive.");
                } else if (isPassNumberUnique(passNumber)) {
                    validInput = true; // Input is valid and unique
                } else {
                    System.err.println("Error: Boarding pass number " + passNumber + " is already in use.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a valid integer for boarding pass number.");
                scanner.nextLine(); // Consume the invalid input line to prevent infinite loop
            }
        }

        // If loop exited, input is valid and unique
        Passenger newPassenger = new Passenger(passNumber, name);
        waitingQueue.offer(newPassenger); // Add to the end of the queue
        System.out.println("Passenger " + name + " (Pass: " + passNumber + ") added to the queue.");
    }

    /**
     * Checks if a given boarding pass number is unique across both
     * the waiting queue and the boarded list.
     * @param passNumber The boarding pass number to check.
     * @return true if the pass number is unique, false otherwise.
     */
    private boolean isPassNumberUnique(int passNumber) {
        // Check waiting queue
        for (Passenger p : waitingQueue) {
            if (p.getBoardingPassNumber() == passNumber) {
                return false; // Found in waiting queue
            }
        }
        // Check boarded list
        for (Passenger p : boardedList) {
            if (p.getBoardingPassNumber() == passNumber) {
                return false; // Found in boarded list
            }
        }
        return true; // Not found in either list, so it's unique
    }

    /**
     * Boards the next passenger from the waiting queue.
     * Removes the passenger from the queue and adds them to the boarded list.
     * Prints an error to System.err if the queue is empty.
     */
    private void boardNextPassenger() {
        System.out.println("--- Board Passenger ---");
        Passenger nextPassenger = waitingQueue.poll(); // Get and remove from the front of the queue

        if (nextPassenger != null) {
            boardedList.add(nextPassenger); // Add to the boarded list
            System.out.println("Boarding passenger: " + nextPassenger.getName() + " (Pass: " + nextPassenger.getBoardingPassNumber() + ")");
            System.out.println("Passenger " + nextPassenger.getName() + " boarded successfully.");
        } else {
            System.err.println("Error: The waiting queue is empty. Cannot board.");
        }
    }

    /**
     * Lists all passengers currently in the waiting queue.
     * Prints to System.out.
     */
    private void listWaitingPassengers() {
        System.out.println("--- Waiting Passengers ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("No passengers currently waiting.");
        } else {
            // Iterate through the queue without removing elements
            waitingQueue.forEach(System.out::println);
        }
    }

    /**
     * Lists all passengers who have been boarded.
     * Prints to System.out.
     */
    private void listBoardedPassengers() {
        System.out.println("--- Boarded Passengers ---");
        if (boardedList.isEmpty()) {
            System.out.println("No passengers have been boarded yet.");
        } else {
            // Iterate through the list
            boardedList.forEach(System.out::println);
        }
    }

    /**
     * Runs the main system loop, displaying the menu and processing user choices.
     * Includes class-wide and specific input exception handling.
     */
    public void runSystem() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("--- Welcome to Flight Boarding System ---");

        try { // Class-wide exception handling for the main loop
            while (true) {
                displayMenu();
                int choice = -1;

                try { // Specific exception handling for reading menu choice
                    System.out.print("Enter your choice: ");
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline left-over after reading int
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input line to prevent infinite loop
                    continue; // Skip the rest of the loop iteration and show menu again
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPassenger(scanner); // Pass scanner for input
                        break;
                    case 2:
                        boardNextPassenger();
                        break;
                    case 3:
                        listWaitingPassengers();
                        break;
                    case 4:
                        listBoardedPassengers();
                        break;
                    case 5:
                        System.out.println("Exiting Boarding System.");
                        return; // Exit the runSystem method
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a blank line for readability after each operation
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(System.err); // Print stack trace to error stream for debugging
        } finally {
            // Ensure scanner is closed when the system exits normally or via exception
            scanner.close();
            // System.out.println("Scanner closed."); // Optional: confirmation
        }
    }

    /**
     * Main method to start the Flight Boarding Management System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        BoardingManager manager = new BoardingManager();
        manager.runSystem();
    }
}
