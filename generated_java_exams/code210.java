/*
 * Exam Question #210
 * Generated on: 2025-05-11 22:32:22
 * Generated by: Account 1
 * 
 * QUESTION:
 * **Java Programming Exam Task: Hospital Appointment Management System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple command-line application to manage patient appointments for a doctor's office. Patients arrive and are added to a waiting queue. When the doctor is ready, they see the next patient from the front of the queue. The system should also keep track of all patients seen during the day.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `id` (int), `name` (String), and `reasonForVisit` (String). Include a constructor and public getter methods for these fields, and override the `toString()` method for easy printing. Ensure proper encapsulation.
 * 
 * 2.  **System Class:** Create a `HospitalAppointmentSystem` class to manage the system's state and operations.
 * 
 * 3.  **Data Structures:**
 *     *   Use a `java.util.Queue<Patient>` to represent the waiting list of patients.
 *     *   Use a `java.util.List<Patient>` (specifically implemented with `java.util.ArrayList`) to store patients who have already been seen by the doctor.
 * 
 * 4.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Implement a command-line menu with the following options:
 *         1.  Add Patient to Waiting Queue
 *         2.  Doctor Sees Next Patient
 *         3.  List Waiting Queue
 *         4.  List Seen Patients
 *         5.  Exit
 * 
 * 5.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 
 * 6.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and listing patient details.
 *     *   Use `System.err` for displaying all error messages (e.g., invalid input, attempting to see a patient when the queue is empty).
 * 
 * 7.  **Input Validation:**
 *     *   Validate the patient ID input to ensure it is a positive integer. Prompt the user again if the input is invalid.
 *     *   Validate menu choices to ensure they are within the valid range (1-5).
 * 
 * 8.  **Exception Handling:**
 *     *   Implement specific `try-catch` blocks to handle expected exceptions such as `InputMismatchException` (for incorrect input types) and `NoSuchElementException` (when trying to remove from an empty queue).
 *     *   Include a general `try-catch` block that wraps the main operational loop of the system (e.g., the `while` loop processing menu choices) to demonstrate class-wide exception handling for any unexpected runtime errors.
 *     *   Ensure the `Scanner` resource is properly closed.
 * 
 * 9.  **Best Practices:** Adhere to best practices including meaningful variable/method names, appropriate comments, and clean code structure.
 * 
 * **Expected Output:**
 * 
 * The program should display the menu, accept user input, perform the requested action, print relevant output or error messages, and repeat until the user chooses to exit.
 * 
 * *   When listing queues/lists, print each patient's details using their `toString()` method.
 * *   Error messages (like "Invalid input", "Queue is empty", "Patient ID must be positive") must be printed to `System.err`.
 * *   Successful operations (like "Patient added", "Doctor is now seeing") should be printed to `System.out`.
 * 
 * Implement the `Patient` and `HospitalAppointmentSystem` classes in a single file for this exam task.
 *
 * EXPLANATION:
 * This solution implements a `HospitalAppointmentSystem` that manages patient flow using a waiting queue and a list of seen patients, fulfilling all the specified requirements.
 * 
 * 1.  **Patient Class:** The `Patient` class is a simple Plain Old Java Object (POJO) with private fields (`id`, `name`, `reasonForVisit`), a constructor to initialize them, and public getter methods. The `toString()` method is overridden to provide a convenient string representation for printing, demonstrating encapsulation and basic object design.
 * 
 * 2.  **Data Structures:**
 *     *   `java.util.Queue<Patient> waitingQueue`: A `LinkedList` is used to implement the `Queue` interface. `LinkedList` is a common choice for queues as it provides efficient insertion and removal at both ends. Patients are added to the tail (`offer` or `add`) and removed from the head (`remove` or `poll`).
 *     *   `java.util.List<Patient> seenPatients`: An `ArrayList` is used to implement the `List` interface. `ArrayList` is suitable here as we primarily add patients to the end and iterate through the list; random access is not a primary requirement but is available.
 * 
 * 3.  **User Interaction and Flow Control:**
 *     *   `java.util.Scanner`: Used throughout the `HospitalAppointmentSystem` to read integer and string input from the user.
 *     *   `displayMenu()`: A helper method to print the available options clearly to `System.out`.
 *     *   `run()` method: Contains the main application loop (`while (choice != 5)`). It repeatedly displays the menu, reads the user's choice, and uses a `switch` statement to direct execution to the appropriate method (`addPatientToQueue`, `doctorSeesNextPatient`, etc.). This demonstrates basic command-line application structure and control flow.
 * 
 * 4.  **Error Handling and Validation:**
 *     *   `System.err`: Used exclusively for printing error messages, separating them from normal output.
 *     *   `InputMismatchException`: Caught when the user enters non-integer input where an integer is expected (e.g., menu choice, patient ID). The invalid input is consumed (`scanner.next()` or `scanner.nextLine()`) within the `catch` block to prevent an infinite loop caused by the scanner repeatedly trying to read the same invalid token.
 *     *   `NoSuchElementException`: Specifically caught in `doctorSeesNextPatient()` when `waitingQueue.remove()` is called on an empty queue. This provides a user-friendly error message instead of crashing the program.
 *     *   Input Validation Loop: The `addPatientToQueue()` method includes a `while (id <= 0)` loop combined with a `try-catch` to ensure the user provides a positive integer for the patient ID before proceeding.
 *     *   Class-wide `try-catch`: The entire `while` loop within the `run()` method is wrapped in a `try-catch(Exception e)`. This demonstrates a safety net for any unexpected runtime errors that might occur elsewhere in the loop, providing a central point for logging or handling unforeseen issues.
 *     *   `finally` block: Used in the `run()` method to ensure the `scanner` resource is closed regardless of whether the loop finishes normally or an exception is caught, preventing resource leaks.
 * 
 * 5.  **Best Practices:**
 *     *   Encapsulation is implemented in the `Patient` class and by making the system's data structures private in `HospitalAppointmentSystem`.
 *     *   Method and variable names are descriptive (e.g., `waitingQueue`, `doctorSeesNextPatient`, `reasonForVisit`).
 *     *   Basic comments explain the purpose of classes, methods, and key code sections.
 *     *   Input validation and specific error handling improve the robustness of the application.
 *     *   The code is structured into logical methods (`addPatientToQueue`, `listWaitingQueue`, etc.) within the main system class, promoting modularity.
 * 
 * This solution effectively combines the required Java components and best practices to simulate a practical scenario, providing a challenging yet solvable problem for an exam.
 */

import java.util.Queue;
import java.util.LinkedList; // Common implementation of Queue
import java.util.List;
import java.util.ArrayList; // Implementation of List
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;

// Represents a patient in the system
class Patient {
    private int id;
    private String name;
    private String reasonForVisit;

    /**
     * Constructs a new Patient object.
     * @param id The unique ID of the patient.
     * @param name The name of the patient.
     * @param reasonForVisit The reason for the patient's visit.
     */
    public Patient(int id, String name, String reasonForVisit) {
        this.id = id;
        this.name = name;
        this.reasonForVisit = reasonForVisit;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getReasonForVisit() {
        return reasonForVisit;
    }

    /**
     * Provides a string representation of the Patient.
     * @return A formatted string with patient details.
     */
    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Reason: " + reasonForVisit;
    }
}

// Manages the hospital appointment system operations
public class HospitalAppointmentSystem {
    // Queue to hold patients waiting to be seen
    private Queue<Patient> waitingQueue;
    // List to hold patients who have already been seen
    private List<Patient> seenPatients;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new HospitalAppointmentSystem, initializing data structures and scanner.
     */
    public HospitalAppointmentSystem() {
        // Initialize waiting queue using LinkedList
        this.waitingQueue = new LinkedList<>();
        // Initialize seen patients list using ArrayList
        this.seenPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System Menu ---");
        System.out.println("1. Add Patient to Waiting Queue");
        System.out.println("2. Doctor Sees Next Patient");
        System.out.println("3. List Waiting Queue");
        System.out.println("4. List Seen Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Prompts the user for patient details and adds a new patient to the waiting queue.
     * Includes input validation for patient ID.
     */
    private void addPatientToQueue() {
        System.out.println("\n--- Add New Patient ---");
        int id = -1;
        String name = "";
        String reason = "";

        // Input validation loop for Patient ID
        while (id <= 0) {
            try {
                System.out.print("Enter Patient ID (positive integer): ");
                id = scanner.nextInt();
                if (id <= 0) {
                    System.err.println("Error: Patient ID must be a positive integer.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for Patient ID.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
                id = -1; // Reset id to keep loop running
            }
        }
        scanner.nextLine(); // Consume the newline character left by nextInt()

        System.out.print("Enter Patient Name: ");
        name = scanner.nextLine();

        System.out.print("Enter Reason for Visit: ");
        reason = scanner.nextLine();

        Patient newPatient = new Patient(id, name, reason);
        // Add patient to the end of the waiting queue
        waitingQueue.offer(newPatient); // offer() is safer than add() for bounded queues, but fine here
        System.out.println("Patient added to waiting queue: " + newPatient);
    }

    /**
     * Removes the next patient from the waiting queue and adds them to the seen patients list.
     * Handles the case where the waiting queue is empty.
     */
    private void doctorSeesNextPatient() {
        System.out.println("\n--- Doctor Sees Next Patient ---");
        try {
            // Remove the patient from the front of the queue
            Patient nextPatient = waitingQueue.remove(); // remove() throws NoSuchElementException if queue is empty
            // Add the patient to the list of seen patients
            seenPatients.add(nextPatient);
            System.out.println("Doctor is now seeing: " + nextPatient);
        } catch (NoSuchElementException e) {
            // Handle the specific case where the queue is empty
            System.err.println("Error: Waiting queue is empty. No patients to see.");
        }
    }

    /**
     * Lists all patients currently in the waiting queue without removing them.
     */
    private void listWaitingQueue() {
        System.out.println("\n--- Patients in Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("Waiting queue is empty.");
        } else {
            // Iterate and print each patient in the queue
            int count = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(count++ + ". " + patient);
            }
        }
    }

    /**
     * Lists all patients who have been moved from the waiting queue to the seen list.
     */
    private void listSeenPatients() {
        System.out.println("\n--- Patients Seen Today ---");
        if (seenPatients.isEmpty()) {
            System.out.println("No patients have been seen yet.");
        } else {
            // Iterate and print each patient in the seen list
            int count = 1;
            for (Patient patient : seenPatients) {
                System.out.println(count++ + ". " + patient);
            }
        }
    }

    /**
     * Runs the main application loop, displaying the menu and processing user choices.
     * Includes class-wide exception handling.
     */
    public void run() {
        int choice = -1;
        // Class-wide try-catch block wrapping the main operational loop
        try {
            while (choice != 5) {
                displayMenu();
                try {
                    // Read user choice
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character

                    // Switch statement to process the user's choice
                    switch (choice) {
                        case 1:
                            addPatientToQueue();
                            break;
                        case 2:
                            doctorSeesNextPatient();
                            break;
                        case 3:
                            listWaitingQueue();
                            break;
                        case 4:
                            listSeenPatients();
                            break;
                        case 5:
                            System.out.println("Exiting Hospital Appointment System. Goodbye!");
                            break;
                        default:
                            // Handle invalid menu choices
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                    }
                } catch (InputMismatchException e) {
                    // Handle non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number for your choice.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = -1; // Reset choice to ensure the loop continues
                }
                // Specific NoSuchElementException is handled within doctorSeesNextPatient
            }
        } catch (Exception e) {
            // Catch any other unexpected runtime exceptions during the system's operation
            System.err.println("An unexpected system error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging purposes
        } finally {
            // Ensure the scanner resource is closed when the application exits
            if (scanner != null) {
                scanner.close();
            }
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Main method to start the Hospital Appointment System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalAppointmentSystem system = new HospitalAppointmentSystem();
        system.run();
    }
}
