/*
 * Exam Question #310
 * Generated on: 2025-05-11 22:53:04
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Hospital Triage System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple system for managing patients in a hospital's triage area. Patients arrive and are added to a waiting queue based on arrival order. Medical staff process patients one by one from the front of the queue. The system should also keep a record of patients who have been processed.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Class:** Create a class named `Patient` with the following private fields:
 *     *   `id` (int): A unique identifier for the patient, automatically generated by the system.
 *     *   `name` (String): The patient's name.
 *     *   `severityLevel` (int): An integer representing the severity of the patient's condition (e.g., 1 for low, 10 for high).
 *     *   Include a constructor to initialize `name` and `severityLevel`, getters for all fields, and an appropriate `toString()` method to display patient information.
 * 
 * 2.  **HospitalTriageSystem Class:** Create a class named `HospitalTriageSystem` to manage the triage process. This class will contain the main logic.
 * 
 * 3.  **Data Structures:** Inside `HospitalTriageSystem`, utilize the following data structures:
 *     *   A `java.util.Queue<Patient>` to represent the triage waiting list. Use `java.util.LinkedList` as the concrete implementation.
 *     *   A `java.util.List<Patient>` to store patients who have been processed. Use `java.util.ArrayList` as the concrete implementation.
 * 
 * 4.  **User Input:** Use `java.util.Scanner` to read user input from the console for menu choices and patient details.
 * 
 * 5.  **Functionality:** Implement the following functionalities within the `HospitalTriageSystem` class, accessible via a command-line menu in a `run()` method:
 *     *   **Add New Patient (Choice 1):**
 *         *   Prompt the user for the patient's name and severity level.
 *         *   Validate that the entered severity level is an integer between 1 and 10 (inclusive).
 *         *   If input is valid, create a `Patient` object with a unique, auto-incrementing ID (starting from 1) and add it to the **end** of the triage queue.
 *         *   Display a success message using `System.out`.
 *         *   If input is invalid (non-integer, out of range severity), display an error message using `System.err` and do not add the patient.
 *     *   **Process Next Patient (Choice 2):**
 *         *   Remove the patient at the **front** of the triage queue.
 *         *   Add the removed patient to the processed patients list.
 *         *   Display the details of the processed patient using `System.out`.
 *         *   If the triage queue is empty, display an error message using `System.err`.
 *     *   **View Triage Queue (Choice 3):**
 *         *   Display the details of all patients currently in the triage queue, in their current order, using `System.out`.
 *         *   If the queue is empty, display a message indicating that using `System.out`.
 *     *   **View Processed Patients (Choice 4):**
 *         *   Display the details of all patients who have been processed so far, using `System.out`.
 *         *   If the processed list is empty, display a message indicating that using `System.out`.
 *     *   **Exit (Choice 5):**
 *         *   Terminate the program gracefully. Display an exit message using `System.out`.
 * 
 * 6.  **Control Flow:** Use a `switch` statement in the `run()` method to handle the different menu choices.
 * 
 * 7.  **Error Handling:**
 *     *   Implement **class-wide exception handling** using a `try-catch` block in the `run()` method to catch potential exceptions during the main operational loop (e.g., unexpected errors). Print details of such exceptions to `System.err`.
 *     *   Implement specific error handling for invalid user input (like non-integer input for menu choice or severity) using `try-catch` blocks and `System.err`. Ensure the program doesn't crash and handles invalid input gracefully (e.g., prompting again or skipping the current operation).
 *     *   Use `System.err` for all error messages (invalid input, empty queue operations, invalid menu options).
 *     *   Use `System.out` for all normal output (menu, prompts, successful operations, list/queue contents).
 * 
 * 8.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments or basic documentation (e.g., Javadoc style) for classes and key methods.
 *     *   Validate user input where necessary (e.g., severity level).
 *     *   Handle resources properly (e.g., close the `Scanner` when done).
 * 
 * **Expected Output:**
 * 
 * The program should present a clear menu to the user, accept input, and perform the requested actions. All error conditions must be reported to `System.err`, while normal output and prompts go to `System.out`.
 * 
 * **Evaluation Criteria:**
 * 
 * Your solution will be evaluated on:
 * *   Correct usage of `Queue`, `ArrayList`, `List`, `Scanner`, and `switch`.
 * *   Proper implementation of the required functionalities.
 * *   Robustness and correctness of error handling, including the use of `System.err` and `try-catch` blocks.
 * *   Adherence to best practices (encapsulation, naming, comments, input validation).
 * *   Clean code structure.
 * 
 * ```java
 * // Start your code here
 * ```
 *
 * EXPLANATION:
 * This solution implements a simple Hospital Triage System as required, demonstrating the use of various Java concepts and best practices.
 * 
 * **Key Components and Concepts Demonstrated:**
 * 
 * 1.  **`Patient` Class:**
 *     *   Models the patient entity with private fields (`id`, `name`, `severityLevel`) ensuring **encapsulation**.
 *     *   Provides public getter methods to access the data.
 *     *   Includes a `toString()` method for easy printing of patient details.
 *     *   The `id` is managed by the `HospitalTriageSystem` to ensure uniqueness and auto-incrementing behavior.
 * 
 * 2.  **`HospitalTriageSystem` Class:**
 *     *   Acts as the main controller for the system.
 *     *   **`Queue<Patient> triageQueue`**: Declared using the `Queue` interface and instantiated with `LinkedList`. This correctly models the waiting list where patients are added to the end (`offer`) and processed from the front (`poll`), adhering to the FIFO (First-In, First-Out) principle inherent in triage.
 *     *   **`List<Patient> processedPatients`**: Declared using the `List` interface and instantiated with `ArrayList`. This stores patients after they have been processed, allowing for easy retrieval and display of the history. Using the `List` interface demonstrates programming to interfaces.
 *     *   **`Scanner scanner`**: Used throughout the class's input methods (`addPatient`, `run`) to read user input from `System.in`. It's initialized once and managed within the class.
 *     *   **`nextPatientId`**: A simple counter to generate unique, sequential IDs for patients.
 * 
 * 3.  **Functionality Methods (`addPatient`, `processNextPatient`, `viewTriageQueue`, `viewProcessedPatients`):**
 *     *   Each method is responsible for a specific task, promoting modularity.
 *     *   They interact with the `triageQueue` and `processedPatients` data structures using appropriate methods (`offer`, `poll`, `add`, iteration).
 *     *   They handle empty queue/list conditions gracefully, printing informative messages.
 * 
 * 4.  **`run()` Method:**
 *     *   Contains the main application loop (`while(true)`).
 *     *   **`displayMenu()`**: A helper method to print the menu options to `System.out`.
 *     *   **`Scanner` Input Reading**: Reads the user's menu choice using `scanner.nextInt()`. Crucially, `scanner.nextLine()` is called immediately after `nextInt()` to consume the remaining newline character, preventing issues with subsequent `nextLine()` calls in `addPatient`.
 *     *   **`switch` Statement**: Controls the flow of execution based on the user's numeric choice, directing the program to the correct functionality method.
 *     *   **`System.out` and `System.err`**: Used correctly to differentiate between normal output (menu, prompts, data display, success messages) and error messages (invalid input, operational errors like empty queue).
 * 
 * 5.  **Exception Handling (`try-catch`):**
 *     *   **Class-wide `try-catch` in `run()`**: The main `while` loop is wrapped in a `try-catch(Exception e)`. This serves as a safety net, catching any unexpected runtime exceptions that might occur within the loop's execution and printing an error to `System.err` before potentially terminating or attempting to continue. The `finally` block ensures the `Scanner` is closed.
 *     *   **Specific Input Handling in `run()`**: A nested `try-catch(InputMismatchException e)` is used specifically when reading the menu choice (`scanner.nextInt()`). This handles cases where the user enters non-integer input, prints an error to `System.err`, consumes the invalid input using `scanner.nextLine()` to clear the buffer, and uses `continue` to restart the loop iteration, prompting the user again.
 *     *   **Specific Input Handling in `addPatient()`**: Another `try-catch(InputMismatchException e)` is used when reading the severity level. It performs similar error handling for non-integer input and uses a `while` loop to re-prompt the user until valid input is received. Input validation for the severity range (1-10) is also performed, printing errors to `System.err` if the number is out of range.
 * 
 * 6.  **Best Practices:**
 *     *   **Encapsulation**: Achieved by making fields private and providing public methods.
 *     *   **Meaningful Names**: Variable names (`triageQueue`, `processedPatients`, `nextPatientId`, `severityLevel`) and method names (`addPatient`, `processNextPatient`, `viewTriageQueue`, `run`) are descriptive.
 *     *   **Comments/Documentation**: Basic Javadoc-style comments are included for classes and methods to explain their purpose.
 *     *   **Input Validation**: Severity level is explicitly checked to be within the valid range (1-10).
 *     *   **Error Handling**: Different types of errors (invalid input type, invalid choice value, operational errors like empty queue) are identified and handled with specific messages directed to `System.err`.
 *     *   **Resource Management**: The `Scanner` is closed in the `finally` block of the `run()` method, ensuring the underlying system resource is released.
 * 
 * This solution effectively integrates the required Java components and demonstrates key programming principles like object-oriented design, data structure usage, control flow, and robust error handling within a practical scenario.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a patient in the triage system
class Patient {
    private int id;
    private String name;
    private int severityLevel; // 1 (low) to 10 (high)

    /**
     * Constructs a new Patient object.
     * @param id The unique ID for the patient.
     * @param name The name of the patient.
     * @param severityLevel The severity level of the patient's condition (1-10).
     */
    public Patient(int id, String name, int severityLevel) {
        this.id = id;
        this.name = name;
        this.severityLevel = severityLevel;
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getSeverityLevel() {
        return severityLevel;
    }

    /**
     * Returns a string representation of the Patient object.
     */
    @Override
    public String toString() {
        return "Patient [ID=" + id + ", Name=" + name + ", Severity=" + severityLevel + "]";
    }
}

// Manages the hospital triage process
public class HospitalTriageSystem {

    // Queue for patients waiting for triage (FIFO)
    private Queue<Patient> triageQueue;
    // List for patients who have been processed
    private List<Patient> processedPatients;
    // Counter for assigning unique patient IDs
    private int nextPatientId;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructs a new HospitalTriageSystem.
     * Initializes the queue, list, ID counter, and scanner.
     */
    public HospitalTriageSystem() {
        // LinkedList implements the Queue interface
        this.triageQueue = new LinkedList<>();
        // ArrayList implements the List interface
        this.processedPatients = new ArrayList<>();
        this.nextPatientId = 1; // Start IDs from 1
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the triage queue after validating input.
     */
    private void addPatient() {
        System.out.println("\n--- Add New Patient ---");
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine(); // Read name (can contain spaces)

        int severity = -1;
        boolean validInput = false;
        while (!validInput) {
            System.out.print("Enter severity level (1-10): ");
            try {
                severity = scanner.nextInt();
                // Consume the rest of the line after reading the integer
                scanner.nextLine();
                if (severity >= 1 && severity <= 10) {
                    validInput = true;
                } else {
                    System.err.println("Error: Severity level must be between 1 and 10.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for severity.");
                // Consume the invalid input to prevent an infinite loop
                scanner.nextLine();
            }
        }

        // Create patient with auto-incrementing ID and add to queue
        Patient newPatient = new Patient(nextPatientId++, name, severity);
        triageQueue.offer(newPatient); // offer() is a Queue method to add, returns boolean
        System.out.println("Patient added to triage queue: " + newPatient);
    }

    /**
     * Processes the next patient from the front of the queue and moves them
     * to the processed list. Handles empty queue scenario.
     */
    private void processNextPatient() {
        System.out.println("\n--- Process Next Patient ---");
        if (triageQueue.isEmpty()) {
            System.err.println("Error: Triage queue is empty. No patients to process.");
        } else {
            // poll() removes and returns the head of the queue, or null if empty
            Patient processedPatient = triageQueue.poll();
            processedPatients.add(processedPatient); // Add to processed list
            System.out.println("Processed patient: " + processedPatient);
        }
    }

    /**
     * Displays all patients currently in the triage queue.
     */
    private void viewTriageQueue() {
        System.out.println("\n--- Current Triage Queue ---");
        if (triageQueue.isEmpty()) {
            System.out.println("Triage queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            int position = 1;
            for (Patient patient : triageQueue) {
                System.out.println(position++ + ". " + patient);
            }
        }
    }

    /**
     * Displays all patients who have been processed.
     */
    private void viewProcessedPatients() {
        System.out.println("\n--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            // Iterate through the list
            for (int i = 0; i < processedPatients.size(); i++) {
                System.out.println((i + 1) + ". " + processedPatients.get(i));
            }
        }
    }

    /**
     * Displays the main menu options to the console.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Triage System Menu ---");
        System.out.println("1. Add New Patient to Triage");
        System.out.println("2. Process Next Patient");
        System.out.println("3. View Triage Queue");
        System.out.println("4. View Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and menu selection.
     * Includes class-wide exception handling.
     */
    public void run() {
        System.out.println("Welcome to the Hospital Triage System!");

        // Class-wide try-catch block for the main operational loop
        try {
            while (true) {
                displayMenu();

                int choice = -1;
                try {
                    // Read the user's menu choice
                    choice = scanner.nextInt();
                    // Consume the newline character left by nextInt()
                    scanner.nextLine();
                } catch (InputMismatchException e) {
                    // Handle non-integer input for menu choice
                    System.err.println("Error: Invalid input. Please enter a number (1-5).");
                    // Consume the invalid input from the scanner to prevent infinite loop
                    scanner.nextLine();
                    // Skip the rest of the loop iteration and show menu again
                    continue;
                }

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        processNextPatient();
                        break;
                    case 3:
                        viewTriageQueue();
                        break;
                    case 4:
                        viewProcessedPatients();
                        break;
                    case 5:
                        // Exit the application loop
                        System.out.println("Exiting Hospital Triage System. Goodbye!");
                        return; // Exit the run method
                    default:
                        // Handle valid integer input that is not a valid menu option
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break; // Continue the loop
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that might occur during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // Print the stack trace to System.err for debugging
            e.printStackTrace(System.err);
        } finally {
            // Ensure the scanner resource is closed when the program exits
            if (scanner != null) {
                scanner.close();
                // Optional: indicate scanner closed
                // System.out.println("Scanner resource closed.");
            }
        }
    }

    /**
     * Main method to start the application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalTriageSystem system = new HospitalTriageSystem();
        system.run(); // Start the main application loop
    }
}
