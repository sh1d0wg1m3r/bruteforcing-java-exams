/*
 * Exam Question #774
 * Generated on: 2025-05-12 16:38:49
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Hospital Appointment Management System**
 * 
 * You are tasked with building a simplified hospital appointment management system. The system needs to manage patient appointments for several doctors. Patients arrive and are added to a waiting list (queue) for a specific doctor. Doctors process patients from their waiting list in the order they arrived.
 * 
 * Your system must demonstrate proficient use of core Java collection types and control flow mechanisms, along with proper error handling and input validation.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to represent the waiting list of patients for each doctor.
 *     *   Use `java.util.ArrayList` to store the list of `Doctor` objects managed by the system.
 *     *   Declare the collection of doctors using the `java.util.List` interface type.
 * 2.  **Classes:**
 *     *   Create a `Patient` class (simple, maybe just a name).
 *     *   Create a `Doctor` class that holds the doctor's name and their `Queue` of `Patient` objects. Include methods to add a patient to the queue, process (remove) the next patient, and view the current queue contents.
 *     *   Create a `HospitalSystem` class (or similar) that contains the main logic. This class will hold the `List<Doctor>`, handle user input, and coordinate actions.
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to get input from the user.
 *     *   Present a menu of options to the user:
 *         *   1. Add Patient to Doctor's Queue
 *         *   2. Process Next Patient for Doctor
 *         *   3. View Doctor's Queue
 *         *   4. Exit
 * 4.  **Control Flow:**
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Use a loop to keep the system running until the user chooses to exit.
 * 5.  **Error Handling and Output:**
 *     *   Use `System.out` for normal output (menu, successful operations, queue contents).
 *     *   Use `System.err` to print error messages (e.g., doctor not found, invalid input, queue empty when trying to process).
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, handle potential issues with user input (like entering text when a number is expected) and operational errors (like trying to process a patient from an empty queue). A general `try-catch` around the main loop is recommended, along with specific input validation within the loop.
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (e.g., Javadoc-style).
 *     *   Validate user input (e.g., check if a doctor name exists, check for empty input where required).
 * 
 * **Initial Setup:**
 * *   Initialize the `HospitalSystem` with a few predefined `Doctor` objects.
 * 
 * **Expected Output:**
 * The system should display a menu, accept user input, perform the requested action, and provide feedback using `System.out` or `System.err`. When viewing a queue, it should list the patients waiting in order. When processing a patient, it should indicate which patient was processed. Error messages should be clear and printed to the error stream.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Hospital System Menu ---
 * 1. Add Patient to Doctor's Queue
 * 2. Process Next Patient for Doctor
 * 3. View Doctor's Queue
 * 4. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter doctor name: Dr. Smith
 * Alice added to Dr. Smith's queue.
 * 
 * --- Hospital System Menu ---
 * 1. Add Patient to Doctor's Queue
 * ...
 * Enter your choice: 1
 * Enter patient name: Bob
 * Enter doctor name: Dr. Smith
 * Bob added to Dr. Smith's queue.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Enter doctor name: Dr. Smith
 * Dr. Smith's Queue:
 * 1. Alice
 * 2. Bob
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Processing patient: Alice for Dr. Smith.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 3
 * Enter doctor name: Dr. Smith
 * Dr. Smith's Queue:
 * 1. Bob
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Chan
 * Error: Doctor 'Dr. Chan' not found. (This should go to System.err)
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 5
 * Error: Invalid choice. Please enter a number between 1 and 4. (This should go to System.err)
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Processing patient: Bob for Dr. Smith.
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 2
 * Enter doctor name: Dr. Smith
 * Error: Dr. Smith's queue is empty. No patients to process. (This should go to System.err)
 * 
 * --- Hospital System Menu ---
 * ...
 * Enter your choice: 4
 * Exiting Hospital System.
 * ```
 * 
 * Implement the Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a basic hospital appointment system demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Patient` Class:** A simple class representing a patient with a `name` field and a getter. It includes a `toString` method for easy printing. Encapsulation is used with a private field and a public getter.
 * 2.  **`Doctor` Class:**
 *     *   Holds the `name` and a `patientQueue` declared as `Queue<Patient>`. `LinkedList` is chosen as a concrete implementation for the `Queue` interface, suitable for this use case.
 *     *   `addPatient(Patient patient)`: Uses `queue.offer()` to add a patient to the end of the queue.
 *     *   `processNextPatient()`: Uses `queue.poll()` to retrieve and remove the patient at the front of the queue. `poll()` safely returns `null` if the queue is empty, which is handled to print an error message to `System.err`.
 *     *   `viewQueue()`: Iterates through the `patientQueue` using a for-each loop. This allows viewing the queue elements without removing them, respecting the queue's FIFO order for display. Prints to `System.out`.
 *     *   Encapsulation is maintained with private fields and public methods.
 * 3.  **`HospitalSystem` Class:**
 *     *   Manages a `List<Doctor>` called `doctors`, initialized as an `ArrayList`. Using `List` as the declared type demonstrates programming to the interface.
 *     *   A `Scanner` is used for all user input.
 *     *   `findDoctorByName(String name)`: A helper method to search the `List<Doctor>` for a doctor by name, performing a case-insensitive comparison.
 *     *   `displayMenu()`: Prints the menu options to `System.out`.
 *     *   `handleAddPatient()`, `handleProcessPatient()`, `handleViewQueue()`: These methods encapsulate the logic for each menu option, improving code organization. They use `findDoctorByName` and interact with the appropriate `Doctor` object's methods. Input validation (checking for empty names) is included, printing errors to `System.err`.
 *     *   `run()`: Contains the main application loop.
 *         *   It uses a `while` loop to keep the system running until the exit option is chosen.
 *         *   A `try-catch` block specifically handles `InputMismatchException` that can occur if the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input using `scanner.next()` to prevent an infinite loop.
 *         *   A `finally` block after the input reading `try-catch` ensures `scanner.nextLine()` is always called to consume the newline character left by `scanner.nextInt()`, preventing issues in subsequent `scanner.nextLine()` calls in the handling methods.
 *         *   A `switch` statement directs execution based on the valid integer `choice`.
 *         *   The `default` case of the `switch` handles integer inputs that are outside the valid range (1-4), printing an error to `System.err`.
 *         *   A broader `try-catch(Exception e)` wraps the main `while` loop. This acts as a safety net for any other unexpected runtime exceptions that might occur within the loop, demonstrating class-wide exception handling. It prints a generic error message to `System.err` and the stack trace for debugging.
 *         *   A `finally` block outside the main loop ensures the `Scanner` is closed when the `run` method finishes (either by exiting the loop normally or due to an uncaught exception).
 *     *   `main(String[] args)`: The entry point, creating a `HospitalSystem` instance and calling its `run` method.
 * 
 * This solution effectively combines the required data structures (`Queue`, `ArrayList`, `List`), control flow (`Scanner`, `switch`, loop), and error handling (`System.err`, `System.out`, `try-catch`) within a practical, well-structured program following Java best practices like encapsulation and meaningful naming. Input validation is performed at various points, and error messages are directed to the appropriate stream.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList is a common Queue implementation
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String name;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     */
    public Patient(String name) {
        this.name = name;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}

/**
 * Represents a doctor with their own patient queue.
 */
class Doctor {
    private String name;
    private Queue<Patient> patientQueue; // Using Queue interface

    /**
     * Constructs a new Doctor.
     * @param name The name of the doctor.
     */
    public Doctor(String name) {
        this.name = name;
        // Using LinkedList as a concrete implementation of Queue
        this.patientQueue = new LinkedList<>();
    }

    /**
     * Gets the doctor's name.
     * @return The doctor's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Adds a patient to the end of the doctor's queue.
     * @param patient The patient to add.
     */
    public void addPatient(Patient patient) {
        patientQueue.offer(patient); // offer is preferred over add for capacity-constrained queues, but fine here
        System.out.println(patient.getName() + " added to " + name + "'s queue.");
    }

    /**
     * Processes (removes) the next patient from the front of the queue.
     * @return The patient who was processed, or null if the queue was empty.
     */
    public Patient processNextPatient() {
        Patient nextPatient = patientQueue.poll(); // poll returns null if queue is empty
        if (nextPatient != null) {
            System.out.println("Processing patient: " + nextPatient.getName() + " for " + name + ".");
        } else {
            System.err.println("Error: " + name + "'s queue is empty. No patients to process.");
        }
        return nextPatient;
    }

    /**
     * Displays the current patients in the doctor's queue without removing them.
     */
    public void viewQueue() {
        System.out.println(name + "'s Queue:");
        if (patientQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            int i = 1;
            // Iterate through the queue without removing elements
            for (Patient patient : patientQueue) {
                System.out.println(i++ + ". " + patient.getName());
            }
        }
    }

    /**
     * Checks if the doctor's queue is empty.
     * @return true if the queue is empty, false otherwise.
     */
    public boolean isQueueEmpty() {
        return patientQueue.isEmpty();
    }
}

/**
 * The main class managing the hospital system, doctors, and user interaction.
 */
public class HospitalSystem {

    private List<Doctor> doctors; // Using List interface
    private Scanner scanner;

    /**
     * Constructs the HospitalSystem and initializes doctors.
     */
    public HospitalSystem() {
        // Using ArrayList as a concrete implementation of List
        this.doctors = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        // Add some initial doctors
        doctors.add(new Doctor("Dr. Smith"));
        doctors.add(new Doctor("Dr. Jones"));
        doctors.add(new Doctor("Dr. Williams"));
    }

    /**
     * Finds a doctor by name (case-insensitive).
     * @param name The name of the doctor to find.
     * @return The Doctor object if found, null otherwise.
     */
    private Doctor findDoctorByName(String name) {
        if (name == null || name.trim().isEmpty()) {
            return null;
        }
        // Iterate through the list of doctors
        for (Doctor doctor : doctors) {
            if (doctor.getName().equalsIgnoreCase(name.trim())) {
                return doctor;
            }
        }
        return null; // Doctor not found
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital System Menu ---");
        System.out.println("1. Add Patient to Doctor's Queue");
        System.out.println("2. Process Next Patient for Doctor");
        System.out.println("3. View Doctor's Queue");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Handles adding a patient to a doctor's queue.
     */
    private void handleAddPatient() {
        System.out.print("Enter patient name: ");
        String patientName = scanner.nextLine().trim(); // Use nextLine after nextInt
        if (patientName.isEmpty()) {
            System.err.println("Error: Patient name cannot be empty.");
            return;
        }

        System.out.print("Enter doctor name: ");
        String doctorName = scanner.nextLine().trim();
        if (doctorName.isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty.");
             return;
        }

        Doctor doctor = findDoctorByName(doctorName);

        if (doctor != null) {
            Patient patient = new Patient(patientName);
            doctor.addPatient(patient); // Doctor class handles adding to its queue
        } else {
            System.err.println("Error: Doctor '" + doctorName + "' not found.");
        }
    }

    /**
     * Handles processing the next patient for a doctor.
     */
    private void handleProcessPatient() {
        System.out.print("Enter doctor name: ");
        String doctorName = scanner.nextLine().trim();
         if (doctorName.isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty.");
             return;
        }

        Doctor doctor = findDoctorByName(doctorName);

        if (doctor != null) {
            doctor.processNextPatient(); // Doctor class handles processing from its queue
        } else {
            System.err.println("Error: Doctor '" + doctorName + "' not found.");
        }
    }

    /**
     * Handles viewing a doctor's queue.
     */
    private void handleViewQueue() {
        System.out.print("Enter doctor name: ");
        String doctorName = scanner.nextLine().trim();
         if (doctorName.isEmpty()) {
             System.err.println("Error: Doctor name cannot be empty.");
             return;
        }

        Doctor doctor = findDoctorByName(doctorName);

        if (doctor != null) {
            doctor.viewQueue(); // Doctor class handles viewing its queue
        } else {
            System.err.println("Error: Doctor '" + doctorName + "' not found.");
        }
    }

    /**
     * Runs the main hospital system loop.
     */
    public void run() {
        int choice = -1; // Initialize with a value that won't exit immediately

        // Class-wide try-catch for unexpected errors during the loop
        try {
            while (choice != 4) {
                displayMenu();

                // Specific try-catch for handling non-integer input for choice
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } finally {
                     // Consume the rest of the line after reading the integer choice
                    // This is crucial to prevent nextLine() from reading the leftover newline
                    scanner.nextLine();
                }

                // Switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        handleAddPatient();
                        break;
                    case 2:
                        handleProcessPatient();
                        break;
                    case 3:
                        handleViewQueue();
                        break;
                    case 4:
                        System.out.println("Exiting Hospital System.");
                        break;
                    default:
                        // Default case for invalid number choices
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 4.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Main method to start the Hospital System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem system = new HospitalSystem();
        system.run();
    }
}
