/*
 * Exam Question #441
 * Generated on: 2025-05-11 23:11:43
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Patient Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified patient management system for a walk-in clinic. The system needs to keep track of all registered patients and manage a waiting queue for patients who are currently at the clinic and need to be seen by a doctor.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (int) and `name` (String). Include a constructor and public getter methods for these fields. Override the `toString()` method to provide a convenient string representation of a `Patient` object.
 * 
 * 2.  **Data Structures:**
 *     *   Use a `java.util.List` interface variable, specifically implemented by `java.util.ArrayList`, to store all registered patients.
 *     *   Use a `java.util.Queue` interface variable, specifically implemented by `java.util.LinkedList`, to manage patients currently in the waiting queue.
 * 
 * 3.  **User Interface:** Implement a menu-driven interface using `java.util.Scanner` for user input. The main logic should reside in a `HospitalScheduler` class.
 * 
 * 4.  **Menu Options:** The system should present the following options to the user:
 *     *   **1. Register New Patient:**
 *         *   Prompt the user for a Patient ID (integer) and Name (String).
 *         *   Create a new `Patient` object.
 *         *   Add the new patient to the list of registered patients.
 *         *   Perform input validation: Ensure the ID is a positive integer and the Name is not empty.
 *         *   Handle `InputMismatchException` if the user enters non-integer input for the ID.
 *         *   Report success or validation errors.
 *     *   **2. Add Patient to Waiting Queue:**
 *         *   Prompt the user for the Patient ID of a registered patient.
 *         *   Search for the patient in the registered patients list.
 *         *   If found, add the patient to the waiting queue.
 *         *   If not found, report an error.
 *         *   Handle `InputMismatchException` if the user enters non-integer input for the ID.
 *         *   Report success or errors.
 *     *   **3. See Next Patient:**
 *         *   Remove the patient at the front of the waiting queue.
 *         *   Display the details of the patient being seen.
 *         *   If the waiting queue is empty, report an error.
 *     *   **4. List All Registered Patients:**
 *         *   Display the details of all patients currently in the registered patients list.
 *         *   If the list is empty, indicate that no patients are registered.
 *     *   **5. List Patients in Waiting Queue:**
 *         *   Display the details of all patients currently in the waiting queue, maintaining their order.
 *         *   If the queue is empty, indicate that the queue is empty.
 *     *   **6. Exit:** Terminate the program.
 * 
 * 5.  **Error Handling & Output:**
 *     *   Use `System.out` for displaying the menu, prompts, successful operation messages, and lists of patients.
 *     *   Use `System.err` for reporting all error conditions (e.g., invalid input, patient not found, queue empty, etc.).
 *     *   Implement exception handling using `try-catch` blocks. Specifically handle `InputMismatchException` for integer inputs. Include a broader `try-catch` block around the main menu loop to demonstrate handling potential unexpected errors during the program's execution (this satisfies the "class-wide" handling requirement by covering the main operational loop). Ensure the `Scanner` is closed properly, even if errors occur.
 * 
 * 6.  **Best Practices:**
 *     *   Apply proper encapsulation (`private` fields, `public` methods/getters).
 *     *   Use meaningful variable and method names.
 *     *   Include basic comments where necessary to explain complex parts or requirements.
 *     *   Structure your code into appropriate classes and methods.
 * 
 * **Expected Output Examples:**
 * 
 * ```
 * --- Hospital Scheduler Menu ---
 * 1. Register New Patient
 * 2. Add Patient to Waiting Queue
 * 3. See Next Patient
 * 4. List All Registered Patients
 * 5. List Patients in Waiting Queue
 * 6. Exit
 * -----------------------------
 * Enter your choice: 1
 * --- Register New Patient ---
 * Enter Patient ID (integer): 101
 * Enter Patient Name: Alice Smith
 * Patient registered successfully: Patient [ID=101, Name=Alice Smith]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 1
 * --- Register New Patient ---
 * Enter Patient ID (integer): -5
 * Invalid Patient ID. ID must be a positive integer.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 1
 * --- Register New Patient ---
 * Enter Patient ID (integer): Bob
 * Invalid input for Patient ID. Please enter an integer.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * --- Add Patient to Waiting Queue ---
 * Enter Patient ID to add to queue: 101
 * Patient added to waiting queue: Alice Smith
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 2
 * --- Add Patient to Waiting Queue ---
 * Enter Patient ID to add to queue: 999
 * Patient with ID 999 not found in registered list.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 5
 * --- Patients in Waiting Queue ---
 * 1. Patient [ID=101, Name=Alice Smith]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * --- See Next Patient ---
 * Seeing next patient: Patient [ID=101, Name=Alice Smith]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 3
 * --- See Next Patient ---
 * The waiting queue is empty. No patients to see.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 4
 * --- All Registered Patients ---
 * Patient [ID=101, Name=Alice Smith]
 * Patient [ID=102, Name=Bob Johnson]
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 7
 * Invalid choice. Please enter a number between 1 and 6.
 * 
 * --- Hospital Scheduler Menu ---
 * ...
 * Enter your choice: 6
 * Exiting Hospital Scheduler. Goodbye!
 * ```
 * 
 * Your solution should be a single Java file containing the `Patient` and `HospitalScheduler` classes.
 *
 * EXPLANATION:
 * The provided solution implements a simple Hospital Patient Management System according to the exam requirements.
 * 
 * 1.  **`Patient` Class:** A basic class `Patient` is defined with private fields `patientId` and `name`, demonstrating encapsulation. Getters provide access to these fields, and the `toString()` method offers a convenient way to print patient information.
 * 
 * 2.  **Data Structures:**
 *     *   A `List<Patient>` named `registeredPatients` is declared and initialized as an `ArrayList`. This fulfills the requirement of using both `List` and `ArrayList` to store a dynamic collection of all patients who have registered. `ArrayList` is suitable here as we need to store and iterate through the full list of registered patients, and occasional lookups by ID are handled by iterating through the list.
 *     *   A `Queue<Patient>` named `waitingQueue` is declared and initialized as a `LinkedList`. This fulfills the requirement of using both `Queue` and `LinkedList`. A `Queue` is the natural choice for managing a waiting list where patients are processed in the order they joined (First-In, First-Out). `LinkedList` is a common and efficient implementation of the `Queue` interface, especially for adding/removing elements from the ends.
 * 
 * 3.  **User Interface and Flow Control:**
 *     *   The `HospitalScheduler` class contains the main application logic.
 *     *   A `Scanner` object is used to read input from `System.in`.
 *     *   The `runMenu()` method contains the main application loop, which repeatedly displays a menu and prompts the user for a choice.
 *     *   A `switch` statement is used inside the loop to direct the program's flow to the appropriate method based on the user's integer input, fulfilling the `switch` requirement.
 * 
 * 4.  **Menu Options Implementation:**
 *     *   Each menu option is implemented as a separate private method (`registerNewPatient`, `addToWaitingQueue`, `seeNextPatient`, `listRegisteredPatients`, `listWaitingQueue`). This promotes modularity and code organization.
 *     *   `registerNewPatient`: Reads ID and name, performs basic validation (positive ID, non-empty name), and adds the new `Patient` object to the `registeredPatients` `ArrayList`.
 *     *   `addToWaitingQueue`: Reads an ID, uses the helper method `findPatientById` to locate the patient in the `registeredPatients` list, and if found, adds the `Patient` object to the `waitingQueue` using `offer()`.
 *     *   `seeNextPatient`: Uses `poll()` to remove and retrieve the head of the `waitingQueue`. It checks if the queue is empty before polling.
 *     *   `listRegisteredPatients`: Iterates through the `registeredPatients` `ArrayList` using an enhanced for loop and prints each `Patient` object.
 *     *   `listWaitingQueue`: Iterates through the `waitingQueue` using an enhanced for loop and prints each `Patient` object along with its position. Iterating a `Queue` using a for loop or iterator does not remove elements.
 * 
 * 5.  **Error Handling and Output:**
 *     *   `System.out` is used for all standard output, such as the menu, prompts, confirmation messages, and listing contents.
 *     *   `System.err` is used exclusively for reporting error conditions, such as invalid menu choices, invalid input during registration/queueing, patient not found, and trying to see a patient when the queue is empty.
 *     *   `try-catch` blocks are used for exception handling:
 *         *   An inner `try-catch(InputMismatchException)` is used within the `runMenu` loop specifically for reading the menu choice, ensuring that non-integer input doesn't crash the program and is handled gracefully.
 *         *   Specific `try-catch(InputMismatchException)` blocks are used in `registerNewPatient` and `addToWaitingQueue` to handle non-integer input when prompting for Patient IDs.
 *         *   A broader `try-catch(Exception)` block wraps the entire `while` loop in `runMenu`. This serves as a general safety net to catch any other unexpected exceptions that might occur during the program's execution, fulfilling the requirement for "class-wide" handling by covering the primary operational logic.
 *         *   A `finally` block in `runMenu` ensures that the `Scanner` resource is closed regardless of whether the loop finishes normally or an exception is caught, which is important for resource management.
 *     *   Input validation is performed in `registerNewPatient` for ID and name. Checks for patient existence (`findPatientById`) and queue emptiness (`isEmpty()`) are also forms of validation/pre-condition checks handled with appropriate error messages to `System.err`.
 * 
 * 6.  **Best Practices:** The code demonstrates encapsulation in the `Patient` class and the `HospitalScheduler` class fields. Meaningful names are used for variables and methods. Basic comments explain the purpose of classes, methods, and key code sections. The code is structured logically into methods corresponding to the menu options and a helper method for finding patients.
 * 
 * This solution effectively integrates all required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical, menu-driven application while adhering to best practices for clean code, encapsulation, and error handling.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Patient class to represent a patient
class Patient {
    private int patientId;
    private String name;

    /**
     * Constructor for the Patient class.
     * @param patientId The unique ID for the patient.
     * @param name The name of the patient.
     */
    public Patient(int patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public int getPatientId() {
        return patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return A formatted string with patient ID and name.
     */
    @Override
    public String toString() {
        return "Patient [ID=" + patientId + ", Name=" + name + "]";
    }
}

// HospitalScheduler class to manage patients and the waiting queue
public class HospitalScheduler {
    // List to store all registered patients (using ArrayList)
    private List<Patient> registeredPatients;
    // Queue to manage patients waiting to be seen (using LinkedList)
    private Queue<Patient> waitingQueue;
    // Scanner for reading user input
    private Scanner scanner;

    /**
     * Constructor to initialize the HospitalScheduler.
     * Sets up the patient list, waiting queue, and scanner.
     */
    public HospitalScheduler() {
        registeredPatients = new ArrayList<>(); // Implementation of List
        waitingQueue = new LinkedList<>();      // Implementation of Queue
        scanner = new Scanner(System.in);       // Initialize scanner for System.in
    }

    /**
     * Runs the main menu loop for the Hospital Scheduler application.
     * Handles user interaction and calls appropriate methods based on choice.
     * Includes general exception handling for robustness.
     */
    public void runMenu() {
        int choice = -1;
        // Use a try-catch block to handle potential exceptions during the main loop execution
        try {
            while (choice != 6) {
                printMenu();
                System.out.print("Enter your choice: ");

                // Use a try-catch specifically for reading integer menu choice to handle InputMismatchException
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()

                    // Use a switch statement to direct control flow based on user choice
                    switch (choice) {
                        case 1:
                            registerNewPatient();
                            break;
                        case 2:
                            addToWaitingQueue();
                            break;
                        case 3:
                            seeNextPatient();
                            break;
                        case 4:
                            listRegisteredPatients();
                            break;
                        case 5:
                            listWaitingQueue();
                            break;
                        case 6:
                            System.out.println("Exiting Hospital Scheduler. Goodbye!");
                            break;
                        default:
                            // Report invalid menu choice using System.err
                            System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (InputMismatchException e) {
                    // Handle cases where the user enters non-integer input for the menu choice
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent an infinite loop
                    choice = -1; // Reset choice to ensure the loop continues and re-prompts
                }
                System.out.println(); // Add a blank line for better output formatting between operations
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions that might occur during the program's run
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging
        } finally {
            // Ensure the scanner resource is closed when the program exits or encounters an error
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Displays the main menu options to the user.
     */
    private void printMenu() {
        System.out.println("--- Hospital Scheduler Menu ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Add Patient to Waiting Queue");
        System.out.println("3. See Next Patient");
        System.out.println("4. List All Registered Patients");
        System.out.println("5. List Patients in Waiting Queue");
        System.out.println("6. Exit");
        System.out.println("-----------------------------");
    }

    /**
     * Handles the registration of a new patient.
     * Prompts for ID and name, validates input, creates Patient object, and adds to registered list.
     */
    private void registerNewPatient() {
        System.out.println("--- Register New Patient ---");
        int id = -1;
        // Use try-catch for reading and validating Patient ID input
        try {
            System.out.print("Enter Patient ID (integer): ");
            id = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            // Input validation: Patient ID must be positive
            if (id <= 0) {
                 System.err.println("Invalid Patient ID. ID must be a positive integer.");
                 return; // Exit method if validation fails
            }

            // Optional: Add logic here to check for duplicate IDs if needed (adds complexity)
            // if (findPatientById(id) != null) {
            //     System.err.println("Patient with ID " + id + " is already registered.");
            //     return;
            // }

            System.out.print("Enter Patient Name: ");
            String name = scanner.nextLine();

            // Input validation: Patient name cannot be empty or just whitespace
            if (name == null || name.trim().isEmpty()) {
                 System.err.println("Patient name cannot be empty.");
                 return; // Exit method if validation fails
            }

            // Create new Patient object and add it to the registered patients list (ArrayList)
            Patient newPatient = new Patient(id, name.trim());
            registeredPatients.add(newPatient); // Added to the List (ArrayList)
            System.out.println("Patient registered successfully: " + newPatient);

        } catch (InputMismatchException e) {
            // Handle cases where non-integer input is provided for Patient ID
            System.err.println("Invalid input for Patient ID. Please enter an integer.");
            scanner.nextLine(); // Consume invalid input
        } catch (Exception e) {
             // Catch any other unexpected errors during registration
             System.err.println("An error occurred during patient registration: " + e.getMessage());
        }
    }

    /**
     * Adds a registered patient to the waiting queue.
     * Prompts for Patient ID, finds patient, and adds to queue if found.
     */
    private void addToWaitingQueue() {
        System.out.println("--- Add Patient to Waiting Queue ---");
        int id = -1;
        // Use try-catch for reading Patient ID input
        try {
            System.out.print("Enter Patient ID to add to queue: ");
            id = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            // Find the patient in the list of registered patients
            Patient patientToAdd = findPatientById(id);

            if (patientToAdd == null) {
                // Report error if the patient ID is not found in the registered list
                System.err.println("Patient with ID " + id + " not found in registered list.");
            } else {
                 // Optional: Add logic here to check if the patient is already in the waiting queue
                 // if (waitingQueue.contains(patientToAdd)) {
                 //     System.err.println("Patient with ID " + id + " is already in the waiting queue.");
                 // } else {
                     // Add the patient to the waiting queue (Queue using LinkedList)
                     waitingQueue.offer(patientToAdd); // Added to the Queue
                     System.out.println("Patient added to waiting queue: " + patientToAdd.getName());
                 // }
            }
        } catch (InputMismatchException e) {
            // Handle cases where non-integer input is provided for Patient ID
            System.err.println("Invalid input for Patient ID. Please enter an integer.");
            scanner.nextLine(); // Consume invalid input
        } catch (Exception e) {
             // Catch any other unexpected errors
             System.err.println("An error occurred while adding patient to queue: " + e.getMessage());
        }
    }

    /**
     * Helper method to search for a patient by ID within the registered patients list.
     * @param id The Patient ID to search for.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findPatientById(int id) {
        // Iterate through the registeredPatients list (ArrayList)
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId() == id) {
                return patient; // Return the patient if ID matches
            }
        }
        return null; // Return null if no patient with the given ID is found
    }

    /**
     * Processes the next patient in the waiting queue.
     * Removes the patient from the queue and displays their details.
     */
    private void seeNextPatient() {
        System.out.println("--- See Next Patient ---");
        // Check if the waiting queue is empty before attempting to remove a patient
        if (waitingQueue.isEmpty()) {
            // Report error if the queue is empty using System.err
            System.err.println("The waiting queue is empty. No patients to see.");
        } else {
            // Remove and retrieve the head of the waiting queue (Queue using LinkedList)
            Patient nextPatient = waitingQueue.poll(); // Removed from the Queue
            System.out.println("Seeing next patient: " + nextPatient);
        }
    }

    /**
     * Lists all patients currently registered in the system.
     * Iterates through the registered patients list and prints each patient's details.
     */
    private void listRegisteredPatients() {
        System.out.println("--- All Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            // Iterate and print all patients in the registeredPatients list (ArrayList)
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Lists all patients currently in the waiting queue, maintaining their order.
     * Iterates through the waiting queue and prints each patient's details and position.
     */
    private void listWaitingQueue() {
        System.out.println("--- Patients in Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate through the waiting queue (Queue using LinkedList) without removing elements
            int position = 1;
            for (Patient patient : waitingQueue) {
                System.out.println(position++ + ". " + patient);
            }
        }
    }

    /**
     * The main entry point of the application.
     * Creates a HospitalScheduler instance and starts the menu.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalScheduler scheduler = new HospitalScheduler();
        scheduler.runMenu(); // Start the main application menu loop
    }
}
