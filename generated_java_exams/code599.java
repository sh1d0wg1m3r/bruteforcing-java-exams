/*
 * Exam Question #599
 * Generated on: 2025-05-12 16:12:52
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple, console-based Task Management System. This system should allow users to add tasks to a queue for processing, process the next available task, view the list of pending tasks, and view the list of completed tasks. Each task has a description and a priority level (represented by an integer, e.g., 1 for high, 2 for medium, 3 for low). Tasks should be processed in a First-In, First-Out (FIFO) manner based on their arrival in the queue, regardless of priority for this simplified version.
 * 
 * **Requirements:**
 * 
 * 1.  **Task Class:** Create a `Task` class with private fields for `description` (String) and `priority` (int). Include a constructor and public getter methods for these fields.
 * 2.  **TaskScheduler Class:** Create a `TaskScheduler` class to manage the tasks.
 *     *   It must have a private `Queue<Task>` to hold pending tasks.
 *     *   It must have a private `List<Task>` (implemented using `ArrayList`) to store completed tasks.
 *     *   Implement the following public methods:
 *         *   `addTask(Task task)`: Adds a given `Task` object to the pending task queue.
 *         *   `processNextTask()`: Removes the task at the front of the queue, simulates processing (e.g., by printing a message), and adds it to the completed tasks list. This method should handle the case where the queue is empty.
 *         *   `viewPendingTasks()`: Prints the details of all tasks currently in the pending queue. If the queue is empty, print a message indicating so.
 *         *   `viewCompletedTasks()`: Prints the details of all tasks in the completed list. If the list is empty, print a message indicating so.
 * 3.  **Main Application Class:** Create a main class (e.g., `TaskManagementApp`) with a `main` method to run the application.
 *     *   Use a `Scanner` to get user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Task
 *         2.  Process Next Task
 *         3.  View Pending Tasks
 *         4.  View Completed Tasks
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement input validation:
 *         *   Ensure the menu choice is a valid integer between 1 and 5.
 *         *   Ensure the task priority entered by the user is a valid integer (you can define a range, e.g., 1-3, and validate against it).
 *     *   Use `System.out` for all normal output (menu, prompts, task details, success messages).
 *     *   Use `System.err` for all error messages (invalid input, empty queue when processing).
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, such as invalid input format when reading integers. The main application loop should continue even after an error, prompting the user again.
 * 4.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Ensure proper encapsulation in the `Task` and `TaskScheduler` classes.
 *     *   Structure the code clearly into separate classes.
 * 
 * **Required Java Components (MUST be used):**
 * 
 * *   `java.util.Queue`
 * *   `java.util.ArrayList`
 * *   `java.util.List` interface
 * *   `java.util.Scanner`
 * *   `switch` statement
 * *   `System.err`
 * *   `System.out`
 * *   `try-catch` blocks
 * 
 * **Expected Output:**
 * 
 * The program should run interactively. When the user selects an option, the system should perform the corresponding action and provide feedback. Examples:
 * 
 * ```
 * Task Management System Menu:
 * 1. Add New Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Write report
 * Enter task priority (1=High, 2=Medium, 3=Low): 1
 * Task added to the queue.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 3
 * Pending Tasks:
 * Description: Write report, Priority: 1
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 2
 * Processing task: Description: Write report, Priority: 1
 * Task processed and moved to completed list.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 3
 * Pending Tasks:
 * No pending tasks.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 4
 * Completed Tasks:
 * Description: Write report, Priority: 1
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 6
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: abc
 * System.err: Invalid input. Please enter a number.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 2
 * System.err: No pending tasks to process.
 * 
 * Task Management System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should provide the complete Java code for all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple Task Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Task` Class:**
 *     *   This class is a simple Plain Old Java Object (POJO) representing a task.
 *     *   It uses `private` fields (`description`, `priority`) to enforce encapsulation.
 *     *   Public getter methods (`getDescription`, `getPriority`) provide controlled access to the data.
 *     *   A `toString()` method is overridden for easy printing of task details.
 * 
 * 2.  **`TaskScheduler` Class:**
 *     *   This class encapsulates the logic for managing tasks.
 *     *   `private Queue<Task> pendingTasks;`: A `Queue` is used here because tasks are processed in the order they are added (FIFO - First-In, First-Out). `LinkedList` is a common implementation of the `Queue` interface.
 *     *   `private List<Task> completedTasks;`: A `List` (specifically an `ArrayList`) is used to store tasks after they have been processed. A `List` allows for easy storage and iteration over completed items. `ArrayList` is a good default choice for a dynamic list.
 *     *   `addTask()`: Uses `pendingTasks.add(task)` to add a task to the tail of the queue.
 *     *   `processNextTask()`: Uses `pendingTasks.poll()` to remove and retrieve the task at the head of the queue. `poll()` is safe for empty queues (returns `null`). It then adds the retrieved task to the `completedTasks` list. Error handling (`System.err`) is included for the empty queue case.
 *     *   `viewPendingTasks()`: Iterates through the `pendingTasks` queue to display its contents without removing them.
 *     *   `viewCompletedTasks()`: Iterates through the `completedTasks` `List` to display its contents.
 * 
 * 3.  **`TaskManagementApp` Class (Main Application):**
 *     *   This class contains the `main` method where the program execution begins.
 *     *   `Scanner scanner = new Scanner(System.in);`: Used to read user input from the console.
 *     *   `TaskScheduler scheduler = new TaskScheduler();`: An instance of the `TaskScheduler` is created to manage the tasks.
 *     *   The main loop (`while(running)`) keeps the application running until the user chooses to exit.
 *     *   `printMenu()`: A helper method to display the available options.
 *     *   **`switch (choice)`:** This statement is used to direct the program flow based on the user's integer input, executing the code block corresponding to the selected menu option.
 *     *   **Input Validation and Error Handling (`try-catch`, `System.err`):**
 *         *   The entire menu processing inside the loop is wrapped in a `try-catch (InputMismatchException e)` block. This catches errors if the user enters non-integer input when an integer is expected (like the menu choice or priority).
 *         *   Inside the "Add New Task" case, a `while` loop and another nested `try-catch (InputMismatchException e)` are used specifically for validating the priority input, ensuring it's an integer within the valid range (1-3).
 *         *   `scanner.nextLine()` is used after reading integers (`nextInt()`) to consume the leftover newline character, preventing issues with subsequent `nextLine()` calls for reading descriptions.
 *         *   `System.err.println()` is used for printing error messages (invalid input, empty queue), clearly distinguishing them from normal output.
 *         *   A general `catch (Exception e)` is included as a fallback for any other unexpected errors, printing a generic message and the stack trace for debugging.
 *     *   `System.out.println()`: Used for all prompts, menu display, success messages, and task listings.
 *     *   `scanner.close()`: Closes the `Scanner` resource when the application exits.
 * 
 * This solution effectively integrates the required components (`Queue`, `List`, `ArrayList`, `Scanner`, `switch`, `System.out`, `System.err`, `try-catch`) within a practical scenario, demonstrating object-oriented principles (encapsulation) and robust programming practices (input validation, error handling, clear structure).
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description and priority.
 */
class Task {
    private String description;
    private int priority; // 1=High, 2=Medium, 3=Low

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     * @param priority The priority level of the task.
     */
    public Task(String description, int priority) {
        this.description = description;
        this.priority = priority;
    }

    /**
     * Gets the task description.
     * @return The description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the task priority.
     * @return The priority.
     */
    public int getPriority() {
        return priority;
    }

    @Override
    public String toString() {
        return "Description: " + description + ", Priority: " + priority;
    }
}

/**
 * Manages a queue of pending tasks and a list of completed tasks.
 */
class TaskScheduler {
    private Queue<Task> pendingTasks;
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskScheduler.
     */
    public TaskScheduler() {
        // LinkedList is a common implementation for Queue
        this.pendingTasks = new LinkedList<>();
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a task to the pending queue.
     * @param task The task to add.
     */
    public void addTask(Task task) {
        if (task != null) {
            pendingTasks.add(task);
            System.out.println("Task added to the queue.");
        }
    }

    /**
     * Processes the next task in the queue.
     * Removes the task from the queue and adds it to the completed list.
     */
    public void processNextTask() {
        Task taskToProcess = pendingTasks.poll(); // Removes and returns the head of the queue, or null if empty

        if (taskToProcess != null) {
            System.out.println("Processing task: " + taskToProcess);
            // Simulate processing time if needed (optional)
            completedTasks.add(taskToProcess);
            System.out.println("Task processed and moved to completed list.");
        } else {
            System.err.println("No pending tasks to process.");
        }
    }

    /**
     * Displays all tasks currently in the pending queue.
     */
    public void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterating through the queue without removing elements
            for (Task task : pendingTasks) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------\n");
    }

    /**
     * Displays all tasks that have been completed.
     */
    public void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
        System.out.println("-----------------------\n");
    }
}

/**
 * Main application class for the Task Management System.
 * Handles user interaction and menu navigation.
 */
public class TaskManagementApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskScheduler scheduler = new TaskScheduler();
        boolean running = true;

        System.out.println("Welcome to the Task Management System!");

        while (running) {
            printMenu();

            try {
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                switch (choice) {
                    case 1: // Add New Task
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();

                        int priority = -1;
                        boolean validPriority = false;
                        while (!validPriority) {
                            System.out.print("Enter task priority (1=High, 2=Medium, 3=Low): ");
                            try {
                                priority = scanner.nextInt();
                                scanner.nextLine(); // Consume newline

                                if (priority >= 1 && priority <= 3) {
                                    validPriority = true;
                                } else {
                                    System.err.println("Invalid priority. Please enter a number between 1 and 3.");
                                }
                            } catch (InputMismatchException e) {
                                System.err.println("Invalid input. Please enter a number for priority.");
                                scanner.nextLine(); // Consume the invalid input
                            }
                        }
                        scheduler.addTask(new Task(description, priority));
                        break;

                    case 2: // Process Next Task
                        scheduler.processNextTask();
                        break;

                    case 3: // View Pending Tasks
                        scheduler.viewPendingTasks();
                        break;

                    case 4: // View Completed Tasks
                        scheduler.viewCompletedTasks();
                        break;

                    case 5: // Exit
                        running = false;
                        System.out.println("Exiting Task Management System.");
                        break;

                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handles cases where the user enters non-integer input for the menu choice
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }

        scanner.close();
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\nTask Management System Menu:");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
