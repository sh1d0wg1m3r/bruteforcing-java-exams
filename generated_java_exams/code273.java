/*
 * Exam Question #273
 * Generated on: 2025-05-11 22:48:08
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Priority Task Queue System
 * 
 * **Scenario:**
 * 
 * You are asked to develop a simple command-line application to manage tasks for a small team. The system should handle tasks that have a description and a priority (LOW, MEDIUM, or HIGH). New tasks are added to a queue for processing. When a task is processed, it is removed from the queue and moved to a separate list of completed tasks.
 * 
 * **Goal:**
 * 
 * Implement the `TaskManagementSystem` application that provides a menu-driven command-line interface for users to interact with the task queue and completed task list.
 * 
 * **Functional Requirements:**
 * 
 * 1.  **Add Task:** Prompt the user for a task description and priority (case-insensitive: "LOW", "MEDIUM", or "HIGH"). Create a `Task` object and add it to the pending task queue. Validate the priority input; if invalid, display an error and do not add the task.
 * 2.  **Process Next Task:** Attempt to remove the task at the front of the pending queue. If successful, move the task to the completed tasks list and display a success message indicating which task was processed. If the pending queue is empty, display an error message.
 * 3.  **View Pending Tasks:** Display all tasks currently in the pending queue, in the order they would be processed (FIFO).
 * 4.  **View Completed Tasks:** Display all tasks that have been processed and moved to the completed list.
 * 5.  **Exit:** Terminate the application.
 * 
 * **Technical Requirements:**
 * 
 * *   You **must** use `java.util.Queue` for the collection of pending tasks. You can use `java.util.LinkedList` as the concrete implementation.
 * *   You **must** use `java.util.ArrayList` to store the completed tasks.
 * *   You **must** declare the collection holding completed tasks using the `java.util.List` interface.
 * *   You **must** use `java.util.Scanner` to read all user input from the console.
 * *   You **must** use a `switch` statement to handle the main menu options selected by the user.
 * *   You **must** use `System.out` for displaying the menu, task lists, success messages, and prompts for input.
 * *   You **must** use `System.err` for displaying all error messages (e.g., invalid input, attempting to process an empty queue).
 * *   You **must** implement class-wide exception handling using `try-catch` blocks. Specifically, wrap the core logic within your main application loop to handle potential issues like invalid menu input (`InputMismatchException`) and operational errors like attempting to process a task when the queue is empty (design your `processNextTask` method to signal this condition, e.g., by throwing an `IllegalStateException`).
 * *   Design appropriate classes (`Task`, `TaskManager`) following best practices:
 *     *   Use private fields and public methods for proper encapsulation.
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include basic comments and documentation where necessary.
 * *   Ensure proper input validation (especially for task priority).
 * *   Handle errors gracefully as specified (using `System.err` and `try-catch`).
 * *   Structure your code cleanly into logical units (classes/methods).
 * 
 * **Input Format:**
 * 
 * *   Menu choices are single digits (1-5).
 * *   For adding a task: Description is read on one line, followed by priority on the next line.
 * 
 * **Output Format:**
 * 
 * *   Display the menu using `System.out`.
 * *   Display task lists clearly showing description and priority using `System.out`.
 * *   Display success messages using `System.out`.
 * *   Display error messages using `System.err`.
 * 
 * **Example Interaction:**
 * 
 * ```
 * --- Task Management System ---
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Prepare presentation
 * Enter priority (LOW, MEDIUM, HIGH): HIGH
 * Task added: Prepare presentation [HIGH]
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 1
 * Enter task description: Review document
 * Enter priority (LOW, MEDIUM, HIGH): medium
 * Task added: Review document [MEDIUM]
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * 1. Prepare presentation [HIGH]
 * 2. Review document [MEDIUM]
 * ---------------------
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: Prepare presentation [HIGH]
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * 1. Review document [MEDIUM]
 * ---------------------
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * 1. Prepare presentation [HIGH]
 * -----------------------
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Processed task: Review document [MEDIUM]
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 2
 * Error: No pending tasks to process.
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * Task Management Menu:
 * 1. Add Task
 * 2. Process Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * **Submission:**
 * 
 * Provide the complete Java code for the `Task`, `TaskManager`, and `TaskManagementSystem` classes. Ensure all technical and functional requirements are met.
 *
 * EXPLANATION:
 * This solution implements the Priority Task Queue System by utilizing the required Java components and adhering to best practices.
 * 
 * 1.  **`Task` Class:** A simple class to represent a task with `description` and `priority` fields. It uses private fields and public getters for encapsulation and includes a `toString()` method for easy printing.
 * 
 * 2.  **`TaskManager` Class:**
 *     *   Manages the core data structures: `pendingTasks` (a `Queue<Task>` implemented by `LinkedList`) and `completedTasks` (a `List<Task>` implemented by `ArrayList`). This demonstrates the use of both `Queue` and `List`/`ArrayList`.
 *     *   `addTask(String description, String priority)`: Adds a task to the `pendingTasks` queue using `offer()`. It includes input validation for the priority string, using `toUpperCase()` and `equals()` for case-insensitivity. Invalid priority results in an error message printed to `System.err` and the method returning `false`. Successful addition prints a message to `System.out`.
 *     *   `processNextTask()`: Removes the head of the `pendingTasks` queue using `poll()` and adds it to the `completedTasks` list. It checks if the queue is empty *before* polling. If empty, it throws an `IllegalStateException`. This design allows the calling code (`main` method) to use a `try-catch` block to handle the "empty queue" error specifically, fulfilling part of the exception handling requirement. Successful processing prints a message to `System.out`.
 *     *   `viewPendingTasks()` and `viewCompletedTasks()`: These methods iterate through their respective collections (`Queue` and `List`) and print the task details using `System.out`. Iterating directly over the `Queue` preserves the FIFO order for display.
 * 
 * 3.  **`TaskManagementSystem` Class (Main Application):**
 *     *   Contains the `main` method, which serves as the command-line interface.
 *     *   Initializes a `Scanner` for user input and a `TaskManager` instance.
 *     *   The main logic is within a `while(running)` loop that continues until the user chooses to exit.
 *     *   Inside the loop, it calls `printMenu()` (which uses `System.out`) and prompts the user for input using `System.out`.
 *     *   A `try-catch` block wraps the critical part of the loop: reading user input (`scanner.nextInt()`) and calling `TaskManager` methods. This is a common pattern for handling potential runtime issues in interactive console applications.
 *     *   **Exception Handling:**
 *         *   `catch (InputMismatchException e)`: Catches errors if the user enters non-integer input for the menu choice. It prints an error to `System.err` and consumes the invalid input from the scanner to prevent an infinite loop.
 *         *   `catch (IllegalStateException e)`: Catches the specific exception thrown by `taskManager.processNextTask()` when the queue is empty. It prints the error message from the exception to `System.err`.
 *         *   `catch (Exception e)`: A general catch block to handle any other unexpected exceptions, printing an error message to `System.err`.
 *     *   **Flow Control:** A `switch` statement is used on the user's integer choice to direct the program flow to the appropriate `TaskManager` method or the exit logic. The `default` case handles invalid integer inputs (outside 1-5), printing an error to `System.err`.
 *     *   Uses `System.out` for all normal output (menu, prompts, success, lists) and `System.err` exclusively for error messages as required.
 *     *   Closes the `Scanner` resource when the loop terminates.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, demonstrating encapsulation, validation, and error handling according to best practices. The design of `processNextTask` throwing an exception specifically for the empty queue scenario allows for a clear demonstration of catching a method-specific operational error within the main `try-catch` structure.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Locale; // For case-insensitive priority check

/**
 * Represents a single task with a description and priority.
 */
class Task {
    private String description;
    private String priority; // Could use enum, but String fits requirement simplicity

    /**
     * Constructs a new Task.
     * @param description The description of the task.
     * @param priority The priority of the task (e.g., LOW, MEDIUM, HIGH).
     */
    public Task(String description, String priority) {
        this.description = description;
        this.priority = priority;
    }

    // Getters
    public String getDescription() {
        return description;
    }

    public String getPriority() {
        return priority;
    }

    /**
     * Provides a string representation of the task.
     * @return A formatted string for the task.
     */
    @Override
    public String toString() {
        return description + " [" + priority + "]";
    }
}

/**
 * Manages the collection of pending and completed tasks.
 */
class TaskManager {
    // Use Queue for pending tasks (FIFO) as required
    private Queue<Task> pendingTasks;
    // Use List (implemented by ArrayList) for completed tasks as required
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskManager, initializing the task collections.
     */
    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
    }

    /**
     * Adds a new task to the pending queue.
     * Validates the priority string.
     * @param description The task description.
     * @param priority The task priority (LOW, MEDIUM, HIGH). Case-insensitive.
     * @return true if the task was added, false if priority was invalid.
     */
    public boolean addTask(String description, String priority) {
        // Input validation for priority using case-insensitive comparison
        String upperPriority = priority.toUpperCase(Locale.ROOT);
        if (!upperPriority.equals("LOW") && !upperPriority.equals("MEDIUM") && !upperPriority.equals("HIGH")) {
            // Use System.err for validation errors as required
            System.err.println("Error: Invalid priority '" + priority + "'. Must be LOW, MEDIUM, or HIGH.");
            return false;
        }

        Task newTask = new Task(description, upperPriority);
        pendingTasks.offer(newTask); // offer() is standard Queue add, returns boolean
        System.out.println("Task added: " + newTask); // Use System.out for success message
        return true;
    }

    /**
     * Processes the next task from the pending queue.
     * Removes the task from the queue and adds it to the completed list.
     * Throws IllegalStateException if the queue is empty to be caught by the caller.
     * @return The task that was processed.
     * @throws IllegalStateException if there are no pending tasks.
     */
    public Task processNextTask() throws IllegalStateException {
        // Check if the queue is empty before attempting to poll
        if (pendingTasks.isEmpty()) {
            // Throw an exception as required for try-catch demonstration
            throw new IllegalStateException("No pending tasks to process.");
        }

        Task processedTask = pendingTasks.poll(); // poll() removes and returns head, or null if empty (handled by check)
        completedTasks.add(processedTask); // Add to completed list (ArrayList)
        System.out.println("Processed task: " + processedTask); // Use System.out for success message
        return processedTask;
    }

    /**
     * Displays all tasks currently in the pending queue using System.out.
     */
    public void viewPendingTasks() {
        System.out.println("--- Pending Tasks ---"); // Use System.out
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements to display them
            // Iteration order respects the queue's order (FIFO)
            int i = 1;
            for (Task task : pendingTasks) {
                System.out.println(i + ". " + task);
                i++;
            }
        }
        System.out.println("---------------------");
    }

    /**
     * Displays all tasks that have been completed using System.out.
     */
    public void viewCompletedTasks() {
        System.out.println("--- Completed Tasks ---"); // Use System.out
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            // Iterate through the list to display completed tasks
            int i = 1;
            for (Task task : completedTasks) {
                System.out.println(i + ". " + task);
                i++;
            }
        }
        System.out.println("-----------------------");
    }
}

/**
 * Main class for the Task Management System.
 * Provides a command-line interface for users.
 * Demonstrates usage of Scanner, switch, System.out, System.err, try-catch.
 */
public class TaskManagementSystem {

    private static TaskManager taskManager = new TaskManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("--- Task Management System ---"); // Use System.out

        boolean running = true;
        while (running) {
            printMenu();

            // Use try-catch block around the core interaction loop
            // to handle various potential exceptions during input or operations.
            try {
                System.out.print("Enter your choice: "); // Use System.out for prompt
                int choice = scanner.nextInt(); // Read integer choice
                scanner.nextLine(); // Consume the newline character left-over after reading int

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1: // Add Task
                        System.out.print("Enter task description: "); // Use System.out
                        String description = scanner.nextLine();
                        System.out.print("Enter priority (LOW, MEDIUM, HIGH): "); // Use System.out
                        String priority = scanner.nextLine();
                        // TaskManager.addTask handles priority validation and its own System.err/System.out
                        taskManager.addTask(description, priority);
                        break;
                    case 2: // Process Next Task
                        // Call processNextTask which might throw IllegalStateException
                        // This exception is caught by the catch block below
                        taskManager.processNextTask(); // Success message is inside TaskManager
                        break;
                    case 3: // View Pending Tasks
                        taskManager.viewPendingTasks(); // Uses System.out
                        break;
                    case 4: // View Completed Tasks
                        taskManager.viewCompletedTasks(); // Uses System.out
                        break;
                    case 5: // Exit
                        System.out.println("Exiting system."); // Use System.out
                        running = false;
                        break;
                    default: // Invalid choice (integer outside 1-5 range)
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5."); // Use System.err
                        break;
                }
            } catch (InputMismatchException e) {
                // Catch specific exception for non-integer input for menu choice
                System.err.println("Error: Invalid input. Please enter a number."); // Use System.err
                scanner.nextLine(); // Consume the invalid input from the scanner buffer to prevent infinite loop
            } catch (IllegalStateException e) {
                // Catch specific exception thrown by TaskManager.processNextTask when queue is empty
                System.err.println("Error: " + e.getMessage()); // Use System.err for operational errors
            } catch (Exception e) {
                // Catch any other unexpected exceptions for robustness
                System.err.println("An unexpected error occurred: " + e.getMessage()); // Use System.err
                // e.printStackTrace(); // Uncomment for debugging if needed
            }
            System.out.println(); // Add a blank line for better readability between menu loops
        }

        scanner.close(); // Close the scanner resource when the application exits
    }

    /**
     * Displays the main menu options to the user using System.out.
     */
    private static void printMenu() {
        System.out.println("\nTask Management Menu:"); // Use System.out
        System.out.println("1. Add Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
    }
}
