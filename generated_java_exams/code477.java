/*
 * Exam Question #477
 * Generated on: 2025-05-11 23:16:49
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Java Programming Exam: Package Delivery Hub Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified management system for a package delivery hub. Packages arrive and are placed in a waiting queue. Workers process packages one by one from the queue, verify their details, and then move them to a list of processed packages ready for dispatch. The system needs to handle user commands to manage this flow.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use a `Queue` to store packages that are waiting to be processed (incoming packages).
 *     *   Use a `List` (specifically an `ArrayList` implementation) to store packages that have been successfully processed. Program against the `List` interface.
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user commands and package details from the console.
 *     *   Implement a menu-driven interface with the following options:
 *         *   `1: Receive New Package` - Prompt user for package ID, destination address, and weight. Create a `Package` object and add it to the incoming queue.
 *         *   `2: Process Next Package` - Take the next package from the incoming queue. If a package is available, move it to the processed list. If the queue is empty, report an error.
 *         *   `3: List Processed Packages` - Display details of all packages currently in the processed list. If the list is empty, display a message indicating so.
 *         *   `4: Exit` - Terminate the program.
 *         *   Any other input should be considered invalid and an error message displayed.
 * 3.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different menu options.
 * 4.  **Output:**
 *     *   Use `System.out` for normal output (menu, prompts, success messages, listing packages).
 *     *   Use `System.err` for displaying error messages (e.g., invalid input, queue empty).
 * 5.  **Exception Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential issues, such as invalid user input (e.g., non-numeric input for weight) or unexpected errors during operations. The main application loop should be robust.
 * 6.  **Object-Oriented Design:**
 *     *   Create a `Package` class with private fields (e.g., `packageId`, `destination`, `weight`) and public getter methods.
 *     *   Create a `DeliveryHub` class that manages the queue and list, and contains the methods for the operations (receive, process, list).
 * 7.  **Best Practices:**
 *     *   Follow proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and Javadoc where necessary.
 *     *   Implement input validation (e.g., check for non-empty strings, valid numbers).
 *     *   Ensure resources like `Scanner` are closed properly.
 * 
 * **Expected Output Examples:**
 * 
 * *   **Menu Display:**
 *     ```
 *     --- Delivery Hub Menu ---
 *     1: Receive New Package
 *     2: Process Next Package
 *     3: List Processed Packages
 *     4: Exit
 *     Enter your choice: 
 *     ```
 * *   **Receiving a Package:**
 *     ```
 *     Enter package ID: PKG123
 *     Enter destination address: 101 Main St
 *     Enter weight (kg): 5.5
 *     Package PKG123 received and added to the queue.
 *     ```
 * *   **Processing a Package (Success):**
 *     ```
 *     Processing next package...
 *     Package PKG123 processed and moved to the processed list.
 *     ```
 * *   **Processing a Package (Queue Empty):**
 *     ```
 *     Processing next package...
 *     Error: No packages currently in the incoming queue.
 *     ```
 *     (This error message should go to `System.err`)
 * *   **Listing Processed Packages (Non-empty):**
 *     ```
 *     --- Processed Packages ---
 *     ID: PKG123, Destination: 101 Main St, Weight: 5.5 kg
 *     ID: PKG456, Destination: 202 Oak Ave, Weight: 10.0 kg
 *     --------------------------
 *     ```
 * *   **Listing Processed Packages (Empty):**
 *     ```
 *     --- Processed Packages ---
 *     No packages have been processed yet.
 *     --------------------------
 *     ```
 * *   **Invalid Input:**
 *     ```
 *     Error: Invalid input. Please enter a number between 1 and 4.
 *     ```
 *     (This error message should go to `System.err`)
 * *   **Input Validation Error (Weight):**
 *     ```
 *     Enter weight (kg): abc
 *     Error: Invalid weight input. Please enter a valid number.
 *     ```
 *     (This error message should go to `System.err`)
 * 
 * **Time Constraint:** This task is designed to be completed within approximately 45-60 minutes. Focus on implementing the core logic and required components correctly.
 * 
 * **Submission:** Provide the complete Java code for the `Package` and `DeliveryHub` classes.
 *
 * EXPLANATION:
 * This solution implements a simplified Package Delivery Hub Management System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **Problem Breakdown:** The core problem involves managing two states of packages: waiting (in a queue) and processed (in a list). The system needs to support operations to move packages between these states based on user commands, while handling input and potential errors.
 * 
 * 2.  **Class Design:**
 *     *   `Package`: A simple Plain Old Java Object (POJO) to represent a package. It encapsulates the package's attributes (`packageId`, `destination`, `weight`) using private fields and provides public getter methods for access, adhering to encapsulation principles. The `toString()` method is overridden for easy printing.
 *     *   `DeliveryHub`: This is the main class that orchestrates the system. It holds the two primary data structures (`incomingPackages` and `processedPackages`) and contains the methods corresponding to the system's operations (`receivePackage`, `processNextPackage`, `listProcessedPackages`). The `run()` method contains the main application loop and user interaction logic.
 * 
 * 3.  **Data Structures Usage:**
 *     *   `Queue<Package> incomingPackages`: A `LinkedList` is used here because it implements the `Queue` interface and is suitable for adding to the tail (`offer`) and removing from the head (`poll`), which are typical queue operations. It correctly models the "waiting line" of packages.
 *     *   `List<Package> processedPackages`: An `ArrayList` is used here, assigned to a `List` reference (`List<Package> processedPackages = new ArrayList<>();`). This demonstrates programming to the interface, which is a good practice allowing flexibility to change the underlying list implementation later if needed without affecting code that uses the `List` interface methods. The `ArrayList` is suitable for storing processed items where easy iteration and dynamic resizing are needed.
 * 
 * 4.  **User Interaction and Control Flow:**
 *     *   `Scanner`: An instance of `Scanner` reads input from `System.in`. It's enclosed in a try-with-resources block (`try (Scanner scanner = new Scanner(System.in))`) to ensure it's automatically closed when the block is exited, preventing resource leaks.
 *     *   `displayMenu()`: A private helper method to keep the `run` method cleaner.
 *     *   `switch (choice)`: The main application loop in `run()` reads the user's numeric choice and uses a `switch` statement to direct execution to the appropriate operation (`receivePackage`, `processNextPackage`, `listProcessedPackages`) or to exit. The `default` case handles invalid numeric input.
 * 
 * 5.  **Output and Error Handling:**
 *     *   `System.out.println()`: Used for printing the menu, prompts, success messages, and the list of processed packages.
 *     *   `System.err.println()`: Used specifically for error messages, such as invalid menu choices, empty queue conditions during processing, invalid input formats (like non-numeric weight), or empty strings for required fields. This distinction helps visually separate normal output from errors in the console.
 *     *   `try-catch`:
 *         *   A `try-catch` block wraps the core logic inside the `while` loop in the `run()` method. This handles potential exceptions that might occur during input processing or operation execution.
 *         *   Specific checks like `scanner.hasNextInt()` and `scanner.hasNextDouble()` are used *before* attempting to read, preventing `InputMismatchException` in many cases. However, a `catch (InputMismatchException e)` is included (though potentially redundant with the checks) to show how to handle this specific input format error.
 *         *   A general `catch (Exception e)` is included as a fallback to catch any other unexpected runtime exceptions that might occur during the execution of the switch cases, ensuring the program doesn't crash abruptly. It prints an error message and the stack trace for debugging.
 *         *   The outer `try-catch` around the `try-with-resources` block demonstrates a class-wide catch, although in this specific simple example, the inner catches are more likely to trigger for operational errors. It's good practice for robustness.
 * 
 * 6.  **Input Validation:**
 *     *   Checks are performed to ensure package ID and destination are not empty strings (`!id.trim().isEmpty()`).
 *     *   `scanner.hasNextDouble()` and a check for non-negative weight (`weight >= 0`) validate the weight input. A loop is used to re-prompt for valid weight.
 * 
 * 7.  **Best Practices:**
 *     *   Encapsulation is applied in the `Package` class.
 *     *   Meaningful names (`incomingPackages`, `processNextPackage`, `listProcessedPackages`) are used throughout.
 *     *   Comments explain the purpose of classes, methods, fields, and specific code sections. Javadoc-style comments are used for class and method descriptions.
 *     *   Programming to the `List` interface is used for `processedPackages`.
 *     *   Resource management for `Scanner` is handled using try-with-resources.
 * 
 * This solution effectively integrates all the required components into a functional, albeit simplified, system demonstrating core Java programming concepts and robust error handling.
 */

import java.util.LinkedList; // LinkedList implements Queue
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package with unique ID, destination, and weight.
 */
class Package {
    private String packageId;
    private String destination;
    private double weight; // in kilograms

    /**
     * Constructs a new Package object.
     * @param packageId The unique identifier for the package.
     * @param destination The destination address of the package.
     * @param weight The weight of the package in kilograms.
     */
    public Package(String packageId, String destination, double weight) {
        this.packageId = packageId;
        this.destination = destination;
        this.weight = weight;
    }

    // Getters
    public String getPackageId() {
        return packageId;
    }

    public String getDestination() {
        return destination;
    }

    public double getWeight() {
        return weight;
    }

    /**
     * Provides a string representation of the Package.
     */
    @Override
    public String toString() {
        return String.format("ID: %s, Destination: %s, Weight: %.2f kg",
                             packageId, destination, weight);
    }
}

/**
 * Manages incoming and processed packages for a delivery hub.
 */
public class DeliveryHub {

    // Queue for packages waiting to be processed
    private Queue<Package> incomingPackages;

    // List for packages that have been processed
    private List<Package> processedPackages;

    /**
     * Constructs a new DeliveryHub.
     * Initializes the incoming package queue and the processed package list.
     */
    public DeliveryHub() {
        this.incomingPackages = new LinkedList<>(); // LinkedList is a common Queue implementation
        this.processedPackages = new ArrayList<>();
    }

    /**
     * Adds a new package to the incoming queue.
     * @param pkg The package to add.
     */
    public void receivePackage(Package pkg) {
        if (pkg != null) {
            incomingPackages.offer(pkg); // offer is preferred over add for queues (doesn't throw exception on capacity issues)
            System.out.println("Package " + pkg.getPackageId() + " received and added to the queue.");
        } else {
            System.err.println("Error: Attempted to receive a null package.");
        }
    }

    /**
     * Processes the next package from the incoming queue, if available.
     * Moves the processed package to the processed list.
     */
    public void processNextPackage() {
        System.out.println("Processing next package...");
        Package nextPackage = incomingPackages.poll(); // poll retrieves and removes the head, returns null if empty

        if (nextPackage != null) {
            processedPackages.add(nextPackage);
            System.out.println("Package " + nextPackage.getPackageId() + " processed and moved to the processed list.");
        } else {
            System.err.println("Error: No packages currently in the incoming queue.");
        }
    }

    /**
     * Displays details of all packages in the processed list.
     */
    public void listProcessedPackages() {
        System.out.println("\n--- Processed Packages ---");
        if (processedPackages.isEmpty()) {
            System.out.println("No packages have been processed yet.");
        } else {
            for (Package pkg : processedPackages) {
                System.out.println(pkg);
            }
        }
        System.out.println("--------------------------\n");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- Delivery Hub Menu ---");
        System.out.println("1: Receive New Package");
        System.out.println("2: Process Next Package");
        System.out.println("3: List Processed Packages");
        System.out.println("4: Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop, handling user input and operations.
     * Includes class-wide exception handling.
     */
    public void run() {
        // Use try-with-resources to ensure scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            int choice = -1;
            while (choice != 4) {
                displayMenu();
                try {
                    if (scanner.hasNextInt()) {
                        choice = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                    } else {
                        System.err.println("Error: Invalid input. Please enter a number.");
                        scanner.nextLine(); // Consume the invalid input
                        continue; // Skip to the next iteration
                    }

                    switch (choice) {
                        case 1: // Receive New Package
                            System.out.print("Enter package ID: ");
                            String id = scanner.nextLine();
                            System.out.print("Enter destination address: ");
                            String destination = scanner.nextLine();

                            double weight = -1;
                            boolean validWeight = false;
                            while (!validWeight) {
                                System.out.print("Enter weight (kg): ");
                                if (scanner.hasNextDouble()) {
                                    weight = scanner.nextDouble();
                                    if (weight >= 0) { // Simple positive weight validation
                                        validWeight = true;
                                    } else {
                                         System.err.println("Error: Weight cannot be negative.");
                                    }
                                } else {
                                    System.err.println("Error: Invalid weight input. Please enter a valid number.");
                                }
                                scanner.nextLine(); // Consume the newline character or invalid input
                            }

                            // Basic validation for ID and destination
                            if (id != null && !id.trim().isEmpty() && destination != null && !destination.trim().isEmpty()) {
                                Package newPackage = new Package(id.trim(), destination.trim(), weight);
                                receivePackage(newPackage);
                            } else {
                                System.err.println("Error: Package ID and Destination cannot be empty.");
                            }
                            break;

                        case 2: // Process Next Package
                            processNextPackage();
                            break;

                        case 3: // List Processed Packages
                            listProcessedPackages();
                            break;

                        case 4: // Exit
                            System.out.println("Exiting Delivery Hub system. Goodbye!");
                            break;

                        default: // Invalid choice
                            System.err.println("Error: Invalid input. Please enter a number between 1 and 4.");
                            break;
                    }
                } catch (InputMismatchException e) {
                    // This specific catch might be redundant due to hasNextInt/Double checks,
                    // but kept for demonstrating catching a specific exception type if needed
                    // (e.g., if scanner.nextInt() was used directly without checking hasNextInt)
                    System.err.println("Error: Invalid input type. " + e.getMessage());
                    scanner.nextLine(); // Consume the invalid input
                } catch (Exception e) {
                    // Catch any other unexpected exceptions during an operation
                    System.err.println("An unexpected error occurred: " + e.getMessage());
                    e.printStackTrace(); // Print stack trace for debugging unexpected errors
                }
                System.out.println(); // Add a newline for better readability between operations
            }
        } catch (Exception e) {
             // Class-wide catch block for exceptions during Scanner setup or the main loop itself
             System.err.println("A critical error occurred during system startup or shutdown: " + e.getMessage());
             e.printStackTrace();
        }
    }

    /**
     * Main method to start the Delivery Hub application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliveryHub hub = new DeliveryHub();
        hub.run();
    }
}
