/*
 * Exam Question #299
 * Generated on: 2025-05-11 22:51:40
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Support Ticket Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple console-based support ticket management system. The system should allow users to submit new support tickets, process the oldest open ticket, and view lists of tickets based on their status.
 * 
 * The system should manage tickets using a queue for open tickets (representing the order they should be processed) and a list to maintain a historical record of all tickets ever created, regardless of their current status.
 * 
 * **Requirements:**
 * 
 * 1.  **Ticket Representation:** Create a class `SupportTicket` with the following attributes:
 *     *   `id`: A unique integer identifier for the ticket. Should be automatically assigned sequentially starting from 1.
 *     *   `description`: A string describing the issue.
 *     *   `status`: A string representing the ticket's status (e.g., "OPEN", "CLOSED").
 *     *   Ensure proper encapsulation (private fields, public getters/setters where appropriate).
 * 
 * 2.  **Ticket Management:** Create a class `SupportTicketManager` that will manage the tickets. It must contain:
 *     *   A `java.util.Queue<SupportTicket>` to hold tickets that are currently "OPEN" and waiting to be processed.
 *     *   A `java.util.List<SupportTicket>` (specifically using `java.util.ArrayList`) to store *all* tickets created in the system.
 *     *   Methods to perform the following operations:
 *         *   `addTicket(String description)`: Creates a new `SupportTicket` with status "OPEN", adds it to both the queue of open tickets and the list of all tickets.
 *         *   `processNextTicket()`: Removes the oldest ticket from the open tickets queue, changes its status to "CLOSED". If the queue is empty, it should indicate an error.
 *         *   `viewAllTickets()`: Displays details of all tickets stored in the system list.
 *         *   `viewOpenTickets()`: Displays details of tickets currently in the open tickets queue.
 *         *   `viewClosedTickets()`: Displays details of tickets from the all-tickets list that have a status of "CLOSED".
 * 
 * 3.  **User Interaction:** Implement a main method (in `SupportTicketManager` or a separate class) that provides a console interface using `java.util.Scanner`. The user should be presented with a menu of options:
 *     *   1. Add New Ticket
 *     *   2. Process Next Open Ticket
 *     *   3. View All Tickets
 *     *   4. View Open Tickets
 *     *   5. View Closed Tickets
 *     *   6. Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   The program should loop until the user chooses to exit.
 * 
 * 4.  **Input Validation & Error Handling:**
 *     *   Use `java.lang.System.err` to print error messages (e.g., invalid menu choice, trying to process ticket when none are open, empty ticket description).
 *     *   Use `java.lang.System.out` for normal output (menu, prompts, ticket details, success messages).
 *     *   Implement robust exception handling using `try-catch` blocks that cover the main interaction loop. Specifically, handle `InputMismatchException` if the user enters non-integer input for the menu choice, and provide a general catch for other potential runtime errors. The exception handling should be broad enough to cover operations within the interaction loop.
 *     *   Validate that the ticket description is not empty when adding a new ticket.
 * 
 * 5.  **Code Quality:**
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (e.g., Javadoc for classes/methods).
 *     *   Structure the code logically.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, accept user input, and perform actions based on the input. Output should clearly indicate the result of each action. Error messages should be distinct (using `System.err`).
 * 
 * Example interaction flow:
 * ```
 * --- Support Ticket System ---
 * 1. Add New Ticket
 * 2. Process Next Open Ticket
 * 3. View All Tickets
 * 4. View Open Tickets
 * 5. View Closed Tickets
 * 6. Exit
 * Enter your choice: 1
 * Enter ticket description: Printer not working
 * 
 * Ticket added successfully! ID: 1
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 1
 * Enter ticket description: Cannot access network drive
 * 
 * Ticket added successfully! ID: 2
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 4
 * 
 * --- Open Tickets ---
 * ID: 1, Description: Printer not working, Status: OPEN
 * ID: 2, Description: Cannot access network drive, Status: OPEN
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 2
 * 
 * Processing ticket: ID: 1, Description: Printer not working, Status: OPEN
 * Ticket ID 1 marked as CLOSED.
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 4
 * 
 * --- Open Tickets ---
 * ID: 2, Description: Cannot access network drive, Status: OPEN
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 3
 * 
 * --- All Tickets ---
 * ID: 1, Description: Printer not working, Status: CLOSED
 * ID: 2, Description: Cannot access network drive, Status: OPEN
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 7
 * Invalid choice. Please enter a number between 1 and 6.
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: abc
 * Invalid input. Please enter a number.
 * 
 * --- Support Ticket System ---
 * ... menu ...
 * Enter your choice: 6
 * Exiting Support Ticket System.
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correct implementation of all required features.
 * *   Proper use of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`.
 * *   Effective and appropriate use of `try-catch` for exception handling.
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Clean and logical code structure.
 *
 * EXPLANATION:
 * This solution implements a basic support ticket management system demonstrating the required Java concepts.
 * 
 * 1.  **`SupportTicket` Class:**
 *     *   Represents a single ticket with `id`, `description`, and `status`.
 *     *   `id` is automatically assigned using a static `nextId` counter, ensuring uniqueness and sequential numbering.
 *     *   Fields are `private` adhering to encapsulation. Public getters provide read access, and a `setStatus` setter allows modifying the status.
 *     *   `toString()` is overridden for convenient printing of ticket details.
 * 
 * 2.  **`SupportTicketManager` Class:**
 *     *   This is the core class managing the tickets.
 *     *   It holds two essential data structures:
 *         *   `openTicketsQueue`: Declared as `Queue<SupportTicket>` and implemented using `LinkedList`. This structure is perfect for managing open tickets in a First-In, First-Out (FIFO) manner, as required for processing the "oldest" ticket first. `offer()` is used to add to the tail, and `poll()` is used to retrieve and remove from the head.
 *         *   `allTicketsList`: Declared as `List<SupportTicket>` and implemented using `ArrayList`. This list serves as a historical record of all tickets created, allowing retrieval and viewing regardless of their current status. `add()` is used to add tickets.
 *     *   **`addTicket(String description)`:** Creates a new `SupportTicket`, adds it to *both* the `openTicketsQueue` (using `offer`) and the `allTicketsList` (using `add`). It includes input validation to ensure the description is not empty.
 *     *   **`processNextTicket()`:** Uses `openTicketsQueue.poll()` to get and remove the ticket at the front of the queue. If `poll()` returns `null` (queue is empty), an error is printed to `System.err`. Otherwise, the retrieved ticket's status is updated to "CLOSED".
 *     *   **`viewAllTickets()`:** Iterates through the `allTicketsList` and prints each ticket's details using its `toString()` method.
 *     *   **`viewOpenTickets()`:** Iterates through the `openTicketsQueue`. Note that iterating a `Queue` typically uses an enhanced for loop or iterator, which traverses the elements without removing them, suitable for viewing.
 *     *   **`viewClosedTickets()`:** Iterates through the `allTicketsList`, checks each ticket's status using `.equals("CLOSED")`, and prints only those that match.
 * 
 * 3.  **User Interaction (`main` method):**
 *     *   A `Scanner` is used to read user input from the console (`System.in`).
 *     *   A `while` loop keeps the program running until the user chooses to exit.
 *     *   The menu is displayed using `System.out.println`.
 *     *   The user's choice is read using `scanner.nextInt()`.
 *     *   A `switch` statement directs the program flow based on the integer choice, calling the appropriate methods in the `SupportTicketManager`.
 *     *   A `scanner.nextLine()` call after `scanner.nextInt()` is crucial to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls.
 * 
 * 4.  **Exception Handling (`try-catch`):**
 *     *   A large `try` block wraps the main `while` loop in the `main` method. This provides a class-wide (or method-wide, covering the core logic) handling mechanism.
 *     *   Inside the `try` block, a specific `catch (InputMismatchException e)` is used around `scanner.nextInt()`. This handles cases where the user enters non-integer input for the menu choice, preventing a crash. An error message is printed to `System.err`, the invalid input is consumed with `scanner.next()`, and `continue` restarts the loop.
 *     *   A general `catch (Exception e)` block is placed after the loop's try block. This catches any other unexpected runtime exceptions that might occur within the loop's execution, printing an error message and the stack trace to `System.err` for debugging.
 *     *   A `finally` block ensures that the `Scanner` is closed when the `try` block finishes (either normally or due to an exception), releasing system resources.
 * 
 * 5.  **System.err and System.out:**
 *     *   `System.out.println` is used for standard output: menu display, prompts, ticket details, and success messages.
 *     *   `System.err.println` is used exclusively for error messages: invalid input, queue empty errors, and details of caught exceptions. This helps distinguish normal program output from error conditions.
 * 
 * 6.  **Code Quality:**
 *     *   Variable names like `openTicketsQueue`, `allTicketsList`, `processNextTicket` are descriptive.
 *     *   Methods have clear purposes (`addTicket`, `processNextTicket`, etc.).
 *     *   Javadoc comments are included for classes and methods.
 *     *   The code is structured into logical classes (`SupportTicket`, `SupportTicketManager`) with the main execution flow in `main`.
 * 
 * This solution effectively integrates the required Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) into a practical scenario, demonstrating proper usage, error handling, and adherence to good programming practices.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single support ticket in the system.
 */
class SupportTicket {
    private int id;
    private String description;
    private String status; // e.g., "OPEN", "CLOSED"

    private static int nextId = 1; // Static counter for unique IDs

    /**
     * Constructs a new SupportTicket.
     *
     * @param description The description of the issue.
     */
    public SupportTicket(String description) {
        this.id = nextId++; // Assign unique ID and increment counter
        this.description = description;
        this.status = "OPEN"; // New tickets are always open initially
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public String getStatus() {
        return status;
    }

    // --- Setter ---
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Provides a string representation of the ticket.
     *
     * @return A formatted string with ticket details.
     */
    @Override
    public String toString() {
        return "ID: " + id + ", Description: " + description + ", Status: " + status;
    }
}

/**
 * Manages a collection of support tickets using a queue for open tickets
 * and a list for all tickets.
 */
public class SupportTicketManager {
    private Queue<SupportTicket> openTicketsQueue; // Queue for tickets waiting processing
    private List<SupportTicket> allTicketsList;   // List to hold all tickets ever created

    /**
     * Constructs a new SupportTicketManager.
     * Initializes the queue and the list.
     */
    public SupportTicketManager() {
        // LinkedList is a common implementation for Queue
        this.openTicketsQueue = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.allTicketsList = new ArrayList<>();
    }

    /**
     * Adds a new ticket to the system.
     * Adds the ticket to both the open queue and the list of all tickets.
     *
     * @param description The description for the new ticket.
     */
    public void addTicket(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return;
        }
        SupportTicket newTicket = new SupportTicket(description.trim());
        openTicketsQueue.offer(newTicket); // Add to the end of the queue
        allTicketsList.add(newTicket);     // Add to the list of all tickets
        System.out.println("\nTicket added successfully! ID: " + newTicket.getId());
    }

    /**
     * Processes the next ticket in the open queue.
     * Removes the oldest ticket from the queue and marks it as CLOSED.
     * Prints an error if the queue is empty.
     */
    public void processNextTicket() {
        SupportTicket ticketToProcess = openTicketsQueue.poll(); // Retrieve and remove head of queue
        if (ticketToProcess != null) {
            System.out.println("\nProcessing ticket: " + ticketToProcess);
            ticketToProcess.setStatus("CLOSED"); // Update status
            System.out.println("Ticket ID " + ticketToProcess.getId() + " marked as CLOSED.");
        } else {
            System.err.println("\nError: No open tickets to process.");
        }
    }

    /**
     * Displays details of all tickets ever created in the system.
     */
    public void viewAllTickets() {
        System.out.println("\n--- All Tickets ---");
        if (allTicketsList.isEmpty()) {
            System.out.println("No tickets in the system yet.");
        } else {
            for (SupportTicket ticket : allTicketsList) {
                System.out.println(ticket);
            }
        }
    }

    /**
     * Displays details of tickets currently in the open queue.
     */
    public void viewOpenTickets() {
        System.out.println("\n--- Open Tickets ---");
        if (openTicketsQueue.isEmpty()) {
            System.out.println("No open tickets waiting for processing.");
        } else {
            // Iterate through the queue without removing elements
            for (SupportTicket ticket : openTicketsQueue) {
                System.out.println(ticket);
            }
        }
    }

    /**
     * Displays details of tickets from the all-tickets list that are marked as CLOSED.
     */
    public void viewClosedTickets() {
        System.out.println("\n--- Closed Tickets ---");
        boolean foundClosed = false;
        for (SupportTicket ticket : allTicketsList) {
            if ("CLOSED".equals(ticket.getStatus())) { // Use .equals for string comparison
                System.out.println(ticket);
                foundClosed = true;
            }
        }
        if (!foundClosed) {
            System.out.println("No tickets have been closed yet.");
        }
    }

    /**
     * Main method to run the Support Ticket Management System.
     * Handles user interaction via console.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        SupportTicketManager manager = new SupportTicketManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide try-catch block covering the main interaction loop
        try {
            while (running) {
                System.out.println("\n--- Support Ticket System ---");
                System.out.println("1. Add New Ticket");
                System.out.println("2. Process Next Open Ticket");
                System.out.println("3. View All Tickets");
                System.out.println("4. View Open Tickets");
                System.out.println("5. View Closed Tickets");
                System.out.println("6. Exit");
                System.out.print("Enter your choice: ");

                int choice = -1;
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } finally {
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                }

                // Use switch statement for menu options
                switch (choice) {
                    case 1:
                        System.out.print("Enter ticket description: ");
                        String description = scanner.nextLine();
                        manager.addTicket(description);
                        break;
                    case 2:
                        manager.processNextTicket();
                        break;
                    case 3:
                        manager.viewAllTickets();
                        break;
                    case 4:
                        manager.viewOpenTickets();
                        break;
                    case 5:
                        manager.viewClosedTickets();
                        break;
                    case 6:
                        System.out.println("Exiting Support Ticket System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during execution
            System.err.println("\nAn unexpected error occurred:");
            e.printStackTrace(System.err); // Print stack trace to System.err
        } finally {
            // Ensure the scanner is closed when the program finishes or exits
            if (scanner != null) {
                scanner.close();
            }
        }
    }
}
