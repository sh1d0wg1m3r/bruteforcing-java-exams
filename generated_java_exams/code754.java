/*
 * Exam Question #754
 * Generated on: 2025-05-12 16:35:54
 * Generated by: Account 3
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Package Delivery Routing Simulator
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified simulation of a package delivery routing system. The system needs to manage packages waiting for delivery, process them one by one, and handle different operations based on user input. The system has a predefined list of valid delivery destinations.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must include:
 * 
 * 1.  A `Package` class to represent individual packages. Each package should have a unique integer ID and a destination (String).
 * 2.  A `DeliveryRouteSimulator` class that manages the package queue and valid destinations.
 * 3.  The `DeliveryRouteSimulator` class must use:
 *     *   A `java.util.Queue<Package>` to hold packages awaiting delivery.
 *     *   A `java.util.List<String>` (implemented by `java.util.ArrayList`) to store the list of valid destinations.
 *     *   A `java.util.Scanner` to read user commands and data from the console.
 *     *   A `switch` statement to handle different user commands from a menu.
 *     *   `System.out` for displaying the menu, prompts, successful operations, and lists of items.
 *     *   `System.err` for displaying error messages (e.g., invalid input, invalid destination, attempting to process an empty queue).
 *     *   Class-wide exception handling using `try-catch` blocks to manage potential runtime errors (e.g., invalid numeric input, or other unexpected issues during operations).
 * 4.  The `DeliveryRouteSimulator` should provide a command-line interface with the following menu options:
 *     *   `1`: Add New Package - Prompts for a destination and adds a new package with a unique ID to the queue. Must validate the destination against the list of valid destinations.
 *     *   `2`: Process Next Package - Removes the package at the front of the queue and simulates its delivery by printing its details. Handles the case where the queue is empty.
 *     *   `3`: View Waiting Packages - Displays the details of all packages currently in the queue without removing them.
 *     *   `4`: View Valid Destinations - Displays the list of valid destinations.
 *     *   `5`: Exit - Terminates the program.
 * 5.  Implement best practices:
 *     *   Proper encapsulation (private fields, public methods).
 *     *   Meaningful variable and method names.
 *     *   Appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Input validation (e.g., checking if destination is valid, handling non-integer menu input).
 *     *   Proper error handling using `try-catch` and `System.err`.
 *     *   Clean code structure.
 * 
 * **Initial Valid Destinations:** "New York", "Los Angeles", "Chicago", "Houston", "Phoenix"
 * 
 * **Expected Output:**
 * 
 * Your program should display a menu, accept user input, perform the requested actions, and display appropriate output or error messages.
 * 
 * Example interaction:
 * 
 * ```
 * Package Delivery Simulator Menu:
 * 1. Add New Package
 * 2. Process Next Package
 * 3. View Waiting Packages
 * 4. View Valid Destinations
 * 5. Exit
 * Enter your choice: 1
 * Enter destination: Miami
 * Error: Invalid destination: Miami. Package not added.
 * Enter your choice: 1
 * Enter destination: New York
 * Package 1 added to queue for New York.
 * Enter your choice: 1
 * Enter destination: Los Angeles
 * Package 2 added to queue for Los Angeles.
 * Enter your choice: 3
 * Waiting Packages:
 * Package ID: 1, Destination: New York
 * Package ID: 2, Destination: Los Angeles
 * Enter your choice: 2
 * Processing Package ID: 1, Destination: New York. Delivered!
 * Enter your choice: 2
 * Processing Package ID: 2, Destination: Los Angeles. Delivered!
 * Enter your choice: 2
 * Error: No packages waiting for delivery.
 * Enter your choice: 5
 * Exiting simulator.
 * ```
 * 
 * Provide the complete Java code for the `Package` and `DeliveryRouteSimulator` classes, including the `main` method to start the simulation.
 *
 * EXPLANATION:
 * This solution implements a `Package Delivery Route Simulator` meeting all the specified requirements.
 * 
 * 1.  **`Package` Class:**
 *     *   A simple class representing a package with `packageId` (int) and `destination` (String).
 *     *   Fields are `private` for encapsulation.
 *     *   Public getter methods (`getPackageId`, `getDestination`) provide controlled access.
 *     *   A constructor initializes these fields.
 *     *   `toString()` is overridden for easy printing of package details.
 * 
 * 2.  **`DeliveryRouteSimulator` Class:**
 *     *   **Required Components:**
 *         *   `Queue<Package> packageQueue`: Declared as `Queue` interface and initialized with `LinkedList`, fulfilling the `Queue` and `List` (via `LinkedList` implementing `List`) requirements implicitly, though `ArrayList` is explicitly used for destinations.
 *         *   `List<String> validDestinations`: Declared as `List` interface and initialized with `ArrayList`, explicitly fulfilling the `List` and `ArrayList` requirements.
 *         *   `Scanner scanner`: Used to read user input from `System.in`.
 *         *   `switch (choice)`: Used in the `start()` method to direct execution based on the user's menu selection.
 *         *   `System.out.println()`/`print()`: Used for displaying the menu, prompts, successful actions, and lists.
 *         *   `System.err.println()`: Used specifically for printing error messages, such as invalid menu choices, invalid destinations, or attempting to process an empty queue.
 *         *   `try-catch`: A `try-catch` block wraps the main `while` loop in the `start()` method. This provides class-wide exception handling for potential `InputMismatchException` when reading integer input or any other unexpected runtime errors that might occur within the loop's execution. A `finally` block ensures the `Scanner` is closed.
 *     *   **Functionality:**
 *         *   The constructor initializes the `packageQueue` (as a `LinkedList`), the `validDestinations` (as an `ArrayList` with initial values), a counter for `nextPackageId`, and the `Scanner`.
 *         *   The `start()` method contains the main simulation loop. It repeatedly displays the menu, reads user input, and uses a `switch` statement to call appropriate handler methods (`handleAddPackage`, `handleProcessNextPackage`, etc.).
 *         *   Input validation for the menu choice is done using `scanner.hasNextInt()` before reading with `scanner.nextInt()`. If the input is not an integer, an error is printed to `System.err`, and the invalid input is consumed.
 *         *   `handleAddPackage()` prompts for a destination, validates it using `isValidDestination()`, creates a new `Package` with an auto-incrementing ID, and adds it to the queue using `offer()`. An error is printed to `System.err` if the destination is invalid.
 *         *   `isValidDestination()` checks if the entered destination matches any in the `validDestinations` list (case-insensitive).
 *         *   `handleProcessNextPackage()` removes and returns the package at the front of the queue using `poll()`. It prints a success message or an error message to `System.err` if the queue is empty (`poll()` returns `null`).
 *         *   `handleViewWaitingPackages()` iterates through the `packageQueue` using a for-each loop to display package details *without* removing them. It checks if the queue is empty.
 *         *   `handleViewValidDestinations()` iterates through the `validDestinations` list and prints them.
 *         *   `displayMenu()` is a helper method to print the menu options.
 *     *   **Best Practices:**
 *         *   Fields are `private`. Methods are `public` (`start`, `main`) or `private` (handlers, helpers) as appropriate for encapsulation and internal logic separation.
 *         *   Variable names (`packageQueue`, `validDestinations`, `nextPackageId`, `scanner`, `choice`, `destination`) and method names (`start`, `displayMenu`, `handleAddPackage`, `isValidDestination`, `handleProcessNextPackage`, `handleViewWaitingPackages`, `handleViewValidDestinations`) are descriptive.
 *         *   Javadoc comments are provided for classes and public methods. Inline comments explain specific logic points.
 *         *   Input validation is performed for both the menu choice (integer input) and the package destination (against the valid list).
 *         *   Error handling uses `System.err` for user-facing errors and a `try-catch` for potential system-level exceptions, providing robustness.
 *         *   The code is structured into logical methods, improving readability and maintainability.
 * 
 * 3.  **`main` Method:**
 *     *   Resides within `DeliveryRouteSimulator`.
 *     *   Creates an instance of `DeliveryRouteSimulator` and calls its `start()` method to begin the simulation.
 * 
 * This solution effectively integrates all the required Java components and demonstrates key programming concepts like data structures, control flow, object-oriented principles, input/output, and exception handling in a practical scenario.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a package with a unique ID and a destination.
 */
class Package {
    private int packageId;
    private String destination;

    /**
     * Constructs a new Package.
     * @param packageId The unique ID for the package.
     * @param destination The destination for the package.
     */
    public Package(int packageId, String destination) {
        this.packageId = packageId;
        this.destination = destination;
    }

    /**
     * Gets the package ID.
     * @return The package ID.
     */
    public int getPackageId() {
        return packageId;
    }

    /**
     * Gets the destination.
     * @return The destination.
     */
    public String getDestination() {
        return destination;
    }

    @Override
    public String toString() {
        return "Package ID: " + packageId + ", Destination: " + destination;
    }
}

/**
 * Simulates a package delivery routing system.
 * Manages a queue of packages and a list of valid destinations.
 */
public class DeliveryRouteSimulator {

    private Queue<Package> packageQueue;
    private List<String> validDestinations;
    private int nextPackageId;
    private Scanner scanner;

    /**
     * Constructs a new DeliveryRouteSimulator.
     * Initializes the package queue, valid destinations, and scanner.
     */
    public DeliveryRouteSimulator() {
        // Using LinkedList as a concrete implementation of Queue
        packageQueue = new LinkedList<>();
        // Using ArrayList as a concrete implementation of List
        validDestinations = new ArrayList<>();
        validDestinations.add("New York");
        validDestinations.add("Los Angeles");
        validDestinations.add("Chicago");
        validDestinations.add("Houston");
        validDestinations.add("Phoenix");

        nextPackageId = 1;
        scanner = new Scanner(System.in);
    }

    /**
     * Starts the package delivery simulation.
     * Displays the menu and handles user input.
     */
    public void start() {
        int choice = 0;
        System.out.println("Welcome to the Package Delivery Simulator!");

        // Class-wide exception handling around the main loop
        try {
            while (choice != 5) {
                displayMenu();
                System.out.print("Enter your choice: ");

                // Input validation for integer choice
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Using switch for menu navigation
                    switch (choice) {
                        case 1:
                            handleAddPackage();
                            break;
                        case 2:
                            handleProcessNextPackage();
                            break;
                        case 3:
                            handleViewWaitingPackages();
                            break;
                        case 4:
                            handleViewValidDestinations();
                            break;
                        case 5:
                            System.out.println("Exiting simulator.");
                            break;
                        default:
                            // Using System.err for invalid menu choice
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                            break;
                    }
                } else {
                    // Using System.err for non-integer input
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input
                }
                System.out.println(); // Add a newline for better readability between cycles
            }
        } catch (Exception e) {
            // Generic catch for any unexpected errors during the simulation
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Displays the main menu options.
     */
    private void displayMenu() {
        System.out.println("Package Delivery Simulator Menu:");
        System.out.println("1. Add New Package");
        System.out.println("2. Process Next Package");
        System.out.println("3. View Waiting Packages");
        System.out.println("4. View Valid Destinations");
        System.out.println("5. Exit");
    }

    /**
     * Handles the 'Add New Package' menu option.
     * Prompts for destination, validates it, and adds package to queue.
     */
    private void handleAddPackage() {
        System.out.print("Enter destination: ");
        String destination = scanner.nextLine().trim();

        if (isValidDestination(destination)) {
            Package newPackage = new Package(nextPackageId++, destination);
            packageQueue.offer(newPackage); // Use offer() for adding to queue
            System.out.println("Package " + newPackage.getPackageId() + " added to queue for " + newPackage.getDestination() + ".");
        } else {
            // Using System.err for invalid destination
            System.err.println("Error: Invalid destination: " + destination + ". Package not added.");
        }
    }

    /**
     * Checks if a given destination is in the list of valid destinations.
     * @param destination The destination string to check.
     * @return true if the destination is valid, false otherwise.
     */
    private boolean isValidDestination(String destination) {
        // Case-insensitive check for destination validity
        for (String validDest : validDestinations) {
            if (validDest.equalsIgnoreCase(destination)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Handles the 'Process Next Package' menu option.
     * Removes and processes the package at the front of the queue.
     */
    private void handleProcessNextPackage() {
        Package nextPackage = packageQueue.poll(); // Use poll() to retrieve and remove

        if (nextPackage != null) {
            System.out.println("Processing " + nextPackage + ". Delivered!");
        } else {
            // Using System.err for empty queue
            System.err.println("Error: No packages waiting for delivery.");
        }
    }

    /**
     * Handles the 'View Waiting Packages' menu option.
     * Displays all packages currently in the queue.
     */
    private void handleViewWaitingPackages() {
        if (packageQueue.isEmpty()) {
            System.out.println("No packages currently waiting.");
        } else {
            System.out.println("Waiting Packages:");
            // Iterate through the queue without removing elements
            for (Package pkg : packageQueue) {
                System.out.println(pkg);
            }
        }
    }

    /**
     * Handles the 'View Valid Destinations' menu option.
     * Displays the list of predefined valid destinations.
     */
    private void handleViewValidDestinations() {
        System.out.println("Valid Destinations:");
        if (validDestinations.isEmpty()) {
            System.out.println("No valid destinations defined.");
        } else {
            for (String dest : validDestinations) {
                System.out.println("- " + dest);
            }
        }
    }

    /**
     * Main method to start the simulator.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        DeliveryRouteSimulator simulator = new DeliveryRouteSimulator();
        simulator.start();
    }
}
