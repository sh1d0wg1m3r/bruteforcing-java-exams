/*
 * Exam Question #947
 * Generated on: 2025-05-12 17:03:50
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Package Delivery Service Management
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified management system for a package delivery service. The system needs to track packages that are waiting to be dispatched and those that have been successfully delivered. New packages arrive and are placed in a queue. Drivers pick up the next available package from the front of the queue for delivery. Once delivered, the package is moved to a list of completed deliveries.
 * 
 * **Requirements:**
 * 
 * 1.  **Package Representation:** Create a class `Package` to represent a package. It should have private fields for a unique `String packageId`, `String destinationAddress`, and `double weight`. Include a constructor and public getter methods for these fields. Implement `equals()` and `hashCode()` methods based *only* on the `packageId` to ensure uniqueness checks work correctly in collections. Also, provide a meaningful `toString()` method.
 * 
 * 2.  **Delivery Service Logic:** Create a class `DeliveryService` to manage the packages.
 *     *   It must contain a `private Queue<Package>` to hold packages waiting for dispatch. Use `java.util.LinkedList` as the concrete implementation for the `Queue`.
 *     *   It must contain a `private List<Package>` to hold packages that have been delivered. Use `java.util.ArrayList` as the concrete implementation for the `List`.
 *     *   Implement the following public methods:
 *         *   `boolean addPackage(Package pkg)`: Adds a package to the waiting queue *only if* its `packageId` is not already present in either the waiting queue or the delivered list. Returns `true` if added successfully, `false` otherwise.
 *         *   `Package dispatchDriver()`: Removes the next package from the waiting queue (FIFO). If the queue is not empty, move the package to the delivered list and return the dispatched `Package` object. If the queue is empty, return `null`.
 *         *   `void listWaitingPackages()`: Prints details of all packages currently in the waiting queue to `System.out`. If the queue is empty, print a message indicating that.
 *         *   `void listDeliveredPackages()`: Prints details of all packages currently in the delivered list to `System.out`. If the list is empty, print a message indicating that.
 * 
 * 3.  **Command-Line Interface:**
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Package
 *         2.  Dispatch Driver
 *         3.  List Waiting Packages
 *         4.  List Delivered Packages
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 
 * 4.  **Input Validation:**
 *     *   When adding a package, validate that the `packageId` is not empty, the `destinationAddress` is not empty, and the `weight` is a positive value.
 *     *   If validation fails, print an informative error message to `System.err` and do not add the package.
 * 
 * 5.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks. This should primarily handle potential issues during user input, such as entering non-integer values for the menu choice or non-numeric values for weight.
 *     *   Catch `java.util.InputMismatchException` specifically for integer input errors.
 *     *   Include a general `catch (Exception e)` block to handle other unexpected runtime errors.
 *     *   Print error messages from exception handling to `System.err`.
 * 
 * 6.  **Output:**
 *     *   Use `System.out.println()` for displaying the menu, prompts, success messages, and package lists.
 *     *   Use `System.err.println()` for all error messages (input validation errors, runtime errors, dispatching from empty queue notification).
 * 
 * 7.  **Best Practices:**
 *     *   Adhere to Java best practices including encapsulation (private fields, public methods), meaningful variable and method names, and appropriate comments.
 *     *   Ensure clean code structure.
 * 
 * **Expected Flow:**
 * 
 * The program should display the menu, read the user's choice, perform the requested action (including necessary input prompts and validation), and then loop back to display the menu until the user chooses to exit. Error conditions (like invalid input or dispatching from an empty queue) should be handled gracefully with messages on `System.err`.
 * 
 * **Example Interaction Snippet (Illustrative):**
 * 
 * ```
 * --- Delivery Service Menu ---
 * 1. Add New Package
 * 2. Dispatch Driver
 * 3. List Waiting Packages
 * 4. List Delivered Packages
 * 5. Exit
 * Enter your choice: 1
 * Enter Package ID: PKG001
 * Enter Destination Address: 123 Main St
 * Enter Weight (kg): 5.5
 * Package PKG001 added to waiting queue.
 * 
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 1
 * Enter Package ID: PKG001
 * Enter Destination Address: 456 Oak Ave
 * Enter Weight (kg): 2.0
 * Error: Package with ID PKG001 already exists.
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 2
 * Dispatching package...
 * Dispatched Package: [ID: PKG001, Dest: 123 Main St, Weight: 5.5kg]
 * 
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 2
 * Error: No packages waiting for dispatch.
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 3
 * Waiting Packages:
 * (Queue is empty)
 * 
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 4
 * Delivered Packages:
 * [ID: PKG001, Dest: 123 Main St, Weight: 5.5kg]
 * 
 * --- Delivery Service Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Delivery Service.
 * ```
 *
 * EXPLANATION:
 * This solution provides a complete implementation for the Package Delivery Service Management system, demonstrating the required Java concepts and best practices.
 * 
 * **Key Concepts Demonstrated:**
 * 
 * 1.  **`Queue` (`java.util.Queue`) and `LinkedList`:** The `DeliveryService` class uses a `Queue<Package>` named `waitingQueue` to manage packages awaiting dispatch. `LinkedList` is chosen as the concrete implementation because it efficiently supports adding elements to the end (`offer`) and removing elements from the beginning (`poll`), which are typical queue operations. The `dispatchDriver()` method uses `poll()` to retrieve and remove the next package according to the FIFO (First-In, First-Out) principle.
 * 2.  **`List` (`java.util.List`) and `ArrayList`:** The `DeliveryService` class uses a `List<Package>` named `deliveredList` to store packages that have been successfully dispatched. `ArrayList` is chosen as the concrete implementation because it provides dynamic array capabilities and efficient storage/retrieval of delivered items. The `dispatchDriver()` method adds the dispatched package to this list using `add()`. Both `waitingQueue` and `deliveredList` are used to check for duplicate package IDs in the `addPackage()` method.
 * 3.  **`Scanner` (`java.util.Scanner`):** The `main` method in `DeliveryApp` uses a `Scanner` object to read user input from `System.in`, allowing for interactive control of the application.
 * 4.  **`Switch` Statement:** The `main` method uses a `switch` statement based on the user's integer choice to navigate between different actions (Add Package, Dispatch Driver, List Waiting, List Delivered, Exit). This provides a clean and readable way to handle multiple distinct commands.
 * 5.  **`System.err`:** Error messages, including invalid input from the user (menu choice, package details) and operational errors (e.g., trying to dispatch from an empty queue, adding a duplicate package), are printed to `System.err.println()`. This separates error output from normal application output (`System.out`).
 * 6.  **`System.out`:** All normal application output, such as the menu display, prompts for input, confirmation messages, and the lists of packages, is printed to `System.out.println()`.
 * 7.  **Class-Wide Exception Handling (`try-catch`):** A `try-catch` block is placed around the main `while` loop in the `main` method. This provides a central point for catching potential runtime exceptions that might occur during the program's execution, particularly related to user input processing (`InputMismatchException` when reading the menu choice, `NumberFormatException` when parsing weight). A general `catch (Exception e)` is included as a fallback for any other unexpected errors. Error messages from these catches are directed to `System.err`. The `finally` block ensures the `Scanner` is closed.
 * 8.  **Encapsulation:** The `Package` class demonstrates encapsulation with private fields (`packageId`, `destinationAddress`, `weight`) and public getter methods. The `DeliveryService` class also keeps its internal collections (`waitingQueue`, `deliveredList`) private, exposing only public methods (`addPackage`, `dispatchDriver`, etc.) to interact with them, controlling access and modification.
 * 9.  **Meaningful Names:** Classes (`Package`, `DeliveryService`, `DeliveryApp`), variables (`packageId`, `waitingQueue`, `dispatchedPackage`, `choice`), and methods (`addPackage`, `dispatchDriver`, `listWaitingPackages`, `printMenu`) have names that clearly indicate their purpose.
 * 10. **Comments and Documentation:** Javadoc comments are provided for classes and methods to explain their function, parameters, and return values. Inline comments clarify specific logic where needed.
 * 11. **Input Validation:** Before creating a `Package` object and attempting to add it, the code explicitly checks if the ID and destination are empty strings and if the weight is positive. These checks prevent invalid data from entering the system.
 * 12. **Proper Error Handling:** The code handles specific error conditions (duplicate ID, empty queue for dispatch) with informative messages on `System.err`, distinct from the general exception handling. Input errors from `Scanner` are caught, an error message is printed, and the invalid input is consumed to prevent infinite loops.
 * 13. **Clean Code Structure:** The code is organized into logical classes (`Package`, `DeliveryService`, `DeliveryApp`), each responsible for a specific part of the system. The `main` method orchestrates the user interaction and calls methods on the `DeliveryService` object.
 * 
 * This solution effectively integrates the required components into a practical scenario, showcasing understanding of collection usage, user interaction, flow control, and robust error handling in Java.
 */

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.Queue;
import java.util.Scanner;

// Represents a package with unique ID, destination, and weight.
class Package {
    private String packageId;
    private String destinationAddress;
    private double weight; // in kg

    /**
     * Constructs a new Package.
     * @param packageId The unique identifier for the package.
     * @param destinationAddress The delivery address.
     * @param weight The weight of the package in kilograms.
     */
    public Package(String packageId, String destinationAddress, double weight) {
        this.packageId = packageId;
        this.destinationAddress = destinationAddress;
        this.weight = weight;
    }

    // --- Getters ---
    public String getPackageId() {
        return packageId;
    }

    public String getDestinationAddress() {
        return destinationAddress;
    }

    public double getWeight() {
        return weight;
    }

    /**
     * Provides a string representation of the Package.
     */
    @Override
    public String toString() {
        return "[ID: " + packageId + ", Dest: " + destinationAddress + ", Weight: " + weight + "kg]";
    }

    /**
     * Checks equality based solely on packageId.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Package aPackage = (Package) o;
        return Objects.equals(packageId, aPackage.packageId);
    }

    /**
     * Generates a hash code based solely on packageId.
     */
    @Override
    public int hashCode() {
        return Objects.hash(packageId);
    }
}

// Manages the flow of packages through waiting and delivered states.
class DeliveryService {
    private Queue<Package> waitingQueue; // Packages waiting for dispatch
    private List<Package> deliveredList; // Packages that have been delivered

    /**
     * Constructs a DeliveryService with empty queues and lists.
     */
    public DeliveryService() {
        this.waitingQueue = new LinkedList<>(); // Concrete Queue implementation
        this.deliveredList = new ArrayList<>(); // Concrete List implementation
    }

    /**
     * Adds a new package to the waiting queue if its ID is unique.
     * @param pkg The package to add.
     * @return true if the package was added, false if an package with the same ID already exists.
     */
    public boolean addPackage(Package pkg) {
        // Check for duplicate ID in both queues
        if (waitingQueue.contains(pkg) || deliveredList.contains(pkg)) {
            return false; // Package with this ID already exists
        }
        return waitingQueue.offer(pkg); // Add to the end of the waiting queue
    }

    /**
     * Dispatches the next package from the waiting queue.
     * @return The dispatched Package object, or null if the waiting queue is empty.
     */
    public Package dispatchDriver() {
        Package dispatchedPackage = waitingQueue.poll(); // Get and remove head of queue
        if (dispatchedPackage != null) {
            deliveredList.add(dispatchedPackage); // Add to the delivered list
        }
        return dispatchedPackage;
    }

    /**
     * Prints details of all packages currently in the waiting queue.
     */
    public void listWaitingPackages() {
        System.out.println("\n--- Waiting Packages ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("(Queue is empty)");
        } else {
            // Iterate through the queue without removing elements
            waitingQueue.forEach(System.out::println);
        }
        System.out.println("------------------------");
    }

    /**
     * Prints details of all packages currently in the delivered list.
     */
    public void listDeliveredPackages() {
        System.out.println("\n--- Delivered Packages ---");
        if (deliveredList.isEmpty()) {
            System.out.println("(List is empty)");
        } else {
            // Iterate through the list
            deliveredList.forEach(System.out::println);
        }
        System.out.println("--------------------------");
    }
}

// Main application class for the command-line interface.
public class DeliveryApp {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DeliveryService deliveryService = new DeliveryService();

        System.out.println("Welcome to the Package Delivery Service Management System!");

        // Class-wide exception handling using a try-catch block around the main loop
        try {
            while (true) {
                printMenu();
                int choice = -1; // Default invalid choice

                System.out.print("Enter your choice: ");
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character left by nextInt()
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration of the loop
                }

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Add New Package
                        System.out.println("\n--- Add New Package ---");
                        System.out.print("Enter Package ID: ");
                        String id = scanner.nextLine().trim();
                        System.out.print("Enter Destination Address: ");
                        String destination = scanner.nextLine().trim();
                        System.out.print("Enter Weight (kg): ");
                        double weight = -1;
                        try {
                            weight = Double.parseDouble(scanner.nextLine().trim());
                        } catch (NumberFormatException e) {
                            System.err.println("Error: Invalid weight format. Please enter a number.");
                            continue; // Skip adding package and return to menu
                        }

                        // Input Validation
                        if (id.isEmpty()) {
                            System.err.println("Error: Package ID cannot be empty.");
                        } else if (destination.isEmpty()) {
                            System.err.println("Error: Destination address cannot be empty.");
                        } else if (weight <= 0) {
                            System.err.println("Error: Weight must be a positive value.");
                        } else {
                            Package newPackage = new Package(id, destination, weight);
                            if (deliveryService.addPackage(newPackage)) {
                                System.out.println("Package " + id + " added to waiting queue.");
                            } else {
                                System.err.println("Error: Package with ID " + id + " already exists.");
                            }
                        }
                        System.out.println("-----------------------");
                        break;

                    case 2: // Dispatch Driver
                        System.out.println("\n--- Dispatch Driver ---");
                        Package dispatched = deliveryService.dispatchDriver();
                        if (dispatched != null) {
                            System.out.println("Dispatched Package: " + dispatched);
                        } else {
                            System.err.println("Error: No packages waiting for dispatch.");
                        }
                        System.out.println("-----------------------");
                        break;

                    case 3: // List Waiting Packages
                        deliveryService.listWaitingPackages();
                        break;

                    case 4: // List Delivered Packages
                        deliveryService.listDeliveredPackages();
                        break;

                    case 5: // Exit
                        System.out.println("\nExiting Delivery Service.");
                        scanner.close(); // Close the scanner
                        return; // Exit the application

                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // General catch-all for unexpected runtime errors
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure scanner is closed even if an unexpected exception occurs
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("\n--- Delivery Service Menu ---");
        System.out.println("1. Add New Package");
        System.out.println("2. Dispatch Driver");
        System.out.println("3. List Waiting Packages");
        System.out.println("4. List Delivered Packages");
        System.out.println("5. Exit");
        System.out.println("-----------------------------");
    }
}
