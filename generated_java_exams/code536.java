/*
 * Exam Question #536
 * Generated on: 2025-05-11 23:26:16
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Project Task Prioritization and Execution System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simple system to manage tasks for a small project team. The system needs to allow team members to add tasks, view all registered tasks, prioritize tasks for immediate execution based on their priority level, and execute the next task waiting in a queue.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system with the following features:
 * 
 * 1.  **Task Management:**
 *     *   Allow adding new tasks. Each task should have a description (String) and a priority level (e.g., HIGH, MEDIUM, LOW).
 *     *   Maintain a list of *all* tasks ever added to the system.
 *     *   Maintain a queue of tasks that are currently prioritized and waiting for execution.
 *     *   Tasks in the main list should track their completion status.
 * 
 * 2.  **Functionality:**
 *     *   **Add Task:** Prompt the user for task description and priority level. Add the new task to the list of all tasks.
 *     *   **List All Tasks:** Display all tasks in the system, including their description, priority, and completion status.
 *     *   **Prioritize Tasks for Execution:** Move *incomplete* tasks from the list of all tasks into the execution queue. Tasks should be added to the queue based on priority: all HIGH priority tasks first, then all MEDIUM, then all LOW. Tasks within the same priority level can be added in any order (e.g., order of creation). The execution queue should be cleared before adding new tasks during this operation.
 *     *   **Execute Next Task:** Take the next task from the execution queue, mark it as completed in the main list (or the task object itself), and display a message indicating which task was executed. If the queue is empty, display an error message.
 *     *   **View Execution Queue:** Display the tasks currently waiting in the execution queue.
 *     *   **Exit:** Terminate the program.
 * 
 * 3.  **Technical Constraints:**
 *     *   You **must** use `java.util.Queue`.
 *     *   You **must** use `java.util.ArrayList`.
 *     *   You **must** use `java.util.List` (as the type for the collection storing all tasks).
 *     *   You **must** use `java.util.Scanner` for user input.
 *     *   You **must** use a `switch` statement for handling the main menu options.
 *     *   You **must** use `System.err` for displaying error messages (e.g., invalid input, trying to execute an empty queue).
 *     *   You **must** use `System.out` for displaying normal output (menu, prompts, task lists, success messages).
 *     *   You **must** implement class-wide exception handling using `try-catch` blocks, particularly around user input processing and critical operations.
 * 
 * 4.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods/constructors).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Implement input validation (e.g., for menu choices, priority levels).
 *     *   Ensure proper error handling as specified.
 *     *   Structure your code cleanly into classes and methods.
 * 
 * **Input/Output:**
 * 
 * *   The program should present a menu of options (Add Task, List All Tasks, Prioritize, Execute Next, View Queue, Exit).
 * *   Prompts for input should be clear.
 * *   Output for task lists and execution messages should be informative.
 * *   Error messages should be distinct using `System.err`.
 * 
 * **Example Interaction (Illustrative):**
 * 
 * ```
 * --- Project Task System Menu ---
 * 1. Add Task
 * 2. List All Tasks
 * 3. Prioritize Tasks for Execution
 * 4. Execute Next Task
 * 5. View Execution Queue
 * 6. Exit
 * Enter your choice: 1
 * Enter task description: Implement login screen
 * Enter priority (HIGH, MEDIUM, LOW): HIGH
 * 
 * Task "Implement login screen" added with priority HIGH.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 1
 * Enter task description: Write unit tests
 * Enter priority (HIGH, MEDIUM, LOW): MEDIUM
 * 
 * Task "Write unit tests" added with priority MEDIUM.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 3
 * 
 * Prioritizing tasks...
 * Added 2 incomplete tasks to the execution queue.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 5
 * 
 * Execution Queue:
 * [HIGH] Implement login screen (Incomplete)
 * [MEDIUM] Write unit tests (Incomplete)
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 4
 * 
 * Executing task: [HIGH] Implement login screen (Incomplete)
 * 
 * Task "Implement login screen" marked as completed.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 5
 * 
 * Execution Queue:
 * [MEDIUM] Write unit tests (Incomplete)
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 4
 * 
 * Executing task: [MEDIUM] Write unit tests (Incomplete)
 * 
 * Task "Write unit tests" marked as completed.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 4
 * System.err: No tasks in the execution queue to execute.
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 2
 * 
 * All Tasks:
 * [HIGH] Implement login screen (Completed)
 * [MEDIUM] Write unit tests (Completed)
 * 
 * --- Project Task System Menu ---
 * ...
 * Enter your choice: 6
 * 
 * Exiting Project Task System.
 * ```
 * 
 * Your solution should include all necessary classes and a `main` method to run the system.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated on:
 * *   Correctness and completeness of implementation according to the requirements.
 * *   Effective use of all specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to best practices (encapsulation, naming, comments, input validation, error handling, code structure).
 * *   Clarity and readability of the code.
 * 
 * ```java
 * // Your solution code goes here
 * ```
 *
 * EXPLANATION:
 * This solution implements the `ProjectTaskSystem` as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **`TaskPriority` Enum:** Defines the possible priority levels, making the code more readable and preventing invalid priority strings.
 * 2.  **`Task` Class:**
 *     *   Encapsulates task data (`description`, `priority`, `isCompleted`) using private fields.
 *     *   Provides a constructor for initialization.
 *     *   Includes public getter methods.
 *     *   Has a `markCompleted()` method to change the task's state.
 *     *   Overrides `toString()` for easy printing of task details.
 * 3.  **`ProjectTaskSystem` Class:**
 *     *   **`List<Task> allTasks = new ArrayList<>();`**: An `ArrayList` is used to store *all* tasks created in the system. It is declared using the `List` interface type, fulfilling the requirement. `ArrayList` provides dynamic resizing and efficient random access, suitable for listing all tasks.
 *     *   **`Queue<Task> executionQueue = new LinkedList<>();`**: A `LinkedList` is used to implement the `Queue` interface. `LinkedList` is a common choice for implementing `Queue` as it provides efficient additions to the tail (`offer`) and removals from the head (`poll`), which are core queue operations. This queue holds tasks waiting to be executed in a specific order determined by the `prioritizeTasksForExecution` method.
 *     *   **`Scanner scanner = new Scanner(System.in);`**: Used to read user input from the console (`System.in`).
 *     *   **`run()` Method:**
 *         *   Contains the main application loop (`while (choice != 6)`).
 *         *   Calls `displayMenu()` to show options.
 *         *   Uses a **`try-catch`** block wrapping the `scanner.nextInt()` and the `switch` statement.
 *             *   `catch (InputMismatchException e)` specifically handles cases where the user enters non-integer input for the menu choice, prints an error using `System.err`, consumes the invalid input from the scanner, and allows the loop to continue.
 *             *   `catch (Exception e)` provides a broader, class-wide catch for any other unexpected runtime exceptions that might occur during the execution of the menu options, printing an error using `System.err`. This satisfies the requirement for class-wide exception handling.
 *         *   Uses a **`switch`** statement to direct program flow based on the user's valid menu choice.
 *     *   **`addTask()` Method:**
 *         *   Prompts for description and priority.
 *         *   Includes input validation for the priority level using a `while` loop and a `try-catch(IllegalArgumentException)` block around `TaskPriority.valueOf()`. Uses `System.err` for invalid priority input.
 *         *   Creates a `Task` object and adds it to the `allTasks` `ArrayList`.
 *         *   Uses `System.out` for prompts and confirmation messages.
 *     *   **`listAllTasks()` Method:** Iterates through the `allTasks` `ArrayList` and prints each task's details using its `toString()` method. Uses `System.out`.
 *     *   **`prioritizeTasksForExecution()` Method:**
 *         *   Clears the `executionQueue` using `queue.clear()`.
 *         *   Iterates through the `allTasks` `List` multiple times (once for each priority level) to add incomplete tasks to the `executionQueue` using `queue.offer()`. This ensures higher priority tasks are added first, meaning they will be at the head of the queue (processed sooner) when `poll()` is called.
 *         *   Uses `System.out` for status messages.
 *     *   **`executeNextTask()` Method:**
 *         *   Uses `executionQueue.poll()` to retrieve and remove the task at the head of the queue.
 *         *   Checks if `poll()` returned `null` (meaning the queue was empty). If so, it prints an error using `System.err`.
 *         *   If a task is retrieved, it calls `taskToExecute.markCompleted()`. Since the `Task` objects in the `Queue` are the same references as in the `List`, marking it complete here updates the status visible in the `listAllTasks()` output as well.
 *         *   Uses `System.out` for execution confirmation.
 *     *   **`viewExecutionQueue()` Method:** Iterates through the `executionQueue` using an enhanced for loop (which does *not* remove elements) and prints each task. Uses `System.out`.
 *     *   **`main()` Method:** The entry point of the application. Creates an instance of `ProjectTaskSystem` and calls its `run()` method.
 * 
 * The code adheres to best practices by using meaningful names, encapsulation, comments, and structuring the logic into separate methods within the `ProjectTaskSystem` class. Input validation and error handling are implemented using `try-catch` blocks and directing messages to `System.out` or `System.err` as required.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Enum for task priority levels
enum TaskPriority {
    HIGH, MEDIUM, LOW
}

/**
 * Represents a single task in the project system.
 */
class Task {
    private String description;
    private TaskPriority priority;
    private boolean isCompleted;

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task.
     * @param priority    The priority level of the task.
     */
    public Task(String description, TaskPriority priority) {
        this.description = description;
        this.priority = priority;
        this.isCompleted = false; // Tasks are initially incomplete
    }

    // --- Getters ---
    public String getDescription() {
        return description;
    }

    public TaskPriority getPriority() {
        return priority;
    }

    public boolean isCompleted() {
        return isCompleted;
    }

    // --- Setters/Modifiers ---
    public void markCompleted() {
        this.isCompleted = true;
    }

    /**
     * Returns a string representation of the Task.
     *
     * @return String representing the task details.
     */
    @Override
    public String toString() {
        return "[" + priority + "] " + description + " (" + (isCompleted ? "Completed" : "Incomplete") + ")";
    }
}

/**
 * Manages the collection of tasks and the execution queue.
 */
class ProjectTaskSystem {
    // Use List interface type, implemented by ArrayList
    private List<Task> allTasks;
    // Use Queue interface type, implemented by LinkedList
    private Queue<Task> executionQueue;
    private Scanner scanner;

    /**
     * Constructs a new ProjectTaskSystem.
     * Initializes task storage and the execution queue.
     */
    public ProjectTaskSystem() {
        this.allTasks = new ArrayList<>(); // Storage for all tasks
        this.executionQueue = new LinkedList<>(); // Queue for tasks ready to execute
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Project Task System Menu ---");
        System.out.println("1. Add Task");
        System.out.println("2. List All Tasks");
        System.out.println("3. Prioritize Tasks for Execution");
        System.out.println("4. Execute Next Task");
        System.out.println("5. View Execution Queue");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Adds a new task based on user input.
     */
    private void addTask() {
        System.out.print("Enter task description: ");
        scanner.nextLine(); // Consume newline left by previous nextInt() or similar
        String description = scanner.nextLine();

        TaskPriority priority = null;
        boolean validPriority = false;
        while (!validPriority) {
            System.out.print("Enter priority (HIGH, MEDIUM, LOW): ");
            try {
                String priorityInput = scanner.nextLine().trim().toUpperCase();
                priority = TaskPriority.valueOf(priorityInput);
                validPriority = true;
            } catch (IllegalArgumentException e) {
                System.err.println("Invalid priority. Please enter HIGH, MEDIUM, or LOW.");
            }
        }

        Task newTask = new Task(description, priority);
        allTasks.add(newTask);
        System.out.println("\nTask \"" + description + "\" added with priority " + priority + ".");
    }

    /**
     * Lists all tasks currently in the system's main list.
     */
    private void listAllTasks() {
        System.out.println("\n--- All Tasks ---");
        if (allTasks.isEmpty()) {
            System.out.println("No tasks added yet.");
        } else {
            for (int i = 0; i < allTasks.size(); i++) {
                System.out.println((i + 1) + ". " + allTasks.get(i));
            }
        }
    }

    /**
     * Prioritizes incomplete tasks and adds them to the execution queue
     * based on priority (HIGH, MEDIUM, LOW).
     */
    private void prioritizeTasksForExecution() {
        System.out.println("\nPrioritizing tasks...");
        executionQueue.clear(); // Clear previous queue contents

        int tasksAddedToQueue = 0;

        // Add HIGH priority tasks first
        for (Task task : allTasks) {
            if (!task.isCompleted() && task.getPriority() == TaskPriority.HIGH) {
                executionQueue.offer(task); // offer() is preferred over add() for queues
                tasksAddedToQueue++;
            }
        }

        // Add MEDIUM priority tasks
        for (Task task : allTasks) {
            if (!task.isCompleted() && task.getPriority() == TaskPriority.MEDIUM) {
                executionQueue.offer(task);
                tasksAddedToQueue++;
            }
        }

        // Add LOW priority tasks
        for (Task task : allTasks) {
            if (!task.isCompleted() && task.getPriority() == TaskPriority.LOW) {
                executionQueue.offer(task);
                tasksAddedToQueue++;
            }
        }

        System.out.println("Added " + tasksAddedToQueue + " incomplete tasks to the execution queue.");
    }

    /**
     * Executes the next task from the execution queue.
     */
    private void executeNextTask() {
        System.out.println("\nExecuting next task...");
        Task taskToExecute = executionQueue.poll(); // Retrieves and removes the head of the queue

        if (taskToExecute != null) {
            System.out.println("Executing task: " + taskToExecute);
            // Mark the task as completed. Since Task objects are mutable
            // and stored by reference in both the list and the queue,
            // marking it in the queue object updates the one in the list too.
            taskToExecute.markCompleted();
            System.out.println("Task \"" + taskToExecute.getDescription() + "\" marked as completed.");
        } else {
            System.err.println("No tasks in the execution queue to execute.");
        }
    }

    /**
     * Displays the tasks currently waiting in the execution queue.
     */
    private void viewExecutionQueue() {
        System.out.println("\n--- Execution Queue ---");
        if (executionQueue.isEmpty()) {
            System.out.println("Execution queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Task task : executionQueue) {
                System.out.println(task);
            }
        }
    }

    /**
     * Runs the main loop of the Project Task System.
     * Includes class-wide exception handling for the main operation loop.
     */
    public void run() {
        int choice = -1;
        while (choice != 6) {
            displayMenu();
            try {
                choice = scanner.nextInt();

                switch (choice) {
                    case 1:
                        addTask();
                        break;
                    case 2:
                        listAllTasks();
                        break;
                    case 3:
                        prioritizeTasksForExecution();
                        break;
                    case 4:
                        executeNextTask();
                        break;
                    case 5:
                        viewExecutionQueue();
                        break;
                    case 6:
                        System.out.println("\nExiting Project Task System.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to continue loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions for class-wide handling
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging purposes
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * Main method to start the Project Task System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProjectTaskSystem system = new ProjectTaskSystem();
        system.run();
    }
}
