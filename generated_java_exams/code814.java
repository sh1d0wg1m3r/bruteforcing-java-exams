/*
 * Exam Question #814
 * Generated on: 2025-05-12 16:45:15
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Advanced Clinic Patient Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simplified patient management system for a clinic. The system needs to manage patients who are waiting to be seen and keep a record of patients who have already been processed. The system should be interactive, menu-driven, and demonstrate robust error handling and collection usage.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Class:** Create a `Patient` class with private fields for `patientId` (String) and `name` (String). Include a constructor, public getter methods for both fields, and an overridden `toString()` method that returns a formatted string like "Patient ID: [ID], Name: [Name]". Ensure proper encapsulation.
 * 
 * 2.  **Clinic Management Class:** Create a `ClinicManagement` class that will contain the main logic.
 *     *   It must use a `java.util.Queue<Patient>` to store patients currently waiting to be seen (the waiting list).
 *     *   It must use a `java.util.List<Patient>` (specifically, an `ArrayList`) to store patients who have already been processed. Declare the variable using the `List` interface type.
 *     *   It must use a `java.util.Scanner` to read user input from the console.
 *     *   The class should have methods for the following operations:
 *         *   `addPatient()`: Prompts the user for patient ID and name, creates a `Patient` object, and adds it to the waiting queue.
 *         *   `callNextPatient()`: Removes the patient at the front of the waiting queue and adds them to the processed patients list. If the waiting queue is empty, it should print an error message to `System.err`. Otherwise, it should print a success message to `System.out`.
 *         *   `viewWaitingList()`: Displays all patients currently in the waiting queue. If the queue is empty, print a message indicating that. Use `System.out`.
 *         *   `viewProcessedPatients()`: Displays all patients in the processed patients list. If the list is empty, print a message indicating that. Use `System.out`.
 *         *   `displayMenu()`: Prints the main menu options to `System.out`.
 * 
 * 3.  **Main Application Logic:** Implement a `main` method in the `ClinicManagement` class that:
 *     *   Creates an instance of `ClinicManagement`.
 *     *   Runs a loop that repeatedly displays the menu, reads user input, and performs the selected action using a `switch` statement.
 *     *   The menu options should be:
 *         1.  Add Patient to Waiting List
 *         2.  Call Next Patient
 *         3.  View Waiting List
 *         4.  View Processed Patients
 *         5.  Exit
 *     *   The loop should continue until the user chooses option 5.
 * 
 * 4.  **Error Handling:**
 *     *   Implement class-wide exception handling using `try-catch` blocks. Specifically, wrap the main loop's input reading and switch logic in a `try-catch` block to handle potential `InputMismatchException` (if the user enters non-integer input for the menu choice) or other runtime errors. Print an error message to `System.err` in the catch block.
 *     *   Handle the case where `callNextPatient()` is selected when the waiting queue is empty. Print an appropriate error message to `System.err`.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, patient lists).
 *     *   Use `System.err` for all error messages (invalid input, empty queue errors).
 * 
 * 6.  **Best Practices:** Adhere to Java best practices, including:
 *     *   Meaningful variable and method names.
 *     *   Appropriate use of comments and documentation (brief Javadoc for classes/methods).
 *     *   Proper indentation and code formatting.
 *     *   Resource management (closing the Scanner).
 * 
 * **Expected Output Structure (Example Interaction):**
 * 
 * ```
 * Clinic Patient Management System Menu:
 * 1. Add Patient to Waiting List
 * 2. Call Next Patient
 * 3. View Waiting List
 * 4. View Processed Patients
 * 5. Exit
 * Enter your choice: 1
 * Enter Patient ID: P001
 * Enter Patient Name: Alice
 * Patient P001 (Alice) added to waiting list.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 1
 * Enter Patient ID: P002
 * Enter Patient Name: Bob
 * Patient P002 (Bob) added to waiting list.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Patient ID: P001, Name: Alice
 * Patient ID: P002, Name: Bob
 * --------------------
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 2
 * Calling next patient...
 * Patient P001 (Alice) has been processed.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Waiting List ---
 * Patient ID: P002, Name: Bob
 * --------------------
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 4
 * --- Processed Patients ---
 * Patient ID: P001, Name: Alice
 * --------------------------
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 2
 * Calling next patient...
 * Patient P002 (Bob) has been processed.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 2
 * Calling next patient...
 * Error: The waiting list is empty. No patient to call.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: invalid_input
 * Error: Invalid input. Please enter a number.
 * 
 * Clinic Patient Management System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Clinic Patient Management System.
 * ```
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness of implementation according to requirements.
 * *   Proper usage of `Queue`, `List`, `ArrayList`, `Scanner`, `switch`.
 * *   Effective error handling using `try-catch` and `System.err`.
 * *   Adherence to best practices (encapsulation, naming, comments, output streams).
 * *   Clean code structure.
 *
 * EXPLANATION:
 * This solution implements a simple Clinic Patient Management System demonstrating the required Java concepts.
 * 
 * 1.  **Patient Class:** The `Patient` class is a simple Plain Old Java Object (POJO) with private fields (`patientId`, `name`), a constructor, and public getter methods, adhering to the principle of encapsulation. The `toString()` method provides a convenient way to represent a patient object as a string for printing.
 * 
 * 2.  **ClinicManagement Class:** This class orchestrates the system.
 *     *   It uses a `java.util.Queue<Patient>` named `waitingQueue`. `LinkedList` is used as the concrete implementation of the `Queue` interface because it provides efficient insertion and removal from both ends, which is suitable for queue operations (FIFO - First-In, First-Out).
 *     *   It uses a `java.util.List<Patient>` named `processedPatients`. `ArrayList` is used as the concrete implementation of the `List` interface. `ArrayList` is suitable here as we are primarily adding processed patients and occasionally iterating through the list to view them. Declaring it as `List` allows for flexibility if a different `List` implementation were needed later.
 *     *   A `java.util.Scanner` is used to read input from `System.in`.
 * 
 * 3.  **Methods:**
 *     *   `displayMenu()`: A simple helper method to print the options.
 *     *   `addPatient()`: Reads patient details using the `Scanner` and adds a new `Patient` object to the `waitingQueue` using the `offer()` method (a standard `Queue` operation). Basic input validation is included to check for empty ID or name.
 *     *   `callNextPatient()`: Uses `waitingQueue.poll()`. The `poll()` method is ideal for queues as it retrieves and *removes* the head of the queue, returning `null` if the queue is empty. This return value is checked, and an error message is printed to `System.err` if it's `null`. Otherwise, the retrieved patient is added to the `processedPatients` `List` using `add()`, and a success message is printed to `System.out`.
 *     *   `viewWaitingList()`: Iterates through the `waitingQueue` using an enhanced for loop. This iterates over the elements without removing them, which is suitable for viewing. It checks if the queue is empty first and prints a message if it is. Output goes to `System.out`.
 *     *   `viewProcessedPatients()`: Iterates through the `processedPatients` `List` and prints each patient. It checks if the list is empty first and prints a message if it is. Output goes to `System.out`.
 * 
 * 4.  **Main Application Loop and Control Flow:**
 *     *   The `run()` method contains the main `while` loop that keeps the application running until the user chooses to exit.
 *     *   Inside the loop, `displayMenu()` is called.
 *     *   User input for the menu choice is read using `scanner.nextInt()`.
 *     *   `scanner.nextLine()` is called immediately after `scanner.nextInt()` to consume the leftover newline character, preventing issues with subsequent `scanner.nextLine()` calls in `addPatient()`.
 *     *   A `switch` statement is used to direct the program flow based on the user's integer choice, calling the appropriate method for each case.
 *     *   A `default` case in the `switch` handles valid integer inputs that are not within the menu range (1-5).
 * 
 * 5.  **Error Handling:**
 *     *   A `try-catch` block is wrapped around the input reading (`scanner.nextInt()`) and the `switch` statement within the main loop. This is a common pattern for handling potential exceptions during interactive input processing.
 *     *   `InputMismatchException` is specifically caught to handle cases where the user enters non-integer text when a number is expected for the menu choice. An error message is printed to `System.err`. Inside the `catch` block, `scanner.next()` is called to consume the invalid input token, preventing an infinite loop where the scanner keeps trying to read the same bad input.
 *     *   A general `Exception` catch block is included to catch any other unexpected runtime errors, demonstrating broader exception handling.
 *     *   The `callNextPatient()` method explicitly checks if the `waitingQueue` is empty using `isEmpty()` before attempting to `poll()`. If empty, it prints a specific error to `System.err`. (Note: `poll()` itself handles the empty case by returning null, so the explicit check isn't strictly necessary to *prevent* an exception, but it allows for a specific, user-friendly error message rather than just relying on the `null` check after the fact).
 * 
 * 6.  **Best Practices & Resource Management:**
 *     *   Meaningful names (`waitingQueue`, `processedPatients`, `callNextPatient`, `addPatient`) are used.
 *     *   Basic Javadoc comments are provided for classes and methods.
 *     *   `System.out` and `System.err` are used correctly for normal and error output, respectively.
 *     *   The `Scanner` resource is explicitly closed using `scanner.close()` after the main loop finishes, releasing the underlying system resource.
 * 
 * This solution effectively integrates the required Java components into a functional, interactive application with appropriate error handling and structure, fulfilling the complex task requirements.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the clinic system.
 */
class Patient {
    private String patientId;
    private String name;

    /**
     * Constructs a new Patient.
     * @param patientId The unique identifier for the patient.
     * @param name The name of the patient.
     */
    public Patient(String patientId, String name) {
        this.patientId = patientId;
        this.name = name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient ID.
     */
    public String getPatientId() {
        return patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient name.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the Patient.
     * @return Formatted string of patient details.
     */
    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Name: " + name;
    }
}

/**
 * Manages the patient flow in a clinic using a waiting queue and a processed list.
 */
public class ClinicManagement {

    // Use Queue for FIFO waiting list
    private Queue<Patient> waitingQueue;
    // Use List (ArrayList implementation) for processed patients history
    private List<Patient> processedPatients;
    // Scanner for user input
    private Scanner scanner;

    /**
     * Constructs a new ClinicManagement system, initializing collections and scanner.
     */
    public ClinicManagement() {
        // LinkedList is a common implementation of Queue
        this.waitingQueue = new LinkedList<>();
        // ArrayList is a common implementation of List
        this.processedPatients = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("\nClinic Patient Management System Menu:");
        System.out.println("1. Add Patient to Waiting List");
        System.out.println("2. Call Next Patient");
        System.out.println("3. View Waiting List");
        System.out.println("4. View Processed Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Prompts user for patient details and adds the patient to the waiting queue.
     */
    private void addPatient() {
        System.out.print("Enter Patient ID: ");
        String patientId = scanner.nextLine(); // Read ID

        System.out.print("Enter Patient Name: ");
        String name = scanner.nextLine(); // Read Name

        if (patientId == null || patientId.trim().isEmpty() || name == null || name.trim().isEmpty()) {
             System.err.println("Error: Patient ID and Name cannot be empty.");
             return; // Do not add patient if input is invalid
        }

        Patient newPatient = new Patient(patientId, name);
        waitingQueue.offer(newPatient); // offer() is preferred over add() in queues as it returns false on failure

        System.out.println("Patient " + patientId + " (" + name + ") added to waiting list.");
    }

    /**
     * Removes the next patient from the waiting queue and moves them to the processed list.
     * Prints error if queue is empty.
     */
    private void callNextPatient() {
        System.out.println("Calling next patient...");
        Patient nextPatient = waitingQueue.poll(); // poll() retrieves and removes the head, returns null if empty

        if (nextPatient == null) {
            System.err.println("Error: The waiting list is empty. No patient to call.");
        } else {
            processedPatients.add(nextPatient);
            System.out.println("Patient " + nextPatient.getPatientId() + " (" + nextPatient.getName() + ") has been processed.");
        }
    }

    /**
     * Displays all patients currently in the waiting queue.
     */
    private void viewWaitingList() {
        System.out.println("\n--- Waiting List ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting list is currently empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingQueue) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Displays all patients who have been processed.
     */
    private void viewProcessedPatients() {
        System.out.println("\n--- Processed Patients ---");
        if (processedPatients.isEmpty()) {
            System.out.println("No patients have been processed yet.");
        } else {
            // Iterate through the list
            for (Patient patient : processedPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("--------------------------");
    }

    /**
     * Runs the main application loop, handling user input and menu choices.
     * Includes error handling for invalid input.
     */
    public void run() {
        boolean running = true;
        while (running) {
            displayMenu();
            int choice = -1; // Default invalid choice

            // Class-wide exception handling for input
            try {
                choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        callNextPatient();
                        break;
                    case 3:
                        viewWaitingList();
                        break;
                    case 4:
                        viewProcessedPatients();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Clinic Patient Management System.");
                        break;
                    default:
                        // Handle choices outside the valid range
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input
                System.err.println("Error: Invalid input. Please enter a number.");
                // Consume the invalid input to prevent an infinite loop
                scanner.next();
            } catch (Exception e) {
                // Catch any other unexpected runtime exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        // Close the scanner resource when the application exits
        scanner.close();
    }

    /**
     * Main method to start the Clinic Management application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ClinicManagement clinic = new ClinicManagement();
        clinic.run();
    }
}
