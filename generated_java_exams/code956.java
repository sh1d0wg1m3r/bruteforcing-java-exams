/*
 * Exam Question #956
 * Generated on: 2025-05-12 17:05:01
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Event Registration and Check-in System**
 * 
 * You are tasked with developing a simple system for managing attendees at an event. The system should allow attendees to register and then later queue up for check-in. The system processes check-in requests in the order they are received.
 * 
 * Your program must demonstrate proficiency in core Java data structures, control flow, input/output, and exception handling.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Maintain a list of *registered* attendees. Use `java.util.List` as the interface type and `java.util.ArrayList` as the implementation.
 *     *   Maintain a queue of attendees *waiting for check-in*. Use `java.util.Queue` as the interface type and a suitable implementation (like `java.util.LinkedList`).
 * 2.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Register Attendee
 *         2.  Queue Attendee for Check-in
 *         3.  Process Next Check-in
 *         4.  Display Registered Attendees
 *         5.  Display Check-in Queue
 *         6.  Exit
 *     *   Use a `switch` statement to handle the user's menu selection.
 * 3.  **System Logic:**
 *     *   **Register Attendee:** Prompt for an attendee name and add it to the list of registered attendees. Perform basic input validation (ensure the name is not empty).
 *     *   **Queue Attendee for Check-in:** Prompt for an attendee name and add it to the check-in queue. Perform basic input validation (ensure the name is not empty).
 *     *   **Process Next Check-in:** Take the next attendee from the *front* of the check-in queue. Check if this attendee is present in the list of *registered* attendees.
 *         *   If the attendee is registered, print a success message using `System.out`.
 *         *   If the attendee is *not* registered, print an error message using `System.err`.
 *         *   If the check-in queue is empty, print an informative message using `System.out`.
 *     *   **Display Registered Attendees:** Print all names in the registered attendees list using `System.out`.
 *     *   **Display Check-in Queue:** Print all names currently in the check-in queue using `System.out`, preserving the order.
 *     *   **Exit:** Terminate the program.
 * 4.  **Error Handling:**
 *     *   Use `System.err` for all error output (e.g., invalid input, attendee not registered during check-in).
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, list displays).
 *     *   Implement class-wide exception handling using `try-catch` blocks. The main application loop should be wrapped in a `try-catch` to handle unexpected runtime errors gracefully. Specific operations (like processing check-in from an empty queue) might also require specific handling.
 *     *   Implement input validation for attendee names (not empty).
 * 5.  **Best Practices:**
 *     *   Use private fields for data structures.
 *     *   Use public methods for operations.
 *     *   Use meaningful variable and method names.
 *     *   Include basic comments to explain parts of the code.
 *     *   Structure the code logically within a class.
 * 
 * **Expected Output:**
 * 
 * The program should run interactively, presenting a menu and responding to user input. Example interactions might look like:
 * 
 * ```
 * Event System Menu:
 * 1. Register Attendee
 * 2. Queue Attendee for Check-in
 * 3. Process Next Check-in
 * 4. Display Registered Attendees
 * 5. Display Check-in Queue
 * 6. Exit
 * Enter choice: 1
 * Enter attendee name: Alice
 * Alice registered successfully.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 1
 * Enter attendee name: Bob
 * Bob registered successfully.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 2
 * Enter attendee name: Bob
 * Bob queued for check-in.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 2
 * Enter attendee name: Charlie
 * Charlie queued for check-in.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 3
 * Processing check-in for: Bob
 * Bob checked in successfully.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 3
 * Processing check-in for: Charlie
 * Error: Attendee Charlie is not registered. Cannot check in.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 5
 * Check-in Queue: []
 * 
 * Event System Menu:
 * ...
 * Enter choice: 4
 * Registered Attendees: [Alice, Bob]
 * 
 * Event System Menu:
 * ...
 * Enter choice: 3
 * Check-in queue is empty.
 * 
 * Event System Menu:
 * ...
 * Enter choice: 6
 * Exiting Event System.
 * ```
 * 
 * Your solution should be a single Java file containing the class with the `main` method.
 *
 * EXPLANATION:
 * This solution implements the Event Registration and Check-in System as required, demonstrating the use of all specified Java components and adhering to best practices.
 * 
 * 1.  **Data Structures:**
 *     *   `registeredAttendees`: Declared as `List<String>` and initialized as `new ArrayList<>()`. This correctly uses the `List` interface and the `ArrayList` implementation to store registered names. `ArrayList` is suitable here as we primarily add, check existence (`contains`), and iterate, which it handles efficiently.
 *     *   `checkInQueue`: Declared as `Queue<String>` and initialized as `new LinkedList<>()`. `LinkedList` is a common and efficient implementation of the `Queue` interface, supporting the required `offer` (add to end) and `poll` (remove from front) operations.
 * 
 * 2.  **User Interaction & Control Flow:**
 *     *   `Scanner scanner`: Used to read input from `System.in`. `scanner.nextLine()` is used consistently to avoid common pitfalls with `nextInt()` and consuming the newline character, followed by `trim()` and parsing.
 *     *   `displayMenu()`: Prints the options to `System.out`.
 *     *   `runSystem()`: Contains the main loop that repeatedly displays the menu and reads user input.
 *     *   `switch (choice)`: Handles the different menu options, directing execution to the appropriate method (`registerAttendee`, `queueAttendeeForCheckIn`, etc.). The `default` case handles invalid numeric input.
 * 
 * 3.  **System Logic:**
 *     *   Each menu option corresponds to a dedicated method (`registerAttendee`, `queueAttendeeForCheckIn`, `processNextCheckIn`, `displayRegisteredAttendees`, `displayCheckInQueue`), promoting modularity.
 *     *   `registerAttendee`: Reads a name and adds it to the `registeredAttendees` `ArrayList`. Includes a check for empty input and an optional check for duplicates.
 *     *   `queueAttendeeForCheckIn`: Reads a name and adds it to the `checkInQueue` using `offer()`. Includes a check for empty input.
 *     *   `processNextCheckIn`: Uses `checkInQueue.poll()` to get and remove the next attendee. It then checks if this attendee exists in the `registeredAttendees` list using `registeredAttendees.contains()`. Based on the result, it prints to `System.out` (success) or `System.err` (error). It also handles the case where the queue is empty.
 *     *   `displayRegisteredAttendees` and `displayCheckInQueue`: Print the contents of the respective data structures. `ArrayList` and `LinkedList` provide helpful `toString()` implementations for easy display.
 * 
 * 4.  **Error Handling:**
 *     *   `System.err.println()`: Used specifically for error messages, such as empty names during input or trying to check in an unregistered attendee. This distinguishes error output from normal program output.
 *     *   `System.out.println()`: Used for all normal messages, including the menu, prompts, success messages, and list displays.
 *     *   **Class-wide `try-catch`:** The `runSystem()` method's main `while` loop is wrapped in a `try-catch(Exception e)`. This demonstrates catching unexpected runtime errors that might occur during the system's operation, providing a basic level of robustness. A `finally` block ensures the `Scanner` is closed.
 *     *   **Specific `try-catch`:** A `try-catch(NumberFormatException e)` is included within the loop to specifically handle cases where the user enters non-integer input for the menu choice.
 *     *   **Input Validation:** Checks like `name.isEmpty()` are performed immediately after reading input to ensure data integrity before processing.
 *     *   **Operational Error Handling:** The `processNextCheckIn` method explicitly checks `checkInQueue.isEmpty()` before attempting to `poll()`, preventing a `NoSuchElementException` which `poll()` gracefully handles by returning `null`, but checking beforehand allows for a more user-friendly message.
 * 
 * 5.  **Best Practices:**
 *     *   Fields (`registeredAttendees`, `checkInQueue`, `scanner`) are `private`, enforcing encapsulation.
 *     *   Methods like `registerAttendee`, `runSystem`, etc., are `public` or `private` as appropriate for their role (public for main interaction point, private for internal helpers like `displayMenu`).
 *     *   Variable and method names are descriptive (e.g., `registeredAttendees`, `processNextCheckIn`, `queueAttendeeForCheckIn`).
 *     *   Basic comments explain the purpose of methods and key sections.
 *     *   The code is structured within a single class `EventSystem`, with a `main` method to start execution, following standard Java application structure.
 * 
 * This solution effectively combines the required components in a practical scenario, demonstrating a solid understanding of fundamental and intermediate Java concepts suitable for an exam setting.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // Good to handle specifically if using nextInt

public class EventSystem {

    // Private fields for data structures
    private List<String> registeredAttendees;
    private Queue<String> checkInQueue;
    private Scanner scanner;

    /**
     * Constructor to initialize the system components.
     */
    public EventSystem() {
        // Use ArrayList for registered attendees (List interface)
        registeredAttendees = new ArrayList<>();
        // Use LinkedList as a Queue implementation for check-ins (Queue interface)
        checkInQueue = new LinkedList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\nEvent System Menu:");
        System.out.println("1. Register Attendee");
        System.out.println("2. Queue Attendee for Check-in");
        System.out.println("3. Process Next Check-in");
        System.out.println("4. Display Registered Attendees");
        System.out.println("5. Display Check-in Queue");
        System.out.println("6. Exit");
        System.out.print("Enter choice: ");
    }

    /**
     * Registers a new attendee.
     * Prompts user for name and adds to registeredAttendees list.
     */
    public void registerAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine().trim(); // Read line and remove leading/trailing whitespace

        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
            return;
        }

        // Simple check for duplicate (optional based on requirements, adding for robustness)
        if (registeredAttendees.contains(name)) {
             System.out.println(name + " is already registered.");
        } else {
            registeredAttendees.add(name);
            System.out.println(name + " registered successfully.");
        }
    }

    /**
     * Adds an attendee to the check-in queue.
     * Prompts user for name and adds to checkInQueue.
     */
    public void queueAttendeeForCheckIn() {
        System.out.print("Enter attendee name to queue for check-in: ");
        String name = scanner.nextLine().trim();

        if (name.isEmpty()) {
            System.err.println("Error: Attendee name cannot be empty.");
            return;
        }

        checkInQueue.offer(name); // offer is generally preferred over add for queues
        System.out.println(name + " queued for check-in.");
    }

    /**
     * Processes the next attendee in the check-in queue.
     * Removes from queue, checks registration, and prints status.
     */
    public void processNextCheckIn() {
        if (checkInQueue.isEmpty()) {
            System.out.println("Check-in queue is empty.");
            return;
        }

        // Poll retrieves and removes the head of the queue
        String attendeeToProcess = checkInQueue.poll();
        System.out.println("Processing check-in for: " + attendeeToProcess);

        // Check if the attendee is registered
        if (registeredAttendees.contains(attendeeToProcess)) {
            System.out.println(attendeeToProcess + " checked in successfully.");
        } else {
            // Use System.err for error message
            System.err.println("Error: Attendee " + attendeeToProcess + " is not registered. Cannot check in.");
        }
    }

    /**
     * Displays all registered attendees.
     */
    public void displayRegisteredAttendees() {
        System.out.println("Registered Attendees:");
        if (registeredAttendees.isEmpty()) {
            System.out.println("No attendees registered yet.");
        } else {
            // Print the list - ArrayList's toString is helpful
            System.out.println(registeredAttendees);
            // Or iterate and print line by line:
            // for (String attendee : registeredAttendees) {
            //     System.out.println("- " + attendee);
            // }
        }
    }

    /**
     * Displays all attendees currently in the check-in queue.
     */
    public void displayCheckInQueue() {
        System.out.println("Check-in Queue:");
        if (checkInQueue.isEmpty()) {
            System.out.println("Check-in queue is empty.");
        } else {
            // Print the queue - LinkedList's toString is helpful
             System.out.println(checkInQueue);
            // Or iterate and print line by line (using a copy or iterator to avoid modifying the queue):
            // for (String attendee : checkInQueue) { // Iterating over Queue does NOT remove elements
            //     System.out.println("- " + attendee);
            // }
        }
    }

    /**
     * Runs the main system loop, handling user input and menu options.
     */
    public void runSystem() {
        int choice = 0;
        // Class-wide exception handling wrapping the main loop
        try {
            while (choice != 6) {
                displayMenu();
                String input = scanner.nextLine(); // Read the entire line for the choice
                try {
                    choice = Integer.parseInt(input); // Attempt to parse as integer

                    // Use switch statement for flow control
                    switch (choice) {
                        case 1:
                            registerAttendee();
                            break;
                        case 2:
                            queueAttendeeForCheckIn();
                            break;
                        case 3:
                            processNextCheckIn();
                            break;
                        case 4:
                            displayRegisteredAttendees();
                            break;
                        case 5:
                            displayCheckInQueue();
                            break;
                        case 6:
                            System.out.println("Exiting Event System.");
                            break;
                        default:
                            System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                    }
                } catch (NumberFormatException e) {
                    // Handle cases where input is not a valid integer
                    System.err.println("Error: Invalid input. Please enter a number.");
                }
            }
        } catch (Exception e) {
            // Catch any other unexpected exceptions during system execution
            System.err.println("An unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for debugging
        } finally {
            // Ensure the scanner is closed
            if (scanner != null) {
                scanner.close();
            }
        }
    }

    /**
     * Main method to start the Event System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        EventSystem system = new EventSystem();
        system.runSystem();
    }
}
