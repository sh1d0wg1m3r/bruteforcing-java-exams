/*
 * Exam Question #755
 * Generated on: 2025-05-12 16:36:23
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Spooler System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line application that simulates a print job spooler. The system should manage print jobs submitted by users, process them in the order they were received, and maintain a history of completed jobs.
 * 
 * **Functionality Requirements:**
 * 
 * 1.  **Submit Job:** Allow users to submit a new print job by entering a document name and the number of pages.
 * 2.  **Process Next Job:** Simulate processing the next job in the queue. The job at the front of the queue is "printed" and moved to a history list.
 * 3.  **View Pending Jobs:** Display the list of jobs currently waiting in the queue to be processed.
 * 4.  **View Job History:** Display the list of jobs that have been processed.
 * 5.  **Exit:** Terminate the application.
 * 
 * **Technical Requirements:**
 * 
 * Your solution **must** utilize **ALL** of the following Java components from the `java.util` package (or related):
 * 
 * *   `Queue` interface
 * *   `ArrayList` class
 * *   `List` interface
 * *   `Scanner` class (for user input from `System.in`)
 * *   `switch` statement (for main menu navigation)
 * *   `System.err` (for displaying error messages)
 * *   `System.out` (for displaying normal output, menus, prompts, job details)
 * *   Class-wide exception handling using `try-catch` blocks (at least covering the main application loop and input errors).
 * 
 * **Best Practices Requirements:**
 * 
 * Your code should demonstrate adherence to best practices, including:
 * 
 * *   **Encapsulation:** Use private fields and public methods where appropriate (e.g., for the `PrintJob` class and the main system class).
 * *   **Meaningful Names:** Use descriptive names for variables, methods, and classes.
 * *   **Comments and Documentation:** Include comments to explain complex logic or significant parts of the code.
 * *   **Input Validation:** Validate user input (e.g., document name is not empty, pages is a positive number).
 * *   **Error Handling:** Gracefully handle potential errors, such as invalid user input or attempting to process a job when the queue is empty. Report errors using `System.err`.
 * *   **Clean Code Structure:** Organize your code logically into appropriate classes and methods.
 * 
 * **Expected Output:**
 * 
 * The application should present a menu to the user. Based on the user's numeric choice, it should perform the corresponding action. Output for successful operations, job lists, and prompts should go to `System.out`. Error messages for invalid input or operational failures should go to `System.err`.
 * 
 * **Example Interaction Flow (Illustrative):**
 * 
 * ```
 * Print Spooler Menu:
 * 1. Submit New Job
 * 2. Process Next Job
 * 3. View Pending Jobs
 * 4. View Job History
 * 5. Exit
 * Enter your choice: 1
 * 
 * --- Submit New Print Job ---
 * Enter document name: Report.pdf
 * Enter number of pages: 15
 * Job submitted successfully: 'Report.pdf' (15 pages)
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 3
 * 
 * --- Pending Print Jobs ---
 * 1. 'Report.pdf' (15 pages)
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 2
 * 
 * --- Processing Next Job ---
 * Processing job: 'Report.pdf' (15 pages)
 * Job completed.
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 4
 * 
 * --- Print Job History ---
 * 1. 'Report.pdf' (15 pages)
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 2
 * 
 * --- Processing Next Job ---
 * No pending jobs to process.
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 6
 * Error: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number.
 * 
 * Print Spooler Menu:
 * ...
 * Enter your choice: 5
 * Exiting Print Spooler System. Goodbye!
 * ```
 * 
 * Implement the `PrintJob` and `PrintSpoolerSystem` classes to fulfill these requirements.
 * 
 * **Deliverables:**
 * 
 * A single Java file containing all necessary classes (`PrintJob`, `PrintSpoolerSystem`, etc.) that compiles and runs as described.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all required functionalities.
 * *   Proper and effective use of **ALL** specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling, structure).
 * *   Correct output formatting and routing (`System.out` vs. `System.err`).
 * 
 * **Time Allotment:** 45-60 minutes.
 *
 * EXPLANATION:
 * The provided solution implements a simple Print Spooler System, simulating how print jobs might be managed in a basic queue. It demonstrates the practical use of all required Java components within a cohesive application structure.
 * 
 * 1.  **`java.util.Queue`**: The `pendingJobs` field is declared as a `Queue<PrintJob>` and instantiated using `LinkedList`. This is a natural fit because print jobs are typically processed in the order they are received (FIFO - First-In, First-Out). The `submitJob` method uses `offer()` to add jobs to the end of the queue, and the `processNextJob` method uses `poll()` to remove and retrieve jobs from the front.
 * 2.  **`java.util.ArrayList`**: The `jobHistory` field is instantiated as an `ArrayList<PrintJob>`. This is used to store completed jobs. `ArrayList` is suitable here as we primarily add completed jobs and iterate through the history, which `ArrayList` handles efficiently.
 * 3.  **`java.util.List`**: The `jobHistory` field is declared using the `List<PrintJob>` interface (`private List<PrintJob> jobHistory;`). This adheres to the principle of programming to interfaces rather than concrete implementations, making the code more flexible if a different `List` implementation were needed later.
 * 4.  **`java.util.Scanner`**: A `Scanner` object is used in the `PrintSpoolerSystem` class to read user input from `System.in` for menu choices, document names, and page counts.
 * 5.  **`switch` statement**: The `main` method uses a `switch` statement to handle the different menu options selected by the user, directing the program flow to the corresponding methods (`submitJob`, `processNextJob`, etc.).
 * 6.  **`System.err`**: Error messages, such as invalid input (non-numeric choice, empty document name, non-positive pages) and invalid menu options, are printed to `System.err`, distinguishing them from normal application output.
 * 7.  **`System.out`**: All standard application output, including the menu, prompts, successful operation messages, and the display of pending and historical job lists, is printed to `System.out`.
 * 8.  **Class-wide exception handling (`try-catch`)**:
 *     *   The main `while` loop in the `main` method is wrapped in a `try-catch(Exception e)` block. This provides a top-level safety net to catch any unexpected runtime exceptions that might occur anywhere within the main application flow, preventing the program from crashing abruptly.
 *     *   Specific `try-catch` blocks are used for handling anticipated errors:
 *         *   `InputMismatchException` is caught when reading the menu choice if the user enters non-integer input.
 *         *   `NumberFormatException` is caught when parsing the number of pages if the user enters non-numeric input.
 *         *   `IllegalArgumentException` is caught in the `submitJob` method if the `PrintJob` constructor throws an error due to invalid document name or page count.
 *     *   This layered approach provides both specific handling for recoverable errors (like re-prompting for input) and a general safety net.
 * 9.  **Best Practices**:
 *     *   **Encapsulation**: The `PrintJob` class has private fields (`documentName`, `pages`) accessed via public getters. The `PrintSpoolerSystem` class has private collection fields (`pendingJobs`, `jobHistory`) and private `Scanner`, with public methods controlling access and modification.
 *     *   **Meaningful Names**: Class names (`PrintJob`, `PrintSpoolerSystem`), variable names (`pendingJobs`, `jobHistory`, `documentName`, `pages`), and method names (`submitJob`, `processNextJob`, `viewPendingJobs`, `viewJobHistory`) are descriptive.
 *     *   **Comments**: Basic comments explain the purpose of classes, methods, and key code sections.
 *     *   **Input Validation**: Loops are used in `submitJob` to repeatedly prompt for input until valid data (non-empty name, positive pages) is entered. The `PrintJob` constructor itself validates the data it receives.
 *     *   **Error Handling**: `try-catch` blocks handle format errors during input reading. `System.err` is used for reporting these errors. The `processNextJob` method checks if the queue is empty before attempting to poll.
 *     *   **Clean Code Structure**: The code is divided into two classes (`PrintJob` and `PrintSpoolerSystem`) with clear responsibilities. Methods are used to separate different actions (submit, process, view). The `main` method orchestrates the user interaction loop. The use of `scanner.nextLine()` after `scanner.nextInt()` (or reading the line and parsing) correctly handles the newline character issue when mixing input methods.
 * 
 * This solution effectively integrates the required Java components and demonstrates fundamental programming concepts and best practices in the context of a practical simulation.
 */

import java.util.Queue;
import java.util.LinkedList; // A common implementation of Queue
import java.util.List;
import java.util.ArrayList; // A common implementation of List
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single print job with a document name and number of pages.
 * Demonstrates encapsulation.
 */
class PrintJob {
    private String documentName;
    private int pages;

    /**
     * Constructs a new PrintJob.
     * Validates input to ensure data integrity.
     * @param documentName The name of the document.
     * @param pages The number of pages in the document.
     * @throws IllegalArgumentException if documentName is null/empty or pages is non-positive.
     */
    public PrintJob(String documentName, int pages) {
        if (documentName == null || documentName.trim().isEmpty()) {
            throw new IllegalArgumentException("Document name cannot be empty.");
        }
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        this.documentName = documentName.trim(); // Trim whitespace
        this.pages = pages;
    }

    // Public getter methods for accessing private fields
    public String getDocumentName() {
        return documentName;
    }

    public int getPages() {
        return pages;
    }

    /**
     * Provides a string representation of the print job for display.
     */
    @Override
    public String toString() {
        return "'" + documentName + "' (" + pages + " pages)";
    }
}

/**
 * Simulates a print spooler system managing pending and completed print jobs.
 * Utilizes Queue, List, ArrayList, Scanner, switch, System.out, System.err, and try-catch.
 */
public class PrintSpoolerSystem {
    // Queue to hold jobs waiting to be processed (FIFO) - Required: Queue
    private Queue<PrintJob> pendingJobs;
    // List to hold jobs that have been processed - Required: List, ArrayList
    private List<PrintJob> jobHistory;
    // Scanner for reading user input - Required: Scanner
    private Scanner scanner;

    /**
     * Constructs a new PrintSpoolerSystem, initializing the collections and scanner.
     */
    public PrintSpoolerSystem() {
        // Use LinkedList as a Queue implementation
        pendingJobs = new LinkedList<>();
        // Use ArrayList as a List implementation
        jobHistory = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Handles the submission of a new print job by prompting the user for input.
     * Includes input validation and error handling.
     */
    public void submitJob() {
        System.out.println("\n--- Submit New Print Job ---"); // Required: System.out
        String documentName = null;
        int pages = -1;

        // Loop to get valid document name
        while (documentName == null || documentName.trim().isEmpty()) {
            System.out.print("Enter document name: "); // Required: System.out
            documentName = scanner.nextLine().trim();
            if (documentName.isEmpty()) {
                System.err.println("Error: Document name cannot be empty."); // Required: System.err
            }
        }

        // Loop to get valid number of pages with error handling for non-numeric input
        String pagesInput = null;
        while (pages <= 0) {
             System.out.print("Enter number of pages: "); // Required: System.out
             pagesInput = scanner.nextLine();
             try {
                 pages = Integer.parseInt(pagesInput);
                 if (pages <= 0) {
                     System.err.println("Error: Number of pages must be positive."); // Required: System.err
                 }
             } catch (NumberFormatException e) {
                 System.err.println("Error: Invalid input. Please enter a number for pages."); // Required: System.err
                 pages = -1; // Reset pages to stay in the loop
             }
        }

        // Try to create the PrintJob and add it to the queue
        try {
            PrintJob newJob = new PrintJob(documentName, pages);
            pendingJobs.offer(newJob); // Add job to the end of the queue
            System.out.println("Job submitted successfully: " + newJob); // Required: System.out
        } catch (IllegalArgumentException e) {
            // Catch exceptions thrown by the PrintJob constructor
            System.err.println("Error creating job: " + e.getMessage()); // Required: System.err
        }
    }

    /**
     * Processes the next job at the front of the pending queue.
     * Moves the completed job to the history list.
     * Handles the case where the queue is empty.
     */
    public void processNextJob() {
        System.out.println("\n--- Processing Next Job ---"); // Required: System.out
        // Retrieve and remove the head of the queue
        PrintJob jobToProcess = pendingJobs.poll(); // Required: Queue method poll()

        if (jobToProcess != null) {
            System.out.println("Processing job: " + jobToProcess); // Required: System.out
            // Simulate processing (no actual printing happens)
            jobHistory.add(jobToProcess); // Add the completed job to the history list - Required: List/ArrayList method add()
            System.out.println("Job completed."); // Required: System.out
        } else {
            System.out.println("No pending jobs to process."); // Required: System.out
        }
    }

    /**
     * Displays all jobs currently waiting in the pending queue.
     */
    public void viewPendingJobs() {
        System.out.println("\n--- Pending Print Jobs ---"); // Required: System.out
        if (pendingJobs.isEmpty()) {
            System.out.println("No jobs currently pending."); // Required: System.out
        } else {
            int index = 1;
            // Iterate through the queue elements without removing them
            for (PrintJob job : pendingJobs) { // Iterating over the Queue
                System.out.println(index++ + ". " + job); // Required: System.out
            }
        }
    }

    /**
     * Displays all jobs that have been processed and are in the history list.
     */
    public void viewJobHistory() {
        System.out.println("\n--- Print Job History ---"); // Required: System.out
        if (jobHistory.isEmpty()) {
            System.out.println("No jobs completed yet."); // Required: System.out
        } else {
            int index = 1;
            // Iterate through the history list
            for (PrintJob job : jobHistory) { // Iterating over the List/ArrayList
                System.out.println(index++ + ". " + job); // Required: System.out
            }
        }
    }

    /**
     * Main method to run the print spooler system.
     * Contains the main application loop and top-level exception handling.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PrintSpoolerSystem spooler = new PrintSpoolerSystem();
        boolean running = true;

        // Class-wide/Top-level exception handling for the main application loop
        try {
            while (running) {
                // Display menu - Required: System.out
                System.out.println("\nPrint Spooler Menu:");
                System.out.println("1. Submit New Job");
                System.out.println("2. Process Next Job");
                System.out.println("3. View Pending Jobs");
                System.out.println("4. View Job History");
                System.out.println("5. Exit");
                System.out.print("Enter your choice: ");

                int choice = -1;
                // Try-catch block specifically for reading the menu choice
                try {
                    choice = spooler.scanner.nextInt();
                    // Consume the newline character left by nextInt() to prevent issues with nextLine()
                    spooler.scanner.nextLine();
                } catch (InputMismatchException e) {
                    // Handle non-integer input for menu choice - Required: System.err
                    System.err.println("Error: Invalid input. Please enter a number.");
                    spooler.scanner.nextLine(); // Consume the invalid input line
                    continue; // Skip the switch and show menu again
                }

                // Use a switch statement for menu navigation - Required: switch
                switch (choice) {
                    case 1:
                        spooler.submitJob();
                        break;
                    case 2:
                        spooler.processNextJob();
                        break;
                    case 3:
                        spooler.viewPendingJobs();
                        break;
                    case 4:
                        spooler.viewJobHistory();
                        break;
                    case 5:
                        System.out.println("Exiting Print Spooler System. Goodbye!"); // Required: System.out
                        running = false;
                        break;
                    default:
                        // Handle invalid numeric choices - Required: System.err
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions that might occur during execution
            // This provides a fallback for unhandled errors - Required: try-catch
            System.err.println("An unexpected system error occurred: " + e.getMessage()); // Required: System.err
            e.printStackTrace(); // Print stack trace for debugging purposes
        } finally {
            // Ensure the scanner resource is closed when the application exits
            if (spooler.scanner != null) {
                spooler.scanner.close();
            }
        }
    }
}
