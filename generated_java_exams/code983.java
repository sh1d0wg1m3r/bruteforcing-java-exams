/*
 * Exam Question #983
 * Generated on: 2025-05-12 17:08:38
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Java Programming Exam: Production Line Simulation**
 * 
 * **Problem Description:**
 * 
 * You are tasked with creating a simplified simulation of a manufacturing production line. Products are added to a queue waiting for processing. A "worker" (simulated logic) takes the next product from the queue, attempts to process it, and based on the processing outcome, either adds it to a list of successfully completed products or marks it as failed (simulated by printing an error). The user interacts with the system via a console menu.
 * 
 * **Requirements:**
 * 
 * 1.  **Product Representation:** Create a `Product` class with a unique ID (integer) and a status (e.g., PENDING, PROCESSED, FAILED). The status should be updated during the simulation.
 * 2.  **Production Line Management:** Create a `ProductionLine` class that manages the state of the simulation.
 *     *   It must use a `java.util.Queue<Product>` to hold products waiting to be processed.
 *     *   It must use a `java.util.ArrayList<Product>` to store successfully processed products. The variable referencing this list should be declared using the `java.util.List` interface type.
 *     *   It should have methods to add a product to the queue, process the next product from the queue, and get the current status (number pending, number completed).
 * 3.  **User Interface:** Implement a console-based user interface using `java.util.Scanner` to interact with the `ProductionLine`. The user should be presented with a menu of options:
 *     *   Add a new product to the queue.
 *     *   Process the next product in the queue.
 *     *   View production line status.
 *     *   Exit.
 * 4.  **Control Flow:** Use a `switch` statement to handle the user's menu choice.
 * 5.  **Output:**
 *     *   Use `System.out` for normal output (menu, status, successful processing messages).
 *     *   Use `System.err` for error messages (e.g., trying to process when the queue is empty, product processing failure).
 * 6.  **Exception Handling:** Implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime issues during the main program loop or input processing.
 * 7.  **Best Practices:**
 *     *   Employ proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (Javadocs are not strictly required for this exam, but inline comments explaining complex logic are helpful).
 *     *   Implement basic input validation (e.g., handling non-integer input for menu choice).
 *     *   Handle edge cases like processing an empty queue.
 *     *   Structure the code cleanly.
 * 
 * **Simulation Detail:**
 * 
 * *   When processing a product, simulate a 50% chance of success and a 50% chance of failure.
 * *   If processing succeeds, move the product from the queue to the completed list and print a success message to `System.out`.
 * *   If processing fails, print a failure message to `System.err`. The failed product is effectively removed from the line (not added to the completed list).
 * 
 * **Expected Output:**
 * 
 * The program should loop, presenting the menu and responding to user commands. Examples:
 * 
 * ```
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 1
 * Product 1 added to queue.
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 1
 * Product 2 added to queue.
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 3
 * Production Line Status:
 * Pending: 2
 * Completed: 0
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 2
 * Processing Product 1...
 * Product 1 processed successfully!
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 2
 * Processing Product 2...
 * Product 2 processing failed!
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 3
 * Production Line Status:
 * Pending: 0
 * Completed: 1
 * 
 * Production Line Menu:
 * 1. Add Product
 * 2. Process Next Product
 * 3. View Status
 * 4. Exit
 * Enter choice: 4
 * Exiting Production Line Simulator.
 * ```
 * 
 * (Note: Success/failure messages will vary based on the random outcome).
 * 
 * **Deliverable:**
 * 
 * Provide the complete, runnable Java code for this simulation in a single file (you can use nested classes if you prefer, or separate classes in the same file for simplicity in the exam context).
 *
 * EXPLANATION:
 * The solution implements a simple production line simulation adhering to all the specified requirements.
 * 
 * 1.  **Product Class:** A basic `Product` class is defined with `id` and `status` fields. It includes a constructor, getters, a setter for status, and a `toString()` method for easy printing. Fields are `private` demonstrating encapsulation.
 * 2.  **ProductionLine Class:**
 *     *   It uses a `Queue<Product>` (`pendingProductsQueue`) implemented by `LinkedList` to manage products waiting for processing. The `Queue` interface is suitable because products are processed in the order they are added (FIFO - First-In, First-Out).
 *     *   It uses a `List<Product>` (`completedProductsList`) implemented by `ArrayList` to store products that were successfully processed. `ArrayList` is used as it's a common, efficient list implementation, and the variable is declared using the `List` interface, demonstrating polymorphism.
 *     *   `addProduct()`: Creates a new `Product` with a unique ID and adds it to the `pendingProductsQueue` using `offer()`.
 *     *   `processNextProduct()`:
 *         *   Checks if the queue is empty using `isEmpty()` before attempting to process. If empty, it prints an error to `System.err` and returns, handling the edge case.
 *         *   Uses `poll()` to remove and return the product at the front of the queue.
 *         *   Simulates success/failure using `Random.nextBoolean()`.
 *         *   If successful, the product's status is updated, and it's added to the `completedProductsList` using `add()`. A success message is printed to `System.out`.
 *         *   If failed, the product's status is updated, and an error message is printed to `System.err`. The failed product is simply dropped from the simulation flow.
 *     *   `viewStatus()`: Prints the current size of both the pending queue and the completed list to `System.out`.
 *     *   Private fields and public methods ensure proper encapsulation. Meaningful names like `pendingProductsQueue` and `completedProductsList` are used.
 * 3.  **ProductionLineSimulator (Main Class):**
 *     *   The `main` method contains the primary application logic.
 *     *   It uses `try-with-resources` for the `Scanner` (`try (Scanner scanner = new Scanner(System.in))`) to ensure the scanner is automatically closed, preventing resource leaks.
 *     *   A `ProductionLine` object is instantiated.
 *     *   The main interaction loop runs as long as the `running` flag is true.
 *     *   **Class-wide Exception Handling:** The entire main loop is wrapped in a `try-catch(Exception e)` block. This catches any unexpected exceptions that might occur during the execution of the loop or the called methods, preventing the program from crashing abruptly and printing the error details to `System.err`.
 *     *   **Input Handling:** Inside the loop, a nested `try-catch(InputMismatchException e)` is used specifically for reading the integer menu choice. If the user enters non-integer input, it catches the exception, prints an error to `System.err`, consumes the invalid input line using `scanner.nextLine()`, and continues the loop, prompting the user again.
 *     *   **Switch Statement:** A `switch` statement is used to dispatch the action based on the validated integer input (`choice`). Each case calls the appropriate method on the `ProductionLine` object or sets the `running` flag to `false` for the exit option. A `default` case handles invalid numbers.
 *     *   `System.out` is used for printing the menu and successful actions/status. `System.err` is used for printing input validation errors and simulated production failures.
 *     *   A separate `printMenu()` method keeps the `main` method cleaner.
 * 
 * This solution effectively integrates `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` within a practical, simulated scenario, demonstrating understanding of these core Java concepts and best practices.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Random;
import java.util.InputMismatchException;

// Represents a product in the manufacturing line
class Product {
    private int id;
    private String status; // e.g., "PENDING", "PROCESSED", "FAILED"

    public Product(int id) {
        this.id = id;
        this.status = "PENDING";
    }

    public int getId() {
        return id;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Product{" +
               "id=" + id +
               ", status='" + status + '\'' +
               '}';
    }
}

// Manages the production line simulation
class ProductionLine {
    // Queue for products waiting to be processed
    private Queue<Product> pendingProductsQueue;
    // List for successfully processed products
    private List<Product> completedProductsList;
    private int nextProductId; // Counter for unique product IDs
    private Random random; // For simulating processing success/failure

    public ProductionLine() {
        this.pendingProductsQueue = new LinkedList<>(); // LinkedList implements Queue
        this.completedProductsList = new ArrayList<>(); // ArrayList implements List
        this.nextProductId = 1;
        this.random = new Random();
    }

    /**
     * Adds a new product to the end of the pending queue.
     */
    public void addProduct() {
        Product newProduct = new Product(nextProductId++);
        pendingProductsQueue.offer(newProduct); // offer is generally preferred over add for queues
        System.out.println("Product " + newProduct.getId() + " added to queue.");
    }

    /**
     * Processes the next product from the queue, simulating success or failure.
     * Moves successful products to the completed list.
     */
    public void processNextProduct() {
        // Check if the queue is empty before polling
        if (pendingProductsQueue.isEmpty()) {
            System.err.println("Error: Production line is empty. No products to process.");
            return; // Exit the method if queue is empty
        }

        // Poll the next product from the queue
        Product productToProcess = pendingProductsQueue.poll();
        System.out.println("Processing Product " + productToProcess.getId() + "...");

        // Simulate processing outcome (50% success chance)
        boolean success = random.nextBoolean(); // true for success, false for failure

        if (success) {
            productToProcess.setStatus("PROCESSED");
            completedProductsList.add(productToProcess); // Add to the completed list
            System.out.println("Product " + productToProcess.getId() + " processed successfully!");
        } else {
            productToProcess.setStatus("FAILED");
            // Failed products are not added to the completed list
            System.err.println("Product " + productToProcess.getId() + " processing failed!");
            // Optionally, you could add failed products to a separate failed list
        }
    }

    /**
     * Prints the current status of the production line.
     */
    public void viewStatus() {
        System.out.println("Production Line Status:");
        System.out.println("Pending: " + pendingProductsQueue.size());
        System.out.println("Completed: " + completedProductsList.size());
    }
}

// Main class to run the simulation and handle user interaction
public class ProductionLineSimulator {

    public static void main(String[] args) {
        // Use try-with-resources for Scanner to ensure it's closed
        try (Scanner scanner = new Scanner(System.in)) {
            ProductionLine line = new ProductionLine();
            boolean running = true;

            // Class-wide exception handling for the main loop
            try {
                while (running) {
                    printMenu();
                    int choice = -1; // Default invalid choice

                    // Input validation loop for menu choice
                    try {
                        System.out.print("Enter choice: ");
                        choice = scanner.nextInt();
                        // Consume the newline character left by nextInt()
                        scanner.nextLine();
                    } catch (InputMismatchException e) {
                        System.err.println("Invalid input. Please enter a number.");
                        scanner.nextLine(); // Consume the invalid input
                        continue; // Go back to the start of the while loop
                    }

                    // Switch statement for menu options
                    switch (choice) {
                        case 1:
                            line.addProduct();
                            break;
                        case 2:
                            line.processNextProduct();
                            break;
                        case 3:
                            line.viewStatus();
                            break;
                        case 4:
                            running = false; // Set flag to exit the loop
                            System.out.println("Exiting Production Line Simulator.");
                            break;
                        default:
                            // Handle invalid menu choices
                            System.err.println("Invalid choice. Please enter a number between 1 and 4.");
                    }
                    System.out.println(); // Add a newline for better readability between interactions
                }
            } catch (Exception e) {
                // Catch any unexpected exceptions during the simulation loop
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(System.err); // Print stack trace to System.err
            }

        } // Scanner is automatically closed here by try-with-resources
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("Production Line Menu:");
        System.out.println("1. Add Product");
        System.out.println("2. Process Next Product");
        System.out.println("3. View Status");
        System.out.println("4. Exit");
    }
}
