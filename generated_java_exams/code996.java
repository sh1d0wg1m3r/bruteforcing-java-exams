/*
 * Exam Question #996
 * Generated on: 2025-05-12 17:10:15
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam: Hospital Patient Flow Management System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified system for managing patient flow in a small clinic. The system needs to handle patient registration, add patients to a waiting queue for a specific doctor (we'll simplify and have one conceptual queue for 'the next available doctor'), process patients from the queue, and display system status.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `patientId` (String), `name` (String), and `condition` (String, e.g., "Fever", "Check-up"). Include a constructor and public getter methods. Override `equals()` and `hashCode()` based on `patientId` to uniquely identify patients. Also, provide a meaningful `toString()` method.
 * 2.  **Hospital System Class:** Create a `HospitalSystem` class that manages the patient flow.
 *     *   It must have a private `Queue<Patient>` called `waitingQueue` to hold patients waiting to be seen.
 *     *   It must have a private `List<Patient>` called `registeredPatients` to store all patients ever registered with the system. Use `ArrayList` as the concrete implementation for this list.
 *     *   Implement the following public methods:
 *         *   `registerPatient(Patient patient)`: Adds a patient to the `registeredPatients` list. Should prevent adding a patient with an ID that already exists, printing an error message to `System.err` and returning `false`. Returns `true` on successful registration.
 *         *   `addPatientToQueue(String patientId)`: Finds a patient by ID in `registeredPatients` and adds them to the `waitingQueue`. If the patient ID is not found, print an error message to `System.err`. If the patient is found and successfully added to the queue, print a confirmation message to `System.out`.
 *         *   `seeNextPatient()`: Removes and returns the patient at the front of the `waitingQueue`. If the queue is empty, print an error message to `System.err` and return `null`. On success, print a message to `System.out` indicating which patient is being seen.
 *         *   `viewWaitingQueue()`: Prints the details of all patients currently in the `waitingQueue` to `System.out`, in the order they will be seen. If the queue is empty, print a message indicating so.
 *         *   `viewRegisteredPatients()`: Prints the details of all patients ever registered (`registeredPatients` list) to `System.out`. If the list is empty, print a message indicating so.
 * 3.  **Main Application Logic:**
 *     *   In the `main` method of a separate class (e.g., `HospitalApp`), create a `HospitalSystem` object.
 *     *   Use a `Scanner` to take user input.
 *     *   Implement a menu-driven interface using a `switch` statement within a loop (`while` loop) that continues until the user chooses to exit. The menu options should include:
 *         1.  Register New Patient
 *         2.  Add Patient to Waiting Queue
 *         3.  See Next Patient
 *         4.  View Waiting Queue
 *         5.  View All Registered Patients
 *         6.  Exit
 *     *   Use `System.out` for menu prompts, successful operation messages, and list/queue displays.
 *     *   Use `System.err` for all error messages (e.g., invalid input, patient not found, queue empty, duplicate registration).
 *     *   Implement robust input validation. If the user enters non-numeric input for the menu choice, catch the `InputMismatchException`, print an error to `System.err`, and consume the invalid input using `scanner.next()`.
 *     *   Include a class-wide `try-catch` block in the `main` method to catch any unexpected exceptions during the program's execution, printing an error message to `System.err`.
 * 4.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (especially Javadoc for classes and methods) and inline comments for complex logic.
 *     *   Handle potential errors gracefully (input validation, checking for nulls or empty collections).
 *     *   Maintain a clean code structure.
 * 
 * **Expected Output Structure:**
 * 
 * The output should be interactive, presenting the menu, prompting for input based on the selection, and displaying results or error messages clearly using `System.out` or `System.err` as specified.
 * 
 * ```
 * --- Hospital Patient Management Menu ---
 * 1. Register New Patient
 * 2. Add Patient to Waiting Queue
 * 3. See Next Patient
 * 4. View Waiting Queue
 * 5. View All Registered Patients
 * 6. Exit
 * Enter your choice: [User Input]
 * 
 * [Based on choice, prompts for relevant info or displays output]
 * 
 * [Example Flow Snippet]
 * Enter your choice: 1
 * Enter patient ID: P001
 * Enter patient name: Alice Smith
 * Enter patient condition: Fever
 * Patient P001 registered successfully.
 * 
 * Enter your choice: 2
 * Enter patient ID to add to queue: P001
 * Patient P001 added to the waiting queue.
 * 
 * Enter your choice: 4
 * --- Waiting Queue ---
 * Patient ID: P001, Name: Alice Smith, Condition: Fever
 * --- End of Queue ---
 * 
 * Enter your choice: 3
 * Seeing next patient: Patient ID: P001, Name: Alice Smith, Condition: Fever
 * 
 * Enter your choice: 3
 * Error: Waiting queue is empty. No patient to see.
 * 
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * Your solution must be a single Java file containing all necessary classes.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Proper class design and encapsulation.
 * *   Accurate implementation of the hospital system logic (registration, queueing, seeing patients, viewing).
 * *   Robust input validation and error handling using `System.err`.
 * *   Adherence to best practices (naming, comments, structure).
 * *   Correct use of `equals()` and `hashCode()` for patient identification.
 *
 * EXPLANATION:
 * The solution provides a complete Java program for a simplified Hospital Patient Management System, fulfilling all the requirements of the exam question.
 * 
 * 1.  **`Patient` Class:**
 *     *   Encapsulates patient data (`patientId`, `name`, `condition`) using private fields and public getters.
 *     *   The constructor includes basic validation to prevent null or empty strings.
 *     *   `toString()` provides a readable representation.
 *     *   `equals()` and `hashCode()` are correctly overridden based on `patientId`. This is crucial for the `HospitalSystem` to correctly use methods like `List.contains()` to check for duplicate patients. `Objects.equals()` and `Objects.hash()` are used for null-safe and standard implementations.
 * 
 * 2.  **`HospitalSystem` Class:**
 *     *   Manages the core logic and data structures.
 *     *   `waitingQueue`: Declared as `Queue<Patient>` and initialized with `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, suitable for FIFO operations.
 *     *   `registeredPatients`: Declared as `List<Patient>` and initialized with `new ArrayList<>()`. Using the `List` interface for the variable type promotes flexibility, while `ArrayList` provides the concrete list implementation.
 *     *   **`registerPatient`:** Adds a patient to `registeredPatients`. It uses `registeredPatients.contains(patient)` which relies on the `Patient` class's `equals()` method to check for duplicate IDs. Error messages for duplicates go to `System.err`.
 *     *   **`addPatientToQueue`:** Searches the `registeredPatients` list to find the patient by ID. If found, it adds them to the `waitingQueue` using `offer()`, which is a non-throwing way to add to a queue. If not found, an error is printed to `System.err`.
 *     *   **`seeNextPatient`:** Removes the head of the `waitingQueue` using `poll()`. `poll()` returns `null` if the queue is empty, allowing for graceful handling (printing an error to `System.err`) instead of throwing an exception like `remove()`. Success messages go to `System.out`.
 *     *   **`viewWaitingQueue`:** Iterates through the `waitingQueue` to print its contents. Iterating directly over a `Queue` uses its iterator, which does *not* remove elements, suitable for viewing. Output goes to `System.out`.
 *     *   **`viewRegisteredPatients`:** Iterates through the `registeredPatients` list to print its contents. Output goes to `System.out`.
 * 
 * 3.  **`HospitalApp` (Main Class):**
 *     *   Contains the `main` method, the entry point of the application.
 *     *   A `Scanner` is used for all user input.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   A `switch` statement is used to handle the different menu options, directing control to the appropriate `HospitalSystem` methods.
 *     *   **Input Validation & Error Handling:**
 *         *   A `try-catch (InputMismatchException)` block is placed around `scanner.nextInt()` to catch cases where the user enters non-numeric input for the menu choice. An error is printed to `System.err`, and `scanner.next()` is called to consume the invalid token, preventing an infinite loop.
 *         *   Basic checks for empty strings are done before creating a `Patient` object or searching by ID.
 *         *   Errors from `HospitalSystem` methods (like queue empty, patient not found, duplicate registration) are handled within those methods, printing to `System.err`.
 *         *   A **class-wide `try-catch (Exception e)`** block wraps the entire `while` loop in `main`. This fulfills the requirement for class-wide exception handling, catching any *unexpected* runtime exceptions that might propagate up from the called methods, although specific anticipated errors are handled lower down.
 *     *   `System.out` is used for displaying the menu, prompts, confirmations, and list/queue contents.
 *     *   `System.err` is strictly used for error messages as required.
 *     *   The `scanner.close()` is placed in a `finally` block to ensure the scanner resource is closed regardless of whether an exception occurred or the loop finished normally.
 * 
 * This solution effectively demonstrates the use of `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` in a practical, structured, and well-documented manner, adhering to best practices like encapsulation, meaningful names, and error handling.
 */

import java.util.Queue;
import java.util.LinkedList; // Common Queue implementation
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.Objects; // For Objects.equals and Objects.hash

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String patientId;
    private String name;
    private String condition;

    /**
     * Constructs a new Patient object.
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     * @param condition The medical condition or reason for visit.
     */
    public Patient(String patientId, String name, String condition) {
        // Basic validation
        if (patientId == null || patientId.trim().isEmpty() ||
            name == null || name.trim().isEmpty() ||
            condition == null || condition.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient details cannot be null or empty.");
        }
        this.patientId = patientId.trim();
        this.name = name.trim();
        this.condition = condition.trim();
    }

    // Public getter methods
    public String getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    /**
     * Provides a string representation of the Patient object.
     * @return A formatted string with patient details.
     */
    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Name: " + name + ", Condition: " + condition;
    }

    /**
     * Compares this Patient object to another object for equality.
     * Equality is based solely on the patientId.
     * @param o The object to compare with.
     * @return true if the objects are equal (have the same patientId), false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Patient patient = (Patient) o;
        return Objects.equals(patientId, patient.patientId);
    }

    /**
     * Returns a hash code value for the Patient object.
     * The hash code is based solely on the patientId.
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(patientId);
    }
}

/**
 * Manages the patient flow within the hospital system, including registration and waiting queue.
 */
class HospitalSystem {
    private Queue<Patient> waitingQueue;
    private List<Patient> registeredPatients; // Using List interface, implemented by ArrayList

    /**
     * Constructs a new HospitalSystem.
     * Initializes the waiting queue and registered patients list.
     */
    public HospitalSystem() {
        this.waitingQueue = new LinkedList<>(); // LinkedList is a common implementation for Queue
        this.registeredPatients = new ArrayList<>(); // ArrayList for registered patients
    }

    /**
     * Registers a new patient in the system.
     * Prevents registration if a patient with the same ID already exists.
     * @param patient The patient to register.
     * @return true if registration was successful, false otherwise.
     */
    public boolean registerPatient(Patient patient) {
        // Check for duplicate patient ID
        if (registeredPatients.contains(patient)) {
            System.err.println("Error: Patient with ID " + patient.getPatientId() + " is already registered.");
            return false;
        }
        registeredPatients.add(patient);
        System.out.println("Patient " + patient.getPatientId() + " registered successfully.");
        return true;
    }

    /**
     * Finds a registered patient by ID and adds them to the waiting queue.
     * @param patientId The ID of the patient to add to the queue.
     */
    public void addPatientToQueue(String patientId) {
        // Find the patient in the registered list
        Patient patientToAdd = null;
        for (Patient p : registeredPatients) {
            if (p.getPatientId().equals(patientId)) {
                patientToAdd = p;
                break;
            }
        }

        if (patientToAdd == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found in registered patients.");
        } else {
            waitingQueue.offer(patientToAdd); // offer is generally preferred over add for queues (returns false instead of throwing exception on capacity issues, though LinkedList is unbounded)
            System.out.println("Patient " + patientId + " added to the waiting queue.");
        }
    }

    /**
     * Removes and returns the next patient from the waiting queue (the one to be seen).
     * @return The next patient to be seen, or null if the queue is empty.
     */
    public Patient seeNextPatient() {
        Patient nextPatient = waitingQueue.poll(); // poll is preferred over remove (returns null if empty)
        if (nextPatient == null) {
            System.err.println("Error: Waiting queue is empty. No patient to see.");
        } else {
            System.out.println("Seeing next patient: " + nextPatient);
        }
        return nextPatient;
    }

    /**
     * Prints the details of all patients currently in the waiting queue.
     */
    public void viewWaitingQueue() {
        System.out.println("--- Waiting Queue ---");
        if (waitingQueue.isEmpty()) {
            System.out.println("The waiting queue is empty.");
        } else {
            // Iterate through the queue without removing elements
            for (Patient patient : waitingQueue) {
                System.out.println(patient);
            }
        }
        System.out.println("--- End of Queue ---");
    }

    /**
     * Prints the details of all patients ever registered in the system.
     */
    public void viewRegisteredPatients() {
        System.out.println("--- All Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("--- End of Registered Patients List ---");
    }
}

/**
 * Main application class for the Hospital Patient Management System.
 * Handles user interaction and menu navigation.
 */
public class HospitalApp {

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Hospital Patient Management Menu ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Add Patient to Waiting Queue");
        System.out.println("3. See Next Patient");
        System.out.println("4. View Waiting Queue");
        System.out.println("5. View All Registered Patients");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Main method to run the hospital application.
     * Contains the main loop, scanner, switch statement, and class-wide exception handling.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalSystem hospitalSystem = new HospitalSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        // Class-wide exception handling block for the main application loop
        try {
            while (running) {
                displayMenu();
                int choice = -1; // Default invalid choice

                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over
                } catch (InputMismatchException e) {
                    System.err.println("Error: Invalid input. Please enter a number between 1 and 6.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next loop iteration
                }

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Register New Patient
                        System.out.print("Enter patient ID: ");
                        String id = scanner.nextLine();
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter patient condition: ");
                        String condition = scanner.nextLine();

                        // Basic input validation for empty strings
                        if (id.trim().isEmpty() || name.trim().isEmpty() || condition.trim().isEmpty()) {
                            System.err.println("Error: Patient details cannot be empty.");
                        } else {
                             try {
                                Patient newPatient = new Patient(id, name, condition);
                                hospitalSystem.registerPatient(newPatient);
                             } catch (IllegalArgumentException e) {
                                System.err.println("Error creating patient: " + e.getMessage());
                             }
                        }
                        break;

                    case 2: // Add Patient to Waiting Queue
                        System.out.print("Enter patient ID to add to queue: ");
                        String patientIdToQueue = scanner.nextLine();
                        hospitalSystem.addPatientToQueue(patientIdToQueue);
                        break;

                    case 3: // See Next Patient
                        hospitalSystem.seeNextPatient();
                        break;

                    case 4: // View Waiting Queue
                        hospitalSystem.viewWaitingQueue();
                        break;

                    case 5: // View All Registered Patients
                        hospitalSystem.viewRegisteredPatients();
                        break;

                    case 6: // Exit
                        System.out.println("Exiting system.");
                        running = false;
                        break;

                    default: // Invalid menu choice
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 6.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main loop
            System.err.println("\nAn unexpected error occurred: " + e.getMessage());
            // e.printStackTrace(); // Uncomment for detailed debugging
        } finally {
            // Ensure the scanner is closed when the program exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }
}
