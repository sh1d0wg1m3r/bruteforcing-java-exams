/*
 * Exam Question #190
 * Generated on: 2025-05-11 22:28:46
 * Generated by: Account 2
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System in Java. The system should allow managing patient records and scheduling/viewing appointments.
 * 
 * **Requirements:**
 * 
 * 1.  **Patient Management:**
 *     *   Store patient records. Each patient should have a unique ID (integer), name, age (integer), and contact information (string).
 *     *   Allow adding new patients.
 *     *   Allow viewing all registered patients.
 *     *   Patients should be stored in a data structure that allows easy iteration and searching by ID.
 * 
 * 2.  **Appointment Management:**
 *     *   Store appointments. Each appointment should be linked to a registered patient (using patient ID), have a scheduled time (simplified as a string, e.g., "10:00 AM"), and a reason for the visit.
 *     *   Allow scheduling new appointments. An appointment can only be scheduled for an existing patient.
 *     *   Appointments should be managed in a queue-like manner, representing the order in which patients are expected to be seen.
 *     *   Allow viewing the list of upcoming appointments in the order they were scheduled.
 * 
 * 3.  **User Interface:**
 *     *   Provide a command-line interface using `java.util.Scanner` for user input.
 *     *   Present a menu with options: Add Patient, Schedule Appointment, View Patients, View Upcoming Appointments, Exit.
 *     *   Use a `switch` statement to handle menu selections.
 * 
 * 4.  **Data Structures and Components:**
 *     *   You **must** use `java.util.Queue` to manage appointments.
 *     *   You **must** use `java.util.ArrayList` to store patients.
 *     *   You **must** use the `java.util.List` interface in method signatures where appropriate (e.g., returning a list of patients).
 *     *   You **must** use `java.util.Scanner` for all user input.
 *     *   You **must** use a `switch` statement for the main menu control flow.
 *     *   You **must** use `System.err` to display error messages (e.g., invalid input, patient not found).
 *     *   You **must** use `System.out` for displaying the menu, prompts, successful operations, and lists of data.
 *     *   You **must** implement class-wide exception handling using `try-catch` blocks to gracefully handle potential runtime errors, especially related to user input (e.g., non-integer input when an integer is expected).
 * 
 * 5.  **Best Practices:**
 *     *   Implement proper encapsulation for patient and appointment data (private fields, public getters/setters).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments (Javadoc for classes/methods, inline for complex logic).
 *     *   Implement input validation (e.g., checking for empty strings, non-numeric input, patient existence).
 *     *   Ensure clean code structure with separate classes for data objects (`Patient`, `Appointment`) and the management system logic.
 * 
 * **Classes to Create:**
 * 
 * *   `Patient`: Represents a patient.
 * *   `Appointment`: Represents an appointment.
 * *   `HospitalManagementSystem`: Contains the main logic, data structures, and user interaction loop.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user input, perform the requested actions (adding, scheduling, viewing), display results or errors, and continue until the user chooses to exit. Error messages should go to `System.err`, normal output to `System.out`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Hospital Management System ---
 * 1. Add Patient
 * 2. Schedule Appointment
 * 3. View Patients
 * 4. View Upcoming Appointments
 * 5. Exit
 * Enter your choice: 1
 * Enter Patient ID: 101
 * Enter Patient Name: Alice
 * Enter Patient Age: 30
 * Enter Patient Contact: 555-1234
 * Patient added successfully.
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 1
 * Enter Patient ID: 102
 * Enter Patient Name: Bob
 * Enter Patient Age: 45
 * Enter Patient Contact: 555-5678
 * Patient added successfully.
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 2
 * Enter Patient ID for appointment: 101
 * Enter Appointment Time (e.g., 10:00 AM): 10:30 AM
 * Enter Reason for Appointment: Fever
 * Appointment scheduled for Alice at 10:30 AM.
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 2
 * Enter Patient ID for appointment: 999
 * Enter Appointment Time (e.g., 10:00 AM): 11:00 AM
 * Enter Reason for Appointment: Checkup
 * Error: Patient with ID 999 not found.
 * (This error message should go to System.err)
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 3
 * --- Registered Patients ---
 * ID: 101, Name: Alice, Age: 30, Contact: 555-1234
 * ID: 102, Name: Bob, Age: 45, Contact: 555-5678
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 4
 * --- Upcoming Appointments ---
 * Patient ID: 101, Time: 10:30 AM, Reason: Fever
 * 
 * --- Hospital Management System ---
 * ...
 * Enter your choice: 5
 * Exiting system.
 * ```
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a basic Hospital Appointment Management System, demonstrating the required Java concepts and best practices.
 * 
 * **Core Components Usage:**
 * 
 * 1.  **`java.util.Queue`:** The `appointmentQueue` is declared as a `Queue<Appointment>` and initialized using `java.util.LinkedList`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO (First-In, First-Out) behavior. The `offer()` method is used to add appointments to the end of the queue in `scheduleAppointment()`, and the `viewAppointments()` method iterates through the queue using a for-each loop to display elements without removing them, simulating viewing the waiting list. (Note: A real system might use `poll()` to process appointments when a doctor is ready).
 * 2.  **`java.util.ArrayList`:** The `patientList` is declared as `List<Patient>` and initialized using `java.util.ArrayList`. `ArrayList` is used to store patient records, providing dynamic resizing and easy element access/iteration. The `addPatient()` method adds new patients to this list, and `viewPatients()` iterates through it. The `findPatient()` method also iterates through this list to search for a patient by ID.
 * 3.  **`java.util.List` interface:** The `patientList` field is declared using the `List` interface (`private List<Patient> patientList;`), although it's initialized with `ArrayList`. This adheres to the principle of programming to interfaces, which is a good practice for flexibility. Methods like `viewPatients()` implicitly work with the `List` interface.
 * 4.  **`java.util.Scanner`:** A `Scanner` object is used in the `HospitalManagementSystem` class to read user input from the console (`System.in`). It's used to read menu choices, patient details, and appointment details.
 * 5.  **`switch` statement:** The `run()` method uses a `switch` statement to control the main program flow based on the user's integer menu choice. Each case corresponds to a specific action (Add Patient, Schedule Appointment, View Patients, View Appointments, Exit).
 * 6.  **`System.err`:** `System.err.println()` is used specifically for displaying error messages, such as when a patient is not found during appointment scheduling, when input validation fails (e.g., empty name, invalid age), or when unexpected input (non-numeric) is provided.
 * 7.  **`System.out`:** `System.out.println()` is used for all standard output, including displaying the menu, prompts for input, success messages, and lists of patients and appointments.
 * 8.  **`try-catch` blocks:** Exception handling is implemented using `try-catch`.
 *     *   Specific `try-catch` blocks are used within `addPatient()` and `scheduleAppointment()` to catch `InputMismatchException` when `scanner.nextInt()` is called, ensuring that non-integer input doesn't crash the program. They also catch generic `Exception` as a fallback for other potential issues during these operations.
 *     *   A `try-catch` block wraps the core logic inside the `while(running)` loop in the `run()` method. This serves as a "class-wide" handler for unexpected exceptions that might occur during the main execution loop, preventing the program from terminating abruptly. It catches `InputMismatchException` for the menu choice and a general `Exception`.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** The `Patient` and `Appointment` classes have private fields (`patientId`, `name`, etc.) and public getter methods (`getPatientId()`, `getName()`, etc.) to access the data, preventing direct external modification and controlling how data is exposed.
 * *   **Meaningful Names:** Class names (`Patient`, `Appointment`, `HospitalManagementSystem`), field names (`patientList`, `appointmentQueue`), and method names (`addPatient`, `scheduleAppointment`, `viewPatients`, `run`) are descriptive and indicate their purpose.
 * *   **Comments:** Javadoc comments are included for classes and methods, explaining their purpose, parameters, and return values. Inline comments are used where necessary to clarify specific logic (e.g., consuming the newline character after `nextInt()`).
 * *   **Input Validation:** Methods like `addPatient()` and `scheduleAppointment()` include checks for empty strings (`.trim().isEmpty()`) and positive age/ID where applicable, providing user-friendly error messages via `System.err`.
 * *   **Error Handling:** Input validation combined with `try-catch` blocks ensures that the program handles invalid user input and potential runtime errors gracefully, printing informative messages to `System.err` instead of crashing.
 * *   **Clean Code Structure:** The code is organized into separate classes with distinct responsibilities: `Patient` and `Appointment` for data representation, and `HospitalManagementSystem` for managing the data structures and user interaction logic. The `run()` method orchestrates the main application flow.
 * 
 * This solution effectively integrates all required components into a functional system that simulates a practical scenario while adhering to good programming practices and demonstrating essential Java concepts.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private int patientId;
    private String name;
    private int age;
    private String contact;

    /**
     * Constructs a new Patient object.
     * @param patientId The unique ID of the patient.
     * @param name The name of the patient.
     * @param age The age of the patient.
     * @param contact The contact information of the patient.
     */
    public Patient(int patientId, String name, int age, String contact) {
        this.patientId = patientId;
        this.name = name;
        this.age = age;
        this.contact = contact;
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getContact() {
        return contact;
    }

    // --- Setters (Optional for this problem, but good practice) ---
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setContact(String contact) {
        this.contact = contact;
    }

    /**
     * Returns a string representation of the Patient object.
     * @return A formatted string containing patient details.
     */
    @Override
    public String toString() {
        return "ID: " + patientId + ", Name: " + name + ", Age: " + age + ", Contact: " + contact;
    }
}

/**
 * Represents an appointment in the hospital system.
 */
class Appointment {
    private int patientId; // Link to the patient
    private String time;   // Simplified time representation
    private String reason;

    /**
     * Constructs a new Appointment object.
     * @param patientId The ID of the patient for this appointment.
     * @param time The scheduled time of the appointment.
     * @param reason The reason for the appointment.
     */
    public Appointment(int patientId, String time, String reason) {
        this.patientId = patientId;
        this.time = time;
        this.reason = reason;
    }

    // --- Getters ---
    public int getPatientId() {
        return patientId;
    }

    public String getTime() {
        return time;
    }

    public String getReason() {
        return reason;
    }

    /**
     * Returns a string representation of the Appointment object.
     * @return A formatted string containing appointment details.
     */
    @Override
    public String toString() {
        return "Patient ID: " + patientId + ", Time: " + time + ", Reason: " + reason;
    }
}

/**
 * The main class for managing hospital patients and appointments.
 * Demonstrates the use of List, Queue, Scanner, Switch, and exception handling.
 */
public class HospitalManagementSystem {
    private List<Patient> patientList;
    private Queue<Appointment> appointmentQueue;
    private Scanner scanner;

    /**
     * Constructs a new HospitalManagementSystem.
     * Initializes the data structures and scanner.
     */
    public HospitalManagementSystem() {
        this.patientList = new ArrayList<>(); // Use ArrayList to store patients
        this.appointmentQueue = new LinkedList<>(); // Use LinkedList as a Queue for appointments (FIFO)
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new patient to the system based on user input.
     * Includes input validation and error handling.
     */
    public void addPatient() {
        System.out.println("\n--- Add New Patient ---");
        try {
            System.out.print("Enter Patient ID: ");
            int id = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            // Basic validation: Check if ID already exists (optional but good)
            if (findPatient(id) != null) {
                System.err.println("Error: Patient with ID " + id + " already exists.");
                return;
            }

            System.out.print("Enter Patient Name: ");
            String name = scanner.nextLine().trim();
            if (name.isEmpty()) {
                System.err.println("Error: Patient name cannot be empty.");
                return;
            }

            System.out.print("Enter Patient Age: ");
            int age = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over
            if (age <= 0) {
                 System.err.println("Error: Patient age must be positive.");
                 return;
            }


            System.out.print("Enter Patient Contact: ");
            String contact = scanner.nextLine().trim();
             if (contact.isEmpty()) {
                System.err.println("Error: Patient contact cannot be empty.");
                return;
            }

            Patient newPatient = new Patient(id, name, age, contact);
            patientList.add(newPatient); // Add to ArrayList (List)
            System.out.println("Patient added successfully.");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a number for ID and Age.");
            scanner.nextLine(); // Clear the invalid input from scanner buffer
        } catch (Exception e) {
            // Catch any other unexpected errors during input
            System.err.println("An unexpected error occurred while adding patient: " + e.getMessage());
        }
    }

    /**
     * Schedules a new appointment based on user input.
     * Requires a valid existing patient ID. Adds appointment to the queue.
     * Includes input validation and error handling.
     */
    public void scheduleAppointment() {
        System.out.println("\n--- Schedule New Appointment ---");
        try {
            System.out.print("Enter Patient ID for appointment: ");
            int patientId = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            // Validate: Check if patient exists
            Patient patient = findPatient(patientId);
            if (patient == null) {
                System.err.println("Error: Patient with ID " + patientId + " not found.");
                return;
            }

            System.out.print("Enter Appointment Time (e.g., 10:00 AM): ");
            String time = scanner.nextLine().trim();
             if (time.isEmpty()) {
                System.err.println("Error: Appointment time cannot be empty.");
                return;
            }

            System.out.print("Enter Reason for Appointment: ");
            String reason = scanner.nextLine().trim();
             if (reason.isEmpty()) {
                System.err.println("Error: Appointment reason cannot be empty.");
                return;
            }

            Appointment newAppointment = new Appointment(patientId, time, reason);
            appointmentQueue.offer(newAppointment); // Add to the Queue
            System.out.println("Appointment scheduled for " + patient.getName() + " at " + time + ".");

        } catch (InputMismatchException e) {
            System.err.println("Error: Invalid input. Please enter a number for Patient ID.");
            scanner.nextLine(); // Clear the invalid input
        } catch (Exception e) {
             // Catch any other unexpected errors
            System.err.println("An unexpected error occurred while scheduling appointment: " + e.getMessage());
        }
    }

    /**
     * Finds a patient by their ID.
     * @param patientId The ID of the patient to find.
     * @return The Patient object if found, otherwise null.
     */
    private Patient findPatient(int patientId) {
        // Iterate through the List to find the patient
        for (Patient patient : patientList) { // patientList is an ArrayList implementing List
            if (patient.getPatientId() == patientId) {
                return patient;
            }
        }
        return null; // Patient not found
    }

    /**
     * Displays all registered patients.
     * Iterates through the patient list.
     */
    public void viewPatients() {
        System.out.println("\n--- Registered Patients ---");
        if (patientList.isEmpty()) {
            System.out.println("No patients registered yet.");
        } else {
            // Iterate through the ArrayList (List) and print each patient
            for (Patient patient : patientList) {
                System.out.println(patient);
            }
        }
    }

    /**
     * Displays all upcoming appointments in the order they were scheduled.
     * Iterates through the appointment queue without removing elements.
     */
    public void viewAppointments() {
        System.out.println("\n--- Upcoming Appointments ---");
        if (appointmentQueue.isEmpty()) {
            System.out.println("No appointments scheduled yet.");
        } else {
            // Iterate through the Queue using a for-each loop (doesn't remove elements)
            // Note: This view doesn't simulate processing/removing from the queue.
            // To simulate processing, you'd use appointmentQueue.poll() in another method.
            for (Appointment appointment : appointmentQueue) { // appointmentQueue is a LinkedList implementing Queue
                System.out.println(appointment);
            }
        }
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Management System ---");
        System.out.println("1. Add Patient");
        System.out.println("2. Schedule Appointment");
        System.out.println("3. View Patients");
        System.out.println("4. View Upcoming Appointments");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     * Handles user input and calls appropriate methods based on menu choice.
     * Includes a class-wide try-catch around the main loop for general robustness.
     */
    public void run() {
        boolean running = true;
        while (running) {
             // Class-wide exception handling around the core loop logic
            try {
                displayMenu();
                int choice = scanner.nextInt();
                // No scanner.nextLine() here immediately after nextInt() for the menu choice
                // as the switch cases that need line input will handle it or the next nextLine() will consume it.

                switch (choice) {
                    case 1:
                        addPatient();
                        break;
                    case 2:
                        scheduleAppointment();
                        break;
                    case 3:
                        viewPatients();
                        break;
                    case 4:
                        viewAppointments();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting system.");
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        // Need to consume the invalid input line if it wasn't an int
                        // This can be tricky with mixed nextInt/nextLine.
                        // A safer approach is to read the whole line and parse it.
                        // Let's stick to nextInt for simplicity as per common exam pattern,
                        // and rely on the catch block for non-integer input.
                        // For non-numeric default, nextInt() would have already failed.
                        // For numeric default (e.g., 9), the switch handles it.
                         if (scanner.hasNextLine()) { // Consume the rest of the line if any
                             scanner.nextLine();
                         }
                }
            } catch (InputMismatchException e) {
                System.err.println("Error: Invalid input. Please enter a number for your menu choice.");
                scanner.nextLine(); // Consume the invalid input line
            } catch (Exception e) {
                // Catch any other unexpected exceptions during the loop execution
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Optional: print stack trace for debugging in exam
            }
        }
        scanner.close(); // Close the scanner when exiting
    }

    /**
     * The main method to start the Hospital Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        HospitalManagementSystem system = new HospitalManagementSystem();
        system.run();
    }
}
