/*
 * Exam Question #1077
 * Generated on: 2025-05-12 17:21:38
 * Generated by: Account 2
 * 
 * QUESTION:
 * **Java Programming Exam Task: Advanced Task Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple command-line application for managing tasks. The system should allow users to add new tasks, process the next pending task, view pending tasks, and view completed tasks.
 * 
 * Each task has a description and a priority level (1 for High, 2 for Medium, 3 for Low). The system should process tasks based on their arrival order in the pending queue (First-In, First-Out). Completed tasks should be stored in a separate list.
 * 
 * Your solution must demonstrate a strong understanding of core Java concepts, including data structures, user input handling, control flow, and exception management.
 * 
 * **Technical Requirements:**
 * 
 * 1.  **Task Representation:** Create a `Task` class with private fields for `description` (String) and `priority` (int). Provide a constructor and public getter methods for these fields. Implement a `toString()` method to provide a user-friendly representation of a task.
 * 2.  **Task Management Logic:** Create a `TaskManager` class.
 *     *   It must use a `java.util.Queue<Task>` to store pending tasks. You should use the `java.util.LinkedList` implementation for the Queue.
 *     *   It must use a `java.util.ArrayList<Task>` to store completed tasks. This list should be declared using the `java.util.List` interface type (`List<Task> completedTasks = new ArrayList<>();`).
 *     *   Include methods for:
 *         *   `addTask(String description, int priority)`: Adds a new task to the pending queue. Must validate the priority input (ensure it's 1, 2, or 3).
 *         *   `processNextTask()`: Removes the next task from the pending queue (FIFO) and moves it to the completed tasks list. Must handle the case where the pending queue is empty.
 *         *   `viewPendingTasks()`: Prints all tasks currently in the pending queue.
 *         *   `viewCompletedTasks()`: Prints all tasks in the completed tasks list.
 * 3.  **User Interface:** Implement a command-line interface within the `TaskManager` class (e.g., in a `run()` method).
 *     *   Use `java.util.Scanner` to read user input.
 *     *   Present a menu of options to the user (Add Task, Process Task, View Pending, View Completed, Exit).
 *     *   Use a `switch` statement to handle the different user commands.
 *     *   Use `System.out` for normal output (menu, task lists, confirmation messages).
 *     *   Use `System.err` for all error messages (e.g., invalid command, invalid input type, out-of-range priority, attempting to process an empty queue).
 * 4.  **Exception Handling:** Implement robust exception handling.
 *     *   Use `try-catch` blocks to handle potential errors during user input (e.g., `InputMismatchException` when the user enters non-numeric input where a number is expected).
 *     *   Implement "class-wide" exception handling by wrapping the main command processing loop in a `try-catch` block to catch unexpected runtime exceptions and print error details to `System.err`.
 *     *   Handle specific error conditions within methods (e.g., attempting to process an empty queue).
 * 5.  **Best Practices:**
 *     *   Adhere to proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes and methods).
 *     *   Implement input validation where necessary.
 *     *   Ensure the `Scanner` resource is properly managed (e.g., using try-with-resources).
 * 
 * **Expected Output:**
 * 
 * Your program should interact with the user via the console, displaying a menu, processing commands, and showing task lists or error messages as appropriate.
 * 
 * *   Example interaction (abbreviated):
 *     ```
 *     --- Task Manager Menu ---
 *     1. Add New Task
 *     2. Process Next Task
 *     3. View Pending Tasks
 *     4. View Completed Tasks
 *     5. Exit
 *     -------------------------
 *     Enter command: 1
 *     Enter task description: Write exam question
 *     Enter priority (1=High, 2=Medium, 3=Low): 1
 *     Task added: Task{description='Write exam question', priority=1}
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 3
 * 
 *     --- Pending Tasks ---
 *     1. Task{description='Write exam question', priority=1}
 *     ---------------------
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 2
 *     Processed task: Task{description='Write exam question', priority=1}
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 3
 * 
 *     --- Pending Tasks ---
 *     No pending tasks.
 *     ---------------------
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 4
 * 
 *     --- Completed Tasks ---
 *     1. Task{description='Write exam question', priority=1}
 *     -----------------------
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 2
 *     Error: No pending tasks to process. (This should go to System.err)
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: invalid
 *     Error: Invalid input. Please enter a number for the command. (This should go to System.err)
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 1
 *     Enter task description: Review code
 *     Enter priority (1=High, 2=Medium, 3=Low): 5
 *     Error: Invalid priority. Priority must be between 1 (High) and 3 (Low). Task not added. (This should go to System.err)
 * 
 *     --- Task Manager Menu ---
 *     ...
 *     Enter command: 5
 *     Exiting Task Manager. Goodbye!
 *     ```
 * 
 * Your solution should be provided as a single Java file containing both the `Task` and `TaskManager` classes.
 * 
 * **Evaluation Criteria:**
 * 
 * *   Correct implementation of all required functionalities.
 * *   Proper use of `Queue`, `ArrayList`, `List`, `Scanner`, and `switch`.
 * *   Effective and correct use of `System.out` and `System.err`.
 * *   Robust and well-structured exception handling using `try-catch`, including handling specific input errors and general runtime errors.
 * *   Adherence to best practices (encapsulation, naming, comments, validation).
 * *   Code clarity and organization.
 *
 * EXPLANATION:
 * This solution implements a simple command-line task manager demonstrating the required Java concepts.
 * 
 * 1.  **`Task` Class:** This is a simple Plain Old Java Object (POJO) representing a task. It uses private fields (`description`, `priority`) and public getters, adhering to encapsulation principles. The `toString()` method provides a convenient way to print task details.
 * 
 * 2.  **`TaskManager` Class:** This is the core class managing the task workflow.
 *     *   **Data Structures:**
 *         *   `pendingTasks`: Declared as `Queue<Task>` and initialized with `new LinkedList<>()`. A `Queue` is suitable here because tasks are processed in the order they are added (FIFO), which is the default behavior of a `LinkedList` when used as a `Queue`. The `offer()` method is used for adding tasks, which is the standard `Queue` method, and `poll()` is used for retrieving and removing the next task, returning `null` if the queue is empty.
 *         *   `completedTasks`: Declared as `List<Task>` and initialized with `new ArrayList<>()`. An `ArrayList` is suitable for storing completed tasks as a simple list, allowing easy iteration and access to completed items in the order they were finished. Using the `List` interface type for the variable (`List<Task> completedTasks`) is good practice, promoting flexibility if a different `List` implementation were needed later.
 *     *   **Methods:**
 *         *   `addTask`: Takes description and priority, validates the priority range (1-3), and adds a new `Task` object to the `pendingTasks` queue using `offer()`. Error messages for invalid input go to `System.err`.
 *         *   `processNextTask`: Uses `pendingTasks.poll()` to get the next task. If `poll()` returns `null` (meaning the queue is empty), it prints an error to `System.err`. Otherwise, it adds the retrieved task to the `completedTasks` list.
 *         *   `viewPendingTasks` and `viewCompletedTasks`: Iterate through their respective collections and print the task details using `System.out`. They include checks for empty lists/queues.
 *         *   `printMenu`: A helper method to display the user options to `System.out`.
 *         *   `run`: This is the main application loop.
 *             *   It uses `try (Scanner scanner = new Scanner(System.in))` for resource management, ensuring the `Scanner` is closed automatically.
 *             *   The main `while(running)` loop is wrapped in a `try-catch(Exception e)` block. This provides a "class-wide" or application-level catch for any unexpected runtime errors that might occur within the loop, printing the stack trace to `System.err`.
 *             *   Inside the main loop, there's another `try-catch(InputMismatchException e)` specifically to handle cases where the user enters non-integer input when prompted for a command number. This prevents the program from crashing and prompts the user to try again.
 *             *   A `switch` statement processes the valid integer commands.
 *             *   The "Add Task" case (case 1) includes a nested `try-catch(InputMismatchException e)` to handle non-integer input specifically for the priority value, separate from the command input handling.
 *             *   `System.out` is used for menu display, prompts, and successful operation messages.
 *             *   `System.err` is used for all error conditions: invalid commands, invalid input types (`InputMismatchException`), invalid priority values, and attempting operations on empty collections.
 * 
 * 3.  **Exception Handling Strategy:** The solution employs multiple levels of `try-catch`:
 *     *   **Input Validation:** Specific `try-catch` blocks handle `InputMismatchException` immediately after attempting to read an integer from the `Scanner` for both the main command and the task priority. This allows the program to recover gracefully from bad input without terminating.
 *     *   **Operational Errors:** Methods like `processNextTask` include checks (`pendingTasks.isEmpty()`) and print error messages to `System.err` if the operation cannot be performed (e.g., no tasks to process).
 *     *   **General Runtime Errors:** The outermost `try-catch(Exception e)` around the main loop and the inner `try-catch(Exception e)` within the loop provide a safety net for any other unexpected exceptions that might occur during program execution, printing details to `System.err` for debugging.
 *     *   **Resource Management:** `try-with-resources` ensures the `Scanner` is closed reliably.
 * 
 * 4.  **Best Practices:** Encapsulation is used in `Task`. Meaningful names (`pendingTasks`, `processNextTask`, `viewCompletedTasks`) improve readability. Comments explain the purpose of classes, methods, and key logic sections. Input validation is performed for priority and checked for empty description. `System.out` and `System.err` are used for their intended purposes. The code is structured logically with separate methods for different functionalities.
 * 
 * This solution effectively integrates the required Java components within a practical scenario, demonstrating competence in data structure usage, control flow, user interaction, and comprehensive error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with a description and priority.
 */
class Task {
    private String description;
    private int priority; // 1=High, 2=Medium, 3=Low

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task.
     * @param priority    The priority level (1, 2, or 3).
     */
    public Task(String description, int priority) {
        this.description = description;
        this.priority = priority;
    }

    /**
     * Gets the task description.
     *
     * @return The description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets the task priority.
     *
     * @return The priority.
     */
    public int getPriority() {
        return priority;
    }

    @Override
    public String toString() {
        String priorityString;
        switch (priority) {
            case 1:
                priorityString = "High";
                break;
            case 2:
                priorityString = "Medium";
                break;
            case 3:
                priorityString = "Low";
                break;
            default:
                priorityString = "Unknown"; // Should not happen with validation
        }
        return "Task{description='" + description + "', priority=" + priority + " (" + priorityString + ")}";
    }
}

/**
 * Manages a collection of pending and completed tasks.
 */
public class TaskManager {

    private Queue<Task> pendingTasks;
    private List<Task> completedTasks; // Declared using List interface

    /**
     * Constructs a new TaskManager.
     * Initializes the pending and completed task collections.
     */
    public TaskManager() {
        // Use LinkedList as the implementation for the Queue
        this.pendingTasks = new LinkedList<>();
        // Use ArrayList as the implementation for the List interface
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a new task to the pending queue after validation.
     *
     * @param description The description of the task.
     * @param priority    The priority of the task (1-3).
     */
    public void addTask(String description, int priority) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }
        if (priority < 1 || priority > 3) {
            System.err.println("Error: Invalid priority. Priority must be between 1 (High) and 3 (Low). Task not added.");
            return;
        }

        Task newTask = new Task(description.trim(), priority);
        // offer is the preferred method for adding to a Queue
        pendingTasks.offer(newTask);
        System.out.println("Task added: " + newTask);
    }

    /**
     * Processes the next task from the pending queue (FIFO) and moves it to the completed list.
     * Handles the case where there are no pending tasks.
     */
    public void processNextTask() {
        // poll retrieves and removes the head of the queue, returns null if empty
        Task processedTask = pendingTasks.poll();

        if (processedTask == null) {
            System.err.println("Error: No pending tasks to process.");
        } else {
            completedTasks.add(processedTask);
            System.out.println("Processed task: " + processedTask);
        }
    }

    /**
     * Prints all tasks currently in the pending queue to System.out.
     */
    public void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            int index = 1;
            // Iterate through the queue without removing elements
            for (Task task : pendingTasks) {
                System.out.println(index++ + ". " + task);
            }
        }
        System.out.println("---------------------\n");
    }

    /**
     * Prints all tasks in the completed tasks list to System.out.
     */
    public void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            int index = 1;
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(index++ + ". " + task);
            }
        }
        System.out.println("-----------------------\n");
    }

    /**
     * Displays the main menu options to the user.
     */
    private void printMenu() {
        System.out.println("\n--- Task Manager Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Process Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.println("-------------------------");
    }

    /**
     * Runs the main application loop, handling user input and commands.
     * Includes comprehensive exception handling.
     */
    public void run() {
        // Use try-with-resources to ensure the scanner is closed
        try (Scanner scanner = new Scanner(System.in)) {
            boolean running = true;

            // Main application loop wrapped in try-catch for general exceptions
            try {
                while (running) {
                    printMenu();

                    try {
                        System.out.print("Enter command: ");
                        int command = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character after reading int

                        // Use switch statement for command processing
                        switch (command) {
                            case 1: // Add Task
                                System.out.print("Enter task description: ");
                                String description = scanner.nextLine();
                                int priority = -1;
                                try {
                                    System.out.print("Enter priority (1=High, 2=Medium, 3=Low): ");
                                    priority = scanner.nextInt();
                                    scanner.nextLine(); // Consume the newline after reading int
                                    addTask(description, priority); // addTask includes priority validation
                                } catch (InputMismatchException e) {
                                    System.err.println("Error: Invalid priority input. Please enter a number.");
                                    scanner.nextLine(); // Consume the invalid input
                                }
                                break;
                            case 2: // Process Task
                                processNextTask(); // processNextTask handles empty queue case
                                break;
                            case 3: // View Pending
                                viewPendingTasks();
                                break;
                            case 4: // View Completed
                                viewCompletedTasks();
                                break;
                            case 5: // Exit
                                System.out.println("Exiting Task Manager. Goodbye!");
                                running = false;
                                break;
                            default:
                                System.err.println("Error: Invalid command. Please enter a number between 1 and 5.");
                        }
                    } catch (InputMismatchException e) {
                        // Catch non-integer input for the main command
                        System.err.println("Error: Invalid input. Please enter a number for the command.");
                        scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    } catch (Exception e) {
                        // Catch any other unexpected exceptions during command execution
                        System.err.println("An unexpected error occurred during command execution: " + e.getMessage());
                        e.printStackTrace(System.err); // Print stack trace to error stream
                    }
                }
            } catch (Exception e) {
                // Catch any unexpected exceptions in the main loop structure itself
                System.err.println("A critical error occurred in the application loop: " + e.getMessage());
                e.printStackTrace(System.err);
            }
        } // Scanner is automatically closed here by try-with-resources
    }

    /**
     * Main method to start the Task Manager application.
     *
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run();
    }
}
