/*
 * Exam Question #279
 * Generated on: 2025-05-11 22:48:45
 * Generated by: Account 5
 * 
 * QUESTION:
 * **Java Programming Exam Task: Event Attendee Management System**
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple console-based system to manage attendees for an event. The system needs to keep track of all registered attendees and also manage a queue for a special Q&A session during the event.
 * 
 * **Requirements:**
 * 
 * 1.  **Attendee Representation:** Create a class `Attendee` with a private field for the attendee's name. Provide a public constructor and a public getter method for the name.
 * 2.  **Event Management Class:** Create a class `EventManager` that will handle the core logic.
 *     *   It must have private fields:
 *         *   A `List` (specifically an `ArrayList`) to store *all* registered attendees.
 *         *   A `Queue` to manage attendees waiting for the Q&A session.
 *     *   It must have a private `Scanner` field for reading user input.
 *     *   It must have public methods to:
 *         *   `addAttendee()`: Prompts the user for an attendee name and adds a new `Attendee` object to the main list. Perform basic validation (e.g., name not empty).
 *         *   `listAllAttendees()`: Prints the names of all attendees currently in the main list.
 *         *   `addToQaQueue()`: Prompts the user for an attendee name. Finds the attendee in the main list and adds them to the Q&A queue. If the attendee is not found, print an error message.
 *         *   `processNextQa()`: Removes and prints the name of the next attendee from the Q&A queue. If the queue is empty, print a message indicating that.
 *         *   `run()`: This method should contain the main application loop. It should:
 *             *   Display a menu of options (Add Attendee, List Attendees, Add to Q&A Queue, Process Next Q&A, Exit).
 *             *   Read the user's choice using the `Scanner`.
 *             *   Use a `switch` statement to handle the different menu options, calling the appropriate methods.
 *             *   Handle invalid menu input.
 *             *   Include a `try-catch` block within or around the main loop to catch potential unexpected exceptions and print an error message using `System.err`.
 *             *   Ensure the `Scanner` is closed properly when the program exits.
 * 3.  **Main Class:** Create a class `Main` with a `main` method that creates an `EventManager` object and calls its `run()` method.
 * 4.  **Java Components:** Your solution *must* explicitly use:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List`
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err`
 *     *   `System.out`
 *     *   Class-wide exception handling (`try-catch`) in the `EventManager.run()` method.
 * 5.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments.
 *     *   Implement input validation (e.g., non-empty name, valid menu choice).
 *     *   Provide clear error messages using `System.err`.
 *     *   Provide clear success/information messages using `System.out`.
 * 
 * **Expected Output:**
 * 
 * The program should present a menu. Based on user input, it should perform the requested action, printing lists, status messages, or error messages as appropriate.
 * 
 * Example Interaction Flow:
 * 
 * ```
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 1
 * Enter attendee name: Alice
 * Attendee 'Alice' added.
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 1
 * Enter attendee name: Bob
 * Attendee 'Bob' added.
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 2
 * Attendees:
 * - Alice
 * - Bob
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 3
 * Enter attendee name to add to Q&A queue: Alice
 * Attendee 'Alice' added to Q&A queue.
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 3
 * Enter attendee name to add to Q&A queue: Charlie
 * Error: Attendee 'Charlie' not found in the registered list.
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 4
 * Processing Q&A for: Alice
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 4
 * Q&A queue is currently empty.
 * 
 * Event Management Menu:
 * 1. Add Attendee
 * 2. List All Attendees
 * 3. Add Attendee to Q&A Queue
 * 4. Process Next Q&A Attendee
 * 5. Exit
 * Enter your choice: 5
 * Exiting Event Management System.
 * ```
 * 
 * **Constraints:**
 * 
 * *   Do not use any external libraries beyond the standard Java API.
 * *   Focus on the console interaction as described.
 * 
 * **Evaluation:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness and functionality according to the requirements.
 * *   Proper use of ALL specified Java components.
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Code structure and readability.
 *
 * EXPLANATION:
 * The solution provides an Event Attendee Management System as requested, demonstrating the use of various Java concepts.
 * 
 * 1.  **Attendee Class:**
 *     *   A simple `Attendee` class is created with a `private String name` field, adhering to encapsulation.
 *     *   A public constructor initializes the name and includes basic input validation (`IllegalArgumentException`) to ensure the name is not empty.
 *     *   A public `getName()` getter provides access to the attendee's name.
 *     *   `equals()` and `hashCode()` are overridden to allow for proper comparison and searching of `Attendee` objects within collections, specifically enabling the search by name in `addToQaQueue()` and checking for duplicates (optional but shown in `addAttendee` and `addToQaQueue`). Case-insensitive comparison is used for flexibility.
 *     *   `toString()` is overridden for convenient printing.
 * 
 * 2.  **EventManager Class:**
 *     *   This class orchestrates the application logic.
 *     *   **Data Structures:**
 *         *   `List<Attendee> attendeesList`: Declared using the `List` interface and initialized as an `ArrayList`. `ArrayList` is suitable here for storing and iterating over the main list of attendees.
 *         *   `Queue<Attendee> qaQueue`: Declared using the `Queue` interface and initialized as a `LinkedList`. `LinkedList` is a common and efficient implementation of the `Queue` interface, providing FIFO behavior necessary for a queueing system.
 *     *   **Input:** A `private Scanner scanner` is used to read user input from the console. It's initialized in the constructor.
 *     *   **Methods:**
 *         *   `displayMenu()`: A private helper method to print the menu options.
 *         *   `addAttendee()`: Prompts for a name, creates an `Attendee` object (handling potential `IllegalArgumentException` from the constructor), and adds it to `attendeesList` after checking for duplicates (case-insensitive). Uses `System.out` for success and `System.err` for errors.
 *         *   `listAllAttendees()`: Iterates through `attendeesList` and prints each attendee's name using `System.out`.
 *         *   `addToQaQueue()`: Prompts for a name, searches the `attendeesList` for a matching attendee (case-insensitive). If found, it uses `qaQueue.offer()` to add the `Attendee` object to the queue. `offer()` is standard for queues as it handles capacity restrictions gracefully (though `LinkedList` is unbounded). If not found, it prints an error using `System.err`. An optional check for the attendee already being in the queue is included.
 *         *   `processNextQa()`: Uses `qaQueue.poll()` to retrieve and remove the next attendee from the queue. `poll()` returns `null` if the queue is empty, which is handled by printing a message using `System.out`. If an attendee is retrieved, their name is printed using `System.out`.
 *         *   `run()`: This is the main application loop.
 *             *   It runs inside a `while(running)` loop.
 *             *   The core logic within the loop (displaying menu, reading choice, processing choice) is wrapped in a `try-catch` block. This demonstrates class-wide exception handling, catching `InputMismatchException` for invalid non-integer input specifically, and a general `Exception` for any other unexpected errors. Error messages are printed to `System.err`.
 *             *   A `switch` statement is used to direct the flow based on the user's integer choice, calling the appropriate methods.
 *             *   The `scanner.nextLine()` call after `scanner.nextInt()` is crucial to consume the leftover newline character and prevent input issues in subsequent `nextLine()` calls.
 *             *   The loop terminates when the user chooses option 5.
 *             *   `scanner.close()` is called after the loop finishes to release system resources.
 * 
 * 3.  **Main Class:**
 *     *   The standard `public static void main(String[] args)` method.
 *     *   It simply creates an instance of `EventManager` and calls its `run()` method to start the application.
 * 
 * 4.  **Component Usage:**
 *     *   `Queue`: Used for `qaQueue` (`LinkedList` implementation).
 *     *   `ArrayList`: Used for `attendeesList`.
 *     *   `List`: `attendeesList` is declared as `List<Attendee>`.
 *     *   `Scanner`: Used for `scanner` to read console input.
 *     *   `switch`: Used in `run()` to handle menu choices.
 *     *   `System.err`: Used for printing error messages (invalid input, attendee not found, name empty).
 *     *   `System.out`: Used for printing menus, lists, success messages, and queue status.
 *     *   `try-catch`: Used in `run()` for class-wide exception handling, including specific handling for `InputMismatchException` and a general catch for others. A local `try-catch` is also used in `addAttendee` for the `IllegalArgumentException` from the `Attendee` constructor.
 * 
 * 5.  **Best Practices:**
 *     *   **Encapsulation:** Fields in both `Attendee` and `EventManager` are private, with public methods for controlled access.
 *     *   **Naming:** Variables and methods have descriptive names (e.g., `attendeesList`, `qaQueue`, `addAttendee`, `processNextQa`).
 *     *   **Comments:** Comments explain the purpose of classes, fields, and key methods.
 *     *   **Input Validation:** `Attendee` constructor validates name non-emptiness. `addAttendee` checks for duplicates and empty input. `addToQaQueue` checks for empty input and attendee existence. The `run` method handles non-integer menu input and invalid range.
 *     *   **Error Handling:** `try-catch` blocks handle exceptions, and `System.err` is used for error output. Specific error messages guide the user.
 *     *   **Clean Code:** The code is structured into logical classes and methods, promoting readability and maintainability. The `Scanner` is closed properly.
 * 
 * This solution effectively integrates all required components within a practical scenario, demonstrating competence in core Java programming, data structures, and error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList; // LinkedList is a common Queue implementation
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException; // To handle non-integer input

// Represents an attendee
class Attendee {
    private String name;

    // Constructor
    public Attendee(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Attendee name cannot be empty.");
        }
        this.name = name.trim();
    }

    // Getter for name
    public String getName() {
        return name;
    }

    // Override equals and hashCode for searching in lists/queues
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Attendee attendee = (Attendee) o;
        return name.equalsIgnoreCase(attendee.name); // Case-insensitive comparison for name
    }

    @Override
    public int hashCode() {
        return name.toLowerCase().hashCode(); // Consistent with equals
    }

    @Override
    public String toString() {
        return name;
    }
}

// Manages the event attendees and Q&A queue
class EventManager {
    private List<Attendee> attendeesList; // List interface, implemented by ArrayList
    private Queue<Attendee> qaQueue;     // Queue interface, implemented by LinkedList
    private Scanner scanner;

    // Constructor
    public EventManager() {
        this.attendeesList = new ArrayList<>(); // Use ArrayList for the main list
        this.qaQueue = new LinkedList<>();      // Use LinkedList as a Queue implementation
        this.scanner = new Scanner(System.in);
    }

    // Displays the main menu
    private void displayMenu() {
        System.out.println("\nEvent Management Menu:");
        System.out.println("1. Add Attendee");
        System.out.println("2. List All Attendees");
        System.out.println("3. Add Attendee to Q&A Queue");
        System.out.println("4. Process Next Q&A Attendee");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    // Adds a new attendee to the main list
    public void addAttendee() {
        System.out.print("Enter attendee name: ");
        String name = scanner.nextLine();
        try {
            Attendee newAttendee = new Attendee(name);
            // Check if attendee already exists (case-insensitive)
            boolean alreadyExists = false;
            for (Attendee a : attendeesList) {
                if (a.getName().equalsIgnoreCase(newAttendee.getName())) {
                    alreadyExists = true;
                    break;
                }
            }

            if (alreadyExists) {
                System.err.println("Error: Attendee '" + newAttendee.getName() + "' already registered.");
            } else {
                attendeesList.add(newAttendee);
                System.out.println("Attendee '" + newAttendee.getName() + "' added.");
            }
        } catch (IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Lists all attendees in the main list
    public void listAllAttendees() {
        if (attendeesList.isEmpty()) {
            System.out.println("No attendees registered yet.");
        } else {
            System.out.println("Attendees:");
            for (int i = 0; i < attendeesList.size(); i++) {
                System.out.println("- " + attendeesList.get(i).getName());
            }
        }
    }

    // Finds an attendee by name and adds them to the Q&A queue
    public void addToQaQueue() {
        System.out.print("Enter attendee name to add to Q&A queue: ");
        String nameToFind = scanner.nextLine().trim();

        if (nameToFind.isEmpty()) {
             System.err.println("Error: Attendee name cannot be empty.");
             return;
        }

        Attendee foundAttendee = null;
        for (Attendee attendee : attendeesList) {
            if (attendee.getName().equalsIgnoreCase(nameToFind)) { // Case-insensitive search
                foundAttendee = attendee;
                break;
            }
        }

        if (foundAttendee != null) {
            // Check if attendee is already in the queue (optional, but good practice)
            if (qaQueue.contains(foundAttendee)) {
                 System.out.println("Attendee '" + foundAttendee.getName() + "' is already in the Q&A queue.");
            } else {
                qaQueue.offer(foundAttendee); // offer is preferred over add for queues (returns false on failure)
                System.out.println("Attendee '" + foundAttendee.getName() + "' added to Q&A queue.");
            }
        } else {
            System.err.println("Error: Attendee '" + nameToFind + "' not found in the registered list.");
        }
    }

    // Removes and processes the next attendee from the Q&A queue
    public void processNextQa() {
        Attendee nextAttendee = qaQueue.poll(); // poll retrieves and removes the head, returns null if empty
        if (nextAttendee != null) {
            System.out.println("Processing Q&A for: " + nextAttendee.getName());
            // In a real system, you'd do something with the attendee here
        } else {
            System.out.println("Q&A queue is currently empty.");
        }
    }

    // Main application loop with menu interaction and exception handling
    public void run() {
        boolean running = true;
        while (running) {
            try {
                displayMenu();
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over

                switch (choice) {
                    case 1:
                        addAttendee();
                        break;
                    case 2:
                        listAllAttendees();
                        break;
                    case 3:
                        addToQaQueue();
                        break;
                    case 4:
                        processNextQa();
                        break;
                    case 5:
                        running = false;
                        System.out.println("Exiting Event Management System.");
                        break;
                    default:
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handles cases where user enters non-integer input for the menu choice
                System.err.println("Error: Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
        }
        scanner.close(); // Close the scanner when exiting the loop
    }
}

// Main class to start the application
public class Main {
    public static void main(String[] args) {
        EventManager manager = new EventManager();
        manager.run();
    }
}
