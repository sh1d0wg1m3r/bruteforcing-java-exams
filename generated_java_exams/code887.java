/*
 * Exam Question #887
 * Generated on: 2025-05-12 16:55:17
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Task Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simple console-based Task Management System for a small team. The system should allow users to add tasks, complete the next task in line, and view pending and completed tasks.
 * 
 * **System Requirements:**
 * 
 * 1.  **Task Representation:** Each task must have a unique integer ID, a description (String), and a priority level (an integer between 1 and 5, where 1 is the highest priority and 5 is the lowest).
 * 2.  **Pending Tasks:** Tasks waiting to be completed should be stored in a data structure that processes them in a First-In, First-Out (FIFO) manner, regardless of priority. This represents tasks being addressed in the order they were assigned.
 * 3.  **Completed Tasks:** Tasks that have been finished should be moved to a data structure that simply stores them for viewing. The order of completed tasks is not critical for processing but should be maintained for display purposes.
 * 4.  **User Interface:** The system should interact with the user via a text-based console menu.
 * 5.  **Functionality:** The system must support the following operations via the menu:
 *     *   **Add New Task:** Prompt the user for a task description and priority. Generate a unique ID automatically. Add the task to the pending queue.
 *     *   **Complete Next Task:** Remove the task at the front of the pending queue and move it to the completed tasks list. If there are no pending tasks, inform the user.
 *     *   **View Pending Tasks:** Display all tasks currently in the pending queue in their processing order.
 *     *   **View Completed Tasks:** Display all tasks currently in the completed tasks list.
 *     *   **Exit:** Terminate the application.
 * 6.  **Input Handling:** Use `java.util.Scanner` to read user input.
 * 7.  **Flow Control:** Use a `switch` statement to handle the different menu options.
 * 8.  **Error Handling:**
 *     *   Implement input validation for the task priority (must be an integer between 1 and 5).
 *     *   Handle potential `InputMismatchException` when reading integer input from the user.
 *     *   Handle any other potential runtime exceptions gracefully within the main application loop.
 *     *   Use `System.err` to print error messages (e.g., invalid input, invalid priority range, unexpected errors).
 *     *   Use `System.out` for all normal output (menu, prompts, success messages, task lists).
 * 9.  **Required Java Components:** Your solution MUST explicitly use and demonstrate the practical application of ALL of the following:
 *     *   `java.util.Queue` (for pending tasks)
 *     *   `java.util.ArrayList` (as an implementation for completed tasks)
 *     *   `java.util.List` (declare the completed tasks collection using this interface)
 *     *   `java.util.Scanner`
 *     *   `switch` statement
 *     *   `System.err`
 *     *   `System.out`
 *     *   Class-wide exception handling using `try-catch` blocks around the main interaction loop.
 * 
 * **Best Practices:**
 * 
 * *   Apply proper encapsulation by making class fields private and providing public methods for access/modification where necessary.
 * *   Use meaningful variable and method names.
 * *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 * *   Structure your code into appropriate classes (e.g., a `Task` class and a `TaskManager` class).
 * 
 * **Expected Output:**
 * 
 * The system should display a menu, prompt for user input, and perform actions based on the input. Error messages should be clearly distinguishable (e.g., prefixed with "Error:"). Task lists should be formatted clearly.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Task Manager Menu ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. View Pending Tasks
 * 4. View Completed Tasks
 * 5. Exit
 * -------------------------
 * Enter your choice: 1
 * Enter task description: Write report
 * Enter task priority (1-5): 2
 * Task added: Task ID: 1, Description: "Write report", Priority: 2
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 1
 * Enter task description: Review code
 * Enter task priority (1-5): 5
 * Task added: Task ID: 2, Description: "Review code", Priority: 5
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 3
 * 
 * --- Pending Tasks ---
 * Task ID: 1, Description: "Write report", Priority: 2
 * Task ID: 2, Description: "Review code", Priority: 5
 * ---------------------
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 2
 * Task completed: Task ID: 1, Description: "Write report", Priority: 2
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 4
 * 
 * --- Completed Tasks ---
 * Task ID: 1, Description: "Write report", Priority: 2
 * ---------------------
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 1
 * Enter task description: Fix bug
 * Enter task priority (1-5): 0
 * Error adding task: Priority must be between 1 and 5.
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: exit
 * Error: Invalid input. Please enter a number for the menu choice or priority.
 * 
 * --- Task Manager Menu ---
 * ...
 * Enter your choice: 5
 * Exiting Task Manager. Goodbye!
 * ```
 * 
 * Your solution should compile and run, demonstrating all the required components and error handling.
 *
 * EXPLANATION:
 * The provided solution implements a console-based Task Management System as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * **Key Components and Their Usage:**
 * 
 * 1.  **`java.util.Queue`**: The `pendingTasks` field in the `TaskManager` class is declared as a `Queue<Task>`. A `LinkedList` is used as the concrete implementation, which provides the necessary FIFO behavior. Tasks are added using `offer()` and removed using `poll()` to adhere to the queue principle.
 * 2.  **`java.util.ArrayList`**: The `completedTasks` field is initialized using `new ArrayList<>()`. `ArrayList` is a common and suitable `List` implementation for storing completed tasks where order is maintained but no special processing order (like FIFO or LIFO) is required for additions/removals.
 * 3.  **`java.util.List`**: The `completedTasks` field is explicitly declared using the `List<Task>` interface (`private List<Task> completedTasks;`). This demonstrates programming to the interface, a key principle for flexibility and good design.
 * 4.  **`java.util.Scanner`**: A `Scanner` object is used in the `TaskManager` class to read user input from `System.in`. It's managed within the `TaskManager` instance that uses it and closed when the application exits. The code correctly handles consuming the newline character after reading integers using `nextInt()` to prevent issues with subsequent `nextLine()` calls.
 * 5.  **`switch` statement**: The `run()` method uses a `switch` statement to direct the program flow based on the user's menu choice, cleanly separating the logic for each operation.
 * 6.  **`System.err`**: Used to print error messages. This includes messages for invalid menu choices (in the `default` case of the `switch`), `InputMismatchException` (when the user enters non-numeric input where a number is expected), and `IllegalArgumentException` (when the user enters a priority outside the valid 1-5 range). Using `System.err` is standard practice for distinguishing error output from normal program output.
 * 7.  **`System.out`**: Used for all normal program output, such as displaying the menu, prompting the user for input, confirming task additions or completions, and listing pending or completed tasks.
 * 8.  **Class-wide exception handling with `try-catch`**: The main interaction loop within the `run()` method is wrapped in a `try-catch` block. This block catches specific exceptions like `InputMismatchException` and `IllegalArgumentException` and provides user-friendly error messages via `System.err`. A general `catch (Exception e)` is also included as a fallback to handle any other unexpected runtime errors, printing a generic error message and the stack trace for debugging. This demonstrates robust error handling for the core application logic.
 * 
 * **Best Practices Implementation:**
 * 
 * *   **Encapsulation:** The `Task` and `TaskManager` classes have private fields (`id`, `description`, `priority`, `pendingTasks`, `completedTasks`, `nextTaskId`, `scanner`) and provide public methods (`get...`, `addTask`, `completeNextTask`, `view...`, `run`, `toString`) to interact with their state.
 * *   **Meaningful Names:** Variable names (`pendingTasks`, `completedTasks`, `nextTaskId`, `description`, `priority`) and method names (`addTask`, `completeNextTask`, `viewPendingTasks`, `printMenu`, `run`) are descriptive and indicate their purpose.
 * *   **Comments and Documentation:** Javadoc comments are provided for classes and public methods explaining their purpose, parameters, and potential exceptions. Inline comments are used where necessary to clarify specific logic (e.g., consuming newline, explaining queue/list usage).
 * *   **Input Validation:** The `addTask` method explicitly checks if the provided priority is within the valid range (1-5) and throws an `IllegalArgumentException` if it's not. This validation is handled in the `run` method's `try-catch` block.
 * *   **Error Handling:** As detailed above, multiple `catch` blocks are used to handle specific error types gracefully, providing informative messages to the user via `System.err`.
 * *   **Clean Code Structure:** The problem is broken down into two logical classes (`Task` and `TaskManager`), separating data representation from system logic and user interaction. Methods are well-defined and focused on specific tasks.
 * 
 * This solution effectively integrates the required Java components into a practical scenario, demonstrating understanding of data structures, control flow, input/output, and robust exception handling, fulfilling the requirements of a challenging exam task.
 */

import java.util.Queue;
import java.util.LinkedList; // A common implementation of Queue
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException; // To catch non-integer input

/**
 * Represents a single task with an ID, description, and priority.
 */
class Task {
    private int id;
    private String description;
    private int priority; // 1=High, 5=Low

    /**
     * Constructs a new Task.
     * @param id The unique ID of the task.
     * @param description The description of the task.
     * @param priority The priority level (1-5).
     */
    public Task(int id, String description, int priority) {
        this.id = id;
        this.description = description;
        this.priority = priority;
    }

    // Getters for task properties
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public int getPriority() {
        return priority;
    }

    /**
     * Returns a string representation of the task.
     * @return Formatted string displaying task details.
     */
    @Override
    public String toString() {
        return String.format("Task ID: %d, Description: \"%s\", Priority: %d", id, description, priority);
    }
}

/**
 * Manages the collection of pending and completed tasks.
 * Handles user interaction via console.
 */
class TaskManager {
    // Use Queue for pending tasks (FIFO)
    private Queue<Task> pendingTasks;
    // Use List for completed tasks
    private List<Task> completedTasks;
    private int nextTaskId; // Counter for generating unique task IDs
    private Scanner scanner; // Scanner for user input

    /**
     * Constructs a new TaskManager, initializing data structures and scanner.
     */
    public TaskManager() {
        this.pendingTasks = new LinkedList<>(); // LinkedList implements Queue
        this.completedTasks = new ArrayList<>(); // ArrayList implements List
        this.nextTaskId = 1; // Start task IDs from 1
        this.scanner = new Scanner(System.in);
    }

    /**
     * Adds a new task to the pending queue.
     * Validates the priority before adding.
     * @param description The task description.
     * @param priority The task priority (1-5).
     * @throws IllegalArgumentException if the priority is not within the valid range.
     */
    public void addTask(String description, int priority) {
        // Input validation for priority
        if (priority < 1 || priority > 5) {
            throw new IllegalArgumentException("Priority must be between 1 and 5.");
        }

        Task newTask = new Task(nextTaskId++, description, priority);
        pendingTasks.offer(newTask); // offer() is the preferred way to add to a queue
        System.out.println("Task added: " + newTask);
    }

    /**
     * Completes the next task from the pending queue (FIFO).
     * Moves the completed task to the completed tasks list.
     * Prints status messages to System.out.
     * @return The completed Task object, or null if the pending queue was empty.
     */
    public Task completeNextTask() {
        Task completedTask = pendingTasks.poll(); // poll() retrieves and removes the head of the queue
        if (completedTask != null) {
            completedTasks.add(completedTask); // Add to the completed list
            System.out.println("Task completed: " + completedTask);
        } else {
            System.out.println("No pending tasks to complete.");
        }
        return completedTask;
    }

    /**
     * Displays all tasks currently in the pending queue.
     * Prints output to System.out.
     */
    public void viewPendingTasks() {
        System.out.println("\n--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
        } else {
            // Iterate through the queue without removing elements
            // Using the Queue's iterator respects the order
            for (Task task : pendingTasks) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------\n");
    }

    /**
     * Displays all tasks currently in the completed tasks list.
     * Prints output to System.out.
     */
    public void viewCompletedTasks() {
        System.out.println("\n--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
        } else {
            // Iterate through the list
            for (Task task : completedTasks) {
                System.out.println(task);
            }
        }
        System.out.println("---------------------\n");
    }

    /**
     * Prints the main menu options to System.out.
     */
    private void printMenu() {
        System.out.println("--- Task Manager Menu ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. View Pending Tasks");
        System.out.println("4. View Completed Tasks");
        System.out.println("5. Exit");
        System.out.println("-------------------------");
    }

    /**
     * Runs the main application loop, handling user input and operations.
     * Includes class-wide exception handling for the interaction loop.
     */
    public void run() {
        int choice = -1; // Initialize choice to a value that won't exit immediately

        // Main application loop
        while (choice != 5) {
            printMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                // Consume the newline character left by nextInt()
                scanner.nextLine();

                // Use switch statement for menu navigation
                switch (choice) {
                    case 1: // Add Task
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter task priority (1-5): ");
                        int priority = scanner.nextInt();
                        // Consume the newline character left by nextInt()
                        scanner.nextLine();
                        // Call addTask, which includes priority validation
                        addTask(description, priority);
                        break;
                    case 2: // Complete Next Task
                        completeNextTask();
                        break;
                    case 3: // View Pending Tasks
                        viewPendingTasks();
                        break;
                    case 4: // View Completed Tasks
                        viewCompletedTasks();
                        break;
                    case 5: // Exit
                        System.out.println("Exiting Task Manager. Goodbye!");
                        break;
                    default:
                        // Handle invalid menu choices using System.err
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input using System.err
                System.err.println("Error: Invalid input. Please enter a number for the menu choice or priority.");
                // Consume the incorrect input to prevent an infinite loop
                scanner.nextLine();
                choice = -1; // Reset choice to ensure the loop continues
            } catch (IllegalArgumentException e) {
                // Handle invalid priority range from addTask using System.err
                System.err.println("Error adding task: " + e.getMessage());
            } catch (Exception e) {
                // Catch any other unexpected exceptions using System.err
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // Print stack trace for debugging unexpected issues
                e.printStackTrace();
            }
            System.out.println(); // Add a blank line for better readability between interactions
        }

        // Close the scanner when the application exits
        scanner.close();
    }
}

/**
 * Main class to start the Task Management System application.
 */
public class ExamTaskSystem {
    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        manager.run(); // Start the main application loop
    }
}
