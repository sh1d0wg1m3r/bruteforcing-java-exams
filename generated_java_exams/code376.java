/*
 * Exam Question #376
 * Generated on: 2025-05-11 23:02:13
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Appointment Management System
 * 
 * **Problem Description:**
 * 
 * You are tasked with developing a simplified Hospital Appointment Management System. The system needs to register patients and doctors, manage a queue of patients waiting for appointments, and schedule appointments by assigning a waiting patient to a registered doctor.
 * 
 * Your system should be interactive, allowing a user (e.g., an administrator) to perform these actions via a console menu.
 * 
 * **System Requirements:**
 * 
 * 1.  **Data Management:**
 *     *   Maintain a list of registered `Patient` objects.
 *     *   Maintain a list of registered `Doctor` objects.
 *     *   Maintain a queue of `Patient` objects who are waiting to be scheduled for an appointment.
 *     *   Maintain a list of scheduled `Appointment` objects.
 * 
 * 2.  **Classes:**
 *     *   `Patient` class: Should have private fields for `name` (String) and `patientId` (String). Include a constructor and public getter methods.
 *     *   `Doctor` class: Should have private fields for `name` (String) and `specialty` (String). Include a constructor and public getter methods.
 *     *   `Appointment` class: Should have private fields for the `patient` (Patient object), `doctor` (Doctor object), and a simple `timeSlot` (String, e.g., "10:00 AM"). Include a constructor and public getter methods.
 *     *   `AppointmentScheduler` class: This will be the main class containing the data structures (lists, queue) and the methods to perform the system operations. It should also contain the `main` method to run the interactive console application.
 * 
 * 3.  **Functionality (Menu-Driven):** The system should present a menu to the user with the following options:
 *     *   1. Register New Patient
 *     *   2. Register New Doctor
 *     *   3. Add Patient to Appointment Queue
 *     *   4. Schedule Appointment
 *     *   5. List All Registered Patients
 *     *   6. List All Registered Doctors
 *     *   7. List All Scheduled Appointments
 *     *   8. Exit
 * 
 * 4.  **Implementation Constraints:**
 *     *   You **must** use `java.util.Queue` for the appointment waiting list.
 *     *   You **must** use `java.util.ArrayList` for storing registered patients, doctors, and scheduled appointments.
 *     *   You **must** declare the storage for registered patients, doctors, and scheduled appointments using the `java.util.List` interface type.
 *     *   You **must** use `java.util.Scanner` to read user input from the console.
 *     *   You **must** use a `switch` statement to handle the menu options.
 *     *   You **must** use `System.err.println()` to output error messages (e.g., invalid input, operation failed).
 *     *   You **must** use `System.out.println()` to output normal messages (menu, prompts, success messages, list data).
 *     *   You **must** implement class-wide exception handling using `try-catch` blocks, particularly around user input operations and potentially problematic logic (like scheduling from an empty queue).
 * 
 * 5.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (Javadoc style for classes/methods is a plus).
 *     *   Implement basic input validation (e.g., checking for empty strings for names, handling non-numeric input for menu choices).
 *     *   Ensure proper error handling as required above.
 *     *   Structure your code clearly with separate classes and methods.
 * 
 * **Expected Output:**
 * 
 * The program should display a menu, prompt the user for input, and perform the requested action.
 * *   Successful operations should print informative messages to `System.out`.
 * *   Errors (invalid input, failed operations) should print informative messages to `System.err`.
 * *   Listing options should print the details of the stored objects to `System.out`.
 * *   The program should continue displaying the menu until the user chooses the 'Exit' option.
 * 
 * **Example Interaction Snippet:**
 * 
 * ```
 * --- Hospital Appointment System ---
 * 1. Register New Patient
 * 2. Register New Doctor
 * 3. Add Patient to Appointment Queue
 * 4. Schedule Appointment
 * 5. List All Registered Patients
 * 6. List All Registered Doctors
 * 7. List All Scheduled Appointments
 * 8. Exit
 * Enter your choice: 1
 * Enter patient name: Alice
 * Enter patient ID: P001
 * Patient Alice (P001) registered successfully.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 3
 * Enter patient ID to add to queue: P001
 * Patient P001 added to the appointment queue.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 4
 * Appointment Queue: [Alice (P001)]
 * Enter doctor name for appointment: Dr. Smith
 * Enter time slot (e.g., 10:00 AM): 10:30 AM
 * Scheduling appointment for Alice (P001) with Dr. Smith at 10:30 AM...
 * Appointment scheduled successfully.
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 7
 * --- Scheduled Appointments ---
 * Patient: Alice (P001), Doctor: Dr. Smith (General), Time: 10:30 AM
 * -----------------------------
 * 
 * --- Hospital Appointment System ---
 * ...
 * Enter your choice: 8
 * Exiting system.
 * ```
 * 
 * **Evaluation Criteria:**
 * 
 * Your solution will be evaluated based on:
 * *   Correctness and completeness of the implementation according to the requirements.
 * *   Effective use of all specified Java components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`).
 * *   Adherence to best practices (encapsulation, naming, comments, validation, error handling).
 * *   Clarity and structure of the code.
 * 
 * Good luck!
 *
 * EXPLANATION:
 * The provided solution implements a simplified Hospital Appointment Management System based on the requirements.
 * 
 * 1.  **Class Structure:**
 *     *   `Patient`, `Doctor`, and `Appointment` classes are simple Plain Old Java Objects (POJOs) holding data. They use private fields and public getters, demonstrating **encapsulation**. `toString()` methods are overridden for easy printing.
 *     *   `AppointmentScheduler` is the main class responsible for managing the data structures and application logic.
 * 
 * 2.  **Data Structures:**
 *     *   `registeredPatients`, `registeredDoctors`, and `scheduledAppointments` are declared as `List` interfaces and initialized with `ArrayList`. `ArrayList` provides dynamic resizing and efficient random access, suitable for storing collections of registered entities and completed appointments. Using the `List` interface promotes good design by programming to the interface rather than the implementation.
 *     *   `appointmentQueue` is declared as a `Queue` interface and initialized with `LinkedList`. `LinkedList` implements the `Queue` interface, providing methods like `offer()` (to add to the end) and `poll()` (to remove from the front), which are essential for managing a waiting list in a First-In, First-Out (FIFO) manner.
 * 
 * 3.  **User Input and Menu:**
 *     *   A `Scanner` object is used in the `AppointmentScheduler` class to read input from `System.in`. It's initialized once and closed in a `finally` block to ensure resource management.
 *     *   The `displayMenu()` method prints the available options to `System.out`.
 *     *   The `run()` method contains the main application loop. It repeatedly displays the menu and reads the user's choice.
 * 
 * 4.  **Flow Control:**
 *     *   A `switch` statement in the `run()` method is used to direct the program's flow based on the user's numeric input, executing the corresponding method for each menu option.
 * 
 * 5.  **Operations:**
 *     *   Methods like `registerPatient()`, `registerDoctor()`, `addPatientToQueue()`, `scheduleAppointment()`, `listAllPatients()`, `listAllDoctors()`, and `listAllAppointments()` implement the core functionalities.
 *     *   `registerPatient()` and `registerDoctor()` demonstrate adding elements to `ArrayList`s (`List` interface). Basic validation for empty input and duplicate IDs/names is included.
 *     *   `addPatientToQueue()` demonstrates adding an element to the `Queue` using `offer()`. It first finds the patient by ID in the `registeredPatients` list and checks if they are already in the queue.
 *     *   `scheduleAppointment()` demonstrates the core queue functionality: `peek()` is used to see the next patient without removing them, and `poll()` is used to remove the patient from the front of the queue *after* confirming the doctor and time slot. It also involves finding a doctor from the `registeredDoctors` list and adding a new `Appointment` object to the `scheduledAppointments` list. It handles the case where the queue is empty.
 *     *   The `listAll...()` methods iterate through the respective `List`s and print the details of each object using their `toString()` methods.
 * 
 * 6.  **Error Handling:**
 *     *   `System.err.println()` is used specifically for outputting error messages, such as invalid menu choices, missing patients/doctors, empty queue conditions for scheduling, or invalid input format.
 *     *   **Class-wide Exception Handling:** A `try-catch(Exception e)` block wraps the main `while` loop in the `run()` method. This provides a top-level handler for any unexpected exceptions that might occur during the execution of the menu options.
 *     *   **Specific Exception Handling:** A `try-catch(InputMismatchException e)` is specifically used inside the loop when reading the integer choice. This handles cases where the user enters non-numeric input for the menu option, preventing the program from crashing and prompting the user to try again.
 *     *   Input validation (checking for empty strings, null values, existence in lists) is performed within the methods before attempting operations, preventing potential errors and using `System.err` for user feedback.
 * 
 * 7.  **Best Practices:**
 *     *   Private fields and public methods ensure **encapsulation**.
 *     *   Method and variable names are descriptive (e.g., `registeredPatients`, `addPatientToQueue`, `findPatientById`).
 *     *   Basic Javadoc-style comments are included for classes and methods, explaining their purpose.
 *     *   Input validation is present for user-provided data.
 *     *   Error messages are informative and directed to `System.err`.
 *     *   The code is structured into logical classes, separating data (POJOs) from logic (`AppointmentScheduler`).
 * 
 * This solution effectively integrates all required Java components within a practical scenario, demonstrating understanding of data structures, object-oriented principles, user interaction, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Class representing a Patient
class Patient {
    private String name;
    private String patientId;

    /**
     * Constructs a new Patient object.
     * @param name The name of the patient.
     * @param patientId The unique ID of the patient.
     */
    public Patient(String name, String patientId) {
        this.name = name;
        this.patientId = patientId;
    }

    // --- Getters ---
    public String getName() {
        return name;
    }

    public String getPatientId() {
        return patientId;
    }

    @Override
    public String toString() {
        return name + " (" + patientId + ")";
    }
}

// Class representing a Doctor
class Doctor {
    private String name;
    private String specialty;

    /**
     * Constructs a new Doctor object.
     * @param name The name of the doctor.
     * @param specialty The specialty of the doctor.
     */
    public Doctor(String name, String specialty) {
        this.name = name;
        this.specialty = specialty;
    }

    // --- Getters ---
    public String getName() {
        return name;
    }

    public String getSpecialty() {
        return specialty;
    }

    @Override
    public String toString() {
        return name + " (" + specialty + ")";
    }
}

// Class representing an Appointment
class Appointment {
    private Patient patient;
    private Doctor doctor;
    private String timeSlot;

    /**
     * Constructs a new Appointment object.
     * @param patient The patient for the appointment.
     * @param doctor The doctor for the appointment.
     * @param timeSlot The scheduled time slot.
     */
    public Appointment(Patient patient, Doctor doctor, String timeSlot) {
        this.patient = patient;
        this.doctor = doctor;
        this.timeSlot = timeSlot;
    }

    // --- Getters ---
    public Patient getPatient() {
        return patient;
    }

    public Doctor getDoctor() {
        return doctor;
    }

    public String getTimeSlot() {
        return timeSlot;
    }

    @Override
    public String toString() {
        return "Patient: " + patient + ", Doctor: " + doctor + ", Time: " + timeSlot;
    }
}

// Main class managing the scheduling system
public class AppointmentScheduler {

    // Using List interface with ArrayList implementation
    private List<Patient> registeredPatients;
    private List<Doctor> registeredDoctors;
    // Using Queue interface with LinkedList implementation
    private Queue<Patient> appointmentQueue;
    // Using List interface with ArrayList implementation
    private List<Appointment> scheduledAppointments;

    private Scanner scanner;

    /**
     * Constructs a new AppointmentScheduler.
     * Initializes the data structures and scanner.
     */
    public AppointmentScheduler() {
        registeredPatients = new ArrayList<>();
        registeredDoctors = new ArrayList<>();
        appointmentQueue = new LinkedList<>(); // LinkedList implements Queue
        scheduledAppointments = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    /**
     * Registers a new patient in the system.
     * Prompts user for patient details.
     */
    public void registerPatient() {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        System.out.print("Enter patient ID: ");
        String patientId = scanner.nextLine();

        // Basic validation
        if (name.trim().isEmpty() || patientId.trim().isEmpty()) {
            System.err.println("Error: Patient name and ID cannot be empty.");
            return;
        }

        // Check if patient ID already exists (simple check for exam scope)
        for (Patient p : registeredPatients) {
            if (p.getPatientId().equals(patientId)) {
                System.err.println("Error: Patient with ID " + patientId + " already exists.");
                return;
            }
        }

        Patient newPatient = new Patient(name, patientId);
        registeredPatients.add(newPatient);
        System.out.println("Patient " + newPatient + " registered successfully.");
    }

    /**
     * Registers a new doctor in the system.
     * Prompts user for doctor details.
     */
    public void registerDoctor() {
        System.out.print("Enter doctor name: ");
        String name = scanner.nextLine();
        System.out.print("Enter doctor specialty: ");
        String specialty = scanner.nextLine();

        // Basic validation
        if (name.trim().isEmpty() || specialty.trim().isEmpty()) {
            System.err.println("Error: Doctor name and specialty cannot be empty.");
            return;
        }

        // Check if doctor name already exists (simple check for exam scope)
         for (Doctor d : registeredDoctors) {
            if (d.getName().equalsIgnoreCase(name)) {
                System.err.println("Error: Doctor with name " + name + " already exists.");
                return;
            }
        }


        Doctor newDoctor = new Doctor(name, specialty);
        registeredDoctors.add(newDoctor);
        System.out.println("Doctor " + newDoctor + " registered successfully.");
    }

    /**
     * Adds a registered patient to the appointment queue.
     * Prompts user for patient ID.
     */
    public void addPatientToQueue() {
        System.out.print("Enter patient ID to add to queue: ");
        String patientId = scanner.nextLine();

        Patient patientToAdd = findPatientById(patientId);

        if (patientToAdd == null) {
            System.err.println("Error: Patient with ID " + patientId + " not found.");
            return;
        }

        // Check if patient is already in the queue (simple check)
        if (appointmentQueue.contains(patientToAdd)) {
             System.err.println("Error: Patient " + patientToAdd + " is already in the queue.");
             return;
        }


        appointmentQueue.offer(patientToAdd); // offer is preferred over add for queues
        System.out.println("Patient " + patientToAdd + " added to the appointment queue.");
    }

    /**
     * Schedules an appointment by taking a patient from the queue
     * and assigning them to a doctor.
     * Prompts user for doctor name and time slot.
     */
    public void scheduleAppointment() {
        if (appointmentQueue.isEmpty()) {
            System.out.println("Appointment Queue is empty. Cannot schedule an appointment.");
            return;
        }

        Patient patientForAppointment = appointmentQueue.peek(); // Peek to show who's next

        System.out.println("Next in queue: " + patientForAppointment);

        System.out.print("Enter doctor name for appointment: ");
        String doctorName = scanner.nextLine();

        Doctor doctorForAppointment = findDoctorByName(doctorName);

        if (doctorForAppointment == null) {
            System.err.println("Error: Doctor with name " + doctorName + " not found.");
            return;
        }

        System.out.print("Enter time slot (e.g., 10:00 AM): ");
        String timeSlot = scanner.nextLine();

         if (timeSlot.trim().isEmpty()) {
             System.err.println("Error: Time slot cannot be empty.");
             return;
         }


        // Successfully found patient and doctor, now poll the patient from the queue
        patientForAppointment = appointmentQueue.poll();

        Appointment newAppointment = new Appointment(patientForAppointment, doctorForAppointment, timeSlot);
        scheduledAppointments.add(newAppointment);
        System.out.println("Appointment scheduled successfully.");
        System.out.println(newAppointment); // Print details of the scheduled appointment
    }

    /**
     * Lists all registered patients.
     */
    public void listAllPatients() {
        System.out.println("--- Registered Patients ---");
        if (registeredPatients.isEmpty()) {
            System.out.println("No patients registered.");
        } else {
            for (Patient patient : registeredPatients) {
                System.out.println(patient);
            }
        }
        System.out.println("-------------------------");
    }

    /**
     * Lists all registered doctors.
     */
    public void listAllDoctors() {
        System.out.println("--- Registered Doctors ---");
        if (registeredDoctors.isEmpty()) {
            System.out.println("No doctors registered.");
        } else {
            for (Doctor doctor : registeredDoctors) {
                System.out.println(doctor);
            }
        }
        System.out.println("------------------------");
    }

    /**
     * Lists all scheduled appointments.
     */
    public void listAllAppointments() {
        System.out.println("--- Scheduled Appointments ---");
        if (scheduledAppointments.isEmpty()) {
            System.out.println("No appointments scheduled.");
        } else {
            for (Appointment appointment : scheduledAppointments) {
                System.out.println(appointment);
            }
        }
        System.out.println("----------------------------");
    }

    /**
     * Helper method to find a patient by ID.
     * @param patientId The ID to search for.
     * @return The Patient object if found, null otherwise.
     */
    private Patient findPatientById(String patientId) {
        for (Patient patient : registeredPatients) {
            if (patient.getPatientId().equals(patientId)) {
                return patient;
            }
        }
        return null;
    }

     /**
     * Helper method to find a doctor by name.
     * @param doctorName The name to search for.
     * @return The Doctor object if found, null otherwise.
     */
    private Doctor findDoctorByName(String doctorName) {
        for (Doctor doctor : registeredDoctors) {
            if (doctor.getName().equalsIgnoreCase(doctorName)) {
                return doctor;
            }
        }
        return null;
    }


    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\n--- Hospital Appointment System ---");
        System.out.println("1. Register New Patient");
        System.out.println("2. Register New Doctor");
        System.out.println("3. Add Patient to Appointment Queue");
        System.out.println("4. Schedule Appointment");
        System.out.println("5. List All Registered Patients");
        System.out.println("6. List All Registered Doctors");
        System.out.println("7. List All Scheduled Appointments");
        System.out.println("8. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main application loop.
     * Handles user input and calls appropriate methods.
     */
    public void run() {
        int choice = 0;
        // Class-wide exception handling around the main loop
        try {
            while (choice != 8) {
                displayMenu();
                try {
                    choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline left-over

                    // Use switch statement for flow control
                    switch (choice) {
                        case 1:
                            registerPatient();
                            break;
                        case 2:
                            registerDoctor();
                            break;
                        case 3:
                            addPatientToQueue();
                            break;
                        case 4:
                            scheduleAppointment();
                            break;
                        case 5:
                            listAllPatients();
                            break;
                        case 6:
                            listAllDoctors();
                            break;
                        case 7:
                            listAllAppointments();
                            break;
                        case 8:
                            System.out.println("Exiting system.");
                            break;
                        default:
                            System.err.println("Invalid choice. Please enter a number between 1 and 8.");
                    }
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                    choice = 0; // Reset choice to stay in the loop
                } catch (Exception e) {
                     // Catch any other unexpected exceptions during an operation
                     System.err.println("An unexpected error occurred: " + e.getMessage());
                     // e.printStackTrace(); // Uncomment for debugging
                }
            }
        } finally {
            // Ensure the scanner is closed when the application exits
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Main method to start the application.
     */
    public static void main(String[] args) {
        AppointmentScheduler scheduler = new AppointmentScheduler();
        scheduler.run();
    }
}
