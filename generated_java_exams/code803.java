/*
 * Exam Question #803
 * Generated on: 2025-05-12 16:43:00
 * Generated by: Account 4
 * 
 * QUESTION:
 * **Advanced Java Programming Exam Task: Print Job Management System**
 * 
 * **Problem Description:**
 * 
 * You are tasked with building a simple console-based Print Job Management System. The system should manage a queue of print jobs awaiting processing and maintain a history of completed print jobs. The system should be interactive, allowing a user to add new jobs, process the next job, view pending jobs, view completed jobs, and exit.
 * 
 * Your solution must demonstrate a strong understanding of core Java data structures, control flow, user input handling, and exception management.
 * 
 * **Requirements:**
 * 
 * 1.  **Class Structure:** Create at least two classes:
 *     *   `PrintJob`: Represents a single print job with properties like `jobName` (String) and `numberOfPages` (int).
 *     *   `PrintJobManager`: Manages the collection of print jobs (pending and completed) and handles user interactions.
 * 
 * 2.  **Data Structures:**
 *     *   Use a `java.util.Queue<PrintJob>` to store jobs that are waiting to be printed (pending jobs).
 *     *   Use a `java.util.ArrayList<PrintJob>` to store jobs that have been successfully printed (completed jobs history).
 *     *   Ensure you use the `java.util.List` interface when referring to the history collection in method signatures or declarations where appropriate.
 * 
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user commands and job details from the console (`System.in`).
 *     *   Implement a menu-driven interface with options for adding a job, processing the next job, listing pending jobs, listing completed jobs, and exiting.
 * 
 * 4.  **Control Flow:**
 *     *   Use a `switch` statement to handle the different user commands.
 * 
 * 5.  **Output:**
 *     *   Use `System.out` for displaying the menu, prompts, confirmation messages, and lists of jobs.
 *     *   Use `System.err` for displaying error messages (e.g., invalid command, invalid input, queue is empty).
 * 
 * 6.  **Exception Handling:**
 *     *   Implement robust error handling using `try-catch` blocks.
 *     *   Handle potential issues like invalid numerical input (e.g., non-integer pages when adding a job).
 *     *   Handle operations on an empty queue (e.g., trying to process a job when none are pending).
 *     *   Implement class-wide exception handling, potentially wrapping the main operational loop or key methods in `try-catch` to prevent unexpected program termination.
 * 
 * 7.  **Best Practices:**
 *     *   Apply proper encapsulation: Make fields `private` and provide `public` methods to access/modify data where necessary.
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Implement input validation (e.g., ensuring page numbers are positive).
 *     *   Ensure resources like `Scanner` are handled appropriately (e.g., closed).
 * 
 * **Menu Options:**
 * 
 * 1.  Add New Print Job
 * 2.  Process Next Job
 * 3.  List Pending Jobs
 * 4.  List Completed Jobs
 * 5.  Exit
 * 
 * **Expected Output / Interaction Examples:**
 * 
 * ```
 * Print Job Management System Menu:
 * 1. Add New Print Job
 * 2. Process Next Job
 * 3. List Pending Jobs
 * 4. List Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter job name: Report.pdf
 * Enter number of pages: 15
 * Job 'Report.pdf' (15 pages) added to the queue.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 1
 * Enter job name: Image.jpg
 * Enter number of pages: 3
 * Job 'Image.jpg' (3 pages) added to the queue.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * 1. Report.pdf (15 pages)
 * 2. Image.jpg (3 pages)
 * --------------------
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 2
 * Processing job: Report.pdf (15 pages)
 * Job 'Report.pdf' completed and moved to history.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 3
 * --- Pending Jobs ---
 * 1. Image.jpg (3 pages)
 * --------------------
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 4
 * --- Completed Jobs ---
 * 1. Report.pdf (15 pages)
 * ----------------------
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 2
 * Processing job: Image.jpg (3 pages)
 * Job 'Image.jpg' completed and moved to history.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 2
 * System.err: No jobs currently in the pending queue.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 6
 * System.err: Invalid choice. Please enter a number between 1 and 5.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: abc
 * System.err: Invalid input. Please enter a number.
 * 
 * Print Job Management System Menu:
 * ...
 * Enter your choice: 5
 * Exiting Print Job Management System.
 * ```
 * 
 * **Grading Criteria:**
 * 
 * *   Correct usage of all required Java components.
 * *   Proper implementation of the data structures (`Queue`, `ArrayList`, `List`).
 * *   Effective use of `switch` for command handling.
 * *   Robust error handling using `try-catch` and appropriate use of `System.err`.
 * *   Correct input validation.
 * *   Adherence to object-oriented principles (encapsulation).
 * *   Code clarity, readability, and documentation.
 * *   Correct program flow and adherence to the menu requirements.
 *
 * EXPLANATION:
 * The provided solution implements a console-based Print Job Management System, fulfilling all the requirements of the exam question.
 * 
 * **Core Components and Their Usage:**
 * 
 * 1.  **`PrintJob` Class:** This is a simple Plain Old Java Object (POJO) representing a print job.
 *     *   It has `private` fields (`jobName`, `numberOfPages`) demonstrating encapsulation.
 *     *   It includes a constructor with basic input validation (`IllegalArgumentException`) for name and pages.
 *     *   `public` getter methods provide controlled access to the private data.
 *     *   An overridden `toString()` method provides a convenient string representation for printing.
 * 
 * 2.  **`PrintJobManager` Class:** This is the main class orchestrating the system.
 *     *   **`Queue<PrintJob> pendingJobsQueue`:** A `LinkedList` is used as the concrete implementation of the `Queue` interface. This structure is ideal for managing waiting jobs because it naturally supports adding jobs to the end (`offer()`) and removing/processing jobs from the front (`poll()`), simulating a First-In, First-Out (FIFO) processing order.
 *     *   **`List<PrintJob> completedJobsHistory`:** An `ArrayList` is used as the concrete implementation of the `List` interface. `ArrayList` is suitable for storing the history because we primarily need to add completed jobs (`add()`) and iterate through them to list them. The `List` interface is used in the declaration (`List<PrintJob>`) which is good practice, allowing flexibility to change the underlying implementation later if needed without affecting code that interacts with the `List` interface.
 *     *   **`Scanner scanner`:** Used to read user input from `System.in`. It's initialized once in the constructor and closed in the `finally` block of the `run` method to release system resources.
 *     *   **`Switch statement`:** The `switch (choice)` block in the `run()` method efficiently handles the branching logic based on the user's numerical menu selection, directing control to the appropriate method (`addJob`, `processNextJob`, etc.).
 *     *   **`System.out`:** Used extensively for displaying the menu, prompts, success messages, and formatted lists of jobs.
 *     *   **`System.err`:** Used specifically for printing error messages, such as invalid input, queue empty conditions, or invalid menu choices, clearly distinguishing them from normal program output.
 * 
 * 3.  **Exception Handling (`try-catch`):**
 *     *   **Input Validation:** The `addJob` method uses a `try-catch(InputMismatchException)` loop to handle non-integer input when asking for the number of pages, prompting the user to re-enter until valid input is provided. It also validates that the number of pages is positive.
 *     *   **`PrintJob` Constructor:** The `PrintJob` constructor throws `IllegalArgumentException` for invalid name or page count, which is caught in the `addJob` method.
 *     *   **Queue Operations:** The `processNextJob` method uses `pendingJobsQueue.poll()`, which safely returns `null` if the queue is empty, avoiding a `NoSuchElementException` that `remove()` would throw. The `null` return is checked, and an appropriate message is printed to `System.err`.
 *     *   **Class-wide Handling:** The `run()` method wraps the main `while (running)` loop in a `try-catch(Exception e)`. This acts as a safety net to catch any unhandled or unexpected exceptions that might occur during the program's execution, preventing the program from crashing and providing a basic error message to `System.err`. A `finally` block ensures the `Scanner` is closed regardless of whether an exception occurred or the loop finished normally.
 * 
 * 4.  **Best Practices:**
 *     *   **Encapsulation:** Achieved by making data fields `private` in both classes and providing controlled access via `public` methods.
 *     *   **Meaningful Names:** Variables (`pendingJobsQueue`, `completedJobsHistory`, `jobName`, `numberOfPages`) and methods (`addJob`, `processNextJob`, `listPendingJobs`, `listCompletedJobs`, `displayMenu`, `run`) are clearly named to indicate their purpose.
 *     *   **Comments and Documentation:** Javadoc comments are included for classes and public methods explaining their function, parameters, and return values. Inline comments clarify specific code sections like input consumption after `nextInt()`.
 *     *   **Input Validation:** Explicit checks are made for positive page numbers and non-empty job names. `InputMismatchException` is handled for integer input.
 *     *   **Clean Code:** The code is structured into logical methods, making it modular and readable. The main loop in `run()` is clean, dispatching tasks to dedicated methods.
 * 
 * This solution effectively integrates all required Java components within a practical scenario, demonstrating proper data structure usage, control flow, robust error handling, and adherence to object-oriented principles, making it a suitable challenging exam question.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single print job with a name and number of pages.
 */
class PrintJob {
    private String jobName;
    private int numberOfPages;

    /**
     * Constructs a new PrintJob.
     * @param jobName The name of the job.
     * @param numberOfPages The number of pages in the job.
     */
    public PrintJob(String jobName, int numberOfPages) {
        if (jobName == null || jobName.trim().isEmpty()) {
            throw new IllegalArgumentException("Job name cannot be null or empty.");
        }
        if (numberOfPages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        this.jobName = jobName.trim();
        this.numberOfPages = numberOfPages;
    }

    /**
     * Gets the name of the print job.
     * @return The job name.
     */
    public String getJobName() {
        return jobName;
    }

    /**
     * Gets the number of pages in the print job.
     * @return The number of pages.
     */
    public int getNumberOfPages() {
        return numberOfPages;
    }

    /**
     * Returns a string representation of the print job.
     * @return A string formatted as "jobName (numberOfPages pages)".
     */
    @Override
    public String toString() {
        return jobName + " (" + numberOfPages + " pages)";
    }
}

/**
 * Manages a queue of pending print jobs and a history of completed jobs.
 * Handles user interaction via a console menu.
 */
public class PrintJobManager {

    private Queue<PrintJob> pendingJobsQueue;
    private List<PrintJob> completedJobsHistory;
    private Scanner scanner;
    private boolean running;

    /**
     * Constructs a new PrintJobManager.
     * Initializes the queue and history list, and sets up the scanner.
     */
    public PrintJobManager() {
        // Use LinkedList as a concrete implementation of Queue
        this.pendingJobsQueue = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List
        this.completedJobsHistory = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.running = true;
    }

    /**
     * Adds a new print job to the pending queue.
     * Prompts the user for job details. Handles input errors.
     */
    public void addJob() {
        System.out.print("Enter job name: ");
        String name = scanner.nextLine(); // Read the whole line for job name

        System.out.print("Enter number of pages: ");
        int pages = 0;
        boolean validInput = false;
        while (!validInput) {
            try {
                pages = scanner.nextInt();
                if (pages <= 0) {
                    System.err.println("Number of pages must be positive.");
                } else {
                    validInput = true;
                }
            } catch (InputMismatchException e) {
                System.err.println("Invalid input. Please enter a number.");
                scanner.next(); // Consume the invalid input
            }
        }
        scanner.nextLine(); // Consume the rest of the line after reading int

        try {
            PrintJob newJob = new PrintJob(name, pages);
            pendingJobsQueue.offer(newJob); // offer is generally preferred over add in queues
            System.out.println("Job '" + newJob.getJobName() + "' (" + newJob.getNumberOfPages() + " pages) added to the queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error creating job: " + e.getMessage());
        } catch (Exception e) { // Catch any other unexpected errors during job creation/adding
            System.err.println("An unexpected error occurred while adding the job: " + e.getMessage());
        }
    }

    /**
     * Processes the next job in the pending queue.
     * Removes the job from the queue and adds it to the completed history.
     * Handles the case where the queue is empty.
     */
    public void processNextJob() {
        PrintJob jobToProcess = pendingJobsQueue.poll(); // poll returns null if queue is empty

        if (jobToProcess != null) {
            System.out.println("Processing job: " + jobToProcess);
            // Simulate printing... (no actual printing needed for this task)
            completedJobsHistory.add(jobToProcess);
            System.out.println("Job '" + jobToProcess.getJobName() + "' completed and moved to history.");
        } else {
            System.err.println("No jobs currently in the pending queue.");
        }
    }

    /**
     * Lists all jobs currently in the pending queue.
     */
    public void listPendingJobs() {
        System.out.println("--- Pending Jobs ---");
        if (pendingJobsQueue.isEmpty()) {
            System.out.println("No pending jobs.");
        } else {
            int index = 1;
            // Iterate using the Queue's iterator (doesn't remove elements)
            for (PrintJob job : pendingJobsQueue) {
                System.out.println(index++ + ". " + job);
            }
        }
        System.out.println("--------------------");
    }

    /**
     * Lists all jobs in the completed history.
     */
    public void listCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobsHistory.isEmpty()) {
            System.out.println("No completed jobs.");
        } else {
            int index = 1;
            // Iterate through the List
            for (PrintJob job : completedJobsHistory) {
                System.out.println(index++ + ". " + job);
            }
        }
        System.out.println("----------------------");
    }

    /**
     * Displays the main menu to the user.
     */
    private void displayMenu() {
        System.out.println("\nPrint Job Management System Menu:");
        System.out.println("1. Add New Print Job");
        System.out.println("2. Process Next Job");
        System.out.println("3. List Pending Jobs");
        System.out.println("4. List Completed Jobs");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * Runs the main interactive loop of the Print Job Manager.
     * Handles user input and dispatches commands using a switch statement.
     * Includes class-wide exception handling.
     */
    public void run() {
        // Class-wide try-catch for the main operational loop
        try {
            while (running) {
                displayMenu();
                int choice = -1;
                try {
                    choice = scanner.nextInt();
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip the rest of the loop iteration
                } finally {
                    // Consume the newline character left by nextInt()
                    // This is often needed before subsequent nextLine() calls
                     if (scanner.hasNextLine()) {
                         scanner.nextLine();
                     }
                }


                switch (choice) {
                    case 1:
                        addJob();
                        break;
                    case 2:
                        processNextJob();
                        break;
                    case 3:
                        listPendingJobs();
                        break;
                    case 4:
                        listCompletedJobs();
                        break;
                    case 5:
                        System.out.println("Exiting Print Job Management System.");
                        running = false;
                        break;
                    default:
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
            }
        } catch (Exception e) {
            // Catch any unexpected exceptions during the main execution loop
            System.err.println("An unhandled error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure the scanner is closed when the application exits
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed.");
            }
        }
    }

    /**
     * Main method to start the Print Job Management System.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        PrintJobManager manager = new PrintJobManager();
        manager.run();
    }
}
