/*
 * Exam Question #971
 * Generated on: 2025-05-12 17:06:58
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Production Line Simulator
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified simulation of a manufacturing production line for widgets. Items (widgets) arrive and are placed in an assembly queue. Once an item reaches the front of the queue, it can be processed and moved to a list of completed products. The system should allow users to interact with the production line by adding items, processing the next item, viewing the status of the queue, viewing completed items, and exiting the simulation.
 * 
 * **Requirements:**
 * 
 * 1.  Create a Java class named `ProductionLineSimulator`.
 * 2.  This class must manage:
 *     *   A queue to hold items waiting for assembly. The queue should enforce First-In, First-Out (FIFO) order.
 *     *   A list to store items that have been successfully processed.
 * 3.  The program must use the following Java components:
 *     *   `java.util.Queue` interface.
 *     *   `java.util.ArrayList` class.
 *     *   `java.util.List` interface (used as the declared type for the completed items collection).
 *     *   `java.util.Scanner` for reading user input from the console.
 *     *   A `switch` statement to handle different user menu choices.
 *     *   `System.err` to display error messages (e.g., invalid input, trying to process from an empty queue).
 *     *   `System.out` to display normal output (menu, prompts, successful operations, list/queue contents).
 *     *   Class-wide exception handling using a `try-catch` block to catch unexpected errors during the main simulation loop.
 * 4.  Implement the following operations via a text-based menu:
 *     *   **Add Item:** Prompt the user for an item name (e.g., "Widget-A") and add it to the assembly queue. Validate that the item name is not empty.
 *     *   **Process Next Item:** Take the item at the front of the assembly queue, remove it, and add it to the list of completed products. If the queue is empty, display an error message using `System.err`.
 *     *   **View Assembly Queue:** Display all items currently in the assembly queue without removing them. Indicate if the queue is empty.
 *     *   **View Completed Products:** Display all items in the list of completed products. Indicate if the list is empty.
 *     *   **Exit:** Terminate the simulation.
 * 5.  Adhere to best practices:
 *     *   Use private fields for the collections and scanner (`Proper encapsulation`).
 *     *   Use meaningful names for variables, methods, and classes (`Meaningful variable and method names`).
 *     *   Include comments to explain the purpose of the class and key methods (`Appropriate comments and documentation`).
 *     *   Implement input validation (e.g., checking for empty item name, handling non-integer menu input).
 *     *   Implement proper error handling using `System.err` for specific issues and a general `try-catch` for unexpected exceptions.
 *     *   Structure the code cleanly with separate methods for different operations (`Clean code structure`).
 * 
 * **Expected Output Structure:**
 * 
 * The program should display a menu, prompt for input, and display results or errors based on the user's choice.
 * 
 * ```
 * --- Production Line Menu ---
 * 1. Add Item to Assembly Queue
 * 2. Process Next Item from Queue
 * 3. View Assembly Queue
 * 4. View Completed Products
 * 5. Exit
 * ----------------------------
 * Enter your choice: <user input>
 * 
 * <Output based on choice - e.g., success message, error message, list contents>
 * 
 * --- Production Line Menu ---
 * ... (menu repeats until Exit)
 * 
 * ```
 * 
 * If an error occurs (e.g., invalid input, empty queue processing), an error message should be printed to `System.err`.
 * 
 * **Example Interaction Flow:**
 * 
 * ```
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 1
 * Enter item name to add: Widget-001
 * Added 'Widget-001' to the assembly queue.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 1
 * Enter item name to add: Widget-002
 * Added 'Widget-002' to the assembly queue.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 3
 * --- Assembly Queue ---
 * Items in queue: [Widget-001, Widget-002]
 * ----------------------
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Processed 'Widget-001' and moved to completed products.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 3
 * --- Assembly Queue ---
 * Items in queue: [Widget-002]
 * ----------------------
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 4
 * --- Completed Products ---
 * Completed items: [Widget-001]
 * --------------------------
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Processed 'Widget-002' and moved to completed products.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 2
 * Error: Assembly queue is empty. Cannot process any item.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 6
 * Invalid choice. Please enter a number between 1 and 5.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: five
 * Invalid input. Please enter a number.
 * 
 * --- Production Line Menu ---
 * ...
 * Enter your choice: 5
 * Stopping simulation...
 * Production line simulation ended.
 * ```
 * 
 * Your solution should provide the complete Java code for the `ProductionLineSimulator` class.
 *
 * EXPLANATION:
 * This solution implements a `ProductionLineSimulator` class that models a simple manufacturing process using core Java collections and control flow structures.
 * 
 * 1.  **Scenario Mapping:** The production line concept naturally maps to a `Queue` for items waiting for the next step (assembly) due to its First-In, First-Out (FIFO) nature. Completed items are collected in a `List`, where order might be less critical after processing, and an `ArrayList` provides a simple, dynamic collection.
 * 
 * 2.  **Required Components:**
 *     *   `java.util.Queue`: The `assemblyQueue` is declared as a `Queue<String>` and initialized with `java.util.LinkedList`. `LinkedList` implements the `Queue` interface and provides the necessary methods like `offer()` (to add to the tail) and `poll()` (to remove from the head), enforcing FIFO.
 *     *   `java.util.ArrayList`: The `completedProducts` is initialized as an `ArrayList<String>`.
 *     *   `java.util.List`: The `completedProducts` field is declared using the `List<String>` interface, promoting good practice by programming to the interface rather than the concrete implementation (`ArrayList`).
 *     *   `java.util.Scanner`: A `Scanner` object is used to read user input from `System.in`. Using `scanner.nextLine()` consistently helps avoid common issues when mixing `nextInt()` or similar methods with `nextLine()`.
 *     *   `switch` statement: The `startSimulation` method uses a `switch` statement to direct program flow based on the user's integer choice from the menu. A `default` case handles invalid integer inputs.
 *     *   `System.err`: Used specifically for displaying error messages, such as when the user enters invalid input (non-integer, empty item name) or attempts an operation on an empty collection (processing from an empty queue).
 *     *   `System.out`: Used for all standard output, including displaying the menu, prompts, confirmation messages for successful operations, and the contents of the queue and completed products list.
 *     *   Class-wide `try-catch`: A `try-catch(Exception e)` block wraps the main `while(running)` loop in the `startSimulation` method. This provides a general safety net to catch any unexpected runtime exceptions that might occur during the execution of the simulation loop, preventing the program from crashing abruptly. The `finally` block ensures the `Scanner` resource is closed.
 * 
 * 3.  **Structure and Best Practices:**
 *     *   **Encapsulation:** The collections (`assemblyQueue`, `completedProducts`) and the `scanner` are declared as `private` fields, restricting direct external access. Public methods like `startSimulation()` provide the interface for interacting with the object, while helper methods like `addItemToQueue()` are `private`.
 *     *   **Meaningful Names:** Variable names (`assemblyQueue`, `completedProducts`, `itemName`, `choice`) and method names (`startSimulation`, `addItemToQueue`, `processNextItem`, `displayMenu`) are descriptive of their purpose.
 *     *   **Comments:** Javadoc comments explain the overall class and key public/private methods. Inline comments clarify specific logic points (like using `offer()` or `poll()`).
 *     *   **Input Validation:** The code checks if the entered item name is empty (`itemName.isEmpty()`) and handles `NumberFormatException` if the user enters non-integer input for the menu choice. It also validates the range of the menu choice.
 *     *   **Error Handling:** Specific error conditions (empty queue for processing, invalid input) are checked before attempting operations, and informative messages are printed to `System.err`. The general `try-catch` handles unforeseen issues.
 *     *   **Clean Code:** The logic is divided into small, single-purpose methods (`displayMenu`, `addItemToQueue`, etc.), making the code modular and easier to understand and maintain.
 * 
 * This solution effectively demonstrates the required Java concepts in a practical context, incorporating essential programming practices like encapsulation, validation, and robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

/**
 * Simulates a simple manufacturing production line with an assembly queue and a list of completed products.
 * Demonstrates usage of Queue, List, ArrayList, Scanner, switch, System.out, System.err, and try-catch.
 */
public class ProductionLineSimulator {

    // Private fields for encapsulation
    private Queue<String> assemblyQueue;
    private List<String> completedProducts;
    private Scanner scanner;
    private boolean running; // Flag to control the main simulation loop

    /**
     * Constructor to initialize the production line components.
     */
    public ProductionLineSimulator() {
        // Use LinkedList as a concrete implementation of Queue for FIFO behavior
        this.assemblyQueue = new LinkedList<>();
        // Use ArrayList as a concrete implementation of List to store completed items
        this.completedProducts = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.running = true; // Simulation starts in running state
    }

    /**
     * Starts the production line simulation.
     * Contains the main loop, handles user interaction, and provides class-wide exception handling.
     */
    public void startSimulation() {
        // Class-wide exception handling block for the main simulation loop
        try {
            while (running) {
                displayMenu();
                System.out.print("Enter your choice: ");

                // Input handling and validation for the menu choice
                int choice = -1;
                try {
                    // Read the entire line to consume the newline character and handle non-integer input gracefully
                    String inputLine = scanner.nextLine();
                    choice = Integer.parseInt(inputLine);
                } catch (NumberFormatException e) {
                    // Handle cases where the user enters non-integer input
                    System.err.println("Invalid input. Please enter a number.");
                    continue; // Skip the rest of the loop iteration and show the menu again
                }

                // Use switch statement for flow control based on the validated user choice
                switch (choice) {
                    case 1:
                        addItemToQueue();
                        break;
                    case 2:
                        processNextItem();
                        break;
                    case 3:
                        viewAssemblyQueue();
                        break;
                    case 4:
                        viewCompletedProducts();
                        break;
                    case 5:
                        stopSimulation(); // Set running flag to false to exit loop
                        break;
                    default:
                        // Handle choices that are integers but outside the valid range (1-5)
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                        break;
                }
                System.out.println(); // Add a newline for better readability between menu interactions

            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions that might occur within the loop
            System.err.println("An unexpected error occurred during simulation: " + e.getMessage());
            // In a real application, you might log the full stack trace for debugging:
            // e.printStackTrace();
        } finally {
            // This block ensures the scanner is closed when the simulation loop finishes (either by exiting or exception)
            if (scanner != null) {
                scanner.close();
                System.out.println("Scanner closed."); // Optional: confirmation message
            }
            System.out.println("Production line simulation ended.");
        }
    }

    /**
     * Displays the main menu options to the user using System.out.
     */
    private void displayMenu() {
        System.out.println("--- Production Line Menu ---");
        System.out.println("1. Add Item to Assembly Queue");
        System.out.println("2. Process Next Item from Queue");
        System.out.println("3. View Assembly Queue");
        System.out.println("4. View Completed Products");
        System.out.println("5. Exit");
        System.out.println("----------------------------");
    }

    /**
     * Prompts the user for an item name and adds it to the assembly queue.
     * Includes input validation using System.err for errors.
     */
    private void addItemToQueue() {
        System.out.print("Enter item name to add: ");
        String itemName = scanner.nextLine().trim(); // Read input and remove leading/trailing whitespace

        // Input validation: Check if the item name is empty after trimming
        if (itemName.isEmpty()) {
            System.err.println("Error: Item name cannot be empty.");
            return; // Exit the method if input is invalid
        }

        // Add the valid item name to the end of the queue (FIFO)
        assemblyQueue.offer(itemName); // offer() is a Queue method to add element, returns boolean
        System.out.println("Added '" + itemName + "' to the assembly queue.");
    }

    /**
     * Processes the next item from the assembly queue (FIFO) and moves it to the completed products list.
     * Handles the case where the assembly queue is empty using System.err.
     */
    private void processNextItem() {
        // Check if the queue is empty before attempting to remove/process an item
        if (assemblyQueue.isEmpty()) {
            System.err.println("Error: Assembly queue is empty. Cannot process any item.");
            return; // Exit the method if the queue is empty
        }

        // Remove the head of the queue (the oldest item) using poll()
        String processedItem = assemblyQueue.poll(); // poll() returns null if empty, but we checked already

        // Add the processed item to the list of completed products
        completedProducts.add(processedItem);
        System.out.println("Processed '" + processedItem + "' and moved to completed products.");
    }

    /**
     * Displays the current items in the assembly queue using System.out.
     * Indicates if the queue is empty.
     */
    private void viewAssemblyQueue() {
        System.out.println("--- Assembly Queue ---");
        // Check if the queue is empty
        if (assemblyQueue.isEmpty()) {
            System.out.println("The assembly queue is currently empty.");
        } else {
            // Print the contents of the queue. LinkedList's toString() method is helpful here.
            System.out.println("Items in queue: " + assemblyQueue);
        }
        System.out.println("----------------------");
    }

    /**
     * Displays the list of completed products using System.out.
     * Indicates if the list is empty.
     */
    private void viewCompletedProducts() {
        System.out.println("--- Completed Products ---");
        // Check if the list is empty
        if (completedProducts.isEmpty()) {
            System.out.println("No products have been completed yet.");
        } else {
            // Print the contents of the completed products list. ArrayList's toString() method is helpful here.
            System.out.println("Completed items: " + completedProducts);
        }
        System.out.println("--------------------------");
    }

    /**
     * Sets the running flag to false to signal the main simulation loop to terminate.
     */
    private void stopSimulation() {
        System.out.println("Stopping simulation...");
        this.running = false;
    }

    /**
     * Main method to create a ProductionLineSimulator instance and start the simulation.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        ProductionLineSimulator simulator = new ProductionLineSimulator();
        simulator.startSimulation();
    }
}
