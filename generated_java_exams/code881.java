/*
 * Exam Question #881
 * Generated on: 2025-05-12 16:54:35
 * Generated by: Account 5
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Print Job Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simple system to manage print jobs for a small print shop. The system should allow users to add new print jobs, view the queue of waiting jobs, process the next job, and view a list of completed jobs.
 * 
 * **Requirements:**
 * 
 * 1.  **`PrintJob` Class:** Create a class named `PrintJob` to represent a single print job. It should have the following private fields:
 *     *   `id` (an integer, unique for each job, starting from 1)
 *     *   `description` (a String, e.g., "Report printing", "Poster design")
 *     *   `pages` (an integer, number of pages to print)
 *     *   `status` (an enum, representing the job's current state: `QUEUED`, `COMPLETED`)
 *     *   Implement a constructor to initialize a new job with description and pages. The status should default to `QUEUED`. Assign a unique ID using a static counter.
 *     *   Provide public getter methods for all fields.
 *     *   Implement a public method `markAsCompleted()` to change the job's status.
 *     *   Override the `toString()` method to provide a user-friendly representation of the job (e.g., "Job #1: Report printing (10 pages) - Status: QUEUED").
 * 
 * 2.  **`PrintShopManager` Class:** Create a class named `PrintShopManager` to manage the collection of print jobs.
 *     *   It should have a private field `jobQueue` of type `Queue<PrintJob>` to hold jobs waiting to be processed. Use `java.util.LinkedList` as the implementation.
 *     *   It should have a private field `completedJobs` of type `List<PrintJob>` to hold jobs that have been processed. Use `java.util.ArrayList` as the implementation, but declare the field using the `List` interface.
 *     *   Implement a constructor to initialize both the queue and the list.
 *     *   Implement a public method `addJob(String description, int pages)`:
 *         *   Validate that `pages` is a positive integer (> 0). If not, throw an `IllegalArgumentException` with an appropriate message.
 *         *   Create a new `PrintJob` object and add it to the `jobQueue`.
 *         *   Print a confirmation message to `System.out`.
 *     *   Implement a public method `processNextJob()`:
 *         *   Attempt to remove the next job from the front of the `jobQueue`.
 *         *   If the queue is empty, return `null`.
 *         *   If a job is retrieved, call its `markAsCompleted()` method and add it to the `completedJobs` list.
 *         *   Return the processed `PrintJob` object.
 *     *   Implement a public method `viewJobQueue()`:
 *         *   Print the contents of the `jobQueue` to `System.out`. If the queue is empty, print an appropriate message.
 *     *   Implement a public method `viewCompletedJobs()`:
 *         *   Print the contents of the `completedJobs` list to `System.out`. If the list is empty, print an appropriate message.
 * 
 * 3.  **`PrintShopApp` Class:** Create a main class `PrintShopApp` with the `main` method to run the application.
 *     *   Use `java.util.Scanner` to get user input from the console.
 *     *   Create an instance of `PrintShopManager`.
 *     *   Implement a menu-driven interface with the following options:
 *         1.  Add New Print Job
 *         2.  View Current Job Queue
 *         3.  Process Next Job
 *         4.  View Completed Jobs
 *         5.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 *     *   Implement robust input handling:
 *         *   Read the menu choice as a String and attempt to parse it to an integer. Use a `try-catch` block specifically for `NumberFormatException` to handle non-numeric input.
 *         *   Handle invalid menu numbers (outside the 1-5 range).
 *         *   When adding a job, handle potential `IllegalArgumentException` thrown by `PrintShopManager.addJob` due to invalid page count using a `try-catch` block.
 *     *   Use `System.out` for displaying the menu, prompts, successful actions, and job/queue details.
 *     *   Use `System.err` for displaying all error messages (invalid input, queue empty, invalid page count, etc.).
 *     *   Implement a class-wide `try-catch` block encompassing the main application loop to catch any unexpected exceptions and print an error message using `System.err`.
 *     *   Ensure the `Scanner` resource is closed properly when the application exits.
 * 
 * 4.  **Best Practices:**
 *     *   Use meaningful variable and method names.
 *     *   Add comments where necessary to explain complex logic.
 *     *   Ensure proper encapsulation in the `PrintJob` and `PrintShopManager` classes.
 * 
 * **Expected Output:**
 * 
 * The application should present a menu, accept user input, and display relevant information or error messages based on the user's choice. Examples:
 * 
 * ```
 * --- Print Shop Menu ---
 * 1. Add New Print Job
 * 2. View Current Job Queue
 * 3. Process Next Job
 * 4. View Completed Jobs
 * 5. Exit
 * Enter your choice: 1
 * Enter job description: My Document
 * Enter number of pages: 15
 * Job added successfully: Job #1: My Document (15 pages) - Status: QUEUED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 2
 * Current Job Queue:
 * Job #1: My Document (15 pages) - Status: QUEUED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 3
 * Processed job: Job #1: My Document (15 pages) - Status: COMPLETED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 4
 * Completed Jobs:
 * Job #1: My Document (15 pages) - Status: COMPLETED
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 3
 * Error: Queue is empty. No jobs to process. (Printed to System.err)
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: abc
 * Error: Invalid input. Please enter a number. (Printed to System.err)
 * 
 * --- Print Shop Menu ---
 * ...
 * Enter your choice: 1
 * Enter job description: Invalid Job
 * Enter number of pages: -5
 * Error: Number of pages must be positive. (Printed to System.err)
 * ```
 * 
 * This task requires you to integrate various Java collection types, handle user interaction, manage state, and implement robust error handling.
 *
 * EXPLANATION:
 * This solution implements a simple Print Job Management System, demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`PrintJob` Class:**
 *     *   Represents a single job with an auto-generated ID, description, page count, and status.
 *     *   Uses a `static` variable `nextId` to ensure each job gets a unique, sequential ID.
 *     *   An `enum` `JobStatus` provides a clear and type-safe way to represent the job's state.
 *     *   Encapsulation is achieved by making fields `private` and providing `public` getter methods.
 *     *   The `toString()` method is overridden for easy printing of job details.
 * 
 * 2.  **`PrintShopManager` Class:**
 *     *   Manages the core logic of the system.
 *     *   Uses `Queue<PrintJob>` (`LinkedList` implementation) to maintain the order of jobs waiting to be processed (First-In, First-Out).
 *     *   Uses `List<PrintJob>` (`ArrayList` implementation) to store jobs after they are completed. The field is declared as the `List` interface, demonstrating polymorphism.
 *     *   `addJob()`: Takes job details, creates a `PrintJob`, validates the page count (throwing `IllegalArgumentException`), and adds it to the queue using `offer()`.
 *     *   `processNextJob()`: Uses `jobQueue.poll()` to get and remove the head of the queue. This method returns `null` if the queue is empty, which is handled gracefully. If a job is found, its status is updated, and it's added to the `completedJobs` list.
 *     *   `viewJobQueue()` and `viewCompletedJobs()`: Iterate through the respective collections and print the job details using the `PrintJob`'s `toString()` method. They also handle the case where the collections are empty.
 * 
 * 3.  **`PrintShopApp` Class:**
 *     *   Contains the `main` method and provides the user interface.
 *     *   `Scanner` is used to read user input from the console.
 *     *   The main logic runs in a `while` loop controlled by a `boolean` flag (`running`).
 *     *   A `try-catch` block surrounds the main loop's content. This demonstrates class-wide exception handling, catching potential unexpected runtime errors that might occur within the loop's execution and printing them to `System.err`.
 *     *   Inside the loop, the menu is printed, and user input is read.
 *     *   Input validation for the menu choice is performed by reading the input as a `String` and attempting to parse it within a dedicated `try-catch` block for `NumberFormatException`. Invalid numeric input results in an error message to `System.err` and the loop continues.
 *     *   A `switch` statement handles the valid menu choices (1-5).
 *     *   Case 1 (`Add Job`) includes another `try-catch` block to handle potential `NumberFormatException` when reading pages and the `IllegalArgumentException` thrown by `PrintShopManager.addJob` if the page count is invalid. Error messages are printed to `System.err`.
 *     *   Case 3 (`Process Job`) checks the return value of `manager.processNextJob()` (`null` indicates an empty queue) and prints an error message to `System.err` if the queue was empty.
 *     *   `System.out` is used for all standard output (menu, prompts, successful actions, job lists).
 *     *   `System.err` is used exclusively for error messages (invalid input, queue empty, invalid page count, unexpected errors).
 *     *   A `finally` block ensures the `Scanner` resource is closed before the application terminates, regardless of whether an exception occurred.
 *     *   Helper method `printMenu()` keeps the `main` method cleaner.
 * 
 * This solution effectively integrates `Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` exception handling within a practical, menu-driven application, adhering to best practices like encapsulation and clear naming. The input validation and multiple `try-catch` blocks demonstrate robust error handling.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

// Enum for PrintJob status
enum JobStatus {
    QUEUED,
    COMPLETED
}

// Represents a single print job
class PrintJob {
    private static int nextId = 1; // Static counter for unique job IDs

    private int id;
    private String description;
    private int pages;
    private JobStatus status;

    /**
     * Constructs a new PrintJob.
     *
     * @param description The description of the job.
     * @param pages       The number of pages in the job.
     */
    public PrintJob(String description, int pages) {
        this.id = nextId++; // Assign unique ID and increment counter
        this.description = description;
        this.pages = pages;
        this.status = JobStatus.QUEUED; // New jobs are initially queued
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public int getPages() {
        return pages;
    }

    public JobStatus getStatus() {
        return status;
    }

    /**
     * Marks the job's status as COMPLETED.
     */
    public void markAsCompleted() {
        this.status = JobStatus.COMPLETED;
    }

    /**
     * Provides a string representation of the PrintJob.
     *
     * @return Formatted string describing the job.
     */
    @Override
    public String toString() {
        return String.format("Job #%d: %s (%d pages) - Status: %s",
                             id, description, pages, status);
    }
}

// Manages the queue of pending jobs and a list of completed jobs
class PrintShopManager {
    private Queue<PrintJob> jobQueue;      // Jobs waiting to be processed
    private List<PrintJob> completedJobs; // Jobs that have been processed

    /**
     * Constructs a new PrintShopManager, initializing the job queue and completed list.
     */
    public PrintShopManager() {
        // Use LinkedList as an implementation of Queue
        this.jobQueue = new LinkedList<>();
        // Use ArrayList as an implementation of List
        this.completedJobs = new ArrayList<>();
    }

    /**
     * Adds a new print job to the queue.
     *
     * @param description The description of the job.
     * @param pages       The number of pages in the job.
     * @throws IllegalArgumentException if pages is not positive.
     */
    public void addJob(String description, int pages) {
        if (pages <= 0) {
            throw new IllegalArgumentException("Number of pages must be positive.");
        }
        PrintJob newJob = new PrintJob(description, pages);
        jobQueue.offer(newJob); // offer() is preferred over add() in queues as it doesn't throw exception on capacity limits (though LinkedList is unbounded)
        System.out.println("Job added successfully: " + newJob);
    }

    /**
     * Processes the next job in the queue.
     *
     * @return The processed PrintJob, or null if the queue was empty.
     */
    public PrintJob processNextJob() {
        PrintJob jobToProcess = jobQueue.poll(); // Retrieves and removes the head of the queue
        if (jobToProcess != null) {
            jobToProcess.markAsCompleted();
            completedJobs.add(jobToProcess);
            return jobToProcess;
        }
        return null; // Queue was empty
    }

    /**
     * Displays the current jobs in the queue.
     */
    public void viewJobQueue() {
        System.out.println("--- Current Job Queue ---");
        if (jobQueue.isEmpty()) {
            System.out.println("Queue is empty. No jobs waiting.");
        } else {
            // Iterate through the queue without removing elements
            jobQueue.forEach(System.out::println);
        }
        System.out.println("-------------------------");
    }

    /**
     * Displays the list of completed jobs.
     */
    public void viewCompletedJobs() {
        System.out.println("--- Completed Jobs ---");
        if (completedJobs.isEmpty()) {
            System.out.println("No jobs have been completed yet.");
        } else {
            // Iterate through the list
            completedJobs.forEach(System.out::println);
        }
        System.out.println("----------------------");
    }
}

// Main application class for the Print Shop Management System
public class PrintShopApp {

    private static PrintShopManager manager = new PrintShopManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        boolean running = true;

        // Class-wide exception handling for unexpected errors
        try {
            while (running) {
                printMenu();
                System.out.print("Enter your choice: ");

                String choiceString = scanner.nextLine();
                int choice = -1;

                // Try-catch for parsing user input for menu choice
                try {
                    choice = Integer.parseInt(choiceString);
                } catch (NumberFormatException e) {
                    System.err.println("Error: Invalid input. Please enter a number.");
                    continue; // Skip to next iteration of the loop
                }

                // Switch statement for menu control
                switch (choice) {
                    case 1: // Add New Print Job
                        System.out.print("Enter job description: ");
                        String description = scanner.nextLine();
                        System.out.print("Enter number of pages: ");
                        String pagesString = scanner.nextLine();
                        try {
                            int pages = Integer.parseInt(pagesString);
                            manager.addJob(description, pages);
                        } catch (NumberFormatException e) {
                            System.err.println("Error: Invalid input for pages. Please enter a number.");
                        } catch (IllegalArgumentException e) {
                            System.err.println("Error: " + e.getMessage()); // Handles pages <= 0
                        }
                        break;

                    case 2: // View Current Job Queue
                        manager.viewJobQueue();
                        break;

                    case 3: // Process Next Job
                        PrintJob processedJob = manager.processNextJob();
                        if (processedJob != null) {
                            System.out.println("Processed job: " + processedJob);
                        } else {
                            System.err.println("Error: Queue is empty. No jobs to process.");
                        }
                        break;

                    case 4: // View Completed Jobs
                        manager.viewCompletedJobs();
                        break;

                    case 5: // Exit
                        System.out.println("Exiting Print Job Management System. Goodbye!");
                        running = false;
                        break;

                    default: // Invalid menu choice
                        System.err.println("Error: Invalid choice. Please enter a number between 1 and 5.");
                }
                System.out.println(); // Add a newline for better readability
            }
        } catch (Exception e) {
            // Catch any unexpected runtime exceptions in the main loop
            System.err.println("An unexpected error occurred: " + e.getMessage());
            e.printStackTrace(); // Print stack trace for debugging unexpected errors
        } finally {
            // Ensure scanner is closed
            scanner.close();
            System.out.println("Scanner closed.");
        }
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Print Shop Menu ---");
        System.out.println("1. Add New Print Job");
        System.out.println("2. View Current Job Queue");
        System.out.println("3. Process Next Job");
        System.out.println("4. View Completed Jobs");
        System.out.println("5. Exit");
        System.out.println("-----------------------");
    }
}
