/*
 * Exam Question #1103
 * Generated on: 2025-05-12 17:25:12
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Simple Task Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with creating a simplified command-line task management system for a small team. The system should allow users to add new tasks, mark the next pending task as completed, list all pending tasks, and list all completed tasks. The system should process tasks in the order they were added (First-In, First-Out for pending tasks).
 * 
 * **Requirements:**
 * 
 * Implement a Java program that fulfills the following:
 * 
 * 1.  **Task Representation:** Create a `Task` class to represent a single task. Each task should have a unique integer ID, a description (String), and a status (pending or completed).
 * 2.  **Task Management Logic:** Create a `TaskManager` class responsible for managing tasks.
 *     *   It must maintain a collection of pending tasks using a `Queue`. New tasks are added to the end of the queue.
 *     *   It must maintain a collection of completed tasks using an `ArrayList` (referenced via the `List` interface). When a task is completed, it's moved from the pending queue to this list.
 *     *   It must provide methods to:
 *         *   Add a new task (given a description).
 *         *   Complete the next pending task (remove from queue, add to list, update status). Handle the case where there are no pending tasks.
 *         *   List all pending tasks.
 *         *   List all completed tasks.
 * 3.  **User Interface:** Create a main application class (`TaskManagementApp`) with a `main` method.
 *     *   Use `Scanner` to read user commands from the console.
 *     *   Present a menu of options to the user:
 *         1.  Add New Task
 *         2.  Complete Next Task
 *         3.  List Pending Tasks
 *         4.  List Completed Tasks
 *         0.  Exit
 *     *   Use a `switch` statement to process the user's choice.
 *     *   Implement a loop that continues until the user chooses to exit.
 * 4.  **Error Handling and Validation:**
 *     *   Use `System.err` to display error messages (e.g., invalid menu choice, attempting to complete a task when none are pending, invalid input type).
 *     *   Use `System.out` for all normal output (menu, prompts, task listings, success messages).
 *     *   Implement robust input validation for the menu choice (ensure it's an integer within the valid range). Handle non-integer input gracefully.
 *     *   Implement class-wide exception handling using `try-catch` blocks in the main application loop to catch potential unexpected errors during input processing or task operations.
 * 5.  **Best Practices:**
 *     *   Apply proper encapsulation (private fields, public methods).
 *     *   Use meaningful variable and method names.
 *     *   Include appropriate comments and basic documentation (e.g., JavaDocs for classes/methods).
 *     *   Ensure a clean and organized code structure (separate classes).
 * 
 * **Expected Output:**
 * 
 * The program should interact with the user like this (example flow):
 * 
 * ```
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 1
 * Enter task description: Implement Task class
 * Task added: ID 1 - Implement Task class [Pending]
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 1
 * Enter task description: Create TaskManager
 * Task added: ID 2 - Create TaskManager [Pending]
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * ID 1 - Implement Task class [Pending]
 * ID 2 - Create TaskManager [Pending]
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 2
 * Completed task: ID 1 - Implement Task class
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 3
 * --- Pending Tasks ---
 * ID 2 - Create TaskManager [Pending]
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 4
 * --- Completed Tasks ---
 * ID 1 - Implement Task class [Completed]
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: abc
 * Invalid input. Please enter a number.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 0 and 4.
 * 
 * --- Task Management System ---
 * 1. Add New Task
 * 2. Complete Next Task
 * 3. List Pending Tasks
 * 4. List Completed Tasks
 * 0. Exit
 * Enter your choice: 0
 * Exiting Task Management System.
 * ```
 * 
 * Your solution should be presented as a single block of code containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a simple command-line Task Management System demonstrating the required Java concepts.
 * 
 * 1.  **`Task` Class:** This class serves as a simple Plain Old Java Object (POJO) to hold task data. It includes private fields (`id`, `description`, `isCompleted`) demonstrating encapsulation. A static counter (`nextId`) ensures each task gets a unique ID upon creation. Getters and a setter (`setCompleted`) provide controlled access to the state. The `toString()` method provides a convenient formatted output for tasks.
 * 
 * 2.  **`TaskManager` Class:** This class encapsulates the core logic for managing tasks.
 *     *   `pendingTasks`: Declared as a `Queue<Task>` and initialized with a `LinkedList`. A `Queue` is used because tasks are processed in a First-In, First-Out (FIFO) manner. `offer()` is used for adding tasks, and `poll()` for removing the head of the queue (completing the next task).
 *     *   `completedTasks`: Declared as a `List<Task>` and initialized with an `ArrayList`. An `ArrayList` is suitable for storing completed tasks as we primarily need to add to it and iterate over it to list them. Using the `List` interface for the variable type demonstrates polymorphism, a good practice.
 *     *   `addTask(String description)`: Creates a new `Task` object and adds it to the `pendingTasks` queue using `offer()`. Includes basic validation for the description.
 *     *   `completeNextTask()`: Checks if the `pendingTasks` queue is empty. If not, it uses `poll()` to retrieve and remove the head task, marks it as completed using `setCompleted(true)`, and adds it to the `completedTasks` list. If the queue is empty, it prints an error to `System.err`.
 *     *   `listPendingTasks()` and `listCompletedTasks()`: These methods iterate through the respective collections and print each task using its `toString()` method. They also check for empty lists/queues and print a message to `System.out`.
 * 
 * 3.  **`TaskManagementApp` Class:** This is the main application entry point.
 *     *   It creates instances of `TaskManager` and `Scanner`.
 *     *   A `while` loop keeps the application running until the user chooses to exit.
 *     *   Inside the loop, `printMenu()` displays options using `System.out`.
 *     *   **Input Handling:** `scanner.hasNextInt()` is used for input validation *before* attempting to read an integer. If the input is not an integer, an error is printed to `System.err`, the invalid input is consumed using `scanner.next()`, and the loop continues. If it is an integer, `scanner.nextInt()` reads it, and `scanner.nextLine()` is called immediately after to consume the newline character left in the buffer, preventing issues with subsequent `nextLine()` calls for task descriptions.
 *     *   **`switch` Statement:** The validated integer `choice` is processed using a `switch` statement. Each case corresponds to a menu option, calling the appropriate method on the `TaskManager` instance. The `default` case handles valid integers that are outside the expected range, printing an error to `System.err`.
 *     *   **Exception Handling:** A `try-catch` block wraps the core input reading and processing logic within the `while` loop. This provides class-wide exception handling. While specific input validation handles `InputMismatchException` for the menu choice, this block serves as a safety net for other potential runtime errors that might occur during execution, printing a general error message to `System.err`.
 * 
 * This solution effectively integrates `Queue`, `ArrayList` (via `List`), `Scanner`, `switch`, `System.err`, `System.out`, and `try-catch` within a practical scenario, adhering to best practices like encapsulation, clear naming, and basic error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a single task with an ID, description, and completion status.
 */
class Task {
    private static int nextId = 1; // Static counter for unique IDs

    private int id;
    private String description;
    private boolean isCompleted;

    /**
     * Constructs a new Task.
     *
     * @param description The description of the task.
     */
    public Task(String description) {
        this.id = nextId++; // Assign unique ID and increment counter
        this.description = description;
        this.isCompleted = false; // Tasks start as pending
    }

    // --- Getters ---
    public int getId() {
        return id;
    }

    public String getDescription() {
        return description;
    }

    public boolean isCompleted() {
        return isCompleted;
    }

    // --- Setter for status ---
    public void setCompleted(boolean completed) {
        isCompleted = completed;
    }

    /**
     * Returns a string representation of the task.
     *
     * @return Formatted string including ID, description, and status.
     */
    @Override
    public String toString() {
        return String.format("ID %d - %s [%s]",
                id, description, isCompleted ? "Completed" : "Pending");
    }
}

/**
 * Manages a collection of pending and completed tasks.
 * Uses a Queue for pending tasks (FIFO) and a List for completed tasks.
 */
class TaskManager {
    private Queue<Task> pendingTasks;
    private List<Task> completedTasks;

    /**
     * Constructs a new TaskManager.
     */
    public TaskManager() {
        // LinkedList is a common implementation for Queue
        this.pendingTasks = new LinkedList<>();
        // ArrayList is a common implementation for List
        this.completedTasks = new ArrayList<>();
    }

    /**
     * Adds a new task to the pending queue.
     *
     * @param description The description for the new task.
     */
    public void addTask(String description) {
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Task description cannot be empty.");
            return;
        }
        Task newTask = new Task(description.trim());
        pendingTasks.offer(newTask); // offer is generally preferred over add for queues
        System.out.println("Task added: " + newTask);
    }

    /**
     * Completes the next task in the pending queue.
     * Moves the task from pending to completed.
     */
    public void completeNextTask() {
        if (pendingTasks.isEmpty()) {
            System.err.println("No pending tasks to complete.");
            return;
        }
        Task completedTask = pendingTasks.poll(); // poll removes and returns the head
        if (completedTask != null) {
            completedTask.setCompleted(true);
            completedTasks.add(completedTask);
            System.out.println("Completed task: " + completedTask);
        }
        // poll returns null if queue is empty, but we already checked isEmpty,
        // so this null check is slightly redundant but safe.
    }

    /**
     * Lists all tasks currently in the pending queue.
     */
    public void listPendingTasks() {
        System.out.println("--- Pending Tasks ---");
        if (pendingTasks.isEmpty()) {
            System.out.println("No pending tasks.");
            return;
        }
        // Iterating over a Queue does not remove elements
        for (Task task : pendingTasks) {
            System.out.println(task);
        }
    }

    /**
     * Lists all tasks currently in the completed list.
     */
    public void listCompletedTasks() {
        System.out.println("--- Completed Tasks ---");
        if (completedTasks.isEmpty()) {
            System.out.println("No completed tasks.");
            return;
        }
        for (Task task : completedTasks) {
            System.out.println(task);
        }
    }
}

/**
 * Main application class for the Task Management System.
 * Handles user interaction via the console.
 */
public class TaskManagementApp {

    public static void main(String[] args) {
        TaskManager manager = new TaskManager();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("--- Task Management System ---");

        while (running) {
            printMenu();

            int choice = -1;
            try {
                System.out.print("Enter your choice: ");
                // Check if the next input is an integer
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                } else {
                    // Handle non-integer input
                    System.err.println("Invalid input. Please enter a number.");
                    scanner.next(); // Consume the invalid input to prevent infinite loop
                    continue; // Skip to the next iteration
                }

                // Consume the rest of the line after reading the integer choice
                scanner.nextLine();

                // Process the valid integer choice using a switch statement
                switch (choice) {
                    case 1:
                        System.out.print("Enter task description: ");
                        String description = scanner.nextLine();
                        manager.addTask(description);
                        break;
                    case 2:
                        manager.completeNextTask();
                        break;
                    case 3:
                        manager.listPendingTasks();
                        break;
                    case 4:
                        manager.listCompletedTasks();
                        break;
                    case 0:
                        running = false; // Set flag to exit loop
                        System.out.println("Exiting Task Management System.");
                        break;
                    default:
                        // Handle valid integer input but outside the menu range
                        System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                        break;
                }
            } catch (InputMismatchException e) {
                 // This catch block might be redundant due to hasNextInt check,
                 // but kept for robustness against other potential Scanner issues.
                 System.err.println("Input error: " + e.getMessage());
                 scanner.nextLine(); // Consume the invalid input
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // e.printStackTrace(); // Uncomment for debugging
            }
            System.out.println(); // Add a blank line for better readability between cycles
        }

        scanner.close(); // Close the scanner when done
    }

    /**
     * Prints the main menu options to the console.
     */
    private static void printMenu() {
        System.out.println("--- Task Management System ---");
        System.out.println("1. Add New Task");
        System.out.println("2. Complete Next Task");
        System.out.println("3. List Pending Tasks");
        System.out.println("4. List Completed Tasks");
        System.out.println("0. Exit");
    }
}
