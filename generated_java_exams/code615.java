/*
 * Exam Question #615
 * Generated on: 2025-05-12 16:15:23
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Java Programming Exam Task: IT Support Ticket System
 * 
 * **Objective:** Design and implement a simple IT support ticket system that manages incoming support requests. This task requires demonstrating proficiency in using various core Java collections, input handling, control flow, and exception management.
 * 
 * **Scenario:**
 * You need to build a console-based application for a basic IT support department.
 * 1.  Incoming support tickets are placed in a queue to be processed in a First-In, First-Out (FIFO) manner.
 * 2.  Support staff can process the next available ticket from the queue.
 * 3.  Once processed, tickets are moved to a list of resolved tickets.
 * 4.  Users can view the list of pending tickets in the queue and the list of resolved tickets.
 * 
 * **Requirements:**
 * 
 * 1.  **Data Structures:**
 *     *   Use `java.util.Queue` to store pending support tickets.
 *     *   Use `java.util.List` (implemented by `java.util.ArrayList`) to store resolved tickets.
 * 2.  **Ticket Representation:** Create a `Ticket` class with appropriate fields (e.g., unique ID, description) and methods (constructor, getters, `toString`). Ensure proper encapsulation.
 * 3.  **User Interaction:**
 *     *   Use `java.util.Scanner` to read user input from the console.
 *     *   Present a menu of options to the user:
 *         1.  Submit New Ticket
 *         2.  Process Next Ticket
 *         3.  View Pending Tickets
 *         4.  View Resolved Tickets
 *         0.  Exit
 *     *   Use a `switch` statement to handle the user's menu choice.
 * 4.  **System Output:**
 *     *   Use `System.out` for displaying the menu, confirmations of successful operations (e.g., ticket submitted, ticket processed), and listing tickets.
 *     *   Use `System.err` for displaying error messages (e.g., invalid menu choice, queue is empty when trying to process).
 * 5.  **Error Handling:**
 *     *   Implement robust input validation, especially for the menu choice (ensure it's an integer within the valid range).
 *     *   Use `try-catch` blocks for class-wide exception handling to gracefully manage potential runtime errors, such as `InputMismatchException` when reading user input.
 *     *   Handle the case where the user tries to process a ticket when the queue is empty.
 * 6.  **Best Practices:**
 *     *   Employ meaningful variable and method names.
 *     *   Include appropriate comments explaining key parts of the code.
 *     *   Structure the code logically with separate classes for the `Ticket` and the main `SupportSystem` logic.
 * 
 * **Expected Output:**
 * The program should run continuously, displaying the menu, accepting user input, performing the requested action, and providing feedback (success or error) until the user chooses to exit (option 0). The output for viewing tickets should clearly list the tickets in the respective collection. Error messages should be directed to the standard error stream.
 * 
 * **Example Interaction Flow:**
 * ```
 * --- IT Support Ticket System ---
 * 1. Submit New Ticket
 * 2. Process Next Ticket
 * ... (menu continues)
 * Enter your choice: 1
 * --- Submit New Ticket ---
 * Enter ticket description: Printer not working
 * Ticket submitted successfully: Ticket [ID=1, Description='Printer not working']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 1
 * --- Submit New Ticket ---
 * Enter ticket description: Cannot access shared drive
 * Ticket submitted successfully: Ticket [ID=2, Description='Cannot access shared drive']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 3
 * --- Pending Tickets ---
 * 1. Ticket [ID=1, Description='Printer not working']
 * 2. Ticket [ID=2, Description='Cannot access shared drive']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 2
 * --- Process Next Ticket ---
 * Ticket processed: Ticket [ID=1, Description='Printer not working']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 3
 * --- Pending Tickets ---
 * 1. Ticket [ID=2, Description='Cannot access shared drive']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 4
 * --- Resolved Tickets ---
 * 1. Ticket [ID=1, Description='Printer not working']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 5
 * Invalid choice. Please enter a number between 0 and 4.
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: abc
 * Invalid input. Please enter a number.
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 2
 * --- Process Next Ticket ---
 * Ticket processed: Ticket [ID=2, Description='Cannot access shared drive']
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 2
 * --- Process Next Ticket ---
 * No tickets in the queue to process.
 * 
 * --- IT Support Ticket System ---
 * ... (menu)
 * Enter your choice: 0
 * Exiting Support System. Goodbye!
 * ```
 * 
 * Implement the complete Java code for this system.
 *
 * EXPLANATION:
 * This solution implements a simple IT Support Ticket System demonstrating the required Java concepts and best practices.
 * 
 * 1.  **`Ticket` Class:**
 *     *   Encapsulates ticket data (`id`, `description`).
 *     *   Uses a `static int counter` to automatically assign a unique ID to each new ticket upon creation, ensuring no two tickets have the same ID within a single run of the application.
 *     *   Provides public getter methods for accessing the private fields.
 *     *   Overrides `toString()` for easy printing of ticket details.
 * 
 * 2.  **`SupportSystem` Class:**
 *     *   Contains the core logic and data structures.
 *     *   **`ticketQueue`:** Declared as `Queue<Ticket>` and initialized with `new LinkedList<>()`. `LinkedList` is a common implementation of the `Queue` interface, providing FIFO behavior suitable for a waiting line of tickets.
 *     *   **`resolvedTickets`:** Declared as `List<Ticket>` and initialized with `new ArrayList<>()`. `ArrayList` is a dynamic array implementation of the `List` interface, suitable for storing processed items in a sequential manner.
 *     *   **`displayMenu()`:** A helper method to print the available options to `System.out`.
 *     *   **`submitTicket(Scanner scanner)`:**
 *         *   Reads the ticket description using the provided `Scanner`. Note the use of `scanner.nextLine()` to read the full line of input.
 *         *   Includes basic input validation to ensure the description is not empty or just whitespace. An error message is printed to `System.err` if validation fails.
 *         *   Creates a new `Ticket` object.
 *         *   Adds the new ticket to the `ticketQueue` using `offer()`, which is the preferred method for adding to a queue as it handles capacity constraints gracefully (though `LinkedList` is unbounded).
 *         *   Prints a success message to `System.out`.
 *     *   **`processNextTicket()`:**
 *         *   Retrieves and removes the head of the `ticketQueue` using `poll()`. `poll()` returns the ticket or `null` if the queue is empty, which is safer than `remove()` which would throw an exception.
 *         *   Checks if the returned ticket is `null`. If not, it adds the ticket to the `resolvedTickets` list and prints a success message to `System.out`.
 *         *   If `poll()` returns `null` (meaning the queue was empty), it prints an informative message to `System.err`.
 *     *   **`viewQueue()`:** Iterates through the `ticketQueue` (without removing elements) and prints each pending ticket to `System.out`. Checks if the queue is empty and prints a message if so.
 *     *   **`viewResolved()`:** Iterates through the `resolvedTickets` list and prints each resolved ticket to `System.out`. Checks if the list is empty and prints a message if so.
 *     *   **`run()`:**
 *         *   Contains the main application loop (`while (choice != 0)`).
 *         *   Uses `Scanner` to read user input for the menu choice.
 *         *   Employs a `switch` statement to direct control based on the user's choice, calling the appropriate methods (`submitTicket`, `processNextTicket`, etc.).
 *         *   **Class-wide Exception Handling:** A `try-catch` block wraps the input reading (`scanner.nextInt()`) and the `switch` statement.
 *             *   It specifically catches `InputMismatchException` if the user enters non-integer input for the menu choice. This is crucial for preventing the program from crashing and allows recovery by printing an error to `System.err` and consuming the invalid input (`scanner.nextLine()`) to avoid an infinite loop.
 *             *   A general `catch (Exception e)` is included as a fallback to catch any other unexpected runtime exceptions that might occur within the loop's execution, demonstrating robust error handling by printing an error message to `System.err`.
 *         *   Handles invalid menu numbers (integers outside the 0-4 range) within the `switch` statement's `default` case, printing an error to `System.err`.
 *         *   Ensures `scanner.nextLine()` is called after `scanner.nextInt()` to consume the leftover newline character, preventing issues in subsequent `nextLine()` calls (e.g., in `submitTicket`).
 *         *   Prints a newline after each operation for better console readability.
 *         *   Closes the `Scanner` resource when the loop exits.
 *     *   **`main(String[] args)`:** The entry point of the application. Creates a `SupportSystem` object and calls its `run()` method to start the system.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `Switch`, `System.err`, `System.out`, `try-catch`) into a practical, menu-driven application while adhering to best practices like encapsulation, meaningful naming, input validation, and error handling.
 */

import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a support ticket
class Ticket {
    private static int counter = 0; // Static counter to generate unique IDs
    private int id;
    private String description;

    /**
     * Constructs a new Ticket with a unique ID and description.
     * @param description The description of the support issue.
     */
    public Ticket(String description) {
        this.id = ++counter; // Assign a unique ID and increment counter
        this.description = description;
    }

    /**
     * Gets the unique ID of the ticket.
     * @return The ticket ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Gets the description of the ticket.
     * @return The ticket description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Provides a string representation of the Ticket.
     * @return A formatted string including ticket ID and description.
     */
    @Override
    public String toString() {
        return "Ticket [ID=" + id + ", Description='" + description + "']";
    }
}

// Manages the support ticket system operations
public class SupportSystem {
    // Queue for tickets waiting to be processed (FIFO)
    private Queue<Ticket> ticketQueue;
    // List for tickets that have been processed
    private List<Ticket> resolvedTickets;

    /**
     * Constructs a new SupportSystem, initializing the ticket queue and resolved tickets list.
     */
    public SupportSystem() {
        // LinkedList is a common implementation of Queue
        ticketQueue = new LinkedList<>();
        // ArrayList is a common implementation of List
        resolvedTickets = new ArrayList<>();
    }

    /**
     * Displays the main menu options to the user.
     */
    private void displayMenu() {
        System.out.println("--- IT Support Ticket System ---");
        System.out.println("1. Submit New Ticket");
        System.out.println("2. Process Next Ticket");
        System.out.println("3. View Pending Tickets");
        System.out.println("4. View Resolved Tickets");
        System.out.println("0. Exit");
        System.out.println("--------------------------------");
    }

    /**
     * Handles the submission of a new support ticket.
     * Prompts the user for a description and adds the ticket to the queue.
     * @param scanner The Scanner object used for reading user input.
     */
    private void submitTicket(Scanner scanner) {
        System.out.println("--- Submit New Ticket ---");
        System.out.print("Enter ticket description: ");
        String description = scanner.nextLine(); // Read the full line of description

        // Input validation for description
        if (description == null || description.trim().isEmpty()) {
            System.err.println("Error: Ticket description cannot be empty.");
            return; // Exit method if validation fails
        }

        Ticket newTicket = new Ticket(description.trim());
        ticketQueue.offer(newTicket); // offer() is the preferred way to add to a Queue
        System.out.println("Success: Ticket submitted successfully: " + newTicket);
    }

    /**
     * Processes the next ticket from the front of the queue.
     * If a ticket exists, it's moved from the queue to the resolved list.
     * Prints a success message or an error if the queue is empty.
     */
    private void processNextTicket() {
        System.out.println("--- Process Next Ticket ---");
        // poll() retrieves and removes the head of the queue, or returns null if the queue is empty
        Ticket nextTicket = ticketQueue.poll();

        if (nextTicket != null) {
            resolvedTickets.add(nextTicket);
            System.out.println("Success: Ticket processed: " + nextTicket);
        } else {
            // Use System.err for error message when queue is empty
            System.err.println("Info: No tickets in the queue to process.");
        }
    }

    /**
     * Displays all tickets currently in the pending queue.
     * Prints a message if the queue is empty.
     */
    private void viewQueue() {
        System.out.println("--- Pending Tickets ---");
        if (ticketQueue.isEmpty()) {
            System.out.println("Info: No pending tickets.");
        } else {
            // Iterate through the queue without removing elements
            int index = 1;
            for (Ticket ticket : ticketQueue) {
                System.out.println(index++ + ". " + ticket);
            }
        }
    }

    /**
     * Displays all tickets currently in the resolved list.
     * Prints a message if the list is empty.
     */
    private void viewResolved() {
        System.out.println("--- Resolved Tickets ---");
        if (resolvedTickets.isEmpty()) {
            System.out.println("Info: No resolved tickets.");
        } else {
            int index = 1;
            // Iterate through the List
            for (Ticket ticket : resolvedTickets) {
                System.out.println(index++ + ". " + ticket);
            }
        }
    }

    /**
     * Runs the main application loop, handling user interaction and menu choices.
     * Includes class-wide exception handling for input errors and unexpected issues.
     */
    public void run() {
        Scanner scanner = new Scanner(System.in);
        int choice = -1; // Initialize choice to a non-exit value

        // Main application loop continues until user chooses to exit (choice 0)
        while (choice != 0) {
            displayMenu();
            try {
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt(); // Read the integer choice
                scanner.nextLine(); // Consume the leftover newline character

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        submitTicket(scanner); // Pass scanner to submitTicket
                        break;
                    case 2:
                        processNextTicket();
                        break;
                    case 3:
                        viewQueue();
                        break;
                    case 4:
                        viewResolved();
                        break;
                    case 0:
                        System.out.println("Exiting Support System. Goodbye!");
                        break;
                    default:
                        // Handle invalid integer choices outside the 0-4 range
                        System.err.println("Invalid choice. Please enter a number between 0 and 4.");
                }
            } catch (InputMismatchException e) {
                // Catch non-integer input specifically
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
                choice = -1; // Reset choice to ensure loop continues after error
            } catch (Exception e) {
                // Catch any other unexpected runtime exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                // For debugging, e.printStackTrace(); could be added here
            }
            System.out.println(); // Add a newline for better readability between operations
        }

        scanner.close(); // Close the scanner resource when done
    }

    /**
     * The main method to start the Support System application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        SupportSystem system = new SupportSystem();
        system.run(); // Start the main application loop
    }
}
