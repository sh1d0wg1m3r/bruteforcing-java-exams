/*
 * Exam Question #415
 * Generated on: 2025-05-11 23:07:55
 * Generated by: Account 1
 * 
 * QUESTION:
 * ## Advanced Java Programming Exam Task: Resource Allocation & Request Queue System
 * 
 * **Scenario:**
 * 
 * You are tasked with building a simplified Resource Allocation and Request Queue System for a small organization. The system manages a fixed set of resources (like meeting rooms, equipment) and processes booking requests for these resources in the order they are received.
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must meet the following criteria:
 * 
 * 1.  **Core Functionality:**
 *     *   Maintain a collection of available resources. Each resource should have a unique ID, a name, a capacity, and a boolean indicating if it's currently available.
 *     *   Maintain a queue of booking requests. Each request should have a unique request ID, the ID of the requested resource, the name of the requester, and the number of attendees/required capacity.
 *     *   Provide a command-line interface for user interaction.
 *     *   Support the following operations via a menu:
 *         *   Add a new resource.
 *         *   Submit a new booking request.
 *         *   Process the next request in the queue. This operation should:
 *             *   Dequeue the next request.
 *             *   Find the corresponding resource.
 *             *   Check if the resource is available and if its capacity meets the requested capacity.
 *             *   If successful, mark the resource as unavailable and print a success message.
 *             *   If unsuccessful (resource not found, unavailable, or insufficient capacity), print an error message and *do not* re-queue the request (it's rejected for now).
 *         *   View all resources (showing ID, name, capacity, and availability).
 *         *   View the current booking request queue (showing request ID, resource ID, requester, and requested capacity for each request).
 *         *   Exit the application.
 * 
 * 2.  **Mandatory Java Components:** Your solution *must* utilize *all* of the following Java components:
 *     *   `java.util.Queue`
 *     *   `java.util.ArrayList`
 *     *   `java.util.List` interface (used in method signatures or variable declarations where appropriate, e.g., returning a List)
 *     *   `java.util.Scanner` for user input
 *     *   `switch` statement for handling menu options
 *     *   `System.err` for printing error messages (e.g., invalid input, resource not found, booking failure)
 *     *   `System.out` for printing normal output (e.g., menu, prompts, success messages, list/queue contents)
 *     *   Class-wide exception handling using `try-catch` blocks (e.g., handling input errors, potential issues during processing).
 * 
 * 3.  **Best Practices:**
 *     *   Use proper encapsulation (private fields, public methods) for your classes.
 *     *   Employ meaningful variable and method names.
 *     *   Include appropriate comments to explain complex logic or class purpose.
 *     *   Implement input validation (e.g., capacity must be positive, resource ID should ideally be checked for uniqueness when adding, resource ID for request must exist).
 *     *   Handle potential errors gracefully using `try-catch` and informative messages via `System.err`.
 *     *   Structure your code into logical classes (`Resource`, `BookingRequest`, `BookingSystem`).
 * 
 * **Expected Output:**
 * 
 * The program should present a menu, accept user commands, and print relevant output or error messages based on the operation performed.
 * 
 * *Example Interaction:*
 * 
 * ```
 * Resource Allocation & Request Queue System
 * Menu:
 * 1. Add Resource
 * 2. Submit Booking Request
 * 3. Process Next Request
 * 4. View Resources
 * 5. View Request Queue
 * 6. Exit
 * Enter your choice: 1
 * Enter Resource ID: R101
 * Enter Resource Name: Meeting Room A
 * Enter Capacity: 10
 * Resource R101 added.
 * 
 * Enter your choice: 1
 * Enter Resource ID: R102
 * Enter Resource Name: Projector
 * Enter Capacity: 1
 * Resource R102 added.
 * 
 * Enter your choice: 4
 * --- Resources ---
 * ID: R101, Name: Meeting Room A, Capacity: 10, Available: true
 * ID: R102, Name: Projector, Capacity: 1, Available: true
 * 
 * Enter your choice: 2
 * Enter Resource ID for request: R101
 * Enter Requester Name: Alice
 * Enter Requested Capacity: 8
 * Request 1 submitted for R101 by Alice.
 * 
 * Enter your choice: 2
 * Enter Resource ID for request: R102
 * Enter Requester Name: Bob
 * Enter Requested Capacity: 1
 * Request 2 submitted for R102 by Bob.
 * 
 * Enter your choice: 5
 * --- Request Queue ---
 * Request ID: 1, Resource ID: R101, Requester: Alice, Capacity: 8
 * Request ID: 2, Resource ID: R102, Requester: Bob, Capacity: 1
 * 
 * Enter your choice: 3
 * Processing Request ID: 1 for R101 by Alice...
 * Booking successful! Resource R101 is now unavailable.
 * 
 * Enter your choice: 4
 * --- Resources ---
 * ID: R101, Name: Meeting Room A, Capacity: 10, Available: false
 * ID: R102, Name: Projector, Capacity: 1, Available: true
 * 
 * Enter your choice: 3
 * Processing Request ID: 2 for R102 by Bob...
 * Booking successful! Resource R102 is now unavailable.
 * 
 * Enter your choice: 3
 * Processing next request...
 * No requests in the queue.
 * 
 * Enter your choice: 6
 * Exiting system.
 * ```
 * 
 * **Constraints:**
 * 
 * *   Focus on implementing the required functionality and using the specified components correctly.
 * *   Assume resource IDs and request IDs are simple strings/integers for this task.
 * *   The system state (resources and queue) does not need to persist between program runs.
 * 
 * This task requires careful design, implementation, and integration of various fundamental and collection-based Java concepts. Good luck!
 *
 * EXPLANATION:
 * This solution implements the `Resource Allocation & Request Queue System` as described in the exam question, demonstrating the required Java concepts and best practices.
 * 
 * **Class Structure:**
 * 
 * 1.  **`Resource` Class:**
 *     *   Represents a single resource with `id`, `name`, `capacity`, and `isAvailable` state.
 *     *   Uses private fields for encapsulation.
 *     *   Provides public getters to access properties.
 *     *   Includes `book()` and `release()` methods to manage availability (though `release()` isn't strictly used in this problem's processing logic, it's included for completeness).
 *     *   Includes a `toString()` method for easy printing of resource details.
 *     *   Constructor includes basic validation and throws `IllegalArgumentException` for invalid initial data.
 * 
 * 2.  **`BookingRequest` Class:**
 *     *   Represents a request to book a resource.
 *     *   Has `requestId` (statically generated for uniqueness within a run), `resourceId` (the target resource), `requesterName`, and `requestedCapacity`.
 *     *   Uses private fields and public getters.
 *     *   Includes a `toString()` method for printing request details.
 *     *   Constructor includes basic validation and throws `IllegalArgumentException`.
 * 
 * 3.  **`BookingSystem` Class:**
 *     *   This is the main class that orchestrates the system.
 *     *   It holds the collection of resources and the queue of requests.
 *     *   Uses `private List<Resource> resources;` to store resources. `ArrayList` is used as the concrete implementation because it allows easy iteration and searching (`findResourceById`). The field is declared as `List` to adhere to the requirement of using the `List` interface.
 *     *   Uses `private Queue<BookingRequest> requestQueue;` to store requests. `LinkedList` is used as the concrete implementation because it efficiently supports queue operations (`offer`, `poll`, `peek`).
 *     *   Provides public methods corresponding to the menu options (`addResource`, `submitRequest`, `processNextRequest`, `displayResources`, `displayQueue`).
 *     *   Includes a `findResourceById` helper method to search the `resources` list.
 *     *   Contains the `main` method, which sets up the system, handles user input via `Scanner`, and controls the flow using a `switch` statement.
 * 
 * **Usage of Required Components:**
 * 
 * *   **`java.util.Queue`:** The `requestQueue` is declared as a `Queue` and initialized with `new LinkedList<>()`. The methods `offer()` (to add requests) and `poll()` (to process/remove the next request) are used, demonstrating core queue functionality (FIFO).
 * *   **`java.util.ArrayList`:** The `resources` list is initialized with `new ArrayList<>()`. Resources are added to this list. Iteration is performed using a for-each loop in `displayResources` and `findResourceById`.
 * *   **`java.util.List` interface:** The `resources` field is explicitly declared as `List<Resource>`, demonstrating the use of the interface rather than the concrete implementation (`ArrayList`) in the field declaration. This promotes flexibility.
 * *   **`java.util.Scanner`:** An instance is created in the `main` method to read user input from the console (`System.in`). Methods like `nextInt()` and `nextLine()` are used.
 * *   **`switch` statement:** Used in the `main` method to direct the program flow based on the user's menu choice.
 * *   **`System.err`:** Used consistently for printing error messages, such as invalid input, resource not found, resource unavailable, or insufficient capacity during request processing. This separates error output from normal program output.
 * *   **`System.out`:** Used for printing the menu, prompts for input, success messages (e.g., resource added, request submitted, booking successful), and displaying the contents of the resources list and the request queue.
 * *   **`try-catch` blocks:**
 *     *   Used in the `main` method around `scanner.nextInt()` calls to catch `InputMismatchException` if the user enters non-numeric input when a number is expected. A general `catch (Exception e)` is also present in the main input loop and within the processing methods to catch unexpected runtime errors and prevent the program from crashing abruptly, printing an error message to `System.err`.
 *     *   Used within `addResource` and `submitRequest` methods to catch `IllegalArgumentException` thrown by the constructors or other validation errors, reporting them via `System.err`.
 *     *   Used within `processNextRequest` to catch potential errors during resource lookup or booking logic, reporting via `System.err`.
 * 
 * **Best Practices:**
 * 
 * *   **Encapsulation:** Fields in `Resource` and `BookingRequest` are private, accessed via public getters.
 * *   **Meaningful Names:** Class names (`Resource`, `BookingRequest`, `BookingSystem`), method names (`addResource`, `submitRequest`, `processNextRequest`), and variable names (`resourceId`, `requesterName`, `requestQueue`) are descriptive.
 * *   **Comments:** Javadoc-style comments explain the purpose of classes and public methods. Inline comments explain specific logic points (like the request counter or queue operations).
 * *   **Input Validation:** Basic validation is performed in constructors and methods (`capacity > 0`, non-empty strings, checking for duplicate resource IDs, checking if a resource exists before submitting a request for it). Invalid input results in an error message printed to `System.err` and the operation being aborted.
 * *   **Error Handling:** `try-catch` blocks handle specific expected errors (like input type mismatches) and general unexpected exceptions. Error messages are informative and sent to `System.err`.
 * *   **Clean Code Structure:** The code is divided into logical classes, each with a single responsibility. The `main` method acts as the entry point and user interface handler, delegating core logic to methods within the `BookingSystem` class.
 * 
 * This solution effectively integrates the required Java components to build a functional system while adhering to good programming practices, making it a suitable task for assessing advanced Java understanding.
 */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.InputMismatchException;

// Represents a resource that can be booked
class Resource {
    private String id;
    private String name;
    private int capacity;
    private boolean isAvailable;

    public Resource(String id, String name, int capacity) {
        // Basic validation
        if (id == null || id.trim().isEmpty() || name == null || name.trim().isEmpty() || capacity <= 0) {
            throw new IllegalArgumentException("Invalid resource data provided.");
        }
        this.id = id.trim();
        this.name = name.trim();
        this.capacity = capacity;
        this.isAvailable = true; // Resources are available when created
    }

    // Getters
    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getCapacity() {
        return capacity;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    // Method to book the resource
    public void book() {
        this.isAvailable = false;
    }

    // Method to release the resource (optional for this task, but good practice)
    public void release() {
        this.isAvailable = true;
    }

    @Override
    public String toString() {
        return String.format("ID: %s, Name: %s, Capacity: %d, Available: %b",
                             id, name, capacity, isAvailable);
    }
}

// Represents a booking request for a resource
class BookingRequest {
    private static int requestCounter = 0; // To generate unique request IDs
    private int requestId;
    private String resourceId;
    private String requesterName;
    private int requestedCapacity;

    public BookingRequest(String resourceId, String requesterName, int requestedCapacity) {
        // Basic validation
         if (resourceId == null || resourceId.trim().isEmpty() || requesterName == null || requesterName.trim().isEmpty() || requestedCapacity <= 0) {
            throw new IllegalArgumentException("Invalid booking request data provided.");
        }
        this.requestId = ++requestCounter; // Assign unique ID
        this.resourceId = resourceId.trim();
        this.requesterName = requesterName.trim();
        this.requestedCapacity = requestedCapacity;
    }

    // Getters
    public int getRequestId() {
        return requestId;
    }

    public String getResourceId() {
        return resourceId;
    }

    public String getRequesterName() {
        return requesterName;
    }

    public int getRequestedCapacity() {
        return requestedCapacity;
    }

     @Override
    public String toString() {
        return String.format("Request ID: %d, Resource ID: %s, Requester: %s, Capacity: %d",
                             requestId, resourceId, requesterName, requestedCapacity);
    }
}

// Manages resources and booking requests
public class BookingSystem {
    // Using List for resources as we might need to search/iterate
    private List<Resource> resources;
    // Using Queue for requests to process them in FIFO order
    private Queue<BookingRequest> requestQueue;

    public BookingSystem() {
        this.resources = new ArrayList<>(); // ArrayList implements List
        this.requestQueue = new LinkedList<>(); // LinkedList implements Queue
    }

    /**
     * Adds a new resource to the system.
     * @param id The unique ID of the resource.
     * @param name The name of the resource.
     * @param capacity The capacity of the resource.
     */
    public void addResource(String id, String name, int capacity) {
        try {
            // Validate input before creating object
             if (id == null || id.trim().isEmpty() || name == null || name.trim().isEmpty() || capacity <= 0) {
                 System.err.println("Error: Resource ID, Name, and Capacity (must be > 0) are required.");
                 return;
             }

            // Check for duplicate ID
            if (findResourceById(id) != null) {
                System.err.println("Error: Resource with ID '" + id + "' already exists.");
                return;
            }

            Resource newResource = new Resource(id, name, capacity);
            resources.add(newResource);
            System.out.println("Resource '" + id + "' added.");
        } catch (IllegalArgumentException e) {
             System.err.println("Error adding resource: " + e.getMessage());
        } catch (Exception e) {
            // Catch any other unexpected errors during resource creation/addition
            System.err.println("An unexpected error occurred while adding resource: " + e.getMessage());
        }
    }

    /**
     * Submits a new booking request to the queue.
     * @param resourceId The ID of the requested resource.
     * @param requesterName The name of the requester.
     * @param requestedCapacity The required capacity.
     */
    public void submitRequest(String resourceId, String requesterName, int requestedCapacity) {
        try {
             // Validate input before creating object
             if (resourceId == null || resourceId.trim().isEmpty() || requesterName == null || requesterName.trim().isEmpty() || requestedCapacity <= 0) {
                 System.err.println("Error: Resource ID, Requester Name, and Requested Capacity (must be > 0) are required for a request.");
                 return;
             }

            // Optional: Validate if resourceId exists before adding request
             if (findResourceById(resourceId) == null) {
                 System.err.println("Error: Resource with ID '" + resourceId + "' does not exist. Cannot submit request.");
                 return;
             }

            BookingRequest newRequest = new BookingRequest(resourceId, requesterName, requestedCapacity);
            requestQueue.offer(newRequest); // Use offer, safer than add
            System.out.println("Request " + newRequest.getRequestId() + " submitted for '" + resourceId + "' by " + requesterName + ".");
        }  catch (IllegalArgumentException e) {
             System.err.println("Error submitting request: " + e.getMessage());
        }
        catch (Exception e) {
            // Catch any other unexpected errors during request creation/addition
            System.err.println("An unexpected error occurred while submitting request: " + e.getMessage());
        }
    }

    /**
     * Processes the next booking request in the queue.
     */
    public void processNextRequest() {
        System.out.println("Processing next request...");
        BookingRequest nextRequest = requestQueue.poll(); // Get and remove the head of the queue

        if (nextRequest == null) {
            System.out.println("No requests in the queue.");
            return;
        }

        System.out.println("Processing Request ID: " + nextRequest.getRequestId() +
                           " for " + nextRequest.getResourceId() +
                           " by " + nextRequest.getRequesterName() + "...");

        try {
            Resource requestedResource = findResourceById(nextRequest.getResourceId());

            if (requestedResource == null) {
                System.err.println("Booking Failed: Resource with ID '" + nextRequest.getResourceId() + "' not found.");
                return; // Request fails
            }

            if (!requestedResource.isAvailable()) {
                System.err.println("Booking Failed: Resource '" + requestedResource.getName() + "' (" + requestedResource.getId() + ") is currently unavailable.");
                return; // Request fails
            }

            if (requestedResource.getCapacity() < nextRequest.getRequestedCapacity()) {
                 System.err.println("Booking Failed: Resource '" + requestedResource.getName() + "' (" + requestedResource.getId() + ") capacity (" + requestedResource.getCapacity() + ") is insufficient for required capacity (" + nextRequest.getRequestedCapacity() + ").");
                 return; // Request fails
            }

            // If all checks pass, book the resource
            requestedResource.book();
            System.out.println("Booking successful! Resource '" + requestedResource.getName() + "' (" + requestedResource.getId() + ") is now unavailable.");

        } catch (Exception e) {
            // Catch any unexpected errors during processing
            System.err.println("An unexpected error occurred while processing request " + nextRequest.getRequestId() + ": " + e.getMessage());
        }
    }

    /**
     * Displays all resources in the system.
     */
    public void displayResources() {
        System.out.println("--- Resources ---");
        if (resources.isEmpty()) {
            System.out.println("No resources added yet.");
        } else {
            // Using List interface for iteration
            for (Resource resource : resources) {
                System.out.println(resource);
            }
        }
    }

    /**
     * Displays all booking requests currently in the queue.
     */
    public void displayQueue() {
        System.out.println("--- Request Queue ---");
        if (requestQueue.isEmpty()) {
            System.out.println("Queue is empty.");
        } else {
             // Iterating through the Queue (order matters)
            for (BookingRequest request : requestQueue) {
                System.out.println(request);
            }
        }
    }

    /**
     * Helper method to find a resource by its ID.
     * @param resourceId The ID to search for.
     * @return The Resource object if found, null otherwise.
     */
    private Resource findResourceById(String resourceId) {
        if (resourceId == null || resourceId.trim().isEmpty()) {
            return null; // Cannot search for empty ID
        }
        for (Resource resource : resources) {
            if (resource.getId().equals(resourceId.trim())) {
                return resource;
            }
        }
        return null; // Not found
    }


    public static void main(String[] args) {
        BookingSystem system = new BookingSystem();
        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        System.out.println("Resource Allocation & Request Queue System");

        while (running) {
            System.out.println("\nMenu:");
            System.out.println("1. Add Resource");
            System.out.println("2. Submit Booking Request");
            System.out.println("3. Process Next Request");
            System.out.println("4. View Resources");
            System.out.println("5. View Request Queue");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = -1; // Initialize with an invalid value
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline left-over
            } catch (InputMismatchException e) {
                 System.err.println("Invalid input. Please enter a number.");
                 scanner.nextLine(); // Consume the invalid input
                 continue; // Skip the rest of the loop and show menu again
            } catch (Exception e) {
                 System.err.println("An unexpected input error occurred: " + e.getMessage());
                 scanner.nextLine(); // Consume the invalid input
                 continue; // Skip the rest of the loop
            }


            // Use switch statement for flow control based on user choice
            switch (choice) {
                case 1: // Add Resource
                    System.out.print("Enter Resource ID: ");
                    String resId = scanner.nextLine();
                    System.out.print("Enter Resource Name: ");
                    String resName = scanner.nextLine();
                    System.out.print("Enter Capacity: ");
                    int resCapacity = -1;
                     try {
                        resCapacity = scanner.nextInt();
                        scanner.nextLine(); // Consume newline
                        system.addResource(resId, resName, resCapacity);
                    } catch (InputMismatchException e) {
                         System.err.println("Invalid capacity. Please enter a number.");
                         scanner.nextLine(); // Consume invalid input
                    } catch (Exception e) {
                        System.err.println("An error occurred while reading capacity: " + e.getMessage());
                        scanner.nextLine(); // Consume invalid input
                    }
                    break;

                case 2: // Submit Booking Request
                    System.out.print("Enter Resource ID for request: ");
                    String reqResId = scanner.nextLine();
                    System.out.print("Enter Requester Name: ");
                    String requester = scanner.nextLine();
                    System.out.print("Enter Requested Capacity: ");
                    int reqCapacity = -1;
                    try {
                         reqCapacity = scanner.nextInt();
                         scanner.nextLine(); // Consume newline
                         system.submitRequest(reqResId, requester, reqCapacity);
                    } catch (InputMismatchException e) {
                         System.err.println("Invalid requested capacity. Please enter a number.");
                         scanner.nextLine(); // Consume invalid input
                    } catch (Exception e) {
                         System.err.println("An error occurred while reading requested capacity: " + e.getMessage());
                         scanner.nextLine(); // Consume invalid input
                    }
                    break;

                case 3: // Process Next Request
                    system.processNextRequest();
                    break;

                case 4: // View Resources
                    system.displayResources();
                    break;

                case 5: // View Request Queue
                    system.displayQueue();
                    break;

                case 6: // Exit
                    running = false;
                    System.out.println("Exiting system.");
                    break;

                default:
                    System.err.println("Invalid choice. Please enter a number between 1 and 6.");
                    break;
            }
        }

        scanner.close(); // Close the scanner resource
    }
}
