/*
 * Exam Question #386
 * Generated on: 2025-05-11 23:03:26
 * Generated by: Account 4
 * 
 * QUESTION:
 * ## Java Programming Exam Task: Hospital Patient Management System
 * 
 * **Scenario:**
 * 
 * You are tasked with developing a simplified patient management system for a small hospital clinic. The system needs to manage patients waiting to be seen by a doctor and keep a record of patients who have already been seen. Patients are seen in the order they arrive (First-In, First-Out).
 * 
 * **Requirements:**
 * 
 * Implement a Java program that simulates this system. Your program must fulfill the following requirements:
 * 
 * 1.  **Patient Representation:** Create a `Patient` class with private fields for `name` (String) and `patientId` (String). Include a constructor and public getter methods for these fields. Implement a meaningful `toString()` method for easy printing.
 * 2.  **Management System:** Create a class, e.g., `HospitalQueueManager`, to manage the patient flow.
 *     *   It must internally use a `java.util.Queue<Patient>` to hold patients currently waiting.
 *     *   It must internally use a `java.util.List<Patient>` (implemented by `java.util.ArrayList<Patient>`) to store patients who have been seen.
 *     *   Include methods:
 *         *   `addPatient(Patient patient)`: Adds a patient to the waiting queue.
 *         *   `callNextPatient()`: Removes the patient at the front of the waiting queue and adds them to the list of seen patients. It should return the `Patient` object that was called, or indicate if the queue was empty.
 *         *   `getWaitingPatients()`: Returns a `List` (or copy) of patients currently in the waiting queue.
 *         *   `getSeenPatients()`: Returns the `List` of patients who have been seen.
 * 3.  **User Interface:** Provide a command-line interface using `java.util.Scanner` to interact with the system. The interface should present a menu with options:
 *     *   1. Add New Patient
 *     *   2. Call Next Patient
 *     *   3. List Waiting Patients
 *     *   4. List Seen Patients
 *     *   5. Exit
 * 4.  **Flow Control:** Use a `switch` statement to handle the user's menu selection.
 * 5.  **Input Validation & Error Handling:**
 *     *   Handle cases where the user enters non-numeric input for the menu choice using a `try-catch` block.
 *     *   Handle the case where the user tries to "Call Next Patient" when the waiting queue is empty.
 *     *   Use `System.err` to print error messages (e.g., for invalid input, empty queue when calling next patient).
 *     *   Use `System.out` for all normal output (menu, confirmations, lists).
 * 6.  **Best Practices:**
 *     *   Ensure proper encapsulation (private fields, public methods).
 *     *   Use meaningful names for variables, methods, and classes.
 *     *   Include appropriate comments and documentation (e.g., Javadoc for classes/methods).
 *     *   Basic input validation (e.g., patient name not empty).
 *     *   Ensure the `Scanner` is closed properly.
 *     *   Implement a simple way to generate unique patient IDs (e.g., a counter).
 * 
 * **Expected Output:**
 * 
 * The program should display the menu, prompt for input, and produce output based on the user's selection. Examples:
 * 
 * *   **Adding Patient:** Prompt for name, confirm addition.
 *     ```
 *     Enter patient name: Alice
 *     Patient Alice (ID: P1) added to the waiting queue.
 *     ```
 * *   **Calling Next:** Remove from queue, add to seen, report which patient was called. If empty:
 *     ```
 *     Calling next patient...
 *     Patient Bob (ID: P2) is now being seen.
 *     ```
 *     ```
 *     Calling next patient...
 *     System.err: No patients in the waiting queue.
 *     ```
 * *   **Listing Waiting:** Display patients in queue order.
 *     ```
 *     --- Waiting Patients ---
 *     1. Patient Charlie (ID: P3)
 *     2. Patient David (ID: P4)
 *     ------------------------
 *     ```
 *     ```
 *     --- Waiting Patients ---
 *     No patients currently waiting.
 *     ------------------------
 *     ```
 * *   **Listing Seen:** Display patients seen.
 *     ```
 *     --- Seen Patients ---
 *     1. Patient Alice (ID: P1)
 *     2. Patient Bob (ID: P2)
 *     ---------------------
 *     ```
 *     ```
 *     --- Seen Patients ---
 *     No patients have been seen yet.
 *     ---------------------
 *     ```
 * *   **Invalid Input:**
 *     ```
 *     Enter your choice: abc
 *     System.err: Invalid input. Please enter a number.
 *     ```
 *     ```
 *     Enter your choice: 9
 *     System.err: Invalid choice. Please enter a number between 1 and 5.
 *     ```
 * 
 * **Constraint Checklist:**
 * 
 * 1.  [x] Use `java.util.Queue`
 * 2.  [x] Use `java.util.ArrayList`
 * 3.  [x] Use `java.util.List`
 * 4.  [x] Use `java.util.Scanner`
 * 5.  [x] Use `switch` statement
 * 6.  [x] Use `System.err`
 * 7.  [x] Use `System.out`
 * 8.  [x] Use `try-catch`
 * 9.  [x] Practical scenario
 * 10. [x] Challenging but solvable
 * 11. [x] Best practices (encapsulation, naming, comments, validation, error handling)
 * 12. [x] Clean code structure
 * 
 * Your solution should be a single Java file containing all necessary classes.
 *
 * EXPLANATION:
 * This solution implements a basic hospital patient management system demonstrating the required Java concepts.
 * 
 * 1.  **`Patient` Class:**
 *     *   Represents individual patients with `name` and `patientId`.
 *     *   Uses `private` fields for encapsulation.
 *     *   Provides `public` getter methods.
 *     *   Includes a constructor that performs basic validation on the name (ensuring it's not null or empty).
 *     *   Overrides `toString()` for convenient printing of patient details.
 * 
 * 2.  **`HospitalQueueManager` Class:**
 *     *   Acts as the core of the system.
 *     *   Uses a `java.util.Queue<Patient>` (`LinkedList` implementation) for the `waitingQueue`. The `Queue` interface is perfect here because patients are processed in the order they are added (FIFO). `offer()` is used for adding (safer than `add` in capacity-constrained queues, though not strictly necessary with `LinkedList`), and `poll()` is used for removing from the front (returns `null` if empty, which is convenient for error handling).
 *     *   Uses a `java.util.List<Patient>` (`ArrayList` implementation) for the `seenPatients`. The `List` interface and `ArrayList` provide dynamic storage and easy iteration over the patients who have completed their visit.
 *     *   Includes a simple `patientCounter` to generate unique IDs (`P1`, `P2`, etc.).
 *     *   `addPatient(String name)`: Creates a new `Patient` object and adds it to the `waitingQueue`. It includes a `try-catch` block specifically to handle potential `IllegalArgumentException` thrown by the `Patient` constructor if the name is invalid.
 *     *   `callNextPatient()`: Uses `waitingQueue.poll()` to retrieve and remove the head of the queue. It checks if the result is `null` (indicating an empty queue) and prints an error using `System.err` if so. Otherwise, it adds the removed patient to the `seenPatients` list and prints a confirmation using `System.out`.
 *     *   `getWaitingPatients()`: Returns a *copy* of the waiting patients list using `new ArrayList<>(waitingQueue)`. This is a good practice for encapsulation, preventing external code from directly manipulating the internal `Queue` structure in unexpected ways. It returns a `List` interface type, adhering to good design principles.
 *     *   `getSeenPatients()`: Returns the internal `seenPatients` `List`.
 * 
 * 3.  **`HospitalQueueApp` Class (Main Application):**
 *     *   Contains the `main` method where execution begins.
 *     *   Initializes a `Scanner` for user input and a `HospitalQueueManager`.
 *     *   Runs a `while(running)` loop to keep the application active until the user chooses to exit.
 *     *   Inside the loop:
 *         *   `displayMenu()` is called to show options using `System.out`.
 *         *   A `try-catch` block is used for **class-wide exception handling**. It specifically catches `InputMismatchException` if the user enters non-integer text when prompted for a choice. If caught, it prints an error using `System.err` and consumes the invalid input (`scanner.nextLine()`) to prevent an infinite loop. A general `catch (Exception e)` is also included as a fallback for any other unexpected runtime errors.
 *         *   `scanner.nextInt()` reads the integer choice. `scanner.nextLine()` is called immediately after to consume the leftover newline character, which is crucial before subsequent calls to `scanner.nextLine()` (like when reading the patient name).
 *         *   A `switch` statement is used to direct the program flow based on the valid integer choice. Each case calls the appropriate method in the `HospitalQueueManager` and prints results or errors using `System.out` or `System.err` as required.
 *         *   The `default` case of the `switch` handles valid integer inputs that are outside the expected range (1-5), printing an error using `System.err`.
 *     *   The `Scanner` is closed using `scanner.close()` after the loop terminates, releasing system resources.
 * 
 * This solution effectively integrates all required components (`Queue`, `ArrayList`, `List`, `Scanner`, `switch`, `System.err`, `System.out`, `try-catch`) within a practical scenario, adhering to best practices like encapsulation, clear naming, input validation, and robust error handling.
 */

import java.util.LinkedList;
import java.util.Queue;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.InputMismatchException;

/**
 * Represents a patient in the hospital system.
 */
class Patient {
    private String name;
    private String patientId;

    /**
     * Constructs a new Patient.
     * @param name The name of the patient.
     * @param patientId The unique ID assigned to the patient.
     */
    public Patient(String name, String patientId) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Patient name cannot be empty.");
        }
        this.name = name.trim();
        this.patientId = patientId;
    }

    /**
     * Gets the patient's name.
     * @return The patient's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the patient's ID.
     * @return The patient's ID.
     */
    public String getPatientId() {
        return patientId;
    }

    /**
     * Returns a string representation of the patient.
     * @return A string in the format "Patient [Name] (ID: [ID])".
     */
    @Override
    public String toString() {
        return "Patient " + name + " (ID: " + patientId + ")";
    }
}

/**
 * Manages the patient queue and seen patients list for the clinic.
 */
class HospitalQueueManager {
    // Use LinkedList as an implementation of Queue
    private Queue<Patient> waitingQueue;
    // Use ArrayList as an implementation of List
    private List<Patient> seenPatients;
    private int patientCounter; // For generating simple unique IDs

    /**
     * Constructs a new HospitalQueueManager.
     * Initializes the waiting queue and seen patients list.
     */
    public HospitalQueueManager() {
        this.waitingQueue = new LinkedList<>();
        this.seenPatients = new ArrayList<>();
        this.patientCounter = 0;
    }

    /**
     * Adds a new patient to the waiting queue.
     * Generates a simple unique ID for the patient.
     * @param name The name of the patient to add.
     */
    public void addPatient(String name) {
        try {
            patientCounter++;
            String patientId = "P" + patientCounter;
            Patient newPatient = new Patient(name, patientId);
            waitingQueue.offer(newPatient); // offer is generally preferred over add for queues
            System.out.println(newPatient + " added to the waiting queue.");
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding patient: " + e.getMessage());
        }
    }

    /**
     * Calls the next patient from the waiting queue.
     * Removes the patient from the queue and adds them to the seen patients list.
     * Handles the case where the queue is empty.
     */
    public void callNextPatient() {
        System.out.println("Calling next patient...");
        Patient nextPatient = waitingQueue.poll(); // poll returns null if queue is empty

        if (nextPatient == null) {
            System.err.println("No patients in the waiting queue.");
        } else {
            seenPatients.add(nextPatient);
            System.out.println(nextPatient + " is now being seen.");
        }
    }

    /**
     * Gets a list of patients currently in the waiting queue.
     * Returns a new ArrayList containing the waiting patients to prevent external modification
     * of the internal queue structure.
     * @return A List of waiting patients.
     */
    public List<Patient> getWaitingPatients() {
        // Return a copy to maintain encapsulation of the internal queue structure
        return new ArrayList<>(waitingQueue);
    }

    /**
     * Gets the list of patients who have been seen.
     * @return The List of seen patients.
     */
    public List<Patient> getSeenPatients() {
        return seenPatients;
    }
}

/**
 * Main application class for the Hospital Patient Management System.
 * Contains the main loop and user interface logic.
 */
public class HospitalQueueApp {

    /**
     * Displays the main menu options to the user.
     */
    private static void displayMenu() {
        System.out.println("\n--- Hospital Patient Management ---");
        System.out.println("1. Add New Patient");
        System.out.println("2. Call Next Patient");
        System.out.println("3. List Waiting Patients");
        System.out.println("4. List Seen Patients");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    /**
     * The main method to run the hospital queue application.
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        HospitalQueueManager manager = new HospitalQueueManager();
        boolean running = true;

        while (running) {
            displayMenu();
            int choice = -1; // Default invalid choice

            // Class-wide exception handling for input
            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character left by nextInt()

                // Use switch statement for flow control based on user choice
                switch (choice) {
                    case 1:
                        System.out.print("Enter patient name: ");
                        String name = scanner.nextLine();
                        manager.addPatient(name);
                        break;
                    case 2:
                        manager.callNextPatient();
                        break;
                    case 3:
                        List<Patient> waiting = manager.getWaitingPatients();
                        System.out.println("\n--- Waiting Patients ---");
                        if (waiting.isEmpty()) {
                            System.out.println("No patients currently waiting.");
                        } else {
                            int index = 1;
                            for (Patient p : waiting) {
                                System.out.println(index++ + ". " + p);
                            }
                        }
                        System.out.println("------------------------");
                        break;
                    case 4:
                        List<Patient> seen = manager.getSeenPatients();
                        System.out.println("\n--- Seen Patients ---");
                        if (seen.isEmpty()) {
                            System.out.println("No patients have been seen yet.");
                        } else {
                             int index = 1;
                            for (Patient p : seen) {
                                System.out.println(index++ + ". " + p);
                            }
                        }
                        System.out.println("---------------------");
                        break;
                    case 5:
                        System.out.println("Exiting Hospital Patient Management System. Goodbye!");
                        running = false;
                        break;
                    default:
                        // Handle invalid integer choices
                        System.err.println("Invalid choice. Please enter a number between 1 and 5.");
                }
            } catch (InputMismatchException e) {
                // Handle non-integer input using System.err
                System.err.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Consume the invalid input to prevent infinite loop
            } catch (Exception e) {
                // Catch any other unexpected exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace(); // Print stack trace for debugging
            }
        }

        scanner.close(); // Close the scanner when the program exits
    }
}
